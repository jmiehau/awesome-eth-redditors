{"version":3,"sources":["Snoocore-browser.min.js"],"names":["e","exports","module","define","amd","o","window","global","self","Snoocore","t","n","r","s","u","a","require","i","f","Error","code","l","call","length","1","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","defineProperty","_createClass","defineProperties","target","props","descriptor","key","protoProps","staticProps","_get","_x","_x2","_x3","_again","object","property","receiver","Function","desc","getOwnPropertyDescriptor","undefined","getter","get","parent","getPrototypeOf","_events","_events2","_util","_Request","_Request2","_RedditRequest","_RedditRequest2","_Throttle","_Throttle2","_UserConfig","_UserConfig2","_OAuth","_OAuth2","_Modhash","_Modhash2","_httpsFile","_httpsFile2","_events$EventEmitter","userConfiguration","_this","this","_userConfig","_throttle","throttle","_request","on","responseError","emit","oauth","oauthAppOnly","forEach","fn","bind","useBrowserCookies","modhash","appOnlyAuth","applicationOnlyAuth","accessToken","_redditRequest","rateLimitData","addTime","rateLimitReset","path","apply","arguments","EventEmitter","./Modhash","./OAuth","./RedditRequest","./Request","./Throttle","./UserConfig","./https/file","events","util","2","_interopRequireWildcard","newObj","hasOwnProperty","replaceUrlParams","endpointUrl","givenArgs","indexOf","params","match","param","replace","_url","_url2","_utils","Endpoint","userConfig","hostname","method","headers","givenContextOptions","port","contextOptions","normalizeContextOptions","args","buildArgs","url","buildUrl","computedPath","parse","cOptions","bypassAuth","thisOrThat","decodeHtmlEntities","retryAttemptsLeft","retryAttempts","retryDelay","requestTimeout","reauthAttemptsLeft","substring","apiType","api_type","./utils","3","_when","_when2","_Endpoint","_Endpoint2","_ResponseError","_ResponseError2","Modhash","request","modhashRefreshed","timeout","Date","now","hasModhash","endpoint","serverWWW","serverWWWPort","responseErrorHandler","response","String","_status","reject","resolve","https","then","res","JSON","_body","data","setModhash","isModhashOld","refreshModhash","./Endpoint","./ResponseError","when","4","Buffer","_x4","_querystring","_querystring2","_util2","TOKEN","EXPLICIT","IMPLICIT","SCRIPT","APP_ONLY","REFRESH","INVALID","OAuth","refreshToken","tokenType","scope","normalizeScope","isArray","join","type","duration","hasRefreshToken","state","query","client_id","Math","ceil","random","redirect_uri","redirectUri","response_type","baseUrl","mobile","stringify","getExplicitAuthUrl","getImplicitAuthUrl","oauthType","grant_type","device_id","deviceId","authorizationCode","username","password","refresh_token","tokenEnum","options","getRefreshTokenData","getAppOnlyTokenData","getAuthenticatedTokenData","buff","secret","base64","toString","auth","authCodeOrAccessToken","isApplicationOnly","tokenData","getToken","token","access_token","token_type","expires_in","str","_this2","_this3","hasAccessToken","isRefreshToken","tokenTypeHint","token_type_hint","Authorization","buffer","querystring","5","_x5","_whenDelay","_he","_he2","RedditRequest","_oauth","_oauthAppOnly","_modhash","canRefreshAccessToken","isNode","userAgent","getCurrentModhash","getAuthorizationHeader","isAuthenticated","authenticate","buildHeaders","requestPromise","handleSuccessResponse","authPromise","getModhash","refresh","isOAuthType","wwwAuth","_headers","msg","reauthPromise","setHeaders","modifiedEndpoint","error","decode","json","errors","rateLimitRemaining","rateLimitUsed","Number","cutoff","__test","rateLimitRemainingCutoff","count","limit","start","after","getSlice","callRedditApi","result","slice","listing","Array","listingIndex","before","allChildren","children","empty","filter","child","stickied","next","newArgs","name","previous","requery","urlOrPath","_this4","parsed","pathname","calls","verb","userGivenArgs","userContextOptions","serverOAuth","serverOAuthPort","getListing","he","when/delay","6","_whenDelay2","_httpsHttpsNode","_httpsHttpsNode2","_httpsHttpsBrowser","_httpsHttpsBrowser2","rawHttps","Request","wait","reqOptions","toUpperCase","formData","console","log","statusChar","success","message","./https/httpsBrowser","./https/httpsNode","7","ResponseError","_Error","status","body","8","Throttle","throttleMs","_throttleMs","_throttleDelay","delayPromise","setTimeout","timeMs","9","UserConfig","missingMsg","thisOrThrow","browser","apiServerUri","authServerUri","10","mimeType","File","Blob","11","getSectionBoundary","boundary","getEndBoundary","encodeFieldPart","encodeFilePart","concat","getMultipartFormData","fields","files","dataBuffer","file","getData","contentType","contentLength","singleFile","floor","getFormData","FormData","append","12","parseResponseHeaders","headerStr","headerPairs","split","len","headerPair","index","toLowerCase","val","DEBUG_LOG","form","substr","promise","x","XMLHttpRequest","open","withCredentials","keys","headerKey","setRequestHeader","onreadystatechange","readyState","responseText","getAllResponseHeaders","send","canRedirect","location","_form","./form","13","req","_https2","_req","setEncoding","chunk","statusCode","write","end","_https","14","tryThis","that","orThrowMessage","15","16","subject","encoding","noZero","base64clean","byteLength","kMaxLength","RangeError","buf","TYPED_ARRAY_SUPPORT","_augment","Uint8Array","_isBuffer","_set","isArrayish","isBuffer","readUInt8","hexWrite","string","offset","remaining","strLen","byte","parseInt","isNaN","utf8Write","charsWritten","blitBuffer","utf8ToBytes","asciiWrite","asciiToBytes","binaryWrite","base64Write","base64ToBytes","utf16leWrite","utf16leToBytes","base64Slice","fromByteArray","utf8Slice","tmp","min","decodeUtf8Char","fromCharCode","asciiSlice","ret","binarySlice","hexSlice","out","toHex","utf16leSlice","bytes","checkOffset","ext","checkInt","max","objectWriteUInt16","littleEndian","j","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","ieee754","writeDouble","stringtrim","INVALID_BASE64_RE","trim","byteArray","b","charCodeAt","push","h","encodeURIComponent","c","hi","lo","toByteArray","src","dst","unitSize","decodeURIComponent","err","SlowBuffer","INSPECT_MAX_BYTES","poolSize","ArrayBuffer","arr","foo","subarray","compare","y","isEncoding","list","totalLength","pos","item","copy","loweredCase","Infinity","equals","inspect","set","v","writeUInt8","isFinite","swap","toJSON","_arr","sliceLen","newBuf","readUInt16LE","readUInt16BE","readUInt32LE","readUInt32BE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","read","readFloatBE","readDoubleLE","readDoubleBE","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","target_start","source","fill","toArrayBuffer","BP","toLocaleString","base64-js","is-array","17","lookup","elt","PLUS","SLASH","NUMBER","UPPER","LOWER","b64ToByteArray","b64","L","placeHolders","charAt","Arr","uint8ToBase64","uint8","encode","num","tripletToBase64","temp","extraBytes","output","base64js","18","isLE","mLen","nBytes","m","eLen","eMax","eBias","nBits","d","NaN","pow","rt","abs","LN2","19","20","_maxListeners","isFunction","arg","isNumber","isObject","isUndefined","defaultMaxListeners","setMaxListeners","er","handler","listeners","addListener","listener","newListener","warned","trace","once","g","removeListener","fired","position","splice","removeAllListeners","listenerCount","emitter","21","http","cb","host","protocol","scheme","test","xhrHttp","Agent","defaultMaxSockets","ActiveXObject","axs","ax","ax_","STATUS_CODES","100","101","102","200","201","202","203","204","205","206","207","300","301","302","303","304","305","307","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","422","423","424","425","426","428","429","431","500","501","502","503","504","505","506","507","509","510","511","./lib/request","22","Stream","Response","Base64","inherits","xhr","uri","responseType","onerror","event","objectKeys","isSafeRequestHeader","setHeader","btoa","__aborted","handle","getHeader","removeHeader","destroy","abort","k","isXHR2Compatible","unsafeHeaders","headerName","xs","./response","stream","23","parseHeaders","lines","line","readable","capable","streaming","status2","getResponse","respType","responseBlob","_emitData","respBody","24","InvalidCharacterError","chars","input","block","charCode","idx","map","atob","bs","bc","25","26","ctor","superCtor","super_","TempCtor","27","isSlowBuffer","28","29","noop","process","nextTick","canSetImmediate","setImmediate","canMutationObserver","MutationObserver","canPost","postMessage","addEventListener","queue","hiddenDiv","document","createElement","observer","queueList","observe","attributes","setAttribute","ev","stopPropagation","shift","title","env","argv","off","binding","cwd","chdir","dir","30","root","array","mapDomain","regexSeparators","ucs2decode","extra","counter","ucs2encode","stringFromCharCode","basicToDigit","codePoint","base","digitToBasic","digit","flag","adapt","delta","numPoints","firstTime","damp","baseMinusTMin","tMax","skew","basic","oldi","w","baseMinusT","inputLength","initialN","bias","initialBias","lastIndexOf","delimiter","maxInt","tMin","handledCPCount","basicLength","q","currentValue","handledCPCountPlusOne","qMinusT","toUnicode","domain","regexPunycode","toASCII","regexNonASCII","freeExports","freeModule","freeGlobal","punycode","overflow","not-basic","invalid-input","version","ucs2","nodeType","31","prop","qs","sep","eq","regexp","maxKeys","kstr","vstr","32","stringifyPrimitive","ks","33","./decode","./encode","34","./lib/_stream_duplex.js","35","Duplex","Readable","Writable","allowHalfOpen","onend","_writableState","ended","./_stream_readable","./_stream_writable","_process","core-util-is","36","PassThrough","Transform","_transform","./_stream_transform","37","ReadableState","hwm","highWaterMark","defaultHwm","objectMode","pipes","pipesCount","flowing","endEmitted","reading","sync","needReadable","emittedReadable","readableListening","readableObjectMode","defaultEncoding","ranOut","awaitDrain","readingMore","decoder","StringDecoder","_readableState","readableAddChunk","addToFront","chunkInvalid","isNullOrUndefined","onEofChunk","unshift","emitReadable","maybeReadMore","needMoreData","roundUpToNextPowerOf2","MAX_HWM","p","howMuchToRead","isNull","isString","debug","emitReadable_","flow","maybeReadMore_","pipeOnDrain","EE","resume","resumeScheduled","resume_","fromList","stringMode","cpy","endReadable","debuglog","enc","nOrig","doRead","_read","pipe","dest","pipeOpts","onunpipe","cleanup","onclose","onfinish","ondrain","ondata","needDrain","pause","unpipe","doEnd","stdout","stderr","endFn","dests","wrap","paused","_fromList","./_stream_duplex","isarray","string_decoder/","38","TransformState","afterTransform","needTransform","transforming","writecb","writechunk","ts","_transformState","rs","_flush","done","ws","_write","writeencoding","39","WriteReq","callback","WritableState","writableObjectMode","ending","finished","noDecode","decodeStrings","writing","corked","bufferProcessing","onwrite","writelen","pendingcb","prefinished","errorEmitted","writeAfterEnd","validChunk","valid","decodeChunk","writeOrBuffer","doWrite","writev","_writev","onwriteError","onwriteStateUpdate","needFinish","clearBuffer","afterWrite","onwriteDrain","finishMaybe","cbs","entry","prefinish","need","endWritable","cork","uncork","40","objectToString","isBoolean","isSymbol","isRegExp","re","isDate","isError","isPrimitive","../../../../insert-module-globals/node_modules/is-buffer/index.js","41","./lib/_stream_passthrough.js","42","READABLE_STREAM","./lib/_stream_readable.js","./lib/_stream_transform.js","./lib/_stream_writable.js","43","44","45","didOnEnd","_isStdio","readable-stream/duplex.js","readable-stream/passthrough.js","readable-stream/readable.js","readable-stream/transform.js","readable-stream/writable.js","46","assertEncoding","isBufferEncoding","passThroughWrite","utf16DetectIncompleteChar","charReceived","charLength","base64DetectIncompleteChar","surrogateSize","detectIncompleteChar","charBuffer","charStr","available","size","cr","47","Url","slashes","hash","search","href","urlParse","parseQueryString","slashesDenoteHost","urlFormat","format","urlResolve","relative","urlResolveObject","resolveObject","protocolPattern","portPattern","delims","unwise","autoEscape","nonHostChars","hostEndingChars","hostnameMaxLen","hostnamePartPattern","hostnamePartStart","unsafeProtocol","javascript","javascript:","hostlessProtocol","slashedProtocol","ftp","gopher","http:","https:","ftp:","gopher:","file:","rest","proto","exec","lowerProto","hostEnd","hec","atSign","parseHost","ipv6Hostname","hostparts","part","newpart","validParts","notHost","bit","domainArray","newOut","ae","esc","escape","qm","rel","relPath","isSourceAbs","isRelAbs","mustEndAbs","removeAllDots","srcPath","psychotic","pop","authInHost","last","hasTrailingSlash","up","isAbsolute","48","49","opts","ctx","seen","stylize","stylizeNoColor","depth","colors","showHidden","_extend","customInspect","stylizeWithColor","formatValue","styleType","style","styles","arrayToHash","recurseTimes","primitive","formatPrimitive","visibleKeys","getOwnPropertyNames","formatError","RegExp","braces","toUTCString","formatArray","formatProperty","reduceToSingleString","simple","numLinesEst","reduce","prev","cur","ar","pad","timestamp","time","getHours","getMinutes","getSeconds","getDate","months","getMonth","formatRegExp","objects","_","deprecate","deprecated","throwDeprecation","traceDeprecation","noDeprecation","debugEnviron","debugs","NODE_DEBUG","pid","bold","italic","underline","inverse","white","grey","black","blue","cyan","green","magenta","red","yellow","special","number","boolean","null","date","origin","add","./support/isBuffer","50","regexAstralSymbols","regexAsciiWhitelist","regexBmpWhitelist","regexEncodeNonAscii","encodeMap","Á","á","Ă","ă","∾","∿","∾̳","Â","â","´","А","а","Æ","æ","⁡","𝔄","𝔞","À","à","ℵ","Α","α","Ā","ā","⨿","&","⩕","⩓","∧","⩜","⩘","⩚","∠","⦤","⦨","⦩","⦪","⦫","⦬","⦭","⦮","⦯","∡","∟","⊾","⦝","∢","Å","⍼","Ą","ą","𝔸","𝕒","⩯","≈","⩰","≊","≋","'","å","𝒜","𝒶","≔","*","≍","Ã","ã","Ä","ä","∳","⨑","≌","϶","‵","∽","⋍","∖","⫧","⊽","⌅","⌆","⎵","⎶","Б","б","„","∵","⦰","ℬ","Β","β","ℶ","≬","𝔅","𝔟","⋂","◯","⋃","⨀","⨁","⨂","⨆","★","▽","△","⨄","⋁","⋀","⤍","⧫","▪","▴","▾","◂","▸","␣","▒","░","▓","█","=⃥","≡⃥","⫭","⌐","𝔹","𝕓","⊥","⋈","⧉","┐","╕","╖","╗","┌","╒","╓","╔","─","═","┬","╤","╥","╦","┴","╧","╨","╩","⊟","⊞","⊠","┘","╛","╜","╝","└","╘","╙","╚","│","║","┼","╪","╫","╬","┤","╡","╢","╣","├","╞","╟","╠","˘","¦","𝒷","⁏","⧅","\\","⟈","•","≎","⪮","≏","Ć","ć","⩄","⩉","⩋","∩","⋒","⩇","⩀","ⅅ","∩︀","⁁","ˇ","ℭ","⩍","Č","č","Ç","ç","Ĉ","ĉ","∰","⩌","⩐","Ċ","ċ","¸","⦲","¢","·","𝔠","Ч","ч","✓","Χ","χ","ˆ","≗","↺","↻","⊛","⊚","⊝","⊙","®","Ⓢ","⊖","⊕","⊗","○","⧃","⨐","⫯","⧂","∲","”","’","♣",":","∷","⩴",",","@","∁","∘","ℂ","≅","⩭","≡","∮","∯","𝕔","∐","©","℗","↵","✗","⨯","𝒞","𝒸","⫏","⫑","⫐","⫒","⋯","⤸","⤵","⋞","⋟","↶","⤽","⩈","⩆","∪","⋓","⩊","⊍","⩅","∪︀","↷","⤼","⋎","⋏","¤","∱","⌭","†","‡","ℸ","↓","↡","⇓","‐","⫤","⊣","⤏","˝","Ď","ď","Д","д","⇊","ⅆ","⤑","⩷","°","∇","Δ","δ","⦱","⥿","𝔇","𝔡","⥥","⇃","⇂","˙","`","˜","⋄","♦","¨","ϝ","⋲","÷","⋇","Ђ","ђ","⌞","⌍","$","𝔻","𝕕","⃜","≐","≑","∸","∔","⊡","⇐","⇔","⟸","⟺","⟹","⇒","⊨","⇑","⇕","∥","⤓","⇵","̑","⥐","⥞","⥖","↽","⥟","⥗","⇁","↧","⊤","⤐","⌟","⌌","𝒟","𝒹","Ѕ","ѕ","⧶","Đ","đ","⋱","▿","⥯","⦦","Џ","џ","⟿","É","é","⩮","Ě","ě","Ê","ê","≖","≕","Э","э","Ė","ė","ⅇ","≒","𝔈","𝔢","⪚","È","è","⪖","⪘","⪙","∈","⏧","ℓ","⪕","⪗","Ē","ē","∅","◻","▫"," "," "," ","Ŋ","ŋ"," ","Ę","ę","𝔼","𝕖","⋕","⧣","⩱","ε","Ε","ϵ","≂","⩵","=","≟","⇌","⩸","⧥","⥱","≓","ℯ","ℰ","⩳","Η","η","Ð","ð","Ë","ë","€","!","∃","Ф","ф","♀","ﬃ","ﬀ","ﬄ","𝔉","𝔣","ﬁ","◼","fj","♭","ﬂ","▱","ƒ","𝔽","𝕗","∀","⋔","⫙","ℱ","⨍","½","⅓","¼","⅕","⅙","⅛","⅔","⅖","¾","⅗","⅜","⅘","⅚","⅝","⅞","⁄","⌢","𝒻","ǵ","Γ","γ","Ϝ","⪆","Ğ","ğ","Ģ","Ĝ","ĝ","Г","г","Ġ","ġ","≥","≧","⪌","⋛","⩾","⪩","⪀","⪂","⪄","⋛︀","⪔","𝔊","𝔤","≫","⋙","ℷ","Ѓ","ѓ","⪥","≷","⪒","⪤","⪊","⪈","≩","⋧","𝔾","𝕘","⪢","≳","𝒢","ℊ","⪎","⪐","⪧","⩺",">","⋗","⦕","⩼","⥸","≩︀"," ","ℋ","Ъ","ъ","⥈","↔","↭","^","ℏ","Ĥ","ĥ","♥","…","⊹","𝔥","ℌ","⤥","⤦","⇿","∻","↩","↪","𝕙","ℍ","―","𝒽","Ħ","ħ","⁃","Í","í","⁣","Î","î","И","и","İ","Е","е","¡","𝔦","ℑ","Ì","ì","ⅈ","⨌","∭","⧜","℩","Ĳ","ĳ","Ī","ī","ℐ","ı","⊷","Ƶ","℅","∞","⧝","⊺","∫","∬","ℤ","⨗","⨼","⁢","Ё","ё","Į","į","𝕀","𝕚","Ι","ι","¿","𝒾","⋵","⋹","⋴","⋳","Ĩ","ĩ","І","і","Ï","ï","Ĵ","ĵ","Й","й","𝔍","𝔧","ȷ","𝕁","𝕛","𝒥","𝒿","Ј","ј","Є","є","Κ","κ","ϰ","Ķ","ķ","К","к","𝔎","𝔨","ĸ","Х","х","Ќ","ќ","𝕂","𝕜","𝒦","𝓀","⇚","Ĺ","ĺ","⦴","ℒ","Λ","λ","⟨","⟪","⦑","⪅","«","⇤","⤟","←","↞","⤝","↫","⤹","⥳","↢","⤙","⤛","⪫","⪭","⪭︀","⤌","⤎","❲","{","[","⦋","⦏","⦍","Ľ","ľ","Ļ","ļ","⌈","Л","л","⤶","“","⥧","⥋","↲","≤","≦","⇆","⟦","⥡","⥙","⌊","↼","⇇","⇋","⥎","↤","⥚","⋋","⧏","⊲","⊴","⥑","⥠","⥘","↿","⥒","⪋","⋚","⩽","⪨","⩿","⪁","⪃","⋚︀","⪓","⋖","≶","⪡","≲","⥼","𝔏","𝔩","⪑","⥢","⥪","▄","Љ","љ","≪","⋘","⥫","◺","Ŀ","ŀ","⎰","⪉","⪇","≨","⋦","⟬","⇽","⟵","⟷","⟼","⟶","↬","⦅","𝕃","𝕝","⨭","⨴","∗","↙","↘","◊","(","⦓","⥭","‎","⊿","‹","𝓁","↰","⪍","⪏","‘","‚","Ł","ł","⪦","⩹","<","⋉","⥶","⩻","◃","⦖","⥊","⥦","≨︀","¯","♂","✠","⤅","↦","↥","▮","⨩","М","м","—","∺"," ","ℳ","𝔐","𝔪","℧","µ","⫰","∣","−","⨪","∓","⫛","⊧","𝕄","𝕞","𝓂","Μ","μ","⊸","Ń","ń","∠⃒","≉","⩰̸","≋̸","ŉ","♮","ℕ"," ","≎̸","≏̸","⩃","Ň","ň","Ņ","ņ","≇","⩭̸","⩂","Н","н","–","⤤","↗","⇗","≠","≐̸","​","≢","⤨","≂̸","\n","∄","𝔑","𝔫","≧̸","≱","⩾̸","⋙̸","≵","≫⃒","≯","≫̸","↮","⇎","⫲","∋","⋼","⋺","Њ","њ","↚","⇍","‥","≦̸","≰","⩽̸","≮","⋘̸","≴","≪⃒","⋪","⋬","≪̸","∤","⁠","𝕟","⫬","¬","≭","∦","∉","≹","⋵̸","⋹̸","⋷","⋶","⧏̸","≸","⪢̸","⪡̸","∌","⋾","⋽","⊀","⪯̸","⋠","⧐̸","⋫","⋭","⊏̸","⋢","⊐̸","⋣","⊂⃒","⊈","⊁","⪰̸","⋡","≿̸","⊃⃒","⊉","≁","≄","⫽⃥","∂̸","⨔","⤳̸","↛","⇏","↝̸","𝒩","𝓃","⊄","⫅̸","⊅","⫆̸","Ñ","ñ","Ν","ν","#","№"," ","≍⃒","⊬","⊭","⊮","⊯","≥⃒",">⃒","⤄","⧞","⤂","≤⃒","<⃒","⊴⃒","⤃","⊵⃒","∼⃒","⤣","↖","⇖","⤧","Ó","ó","Ô","ô","О","о","Ő","ő","⨸","⦼","Œ","œ","⦿","𝔒","𝔬","˛","Ò","ò","⧁","⦵","Ω","⦾","⦻","‾","⧀","Ō","ō","ω","Ο","ο","⦶","𝕆","𝕠","⦷","⦹","⩔","∨","⩝","ℴ","ª","º","⊶","⩖","⩗","⩛","𝒪","Ø","ø","⊘","Õ","õ","⨶","⨷","Ö","ö","⌽","⏞","⎴","⏜","¶","⫳","⫽","∂","П","п","%",".","‰","‱","𝔓","𝔭","Φ","φ","ϕ","☎","Π","π","ϖ","ℎ","⨣","⨢","+","⨥","⩲","±","⨦","⨧","⨕","𝕡","ℙ","£","⪷","⪻","≺","≼","⪯","≾","⪹","⪵","⋨","⪳","′","″","∏","⌮","⌒","⌓","∝","⊰","𝒫","𝓅","Ψ","ψ"," ","𝔔","𝔮","𝕢","ℚ","⁗","𝒬","𝓆","⨖","?","\"","⇛","∽̱","Ŕ","ŕ","√","⦳","⟩","⟫","⦒","⦥","»","⥵","⇥","⤠","⤳","→","↠","⤞","⥅","⥴","⤖","↣","↝","⤚","⤜","∶","❳","}","]","⦌","⦎","⦐","Ř","ř","Ŗ","ŗ","⌉","Р","р","⤷","⥩","↳","ℜ","ℛ","ℝ","▭","⥽","⌋","𝔯","⥤","⇀","⥬","Ρ","ρ","ϱ","⇄","⟧","⥝","⥕","⇉","⊢","⥛","⋌","⧐","⊳","⊵","⥏","⥜","⥔","↾","⥓","˚","‏","⎱","⫮","⟭","⇾","⦆","𝕣","⨮","⨵","⥰",")","⦔","⨒","›","𝓇","↱","⋊","▹","⧎","⧴","⥨","℞","Ś","ś","⪸","Š","š","⪼","≻","≽","⪰","⪴","Ş","ş","Ŝ","ŝ","⪺","⪶","⋩","⨓","≿","С","с","⋅","⩦","⇘","§",";","⤩","✶","𝔖","𝔰","♯","Щ","щ","Ш","ш","↑","­","Σ","σ","ς","∼","⩪","≃","⪞","⪠","⪝","⪟","≆","⨤","⥲","⨳","⧤","⌣","⪪","⪬","⪬︀","Ь","ь","⌿","⧄","/","𝕊","𝕤","♠","⊓","⊓︀","⊔","⊔︀","⊏","⊑","⊐","⊒","□","𝒮","𝓈","⋆","☆","⊂","⋐","⪽","⫅","⊆","⫃","⫁","⫋","⊊","⪿","⥹","⫇","⫕","⫓","∑","♪","¹","²","³","⊃","⋑","⪾","⫘","⫆","⊇","⫄","⟉","⫗","⥻","⫂","⫌","⊋","⫀","⫈","⫔","⫖","⇙","⤪","ß","\t","⌖","Τ","τ","Ť","ť","Ţ","ţ","Т","т","⃛","⌕","𝔗","𝔱","∴","Θ","θ","ϑ","  "," ","Þ","þ","⨱","×","⨰","⌶","⫱","𝕋","𝕥","⫚","‴","™","▵","≜","◬","⨺","⨹","⧍","⨻","⏢","𝒯","𝓉","Ц","ц","Ћ","ћ","Ŧ","ŧ","Ú","ú","↟","⥉","Ў","ў","Ŭ","ŭ","Û","û","У","у","⇅","Ű","ű","⥮","⥾","𝔘","𝔲","Ù","ù","⥣","▀","⌜","⌏","◸","Ū","ū","⏟","⏝","⊎","Ų","ų","𝕌","𝕦","⤒","↕","υ","ϒ","Υ","⇈","⌝","⌎","Ů","ů","◹","𝒰","𝓊","⋰","Ũ","ũ","Ü","ü","⦧","⦜","⊊︀","⫋︀","⊋︀","⫌︀","⫨","⫫","⫩","В","в","⊩","⊫","⫦","⊻","≚","⋮","|","‖","❘","≀","𝔙","𝔳","𝕍","𝕧","𝒱","𝓋","⊪","⦚","Ŵ","ŵ","⩟","≙","℘","𝔚","𝔴","𝕎","𝕨","𝒲","𝓌","𝔛","𝔵","Ξ","ξ","⋻","𝕏","𝕩","𝒳","𝓍","Ý","ý","Я","я","Ŷ","ŷ","Ы","ы","¥","𝔜","𝔶","Ї","ї","𝕐","𝕪","𝒴","𝓎","Ю","ю","ÿ","Ÿ","Ź","ź","Ž","ž","З","з","Ż","ż","ℨ","Ζ","ζ","𝔷","Ж","ж","⇝","𝕫","𝒵","𝓏","‍","‌","regexEscape","escapeMap","regexInvalidEntity","regexInvalidRawCodePoint","regexDecode","decodeMap","Aacute","aacute","Abreve","abreve","ac","acd","acE","Acirc","acirc","acute","Acy","acy","AElig","aelig","af","Afr","afr","Agrave","agrave","alefsym","aleph","Alpha","alpha","Amacr","amacr","amalg","amp","AMP","andand","And","and","andd","andslope","andv","ang","ange","angle","angmsdaa","angmsdab","angmsdac","angmsdad","angmsdae","angmsdaf","angmsdag","angmsdah","angmsd","angrt","angrtvb","angrtvbd","angsph","angst","angzarr","Aogon","aogon","Aopf","aopf","apacir","ap","apE","ape","apid","apos","ApplyFunction","approx","approxeq","Aring","aring","Ascr","ascr","Assign","ast","asymp","asympeq","Atilde","atilde","Auml","auml","awconint","awint","backcong","backepsilon","backprime","backsim","backsimeq","Backslash","Barv","barvee","barwed","Barwed","barwedge","bbrk","bbrktbrk","bcong","Bcy","bcy","bdquo","becaus","because","Because","bemptyv","bepsi","bernou","Bernoullis","Beta","beta","beth","between","Bfr","bfr","bigcap","bigcirc","bigcup","bigodot","bigoplus","bigotimes","bigsqcup","bigstar","bigtriangledown","bigtriangleup","biguplus","bigvee","bigwedge","bkarow","blacklozenge","blacksquare","blacktriangle","blacktriangledown","blacktriangleleft","blacktriangleright","blank","blk12","blk14","blk34","bne","bnequiv","bNot","bnot","Bopf","bopf","bot","bottom","bowtie","boxbox","boxdl","boxdL","boxDl","boxDL","boxdr","boxdR","boxDr","boxDR","boxh","boxH","boxhd","boxHd","boxhD","boxHD","boxhu","boxHu","boxhU","boxHU","boxminus","boxplus","boxtimes","boxul","boxuL","boxUl","boxUL","boxur","boxuR","boxUr","boxUR","boxv","boxV","boxvh","boxvH","boxVh","boxVH","boxvl","boxvL","boxVl","boxVL","boxvr","boxvR","boxVr","boxVR","bprime","breve","Breve","brvbar","bscr","Bscr","bsemi","bsim","bsime","bsolb","bsol","bsolhsub","bull","bullet","bump","bumpE","bumpe","Bumpeq","bumpeq","Cacute","cacute","capand","capbrcup","capcap","cap","Cap","capcup","capdot","CapitalDifferentialD","caps","caret","caron","Cayleys","ccaps","Ccaron","ccaron","Ccedil","ccedil","Ccirc","ccirc","Cconint","ccups","ccupssm","Cdot","cdot","cedil","Cedilla","cemptyv","cent","centerdot","CenterDot","cfr","Cfr","CHcy","chcy","check","checkmark","Chi","chi","circ","circeq","circlearrowleft","circlearrowright","circledast","circledcirc","circleddash","CircleDot","circledR","circledS","CircleMinus","CirclePlus","CircleTimes","cir","cirE","cire","cirfnint","cirmid","cirscir","ClockwiseContourIntegral","CloseCurlyDoubleQuote","CloseCurlyQuote","clubs","clubsuit","colon","Colon","Colone","colone","coloneq","comma","commat","comp","compfn","complement","complexes","cong","congdot","Congruent","conint","Conint","ContourIntegral","copf","Copf","coprod","Coproduct","COPY","copysr","CounterClockwiseContourIntegral","crarr","cross","Cross","Cscr","cscr","csub","csube","csup","csupe","ctdot","cudarrl","cudarrr","cuepr","cuesc","cularr","cularrp","cupbrcap","cupcap","CupCap","cup","Cup","cupcup","cupdot","cupor","cups","curarr","curarrm","curlyeqprec","curlyeqsucc","curlyvee","curlywedge","curren","curvearrowleft","curvearrowright","cuvee","cuwed","cwconint","cwint","cylcty","dagger","Dagger","daleth","darr","Darr","dArr","dash","Dashv","dashv","dbkarow","dblac","Dcaron","dcaron","Dcy","dcy","ddagger","ddarr","DD","dd","DDotrahd","ddotseq","deg","Del","Delta","demptyv","dfisht","Dfr","dfr","dHar","dharl","dharr","DiacriticalAcute","DiacriticalDot","DiacriticalDoubleAcute","DiacriticalGrave","DiacriticalTilde","diam","diamond","Diamond","diamondsuit","diams","die","DifferentialD","digamma","disin","div","divide","divideontimes","divonx","DJcy","djcy","dlcorn","dlcrop","dollar","Dopf","dopf","Dot","dot","DotDot","doteq","doteqdot","DotEqual","dotminus","dotplus","dotsquare","doublebarwedge","DoubleContourIntegral","DoubleDot","DoubleDownArrow","DoubleLeftArrow","DoubleLeftRightArrow","DoubleLeftTee","DoubleLongLeftArrow","DoubleLongLeftRightArrow","DoubleLongRightArrow","DoubleRightArrow","DoubleRightTee","DoubleUpArrow","DoubleUpDownArrow","DoubleVerticalBar","DownArrowBar","downarrow","DownArrow","Downarrow","DownArrowUpArrow","DownBreve","downdownarrows","downharpoonleft","downharpoonright","DownLeftRightVector","DownLeftTeeVector","DownLeftVectorBar","DownLeftVector","DownRightTeeVector","DownRightVectorBar","DownRightVector","DownTeeArrow","DownTee","drbkarow","drcorn","drcrop","Dscr","dscr","DScy","dscy","dsol","Dstrok","dstrok","dtdot","dtri","dtrif","duarr","duhar","dwangle","DZcy","dzcy","dzigrarr","Eacute","eacute","easter","Ecaron","ecaron","Ecirc","ecirc","ecir","ecolon","Ecy","ecy","eDDot","Edot","edot","eDot","ee","efDot","Efr","efr","eg","Egrave","egrave","egs","egsdot","el","Element","elinters","ell","els","elsdot","Emacr","emacr","emptyset","EmptySmallSquare","emptyv","EmptyVerySmallSquare","emsp13","emsp14","emsp","ENG","eng","ensp","Eogon","eogon","Eopf","eopf","epar","eparsl","eplus","epsi","Epsilon","epsilon","epsiv","eqcirc","eqcolon","eqsim","eqslantgtr","eqslantless","Equal","EqualTilde","equest","Equilibrium","equiv","equivDD","eqvparsl","erarr","erDot","escr","Escr","esdot","Esim","esim","Eta","eta","ETH","eth","Euml","euml","euro","excl","exist","Exists","expectation","exponentiale","ExponentialE","fallingdotseq","Fcy","fcy","female","ffilig","fflig","ffllig","Ffr","ffr","filig","FilledSmallSquare","FilledVerySmallSquare","fjlig","flat","fllig","fltns","fnof","Fopf","fopf","forall","ForAll","fork","forkv","Fouriertrf","fpartint","frac12","frac13","frac14","frac15","frac16","frac18","frac23","frac25","frac34","frac35","frac38","frac45","frac56","frac58","frac78","frasl","frown","fscr","Fscr","gacute","Gamma","gamma","Gammad","gammad","gap","Gbreve","gbreve","Gcedil","Gcirc","gcirc","Gcy","gcy","Gdot","gdot","ge","gE","gEl","gel","geq","geqq","geqslant","gescc","ges","gesdot","gesdoto","gesdotol","gesl","gesles","Gfr","gfr","gg","Gg","ggg","gimel","GJcy","gjcy","gla","gl","glE","glj","gnap","gnapprox","gne","gnE","gneq","gneqq","gnsim","Gopf","gopf","grave","GreaterEqual","GreaterEqualLess","GreaterFullEqual","GreaterGreater","GreaterLess","GreaterSlantEqual","GreaterTilde","Gscr","gscr","gsim","gsime","gsiml","gtcc","gtcir","gt","GT","Gt","gtdot","gtlPar","gtquest","gtrapprox","gtrarr","gtrdot","gtreqless","gtreqqless","gtrless","gtrsim","gvertneqq","gvnE","Hacek","hairsp","half","hamilt","HARDcy","hardcy","harrcir","harr","hArr","harrw","Hat","hbar","Hcirc","hcirc","hearts","heartsuit","hellip","hercon","hfr","Hfr","HilbertSpace","hksearow","hkswarow","hoarr","homtht","hookleftarrow","hookrightarrow","hopf","Hopf","horbar","HorizontalLine","hscr","Hscr","hslash","Hstrok","hstrok","HumpDownHump","HumpEqual","hybull","hyphen","Iacute","iacute","ic","Icirc","icirc","Icy","icy","Idot","IEcy","iecy","iexcl","iff","ifr","Ifr","Igrave","igrave","ii","iiiint","iiint","iinfin","iiota","IJlig","ijlig","Imacr","imacr","image","ImaginaryI","imagline","imagpart","imath","Im","imof","imped","Implies","incare","in","infin","infintie","inodot","intcal","int","Int","integers","Integral","intercal","Intersection","intlarhk","intprod","InvisibleComma","InvisibleTimes","IOcy","iocy","Iogon","iogon","Iopf","iopf","Iota","iota","iprod","iquest","iscr","Iscr","isin","isindot","isinE","isins","isinsv","isinv","it","Itilde","itilde","Iukcy","iukcy","Iuml","iuml","Jcirc","jcirc","Jcy","jcy","Jfr","jfr","jmath","Jopf","jopf","Jscr","jscr","Jsercy","jsercy","Jukcy","jukcy","Kappa","kappa","kappav","Kcedil","kcedil","Kcy","kcy","Kfr","kfr","kgreen","KHcy","khcy","KJcy","kjcy","Kopf","kopf","Kscr","kscr","lAarr","Lacute","lacute","laemptyv","lagran","Lambda","lambda","lang","Lang","langd","langle","lap","Laplacetrf","laquo","larrb","larrbfs","larr","Larr","lArr","larrfs","larrhk","larrlp","larrpl","larrsim","larrtl","latail","lAtail","lat","late","lates","lbarr","lBarr","lbbrk","lbrace","lbrack","lbrke","lbrksld","lbrkslu","Lcaron","lcaron","Lcedil","lcedil","lceil","lcub","Lcy","lcy","ldca","ldquo","ldquor","ldrdhar","ldrushar","ldsh","le","lE","LeftAngleBracket","LeftArrowBar","leftarrow","LeftArrow","Leftarrow","LeftArrowRightArrow","leftarrowtail","LeftCeiling","LeftDoubleBracket","LeftDownTeeVector","LeftDownVectorBar","LeftDownVector","LeftFloor","leftharpoondown","leftharpoonup","leftleftarrows","leftrightarrow","LeftRightArrow","Leftrightarrow","leftrightarrows","leftrightharpoons","leftrightsquigarrow","LeftRightVector","LeftTeeArrow","LeftTee","LeftTeeVector","leftthreetimes","LeftTriangleBar","LeftTriangle","LeftTriangleEqual","LeftUpDownVector","LeftUpTeeVector","LeftUpVectorBar","LeftUpVector","LeftVectorBar","LeftVector","lEg","leg","leq","leqq","leqslant","lescc","les","lesdot","lesdoto","lesdotor","lesg","lesges","lessapprox","lessdot","lesseqgtr","lesseqqgtr","LessEqualGreater","LessFullEqual","LessGreater","lessgtr","LessLess","lesssim","LessSlantEqual","LessTilde","lfisht","lfloor","Lfr","lfr","lg","lgE","lHar","lhard","lharu","lharul","lhblk","LJcy","ljcy","llarr","ll","Ll","llcorner","Lleftarrow","llhard","lltri","Lmidot","lmidot","lmoustache","lmoust","lnap","lnapprox","lne","lnE","lneq","lneqq","lnsim","loang","loarr","lobrk","longleftarrow","LongLeftArrow","Longleftarrow","longleftrightarrow","LongLeftRightArrow","Longleftrightarrow","longmapsto","longrightarrow","LongRightArrow","Longrightarrow","looparrowleft","looparrowright","lopar","Lopf","lopf","loplus","lotimes","lowast","lowbar","LowerLeftArrow","LowerRightArrow","loz","lozenge","lozf","lpar","lparlt","lrarr","lrcorner","lrhar","lrhard","lrm","lrtri","lsaquo","lscr","Lscr","lsh","Lsh","lsim","lsime","lsimg","lsqb","lsquo","lsquor","Lstrok","lstrok","ltcc","ltcir","lt","LT","Lt","ltdot","lthree","ltimes","ltlarr","ltquest","ltri","ltrie","ltrif","ltrPar","lurdshar","luruhar","lvertneqq","lvnE","macr","male","malt","maltese","Map","mapsto","mapstodown","mapstoleft","mapstoup","marker","mcomma","Mcy","mcy","mdash","mDDot","measuredangle","MediumSpace","Mellintrf","Mfr","mfr","mho","micro","midast","midcir","mid","middot","minusb","minus","minusd","minusdu","MinusPlus","mlcp","mldr","mnplus","models","Mopf","mopf","mp","mscr","Mscr","mstpos","Mu","mu","multimap","mumap","nabla","Nacute","nacute","nang","nap","napE","napid","napos","napprox","natural","naturals","natur","nbsp","nbump","nbumpe","ncap","Ncaron","ncaron","Ncedil","ncedil","ncong","ncongdot","ncup","Ncy","ncy","ndash","nearhk","nearr","neArr","nearrow","ne","nedot","NegativeMediumSpace","NegativeThickSpace","NegativeThinSpace","NegativeVeryThinSpace","nequiv","nesear","nesim","NestedGreaterGreater","NestedLessLess","NewLine","nexist","nexists","Nfr","nfr","ngE","nge","ngeq","ngeqq","ngeqslant","nges","nGg","ngsim","nGt","ngt","ngtr","nGtv","nharr","nhArr","nhpar","ni","nis","nisd","niv","NJcy","njcy","nlarr","nlArr","nldr","nlE","nle","nleftarrow","nLeftarrow","nleftrightarrow","nLeftrightarrow","nleq","nleqq","nleqslant","nles","nless","nLl","nlsim","nLt","nlt","nltri","nltrie","nLtv","nmid","NoBreak","NonBreakingSpace","nopf","Nopf","Not","not","NotCongruent","NotCupCap","NotDoubleVerticalBar","NotElement","NotEqual","NotEqualTilde","NotExists","NotGreater","NotGreaterEqual","NotGreaterFullEqual","NotGreaterGreater","NotGreaterLess","NotGreaterSlantEqual","NotGreaterTilde","NotHumpDownHump","NotHumpEqual","notin","notindot","notinE","notinva","notinvb","notinvc","NotLeftTriangleBar","NotLeftTriangle","NotLeftTriangleEqual","NotLess","NotLessEqual","NotLessGreater","NotLessLess","NotLessSlantEqual","NotLessTilde","NotNestedGreaterGreater","NotNestedLessLess","notni","notniva","notnivb","notnivc","NotPrecedes","NotPrecedesEqual","NotPrecedesSlantEqual","NotReverseElement","NotRightTriangleBar","NotRightTriangle","NotRightTriangleEqual","NotSquareSubset","NotSquareSubsetEqual","NotSquareSuperset","NotSquareSupersetEqual","NotSubset","NotSubsetEqual","NotSucceeds","NotSucceedsEqual","NotSucceedsSlantEqual","NotSucceedsTilde","NotSuperset","NotSupersetEqual","NotTilde","NotTildeEqual","NotTildeFullEqual","NotTildeTilde","NotVerticalBar","nparallel","npar","nparsl","npart","npolint","npr","nprcue","nprec","npreceq","npre","nrarrc","nrarr","nrArr","nrarrw","nrightarrow","nRightarrow","nrtri","nrtrie","nsc","nsccue","nsce","Nscr","nscr","nshortmid","nshortparallel","nsim","nsime","nsimeq","nsmid","nspar","nsqsube","nsqsupe","nsub","nsubE","nsube","nsubset","nsubseteq","nsubseteqq","nsucc","nsucceq","nsup","nsupE","nsupe","nsupset","nsupseteq","nsupseteqq","ntgl","Ntilde","ntilde","ntlg","ntriangleleft","ntrianglelefteq","ntriangleright","ntrianglerighteq","Nu","nu","numero","numsp","nvap","nvdash","nvDash","nVdash","nVDash","nvge","nvgt","nvHarr","nvinfin","nvlArr","nvle","nvlt","nvltrie","nvrArr","nvrtrie","nvsim","nwarhk","nwarr","nwArr","nwarrow","nwnear","Oacute","oacute","oast","Ocirc","ocirc","ocir","Ocy","ocy","odash","Odblac","odblac","odiv","odot","odsold","OElig","oelig","ofcir","Ofr","ofr","ogon","Ograve","ograve","ogt","ohbar","ohm","oint","olarr","olcir","olcross","oline","olt","Omacr","omacr","Omega","omega","Omicron","omicron","omid","ominus","Oopf","oopf","opar","OpenCurlyDoubleQuote","OpenCurlyQuote","operp","oplus","orarr","Or","or","ord","order","orderof","ordf","ordm","origof","oror","orslope","orv","oS","Oscr","oscr","Oslash","oslash","osol","Otilde","otilde","otimesas","Otimes","otimes","Ouml","ouml","ovbar","OverBar","OverBrace","OverBracket","OverParenthesis","para","parallel","par","parsim","parsl","PartialD","Pcy","pcy","percnt","period","permil","perp","pertenk","Pfr","pfr","Phi","phi","phiv","phmmat","phone","Pi","pi","pitchfork","piv","planck","planckh","plankv","plusacir","plusb","pluscir","plus","plusdo","plusdu","pluse","PlusMinus","plusmn","plussim","plustwo","pm","Poincareplane","pointint","popf","Popf","pound","prap","Pr","pr","prcue","precapprox","prec","preccurlyeq","Precedes","PrecedesEqual","PrecedesSlantEqual","PrecedesTilde","preceq","precnapprox","precneqq","precnsim","pre","prE","precsim","prime","Prime","primes","prnap","prnE","prnsim","prod","Product","profalar","profline","profsurf","Proportional","Proportion","propto","prsim","prurel","Pscr","pscr","Psi","psi","puncsp","Qfr","qfr","qint","qopf","Qopf","qprime","Qscr","qscr","quaternions","quatint","quest","questeq","quot","QUOT","rAarr","race","Racute","racute","radic","raemptyv","rang","Rang","rangd","range","rangle","raquo","rarrap","rarrb","rarrbfs","rarrc","rarr","Rarr","rArr","rarrfs","rarrhk","rarrlp","rarrpl","rarrsim","Rarrtl","rarrtl","rarrw","ratail","rAtail","ratio","rationals","rbarr","rBarr","RBarr","rbbrk","rbrace","rbrack","rbrke","rbrksld","rbrkslu","Rcaron","rcaron","Rcedil","rcedil","rceil","rcub","Rcy","rcy","rdca","rdldhar","rdquo","rdquor","rdsh","real","realine","realpart","reals","Re","rect","reg","REG","ReverseElement","ReverseEquilibrium","ReverseUpEquilibrium","rfisht","rfloor","rfr","Rfr","rHar","rhard","rharu","rharul","Rho","rho","rhov","RightAngleBracket","RightArrowBar","rightarrow","RightArrow","Rightarrow","RightArrowLeftArrow","rightarrowtail","RightCeiling","RightDoubleBracket","RightDownTeeVector","RightDownVectorBar","RightDownVector","RightFloor","rightharpoondown","rightharpoonup","rightleftarrows","rightleftharpoons","rightrightarrows","rightsquigarrow","RightTeeArrow","RightTee","RightTeeVector","rightthreetimes","RightTriangleBar","RightTriangle","RightTriangleEqual","RightUpDownVector","RightUpTeeVector","RightUpVectorBar","RightUpVector","RightVectorBar","RightVector","ring","risingdotseq","rlarr","rlhar","rlm","rmoustache","rmoust","rnmid","roang","roarr","robrk","ropar","ropf","Ropf","roplus","rotimes","RoundImplies","rpar","rpargt","rppolint","rrarr","Rrightarrow","rsaquo","rscr","Rscr","rsh","Rsh","rsqb","rsquo","rsquor","rthree","rtimes","rtri","rtrie","rtrif","rtriltri","RuleDelayed","ruluhar","rx","Sacute","sacute","sbquo","scap","Scaron","scaron","Sc","sc","sccue","sce","scE","Scedil","scedil","Scirc","scirc","scnap","scnE","scnsim","scpolint","scsim","Scy","scy","sdotb","sdot","sdote","searhk","searr","seArr","searrow","sect","semi","seswar","setminus","setmn","sext","Sfr","sfr","sfrown","sharp","SHCHcy","shchcy","SHcy","shcy","ShortDownArrow","ShortLeftArrow","shortmid","shortparallel","ShortRightArrow","ShortUpArrow","shy","Sigma","sigma","sigmaf","sigmav","sim","simdot","sime","simeq","simg","simgE","siml","simlE","simne","simplus","simrarr","slarr","SmallCircle","smallsetminus","smashp","smeparsl","smid","smile","smt","smte","smtes","SOFTcy","softcy","solbar","solb","sol","Sopf","sopf","spades","spadesuit","spar","sqcap","sqcaps","sqcup","sqcups","Sqrt","sqsub","sqsube","sqsubset","sqsubseteq","sqsup","sqsupe","sqsupset","sqsupseteq","square","Square","SquareIntersection","SquareSubset","SquareSubsetEqual","SquareSuperset","SquareSupersetEqual","SquareUnion","squarf","squ","squf","srarr","Sscr","sscr","ssetmn","ssmile","sstarf","Star","star","starf","straightepsilon","straightphi","strns","sub","Sub","subdot","subE","sube","subedot","submult","subnE","subne","subplus","subrarr","subset","Subset","subseteq","subseteqq","SubsetEqual","subsetneq","subsetneqq","subsim","subsub","subsup","succapprox","succ","succcurlyeq","Succeeds","SucceedsEqual","SucceedsSlantEqual","SucceedsTilde","succeq","succnapprox","succneqq","succnsim","succsim","SuchThat","sum","Sum","sung","sup1","sup2","sup3","sup","Sup","supdot","supdsub","supE","supe","supedot","Superset","SupersetEqual","suphsol","suphsub","suplarr","supmult","supnE","supne","supplus","supset","Supset","supseteq","supseteqq","supsetneq","supsetneqq","supsim","supsub","supsup","swarhk","swarr","swArr","swarrow","swnwar","szlig","Tab","Tau","tau","tbrk","Tcaron","tcaron","Tcedil","tcedil","Tcy","tcy","tdot","telrec","Tfr","tfr","there4","therefore","Therefore","Theta","theta","thetasym","thetav","thickapprox","thicksim","ThickSpace","ThinSpace","thinsp","thkap","thksim","THORN","thorn","tilde","Tilde","TildeEqual","TildeFullEqual","TildeTilde","timesbar","timesb","times","timesd","tint","toea","topbot","topcir","top","Topf","topf","topfork","tosa","tprime","trade","TRADE","triangle","triangledown","triangleleft","trianglelefteq","triangleq","triangleright","trianglerighteq","tridot","trie","triminus","TripleDot","triplus","trisb","tritime","trpezium","Tscr","tscr","TScy","tscy","TSHcy","tshcy","Tstrok","tstrok","twixt","twoheadleftarrow","twoheadrightarrow","Uacute","uacute","uarr","Uarr","uArr","Uarrocir","Ubrcy","ubrcy","Ubreve","ubreve","Ucirc","ucirc","Ucy","ucy","udarr","Udblac","udblac","udhar","ufisht","Ufr","ufr","Ugrave","ugrave","uHar","uharl","uharr","uhblk","ulcorn","ulcorner","ulcrop","ultri","Umacr","umacr","uml","UnderBar","UnderBrace","UnderBracket","UnderParenthesis","Union","UnionPlus","Uogon","uogon","Uopf","uopf","UpArrowBar","uparrow","UpArrow","Uparrow","UpArrowDownArrow","updownarrow","UpDownArrow","Updownarrow","UpEquilibrium","upharpoonleft","upharpoonright","uplus","UpperLeftArrow","UpperRightArrow","upsi","Upsi","upsih","Upsilon","upsilon","UpTeeArrow","UpTee","upuparrows","urcorn","urcorner","urcrop","Uring","uring","urtri","Uscr","uscr","utdot","Utilde","utilde","utri","utrif","uuarr","Uuml","uuml","uwangle","vangrt","varepsilon","varkappa","varnothing","varphi","varpi","varpropto","varr","vArr","varrho","varsigma","varsubsetneq","varsubsetneqq","varsupsetneq","varsupsetneqq","vartheta","vartriangleleft","vartriangleright","vBar","Vbar","vBarv","Vcy","vcy","vdash","vDash","Vdash","VDash","Vdashl","veebar","vee","Vee","veeeq","vellip","verbar","Verbar","vert","Vert","VerticalBar","VerticalLine","VerticalSeparator","VerticalTilde","VeryThinSpace","Vfr","vfr","vltri","vnsub","vnsup","Vopf","vopf","vprop","vrtri","Vscr","vscr","vsubnE","vsubne","vsupnE","vsupne","Vvdash","vzigzag","Wcirc","wcirc","wedbar","wedge","Wedge","wedgeq","weierp","Wfr","wfr","Wopf","wopf","wp","wr","wreath","Wscr","wscr","xcap","xcirc","xcup","xdtri","Xfr","xfr","xharr","xhArr","Xi","xi","xlarr","xlArr","xmap","xnis","xodot","Xopf","xopf","xoplus","xotime","xrarr","xrArr","Xscr","xscr","xsqcup","xuplus","xutri","xvee","xwedge","Yacute","yacute","YAcy","yacy","Ycirc","ycirc","Ycy","ycy","yen","Yfr","yfr","YIcy","yicy","Yopf","yopf","Yscr","yscr","YUcy","yucy","yuml","Yuml","Zacute","zacute","Zcaron","zcaron","Zcy","zcy","Zdot","zdot","zeetrf","ZeroWidthSpace","Zeta","zeta","zfr","Zfr","ZHcy","zhcy","zigrarr","zopf","Zopf","Zscr","zscr","zwj","zwnj","decodeMapLegacy","decodeMapNumeric","0","128","130","131","132","133","134","135","136","137","138","139","140","142","145","146","147","148","149","150","151","152","153","154","155","156","158","159","invalidReferenceCodePoints","has","propertyName","contains","merge","defaults","codePointToSymbol","strict","parseError","hexEscape","symbol","encodeEverything","useNamedReferences","allowUnsafeSymbols","$0","high","low","html","$1","$2","$3","$4","$5","$6","$7","semicolon","hexDigits","reference","isAttributeValue","unescape","51","msec","delay","factory","./when","52","makePromise","Scheduler","async","asap","scheduler","./Scheduler","./env","./makePromise","53","_async","_running","_queue","_queueLen","_afterQueue","_afterQueueLen","drain","_drain","enqueue","task","run","afterQueue","54","TimeoutError","captureStackTrace","55","makeApply","Promise","thisArg","_defer","callAndResolve","_handler","fold","callAndResolveNext","tryCatchResolve","resolver","56","applier","any","promises","handleFulfill","handleReject","resolved","pending","become","_visitRemaining","visit","some","fulfill","results","nFulfill","nReject","notify","_traverse","predicate","keep","filterSync","filtered","settle","all","settleOne","toPromise","fulfilled","rejected","_unreport","liftCombine","reduceRight","z","applyFold","spread","onFulfilled","../apply","../state","57","rejectInvalidPredicate","evaluatePredicate","maybeThenable","identity","createCatchFilter","runSideEffect","propagate","propagateValue","origCatch","onResult","onError","otherwise","onRejected","ensure","orElse","defaultValue","tap","onFulfilledSideEffect","58","_beget","to","59","60","iterate","condition","unfold","unspool","newSeed","seed","61","progress","onProgress","62","ms","setTimer","handleDelay","resolveDelay","onTimeout","reason","clearTimer","../TimeoutError","../env","63","throwit","report","handled","reported","logError","id","unreport","logInfo","formatObject","tasks","running","flush","localConsole","info","onPotentiallyUnhandledRejection","rejection","onPotentiallyUnhandledRejectionHandled","onFatalRejection","../format","64","withThis","chain","65","hasMutationObserver","WebKitMutationObserver","initMutationObserver","scheduled","node","createTextNode","characterData","MutationObs","capturedSetTimeout","clearTimeout","vertxRequire","vertx","cancelTimer","runOnLoop","runOnContext","66","stack","tryStringify","67","environment","Handler","init","promiseResolve","promiseReject","promiseNotify","Pending","isPromise","Async","getHandler","Rejected","never","foreverPendingPromise","defer","begetFrom","context","traverseWith","snd","traverse","tryCatch2","tryMap","mapAt","traverseAt","settleAt","Fulfilled","getHandlerMaybeThenable","visitRemaining","markAsHandled","runRace","getHandlerUntrusted","untrustedThen","Thenable","FailIfRejected","inheritedContext","createContext","consumers","thenable","AssimilateTask","errorId","_report","ReportTask","UnreportTask","cycle","ContinuationTask","continuation","ProgressTask","_then","tryAssimilate","Fold","failIfRejected","runContinuation1","enterContext","tryCatchReject","exitContext","runContinuation3","tryCatchReject3","runNotify","tryCatchReturn","inherit","Parent","Child","objectCreate","initEmitRejection","CustomEvent","hasCustomEvent","detail","bubbles","cancelable","dispatchEvent","emitRejection","fail","_state","cont","foreverPendingHandler","_resolve","_reject","_notify","68","toPendingState","toRejectedState","toFulfilledState","69","lift","attempt","Deferred","isPromiseLike","mapFunc","timed","generate","unhandledRejection","feature","./lib/Promise","./lib/TimeoutError","./lib/apply","./lib/decorators/array","./lib/decorators/flow","./lib/decorators/fold","./lib/decorators/inspect","./lib/decorators/iterate","./lib/decorators/progress","./lib/decorators/timed","./lib/decorators/unhandledRejection","./lib/decorators/with"],"mappings":"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","file":"Snoocore-browser.min.js","sourcesContent":["!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{var o;\"undefined\"!=typeof window?o=window:\"undefined\"!=typeof global?o=global:\"undefined\"!=typeof self&&(o=self),o.Snoocore=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n// Node.js libraries\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _events = require('events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _util = require('util');\n\nvar _util2 = _interopRequireDefault(_util);\n\n// Our modules\n\nvar _Request = require('./Request');\n\nvar _Request2 = _interopRequireDefault(_Request);\n\nvar _RedditRequest = require('./RedditRequest');\n\nvar _RedditRequest2 = _interopRequireDefault(_RedditRequest);\n\nvar _Throttle = require('./Throttle');\n\nvar _Throttle2 = _interopRequireDefault(_Throttle);\n\nvar _UserConfig = require('./UserConfig');\n\nvar _UserConfig2 = _interopRequireDefault(_UserConfig);\n\nvar _OAuth = require('./OAuth');\n\nvar _OAuth2 = _interopRequireDefault(_OAuth);\n\nvar _Modhash = require('./Modhash');\n\nvar _Modhash2 = _interopRequireDefault(_Modhash);\n\nvar _httpsFile = require('./https/file');\n\nvar _httpsFile2 = _interopRequireDefault(_httpsFile);\n\nvar Snoocore = (function (_events$EventEmitter) {\n  _inherits(Snoocore, _events$EventEmitter);\n\n  _createClass(Snoocore, null, [{\n    key: 'file',\n    value: function file() {\n      return _httpsFile2['default'].apply(undefined, arguments);\n    }\n  }, {\n    key: 'version',\n    get: function get() {\n      return '3.2.0';\n    }\n  }]);\n\n  function Snoocore(userConfiguration) {\n    var _this = this;\n\n    _classCallCheck(this, Snoocore);\n\n    _get(Object.getPrototypeOf(Snoocore.prototype), 'constructor', this).call(this);\n\n    // @TODO - this is a \"god object\" of sorts.\n    this._userConfig = new _UserConfig2['default'](userConfiguration);\n\n    this._throttle = new _Throttle2['default'](this._userConfig.throttle);\n\n    this._request = new _Request2['default'](this._throttle);\n\n    this._request.on('response_error', function (responseError) {\n      _this.emit('response_error', responseError);\n    });\n\n    // Two OAuth instances. One for authenticated users, and another for\n    // Application only OAuth. Two are needed in the instance where\n    // a user wants to bypass authentication for a call - we don't want\n    // to waste time by creating a new app only instance, authenticating,\n    // etc.\n    this.oauth = new _OAuth2['default'](this._userConfig, this._request);\n    this.oauthAppOnly = new _OAuth2['default'](this._userConfig, this._request);\n\n    // Expose OAuth functions in here\n    ['getExplicitAuthUrl', 'getImplicitAuthUrl', 'getAuthUrl', 'auth', 'refresh', 'deauth', 'getRefreshToken', 'getAccessToken', 'setRefreshToken', 'setAccessToken', 'hasRefreshToken', 'hasAccessToken'].forEach(function (fn) {\n      _this[fn] = _this.oauth[fn].bind(_this.oauth);\n    });\n\n    if (this._userConfig.useBrowserCookies) {\n      this.modhash = new _Modhash2['default'](this._userConfig, this._request);\n\n      // Expose Modhash functions in here\n      ['isModhashOld', 'setModhash', 'getModhash', 'getCurrentModhash', 'refreshModhash'].forEach(function (fn) {\n        _this[fn] = _this.modhash[fn].bind(_this.modhash);\n      });\n    }\n\n    this.appOnlyAuth = this.oauthAppOnly.applicationOnlyAuth.bind(this.oauthAppOnly);\n\n    // Bubble up the  events\n    this.oauth.on('access_token_refreshed', function (accessToken) {\n      _this.emit('access_token_refreshed', accessToken);\n    });\n\n    this._redditRequest = new _RedditRequest2['default'](this._userConfig, this._request, this.oauth, this.oauthAppOnly, this.modhash);\n\n    this._redditRequest.on('access_token_expired', function (responseError) {\n      _this.emit('access_token_expired', responseError);\n    });\n\n    this._redditRequest.on('rate_limit', function (rateLimitData) {\n      _this.emit('rate_limit', rateLimitData);\n    });\n\n    this._redditRequest.on('rate_limit_reached', function (rateLimitData) {\n      // let the user know that they have gone over\n      _this.emit('rate_limit_reached', rateLimitData);\n      // Delay the next call until the rate limit reset occurs\n      _this._throttle.addTime(rateLimitData.rateLimitReset * 1000);\n    });\n\n    /*\n       Make this._redditRequest.path the primary function that we return, but\n       stick the rest of the available functions on the prototype so we\n       can use them as well.\n     */\n    var path = this._redditRequest.path.bind(this._redditRequest);\n\n    var key = undefined;\n    for (key in this) {\n      path[key] = this[key];\n    }\n\n    return path;\n  }\n\n  return Snoocore;\n})(_events2['default'].EventEmitter);\n\nexports['default'] = Snoocore;\nmodule.exports = exports['default'];\n//# sourceMappingURL=Snoocore.js.map\n\n},{\"./Modhash\":3,\"./OAuth\":4,\"./RedditRequest\":5,\"./Request\":6,\"./Throttle\":8,\"./UserConfig\":9,\"./https/file\":10,\"events\":20,\"util\":49}],2:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nexports.replaceUrlParams = replaceUrlParams;\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _url = require('url');\n\nvar _url2 = _interopRequireDefault(_url);\n\nvar _utils = require('./utils');\n\nvar u = _interopRequireWildcard(_utils);\n\nvar Endpoint = (function () {\n  function Endpoint(userConfig, hostname, method, path) {\n    var headers = arguments.length <= 4 || arguments[4] === undefined ? {} : arguments[4];\n    var givenArgs = arguments.length <= 5 || arguments[5] === undefined ? {} : arguments[5];\n    var givenContextOptions = arguments.length <= 6 || arguments[6] === undefined ? {} : arguments[6];\n    var port = arguments.length <= 7 || arguments[7] === undefined ? 80 : arguments[7];\n\n    _classCallCheck(this, Endpoint);\n\n    this._userConfig = userConfig;\n\n    this.hostname = hostname;\n    this.port = port;\n    this.method = method;\n    this.path = path;\n    this.headers = headers;\n\n    this.contextOptions = this.normalizeContextOptions(givenContextOptions);\n\n    this.givenArgs = givenArgs;\n    this.args = this.buildArgs();\n    this.url = this.buildUrl();\n    this.computedPath = _url2['default'].parse(this.url).path;\n  }\n\n  /*\n     Takes an url, and an object of url parameters and replaces\n     them, e.g.\n  \n     endpointUrl:\n     'http://example.com/$foo/$bar/test.html'\n  \n     this.givenArgs: { $foo: 'hello', $bar: 'world' }\n  \n     would output:\n  \n     'http://example.com/hello/world/test.html'\n   */\n\n  _createClass(Endpoint, [{\n    key: 'setHeaders',\n    value: function setHeaders(headers) {\n      this.headers = headers;\n    }\n\n    /*\n       Returns a set of options that effect how each call to reddit behaves.\n     */\n  }, {\n    key: 'normalizeContextOptions',\n    value: function normalizeContextOptions(givenContextOptions) {\n\n      var cOptions = givenContextOptions || {};\n\n      // by default we do not bypass authentication\n      cOptions.bypassAuth = u.thisOrThat(cOptions.bypassAuth, false);\n\n      // decode html enntities for this call?\n      cOptions.decodeHtmlEntities = u.thisOrThat(cOptions.decodeHtmlEntities, this._userConfig.decodeHtmlEntities);\n\n      // how many attempts left do we have to retry an endpoint?\n\n      // use the given retryAttemptsLeft, or the retryAttempts passed in the\n      // context options if not specified\n      cOptions.retryAttemptsLeft = u.thisOrThat(cOptions.retryAttemptsLeft, cOptions.retryAttempts);\n\n      // use the given retryAttemptsLeft, or the retryAttempts passed in the\n      // user configuration\n      cOptions.retryAttemptsLeft = u.thisOrThat(cOptions.retryAttemptsLeft, this._userConfig.retryAttempts);\n\n      // delay between retrying an endpoint\n      cOptions.retryDelay = u.thisOrThat(cOptions.retryDelay, this._userConfig.retryDelay);\n\n      // milliseconds before a request times out\n      cOptions.requestTimeout = u.thisOrThat(cOptions.requestTimeout, this._userConfig.requestTimeout);\n\n      // how many reauthentication attempts do we have left?\n      cOptions.reauthAttemptsLeft = u.thisOrThat(cOptions.reauthAttemptsLeft, cOptions.retryAttemptsLeft);\n\n      return cOptions;\n    }\n\n    /*\n       Build the arguments that we will send to reddit in our\n       request. These customize the request that we send to reddit\n     */\n  }, {\n    key: 'buildArgs',\n    value: function buildArgs() {\n      var args = {};\n\n      // Skip any url parameters (e.g. items that begin with $)\n      for (var key in this.givenArgs) {\n        if (key.substring(0, 1) !== '$') {\n          args[key] = this.givenArgs[key];\n        }\n      }\n\n      var apiType = u.thisOrThat(this.contextOptions.api_type, this._userConfig.apiType);\n\n      if (apiType) {\n        args.api_type = apiType;\n      }\n\n      return args;\n    }\n\n    /*\n       Builds the URL that we will query reddit with.\n     */\n  }, {\n    key: 'buildUrl',\n    value: function buildUrl() {\n      var url = this.hostname;\n\n      if (this.port !== 80) {\n        url += ':' + this.port;\n      }\n\n      var path = this.path;\n      if (path.substring(0, 1) !== '/') {\n        path = '/' + path;\n      }\n\n      url += path;\n\n      url = replaceUrlParams(url, this.givenArgs);\n      url = url.replace('//', '/');\n      url = 'https://' + url;\n      return url;\n    }\n  }]);\n\n  return Endpoint;\n})();\n\nexports['default'] = Endpoint;\n\nfunction replaceUrlParams(endpointUrl, givenArgs) {\n  // nothing to replace!\n  if (endpointUrl.indexOf('$') === -1) {\n    return endpointUrl;\n  }\n\n  // pull out variables from the url\n  var params = endpointUrl.match(/\\$[\\w\\.]+/g);\n\n  // replace with the argument provided\n  params.forEach(function (param) {\n    if (typeof givenArgs[param] === 'undefined') {\n      throw new Error('missing required url parameter ' + param);\n    }\n    endpointUrl = endpointUrl.replace(param, givenArgs[param]);\n  });\n\n  return endpointUrl;\n}\n//# sourceMappingURL=Endpoint.js.map\n\n},{\"./utils\":14,\"url\":47}],3:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _events = require('events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _when = require('when');\n\nvar _when2 = _interopRequireDefault(_when);\n\nvar _utils = require('./utils');\n\nvar u = _interopRequireWildcard(_utils);\n\nvar _Endpoint = require('./Endpoint');\n\nvar _Endpoint2 = _interopRequireDefault(_Endpoint);\n\nvar _ResponseError = require('./ResponseError');\n\nvar _ResponseError2 = _interopRequireDefault(_ResponseError);\n\nvar Modhash = (function (_events$EventEmitter) {\n  _inherits(Modhash, _events$EventEmitter);\n\n  function Modhash(userConfig, request) {\n    _classCallCheck(this, Modhash);\n\n    _get(Object.getPrototypeOf(Modhash.prototype), 'constructor', this).call(this);\n\n    this._userConfig = userConfig;\n\n    this._request = request;\n\n    this.modhash = '';\n    this.modhashRefreshed = 0;\n  }\n\n  _createClass(Modhash, [{\n    key: 'isModhashOld',\n    value: function isModhashOld() {\n      // 10 minutes by default\n      var timeout = 10 * 60 * 1000;\n\n      return Date.now() - this.modhashRefreshed > timeout;\n    }\n  }, {\n    key: 'setModhash',\n    value: function setModhash(modhash) {\n      this.modhash = modhash;\n      this.modhashRefreshed = Date.now();\n    }\n  }, {\n    key: 'hasModhash',\n    value: function hasModhash() {\n      return !!this.modhash.length;\n    }\n\n    /*\n       Get the current cached modhash.\n     */\n  }, {\n    key: 'getCurrentModhash',\n    value: function getCurrentModhash() {\n      if (!this.hasModhash()) {\n        return undefined;\n      }\n      return this.modhash;\n    }\n  }, {\n    key: 'refreshModhash',\n    value: function refreshModhash() {\n      var _this = this;\n\n      var endpoint = new _Endpoint2['default'](this._userConfig, this._userConfig.serverWWW, 'get', '/api/me.json', {}, {}, {}, this._userConfig.serverWWWPort);\n\n      var responseErrorHandler = function responseErrorHandler(response, endpoint) {\n        if (String(response._status).indexOf('4') === 0) {\n          return _when2['default'].reject(new _ResponseError2['default']('Invalid refreshModhash request', response, endpoint));\n        }\n        // else return the endpoint to try again\n        return _when2['default'].resolve(endpoint);\n      };\n\n      return this._request.https(endpoint, responseErrorHandler).then(function (res) {\n        var response = JSON.parse(res._body);\n\n        if (!response.data) {\n          throw new _ResponseError2['default']('Invalid refreshModhash response. Are you logged in?', response, endpoint);\n        } else {\n          _this.setModhash(response.data.modhash);\n\n          return {\n            modhash: response.data.modhash\n          };\n        }\n      });\n    }\n  }, {\n    key: 'getModhash',\n    value: function getModhash() {\n      if (!this.isModhashOld()) {\n        return _when2['default'].resolve({\n          modhash: this.modhash\n        });\n      } else {\n        return this.refreshModhash();\n      }\n    }\n  }]);\n\n  return Modhash;\n})(_events2['default'].EventEmitter);\n\nexports['default'] = Modhash;\nmodule.exports = exports['default'];\n//# sourceMappingURL=Modhash.js.map\n\n},{\"./Endpoint\":2,\"./ResponseError\":7,\"./utils\":14,\"events\":20,\"when\":69}],4:[function(require,module,exports){\n(function (Buffer){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _events = require('events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _querystring = require('querystring');\n\nvar _querystring2 = _interopRequireDefault(_querystring);\n\nvar _util = require('util');\n\nvar _util2 = _interopRequireDefault(_util);\n\nvar _url = require('url');\n\nvar _url2 = _interopRequireDefault(_url);\n\nvar _when = require('when');\n\nvar _when2 = _interopRequireDefault(_when);\n\nvar _utils = require('./utils');\n\nvar u = _interopRequireWildcard(_utils);\n\nvar _Endpoint = require('./Endpoint');\n\nvar _Endpoint2 = _interopRequireDefault(_Endpoint);\n\nvar _ResponseError = require('./ResponseError');\n\nvar _ResponseError2 = _interopRequireDefault(_ResponseError);\n\n/*\n   Various OAuth types\n */\nvar TOKEN = {\n  EXPLICIT: 'explicit',\n  IMPLICIT: 'implicit',\n  SCRIPT: 'script',\n  APP_ONLY: 'app_only',\n  REFRESH: 'refresh',\n  INVALID: 'invalid_token' // Represents an unset/invalid token\n};\n\nexports.TOKEN = TOKEN;\n/*\n   Represents a single OAuth instance. Used primarily for internal\n   use within the Snoocore class to manage two OAuth instances -\n   Applicaton Only and an Authenticated Session.\n\n */\n\nvar OAuth = (function (_events$EventEmitter) {\n  _inherits(OAuth, _events$EventEmitter);\n\n  function OAuth(userConfig, request) {\n    _classCallCheck(this, OAuth);\n\n    _get(Object.getPrototypeOf(OAuth.prototype), 'constructor', this).call(this);\n\n    this._userConfig = userConfig;\n\n    this._request = request;\n\n    this.accessToken = TOKEN.INVALID;\n    this.refreshToken = TOKEN.INVALID;\n    this.tokenType = 'bearer';\n\n    this.scope = this.normalizeScope();\n  }\n\n  /*\n     Takes a given scope, and normalizes it to a proper string.\n   */\n\n  _createClass(OAuth, [{\n    key: 'normalizeScope',\n    value: function normalizeScope() {\n      var scope = undefined;\n      // Set to empty string if the scope if not set\n      if (typeof this._userConfig.oauth.scope === 'undefined') {\n        scope = '';\n      }\n      // convert an array into a string\n      else if (_util2['default'].isArray(this._userConfig.oauth.scope)) {\n          scope = this._userConfig.oauth.scope.join(',');\n        }\n      return scope;\n    }\n\n    /*\n       Do we have a refresh token defined?\n     */\n  }, {\n    key: 'hasRefreshToken',\n    value: function hasRefreshToken() {\n      return this.refreshToken !== TOKEN.INVALID;\n    }\n\n    /*\n       Do we have an access token defined?\n     */\n  }, {\n    key: 'hasAccessToken',\n    value: function hasAccessToken() {\n      return this.accessToken !== TOKEN.INVALID;\n    }\n\n    /*\n       Get the current refresh token used for this instance.\n     */\n  }, {\n    key: 'getRefreshToken',\n    value: function getRefreshToken() {\n      if (this.refreshToken === TOKEN.INVALID) {\n        return undefined;\n      }\n      return this.refreshToken;\n    }\n\n    /*\n       Get the current access token used for this instance.\n     */\n  }, {\n    key: 'getAccessToken',\n    value: function getAccessToken() {\n      if (this.accessToken === TOKEN.INVALID) {\n        return undefined;\n      }\n      return this.accessToken;\n    }\n\n    /*\n       Set the current refresh token used for this instance.\n     */\n  }, {\n    key: 'setRefreshToken',\n    value: function setRefreshToken(refreshToken) {\n      this.refreshToken = refreshToken;\n    }\n\n    /*\n       Set the current access token used for this instance.\n     */\n  }, {\n    key: 'setAccessToken',\n    value: function setAccessToken(accessToken) {\n      this.accessToken = accessToken;\n    }\n  }, {\n    key: 'getAuthorizationHeader',\n    value: function getAuthorizationHeader() {\n      return this.tokenType + ' ' + this.accessToken;\n    }\n\n    /*\n       Can we refresh our access token without user intervention?\n     */\n  }, {\n    key: 'canRefreshAccessToken',\n    value: function canRefreshAccessToken() {\n      return this._userConfig.oauth.type === 'script' || this._userConfig.oauth.type === 'explicit' && this._userConfig.oauth.duration === 'permanent' && this.hasRefreshToken();\n    }\n\n    /*\n       Get the Explicit Auth Url.\n     */\n  }, {\n    key: 'getExplicitAuthUrl',\n    value: function getExplicitAuthUrl(state) {\n\n      var query = {};\n\n      query.client_id = this._userConfig.oauth.key;\n      query.state = u.thisOrThat(state, Math.ceil(Math.random() * 1000));\n      query.redirect_uri = this._userConfig.oauth.redirectUri;\n      query.duration = this._userConfig.oauth.duration;\n      query.response_type = 'code';\n      query.scope = this.scope;\n\n      var baseUrl = 'https://' + this._userConfig.serverWWW + '/api/v1/authorize';\n\n      if (this._userConfig.mobile) {\n        baseUrl += '.compact';\n      }\n\n      return baseUrl + '?' + _querystring2['default'].stringify(query);\n    }\n\n    /*\n       Get the Implicit Auth Url.\n     */\n  }, {\n    key: 'getImplicitAuthUrl',\n    value: function getImplicitAuthUrl(state) {\n\n      var query = {};\n\n      query.client_id = this._userConfig.oauth.key;\n      query.state = u.thisOrThat(state, Math.ceil(Math.random() * 1000));\n      query.redirect_uri = this._userConfig.oauth.redirectUri;\n      query.response_type = 'token';\n      query.scope = this.scope;\n\n      var baseUrl = 'https://' + this._userConfig.serverWWW + '/api/v1/authorize';\n\n      if (this._userConfig.mobile) {\n        baseUrl += '.compact';\n      }\n\n      return baseUrl + '?' + _querystring2['default'].stringify(query);\n    }\n  }, {\n    key: 'getAuthUrl',\n    value: function getAuthUrl(state) {\n      switch (this._userConfig.oauth.type) {\n        case TOKEN.EXPLICIT:\n          return this.getExplicitAuthUrl(state);\n        case TOKEN.IMPLICIT:\n          return this.getImplicitAuthUrl(state);\n        default:\n          throw new Error('The oauth type of ' + oauthType + ' does not require an url');\n      }\n    }\n\n    /*\n       Returns the data needed to request an Applicaton Only\n       OAuth access token.\n     */\n  }, {\n    key: 'getAppOnlyTokenData',\n    value: function getAppOnlyTokenData() {\n      var params = {};\n\n      params.scope = this.scope;\n\n      // From the reddit documentation:\n      //\n      // - - -\n      // \"client_credentials\"\n      //\n      // Confidential clients (web apps / scripts) not acting on\n      // behalf of one or more logged out users.\n      //\n      // - - -\n      // \"https://oauth.reddit.com/grants/installed_client\"\n      //\n      // * Installed app types (as these apps are considered\n      // \"non-confidential\", have no secret, and thus, are\n      // ineligible for client_credentials grant.\n      //\n      // * Other apps acting on behalf of one or more \"logged out\" users.\n      //\n      switch (this._userConfig.oauth.type) {\n        case TOKEN.SCRIPT:\n        case TOKEN.EXPLICIT:\n          params.grant_type = 'client_credentials';\n          break;\n        // Also covers case TOKEN.IMPLICIT:\n        default:\n          params.grant_type = 'https://oauth.reddit.com/grants/installed_client';\n          params.device_id = this._userConfig.oauth.deviceId;\n      }\n\n      return params;\n    }\n\n    /*\n       Returns the data needed to request an authenticated OAuth\n       access token.\n     */\n  }, {\n    key: 'getAuthenticatedTokenData',\n    value: function getAuthenticatedTokenData(authorizationCode) {\n      var params = {};\n\n      params.scope = this.scope;\n\n      switch (this._userConfig.oauth.type) {\n        case TOKEN.SCRIPT:\n          params.grant_type = 'password';\n          params.username = this._userConfig.oauth.username;\n          params.password = this._userConfig.oauth.password;\n          break;\n        case TOKEN.EXPLICIT:\n          params.grant_type = 'authorization_code';\n          params.client_id = this._userConfig.oauth.key;\n          params.redirect_uri = this._userConfig.oauth.redirectUri;\n          params.code = authorizationCode;\n          break;\n        default:\n          return _when2['default'].reject(new Error('Invalid OAuth type specified (Authenticated OAuth).'));\n      }\n\n      return params;\n    }\n\n    /*\n       Returns the data needed to request a refresh token.\n     */\n  }, {\n    key: 'getRefreshTokenData',\n    value: function getRefreshTokenData(refreshToken) {\n      var params = {};\n      params.scope = this.scope;\n      params.grant_type = 'refresh_token';\n      params.refresh_token = refreshToken;\n      return params;\n    }\n\n    /*\n       A method that sets up a call to receive an access/refresh token.\n     */\n  }, {\n    key: 'getToken',\n    value: function getToken(tokenEnum) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var params = undefined;\n\n      switch (tokenEnum) {\n        case TOKEN.REFRESH:\n          params = this.getRefreshTokenData(options.refreshToken);\n          break;\n        case TOKEN.APP_ONLY:\n          params = this.getAppOnlyTokenData();\n          break;\n        case TOKEN.SCRIPT:\n        case TOKEN.EXPLICIT:\n          params = this.getAuthenticatedTokenData(options.authorizationCode);\n          break;\n      }\n\n      var headers = {};\n      var buff = new Buffer(this._userConfig.oauth.key + ':' + this._userConfig.oauth.secret);\n      var base64 = buff.toString('base64');\n      var auth = 'Basic ' + base64;\n\n      headers['Authorization'] = auth;\n\n      var endpoint = new _Endpoint2['default'](this._userConfig, this._userConfig.serverWWW, 'post', '/api/v1/access_token', headers, params, {}, this._userConfig.serverWWWPort);\n\n      var responseErrorHandler = function responseErrorHandler(response, endpoint) {\n        if (String(response._status).indexOf('4') === 0) {\n          return _when2['default'].reject(new _ResponseError2['default']('Invalid getToken request', response, endpoint));\n        }\n        // else return the endpoint to try again\n        return _when2['default'].resolve(endpoint);\n      };\n\n      return this._request.https(endpoint, responseErrorHandler).then(function (res) {\n        return JSON.parse(res._body);\n      });\n    }\n\n    /*\n       Sets the auth data from the oauth module to allow OAuth calls.\n        This method can authenticate with:\n        - Script based OAuth (no parameter)\n       - Raw authentication data\n       - Authorization Code (request_type = \"code\")\n       - Access Token (request_type = \"token\") / Implicit OAuth\n       - Application Only. (void 0, true);\n     */\n  }, {\n    key: 'auth',\n    value: function auth(authCodeOrAccessToken, isApplicationOnly) {\n      var _this = this;\n\n      var tokenData = undefined;\n\n      if (isApplicationOnly) {\n        tokenData = this.getToken(TOKEN.APP_ONLY);\n      } else {\n\n        var token = this._userConfig.oauth.type;\n\n        switch (token) {\n          case TOKEN.SCRIPT:\n            tokenData = this.getToken(token);\n            break;\n\n          case TOKEN.EXPLICIT:\n            // auth code in this case\n            tokenData = this.getToken(token, {\n              authorizationCode: authCodeOrAccessToken\n            });\n            break;\n\n          case TOKEN.IMPLICIT:\n            // access token in this case\n            tokenData = {\n              access_token: authCodeOrAccessToken,\n              token_type: 'bearer',\n              expires_in: 3600,\n              scope: this._userConfig.oauth.scope\n            };\n            break;\n\n          default:\n            throw new Error('Setting the auth data is no longer supported.');\n        }\n      }\n\n      return (0, _when2['default'])(tokenData).then(function (data) {\n\n        if (typeof data !== 'object') {\n          var str = String(data);\n          return _when2['default'].reject(new Error('There was a problem authenticating:\\n' + str));\n        }\n\n        _this.accessToken = data.access_token;\n        _this.tokenType = data.token_type;\n\n        // If the explicit app used a perminant duration, send\n        // back the refresh token that will be used to re-authenticate\n        // later without user interaction.\n        if (data.refresh_token) {\n          // set the internal refresh token for automatic expiring\n          // access_token management\n          _this.refreshToken = data.refresh_token;\n          return _this.refreshToken;\n        }\n      });\n    }\n\n    /*\n       Only authenticates with Application Only OAuth\n     */\n  }, {\n    key: 'applicationOnlyAuth',\n    value: function applicationOnlyAuth() {\n      return this.auth(void 0, true);\n    }\n\n    /*\n       Authenticate with a refresh token.\n     */\n  }, {\n    key: 'refresh',\n    value: function refresh(refreshToken) {\n      var _this2 = this;\n\n      // use the provided refresh token, or the current\n      // one that we have for this class\n      refreshToken = u.thisOrThat(refreshToken, this.refreshToken);\n\n      return this.getToken(TOKEN.REFRESH, {\n        refreshToken: refreshToken\n      }).then(function (data) {\n        // only set the internal refresh token if reddit\n        // agrees that it was OK and sends back authData\n        _this2.refreshToken = refreshToken;\n\n        _this2.accessToken = data.access_token;\n        _this2.tokenType = data.token_type;\n\n        _this2.emit('access_token_refreshed', _this2.accessToken);\n      });\n    }\n\n    /*\n       Clears any authentication data & removes OAuth authentication\n        By default it will only remove the \"access_token\". Specify\n       the users refresh token to revoke that token instead.\n     */\n  }, {\n    key: 'deauth',\n    value: function deauth(refreshToken) {\n      var _this3 = this;\n\n      // no need to deauth if not authenticated\n      if (!this.hasAccessToken()) {\n        return _when2['default'].resolve();\n      }\n\n      var isRefreshToken = typeof refreshToken === 'string';\n\n      var token = isRefreshToken ? refreshToken : this.accessToken;\n\n      var tokenTypeHint = isRefreshToken ? 'refresh_token' : 'access_token';\n\n      var params = {\n        token: token,\n        token_type_hint: tokenTypeHint\n      };\n\n      var auth = 'Basic ' + new Buffer(this._userConfig.oauth.key + ':' + this._userConfig.oauth.secret).toString('base64');\n\n      var headers = {\n        'Authorization': auth\n      };\n\n      var endpoint = new _Endpoint2['default'](this._userConfig, this._userConfig.serverWWW, 'post', '/api/v1/revoke_token', headers, params, {}, this._userConfig.serverWWWPort);\n\n      return this._request.https(endpoint).then(function (response) {\n        // If we did not get back a 204 this then it did not sucessfully\n        // revoke the token\n        if (response._status !== 204) {\n          return _when2['default'].reject(new Error('Unable to revoke the given token'));\n        }\n\n        // clear the data for this OAuth object\n        _this3.accessToken = TOKEN.INVALID;\n        _this3.tokenType = TOKEN.INVALID;\n\n        // only clear the refresh token if one was provided\n        if (isRefreshToken) {\n          _this3.refreshToken = TOKEN.INVALID;\n        }\n      });\n    }\n  }]);\n\n  return OAuth;\n})(_events2['default'].EventEmitter);\n\nexports['default'] = OAuth;\n\n\n}).call(this,require(\"buffer\").Buffer)\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n},{\"./Endpoint\":2,\"./ResponseError\":7,\"./utils\":14,\"buffer\":16,\"events\":20,\"querystring\":33,\"url\":47,\"util\":49,\"when\":69}],5:[function(require,module,exports){\n\n// node modules\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x3, _x4, _x5) { var _again = true; _function: while (_again) { var object = _x3, property = _x4, receiver = _x5; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x3 = parent; _x4 = property; _x5 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _util = require('util');\n\nvar _util2 = _interopRequireDefault(_util);\n\nvar _events = require('events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _url = require('url');\n\nvar _url2 = _interopRequireDefault(_url);\n\n// npm modules\n\nvar _when = require('when');\n\nvar _when2 = _interopRequireDefault(_when);\n\nvar _whenDelay = require('when/delay');\n\nvar _whenDelay2 = _interopRequireDefault(_whenDelay);\n\nvar _he = require('he');\n\nvar _he2 = _interopRequireDefault(_he);\n\n// our modules\n\nvar _Request = require('./Request');\n\nvar _Request2 = _interopRequireDefault(_Request);\n\nvar _Endpoint = require('./Endpoint');\n\nvar _Endpoint2 = _interopRequireDefault(_Endpoint);\n\nvar _ResponseError = require('./ResponseError');\n\nvar _ResponseError2 = _interopRequireDefault(_ResponseError);\n\n/*\n   A collection of functions that deal with requesting data from the\n   reddit API.\n */\n\nvar RedditRequest = (function (_events$EventEmitter) {\n  _inherits(RedditRequest, _events$EventEmitter);\n\n  function RedditRequest(userConfig, request, oauth, oauthAppOnly, modhash) {\n    _classCallCheck(this, RedditRequest);\n\n    _get(Object.getPrototypeOf(RedditRequest.prototype), 'constructor', this).call(this);\n    this._request = request;\n    this._userConfig = userConfig;\n    this._oauth = oauth;\n    this._oauthAppOnly = oauthAppOnly;\n    this._modhash = modhash;\n  }\n\n  /*\n     Currently application only?\n      If we do not have an access token and there is no way\n     to get a new access token then yes! We are application\n     only oauth.\n   */\n\n  _createClass(RedditRequest, [{\n    key: 'isApplicationOnly',\n    value: function isApplicationOnly() {\n      return !this._oauth.hasAccessToken() && !this._oauth.canRefreshAccessToken();\n    }\n\n    /*\n       Are we currently authenticated?\n     */\n  }, {\n    key: 'isAuthenticated',\n    value: function isAuthenticated() {\n      return this.isApplicationOnly() ? this._oauthAppOnly.hasAccessToken() : this._oauth.hasAccessToken();\n    }\n\n    /*\n       Builds up the headers for an endpoint.\n     */\n  }, {\n    key: 'buildHeaders',\n    value: function buildHeaders() {\n      var contextOptions = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n      var headers = {};\n\n      if (this._userConfig.isNode) {\n        // Can't set User-Agent in browser\n        headers['User-Agent'] = this._userConfig.userAgent;\n      }\n\n      if (this._userConfig.useBrowserCookies) {\n        headers['X-User-Agent'] = this._userConfig.userAgent;\n\n        if (this._modhash.hasModhash() && !this._modhash.isModhashOld()) {\n          headers['X-Modhash'] = this._modhash.getCurrentModhash();\n        }\n      }\n\n      if (!this._userConfig.useBrowserCookies) {\n        if (contextOptions.bypassAuth || this.isApplicationOnly()) {\n          headers['Authorization'] = this._oauthAppOnly.getAuthorizationHeader();\n        } else {\n          headers['Authorization'] = this._oauth.getAuthorizationHeader();\n        }\n      }\n\n      return headers;\n    }\n\n    /*\n       Call the reddit api.\n     */\n  }, {\n    key: 'callRedditApi',\n    value: function callRedditApi(endpoint) {\n      var _this = this;\n\n      // Authenticate if needed before making a call.\n      //\n      // Eliminates unwanted 401 errors when making initial calls\n      // on Application only OAuth & Script instances where calling\n      // `.auth()` isn't required.\n      var auth = this.isAuthenticated() ? _when2['default'].resolve() : (function () {\n        return _this.authenticate(endpoint).then(function () {\n          // rebuild endpoint with new headers\n          endpoint = new _Endpoint2['default'](_this._userConfig, endpoint.hostname, endpoint.method, endpoint.path, _this.buildHeaders(endpoint.contextOptions), endpoint.givenArgs, endpoint.contextOptions, endpoint.port);\n        });\n      })();\n\n      return auth.then(function () {\n        var requestPromise = _this._request.https(endpoint, _this.responseErrorHandler.bind(_this));\n\n        return requestPromise.then(function (response) {\n          return _this.handleSuccessResponse(response, endpoint);\n        });\n      });\n    }\n\n    /*\n       Authenticate with the appropriate OAuth type for a given\n       endpoint\n     */\n  }, {\n    key: 'authenticate',\n    value: function authenticate(endpoint) {\n      var authPromise = undefined;\n\n      // If we are application only, or are bypassing authentication\n      // therefore we're using application only OAuth\n      if (this._userConfig.useBrowserCookies) {\n        if (endpoint.method === 'post') {\n          authPromise = this._modhash.getModhash();\n        } else {\n          authPromise = _when2['default'].resolve();\n        }\n      } else if (this.isApplicationOnly() || endpoint.contextOptions.bypassAuth) {\n        authPromise = this._oauthAppOnly.applicationOnlyAuth();\n      } else if (this._oauth.canRefreshAccessToken()) {\n        // If we have been authenticated with a permanent refresh token use it\n        if (this._oauth.hasRefreshToken()) {\n          authPromise = this._oauth.refresh();\n        }\n        // If we are OAuth type script we can call `.auth` again\n        else if (this._userConfig.isOAuthType('script')) {\n            authPromise = this._oauth.auth();\n          }\n      }\n      // No way to authenticate\n      else {\n          return _when2['default'].reject(new Error('Unable to authenticate'));\n        }\n\n      return authPromise;\n    }\n\n    /*\n       Handle a request errors from reddit. This is usually caused when our\n       access_token has expired, or reddit servers are under heavy load.\n        If we can't renew our access token, we throw an error / emit the\n       'access_token_expired' event that users can then handle to\n       re-authenticatet clients\n        If we can renew our access token, we try to reauthenticate, and call the\n       reddit endpoint again.\n     */\n  }, {\n    key: 'responseErrorHandler',\n    value: function responseErrorHandler(response, endpoint) {\n      var _this2 = this;\n\n      // - - -\n      // Check headers for more specific errors.\n\n      var wwwAuth = response._headers['www-authenticate'];\n\n      if (wwwAuth && wwwAuth.indexOf('insufficient_scope') !== -1) {\n        return _when2['default'].reject(new _ResponseError2['default']('Insufficient scopes provided for this call', response, endpoint));\n      }\n\n      // - - -\n      // 404 - Page not found\n      if (response._status === 404) {\n        var msg = 'Page not found. Is this a valid endpoint?';\n        return _when2['default'].reject(new _ResponseError2['default'](msg, response, endpoint));\n      }\n\n      // - - -\n      // Access token has expired\n      if (response._status === 401 && !this._userConfig.useBrowserCookies) {\n\n        // Atempt to get a new access token!\n        var reauthPromise = this.authenticate(endpoint);\n\n        return reauthPromise.then(function () {\n          // refresh the authentication headers for this endpoint\n          endpoint.setHeaders(_this2.buildHeaders(endpoint.contextOptions));\n\n          var modifiedEndpoint = new _Endpoint2['default'](_this2._userConfig, endpoint.hostname, endpoint.method, endpoint.path, _this2.buildHeaders(endpoint.contextOptions), endpoint.givenArgs, endpoint.contextOptions, endpoint.port);\n\n          return _when2['default'].resolve(modifiedEndpoint);\n        })['catch'](function (error) {\n          _this2.emit('access_token_expired');\n\n          var msg = 'Access token has expired. Listen for ' + 'the \"access_token_expired\" event to ' + 'handle this gracefully in your app.';\n          return _when2['default'].reject(new _ResponseError2['default'](msg, response, endpoint));\n        });\n      }\n\n      // - - -\n      // Access token has expired and we're trying to authenticate without OAuth\n      if (response._status === 401 && !this._userConfig.useBrowserCookies) {\n        var msg = 'Access token required to access this endpoint.';\n        return _when2['default'].reject(new _ResponseError2['default'](msg, response, endpoint));\n      }\n\n      // - - -\n      // Reddit servers are busy. Can't do much here.\n\n      if (String(response._status).substring(0, 1) === '5') {\n        var modifiedEndpoint = new _Endpoint2['default'](this._userConfig, endpoint.hostname, endpoint.method, endpoint.path, this.buildHeaders(endpoint.contextOptions), endpoint.givenArgs, endpoint.contextOptions, endpoint.port);\n\n        return _when2['default'].resolve(modifiedEndpoint);\n      }\n\n      // - - -\n      // At the end of the day, we just throw an error stating that there\n      // is nothing we can do & give general advice\n      return _when2['default'].reject(new _ResponseError2['default']('This call failed. ' + 'Does this call require a user? ' + 'Is the user missing reddit gold? ' + 'Trying to change a subreddit that the user does not moderate? ' + 'This is an unrecoverable error. Check the rest of the ' + 'error message for more information.', response, endpoint));\n    }\n\n    /*\n       Handle reddit response status of 2xx.\n        Finally return the data if there were no problems.\n     */\n  }, {\n    key: 'handleSuccessResponse',\n    value: function handleSuccessResponse(response, endpoint) {\n\n      var data = response._body || '';\n\n      if (endpoint.contextOptions.decodeHtmlEntities) {\n        data = _he2['default'].decode(data);\n      }\n\n      // Attempt to parse some JSON, otherwise continue on (may be empty, or text)\n      try {\n        data = JSON.parse(data);\n\n        // Reddit isn't always honest in their response status. Check for\n        // any errors in 2xx http statuses\n\n        // data.json.errors\n        if (data.json && data.json.errors && data.json.errors.length > 0) {\n          return _when2['default'].reject(new _ResponseError2['default']('', response, endpoint));\n        }\n\n        // data.json.error\n        if (data.json && data.json.error) {\n          return _when2['default'].reject(new _ResponseError2['default']('', response, endpoint));\n        }\n      } catch (e) {}\n\n      var rateLimitRemaining = response._headers['x-ratelimit-remaining'];\n      var rateLimitUsed = response._headers['x-ratelimit-used'];\n      var rateLimitReset = response._headers['x-ratelimit-reset'];\n\n      var rateLimitData = {\n        rateLimitRemaining: rateLimitRemaining ? Number(rateLimitRemaining) : void 0,\n        rateLimitUsed: rateLimitUsed ? Number(rateLimitUsed) : void 0,\n        rateLimitReset: rateLimitReset ? Number(rateLimitReset) : void 0\n      };\n\n      if (typeof rateLimitData.rateLimitUsed !== 'undefined') {\n        this.emit('rate_limit', rateLimitData);\n      }\n\n      // Using a test variable\n      // this._userConfig.__test.rateLimitRemainingCutoff\n      // it's default value is \"0\", however in the tests cases this\n      // would take too long.\n      var cutoff = this._userConfig.__test.rateLimitRemainingCutoff;\n\n      if (typeof rateLimitData.rateLimitRemaining !== 'undefined' && Number(rateLimitRemaining) <= cutoff) {\n        this.emit('rate_limit_reached', rateLimitData);\n      }\n\n      if (this._userConfig.useBrowserCookies && data.data && data.data.modhash && data.data.modhash.length) {\n        this._modhash.setModhash(data.data.modhash);\n      }\n\n      return _when2['default'].resolve(data);\n    }\n\n    /*\n       Listing support.\n     */\n  }, {\n    key: 'getListing',\n    value: function getListing(endpoint) {\n      var _this3 = this;\n\n      // number of results that we have loaded so far. It will\n      // increase / decrease when calling next / previous.\n      var count = 0;\n      var limit = endpoint.args.limit || 25;\n      // keep a reference to the start of this listing\n      var start = endpoint.args.after || null;\n\n      var getSlice = function getSlice(endpoint) {\n\n        return _this3.callRedditApi(endpoint).then(function () {\n          var result = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n          var slice = {};\n          var listing = result;\n\n          slice.get = result;\n\n          if (result instanceof Array) {\n            if (typeof endpoint.contextOptions.listingIndex === 'undefined') {\n              throw new Error('Must specify a `listingIndex` for this listing.');\n            }\n\n            listing = result[endpoint.contextOptions.listingIndex];\n          }\n\n          slice.count = count;\n\n          slice.before = listing.data.before || null;\n          slice.after = listing.data.after || null;\n          slice.allChildren = listing.data.children || [];\n\n          slice.empty = slice.allChildren.length === 0;\n\n          slice.children = slice.allChildren.filter(function (child) {\n            child.data = child.data || {};\n            return !child.data.stickied;\n          });\n\n          slice.stickied = slice.allChildren.filter(function (child) {\n            child.data = child.data || {};\n            return child.data.stickied;\n          });\n\n          slice.next = function () {\n            count += limit;\n\n            var newArgs = endpoint.givenArgs;\n            newArgs.before = null;\n            newArgs.after = slice.children[slice.children.length - 1].data.name;\n            newArgs.count = count;\n            return getSlice(new _Endpoint2['default'](_this3._userConfig, endpoint.hostname, endpoint.method, endpoint.path, _this3.buildHeaders(endpoint.contextOptions), newArgs, endpoint.contextOptions, endpoint.port));\n          };\n\n          slice.previous = function () {\n            count -= limit;\n\n            var newArgs = endpoint.givenArgs;\n            newArgs.before = slice.children[0].data.name;\n            newArgs.after = null;\n            newArgs.count = count;\n            return getSlice(new _Endpoint2['default'](_this3._userConfig, endpoint.hostname, endpoint.method, endpoint.path, _this3.buildHeaders(endpoint.contextOptions), newArgs, endpoint.contextOptions, endpoint.port));\n          };\n\n          slice.start = function () {\n            count = 0;\n\n            var newArgs = endpoint.givenArgs;\n            newArgs.before = null;\n            newArgs.after = start;\n            newArgs.count = count;\n            return getSlice(new _Endpoint2['default'](_this3._userConfig, endpoint.hostname, endpoint.method, endpoint.path, _this3.buildHeaders(endpoint.contextOptions), newArgs, endpoint.contextOptions, endpoint.port));\n          };\n\n          slice.requery = function () {\n            return getSlice(endpoint);\n          };\n\n          return slice;\n        });\n      };\n\n      return getSlice(endpoint);\n    }\n\n    /*\n       Enable path syntax support, e.g. this.path('/path/to/$endpoint/etc')\n        Can take an url as well, but the first part of the url is chopped\n       off because it is not needed. We will always use the server oauth\n       to call the API...\n        e.g. https://www.example.com/api/v1/me\n        will only use the path: /api/v1/me\n     */\n  }, {\n    key: 'path',\n    value: function path(urlOrPath) {\n      var _this4 = this;\n\n      var parsed = _url2['default'].parse(urlOrPath);\n      var path = parsed.pathname;\n\n      var calls = {};\n\n      ['get', 'post', 'put', 'patch', 'delete', 'update'].forEach(function (verb) {\n        calls[verb] = function (userGivenArgs, userContextOptions) {\n          return _this4.callRedditApi(new _Endpoint2['default'](_this4._userConfig, _this4._userConfig.serverOAuth, verb, path, _this4.buildHeaders(userContextOptions), userGivenArgs, userContextOptions, _this4._userConfig.serverOAuthPort));\n        };\n      });\n\n      // Add listing support\n      calls.listing = function (userGivenArgs, userContextOptions) {\n        return _this4.getListing(new _Endpoint2['default'](_this4._userConfig, _this4._userConfig.serverOAuth, 'get', path, _this4.buildHeaders(userContextOptions), userGivenArgs, userContextOptions, _this4._userConfig.serverOAuthPort));\n      };\n\n      return calls;\n    }\n  }]);\n\n  return RedditRequest;\n})(_events2['default'].EventEmitter);\n\nexports['default'] = RedditRequest;\nmodule.exports = exports['default'];\n//# sourceMappingURL=RedditRequest.js.map\n\n},{\"./Endpoint\":2,\"./Request\":6,\"./ResponseError\":7,\"events\":20,\"he\":50,\"url\":47,\"util\":49,\"when\":69,\"when/delay\":51}],6:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _querystring = require('querystring');\n\nvar _querystring2 = _interopRequireDefault(_querystring);\n\nvar _events = require('events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _when = require('when');\n\nvar _when2 = _interopRequireDefault(_when);\n\nvar _whenDelay = require('when/delay');\n\nvar _whenDelay2 = _interopRequireDefault(_whenDelay);\n\nvar _utils = require('./utils');\n\nvar u = _interopRequireWildcard(_utils);\n\nvar _ResponseError = require('./ResponseError');\n\nvar _ResponseError2 = _interopRequireDefault(_ResponseError);\n\nvar _httpsHttpsNode = require('./https/httpsNode');\n\nvar _httpsHttpsNode2 = _interopRequireDefault(_httpsHttpsNode);\n\nvar _httpsHttpsBrowser = require('./https/httpsBrowser');\n\nvar _httpsHttpsBrowser2 = _interopRequireDefault(_httpsHttpsBrowser);\n\nvar rawHttps = u.isNode() ? _httpsHttpsNode2['default'] : _httpsHttpsBrowser2['default'];\n\nvar Request = (function (_events$EventEmitter) {\n  _inherits(Request, _events$EventEmitter);\n\n  function Request(throttle) {\n    _classCallCheck(this, Request);\n\n    _get(Object.getPrototypeOf(Request.prototype), 'constructor', this).call(this);\n    this._throttle = throttle;\n  }\n\n  /*\n     Makes an https call with a given endpoint.\n      If an error handler is provided, it will call it in\n     the case of a returned status that is not 2xx / success.\n      If the errorHandler results in a rejected promise, then we will NOT\n     retry the endpoint and reject with the given error.\n   */\n\n  _createClass(Request, [{\n    key: 'https',\n    value: function https(endpoint, responseErrorHandler) {\n      var _this = this;\n\n      return this._throttle.wait().then(function () {\n\n        var reqOptions = {\n          method: endpoint.method.toUpperCase(),\n          hostname: endpoint.hostname,\n          path: endpoint.computedPath,\n          headers: endpoint.headers,\n          useBrowserCookies: endpoint._userConfig.useBrowserCookies\n        };\n\n        // @TODO Node.js has issues if you set it to 80?\n        if (endpoint.port !== 80) {\n          reqOptions.port = endpoint.port;\n        }\n\n        var formData = endpoint.args;\n\n        if (reqOptions.method === \"PUT\" && reqOptions.path.substring(0, 18) === '/api/v1/me/friends') {\n          console.log(\"Entered\");\n          formData = '{}';\n        }\n\n        return rawHttps(reqOptions, formData).timeout(endpoint.contextOptions.requestTimeout, new _ResponseError2['default']('The request has timed out', {}, endpoint)).then(function (response) {\n\n          var statusChar = String(response._status).substring(0, 1);\n          var success = statusChar === '2';\n\n          // If success we're done!\n          if (success) {\n            return response;\n          }\n\n          // Else, retry the endpoint if we can.\n          endpoint.contextOptions.retryAttemptsLeft--;\n\n          var responseError = undefined;\n          responseError = new _ResponseError2['default']('Response Error', response, endpoint);\n\n          _this.emit('response_error', responseError);\n\n          if (endpoint.contextOptions.retryAttemptsLeft <= 0) {\n            responseError.message = 'All retry attempts exhausted.\\n\\n' + responseError.message;\n            return _when2['default'].reject(responseError);\n          }\n\n          // Use the given response error handler, or use a thin wrapper that\n          // will return the endpoint without any modifications\n          responseErrorHandler = responseErrorHandler || function (response, endpoint) {\n            return _when2['default'].resolve(endpoint);\n          };\n\n          // Call the error handler. If not rejected, retry the endpoint\n          // with any modifications made by the responseErrorHandler\n          return responseErrorHandler(response, endpoint).then(function (modifiedEndpoint) {\n\n            // Only have a retry delay if the endpoint had an HTTP 5xx status\n            var retryDelay = statusChar === '5' ? modifiedEndpoint.contextOptions.retryDelay : 0;\n\n            return (0, _whenDelay2['default'])(retryDelay).then(function () {\n              return _this.https(modifiedEndpoint, responseErrorHandler);\n            });\n          });\n        });\n      });\n    }\n  }]);\n\n  return Request;\n})(_events2['default'].EventEmitter);\n\nexports['default'] = Request;\nmodule.exports = exports['default'];\n//# sourceMappingURL=Request.js.map\n\n},{\"./ResponseError\":7,\"./https/httpsBrowser\":12,\"./https/httpsNode\":13,\"./utils\":14,\"events\":20,\"querystring\":33,\"when\":69,\"when/delay\":51}],7:[function(require,module,exports){\n/*\n   A uniform way to report response errors.\n*/\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ResponseError = (function (_Error) {\n  _inherits(ResponseError, _Error);\n\n  function ResponseError(message, response, endpoint) {\n    _classCallCheck(this, ResponseError);\n\n    _get(Object.getPrototypeOf(ResponseError.prototype), 'constructor', this).call(this);\n\n    this.message = [message, '>>> Response Status: ' + response._status, '>>> Endpoint URL: ' + endpoint.url, '>>> Arguments: ' + JSON.stringify(endpoint.args, null, 2), '>>> Response Body:', response._body].join('\\n\\n');\n\n    this.url = endpoint.url;\n    this.args = endpoint.args;\n    this.status = response._status;\n    this.body = response._body;\n    this.retryAttemptsLeft = endpoint.contextOptions.retryAttemptsLeft;\n    this.endpoint = endpoint;\n  }\n\n  return ResponseError;\n})(Error);\n\nexports['default'] = ResponseError;\nmodule.exports = exports['default'];\n//# sourceMappingURL=ResponseError.js.map\n\n},{}],8:[function(require,module,exports){\n/*\n   A basic throttle manager. Exposes 1 functoin `wait` that\n   will return a promise that resolves once we've waited the proper\n   amount of time, e.g.\n\n   var throttle = new Throttle();\n\n   throttle.wait() // resolves after 1ms\n   throttle.wait() // resolves after 10001ms\n   throttle.wait() // resolves after 2001ms\n\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _when = require('when');\n\nvar _when2 = _interopRequireDefault(_when);\n\nvar _whenDelay = require('when/delay');\n\nvar _whenDelay2 = _interopRequireDefault(_whenDelay);\n\nvar Throttle = (function () {\n  function Throttle() {\n    var throttleMs = arguments.length <= 0 || arguments[0] === undefined ? 1000 : arguments[0];\n\n    _classCallCheck(this, Throttle);\n\n    this._throttleMs = throttleMs;\n\n    /*\n       The current throttle delay before a request will go through\n       increments every time a call is made, and is reduced when a\n       call finishes.\n        Time is added & removed based on the throttle variable.\n     */\n    this._throttleDelay = 1;\n  }\n\n  _createClass(Throttle, [{\n    key: 'wait',\n    value: function wait() {\n      var _this = this;\n\n      // resolve this promise after the current throttleDelay\n      var delayPromise = (0, _whenDelay2['default'])(this._throttleDelay);\n\n      // add throttleMs to the total throttleDelay\n      this._throttleDelay += this._throttleMs;\n\n      // after throttleMs time, subtract throttleMs from\n      // the throttleDelay\n      setTimeout(function () {\n        _this._throttleDelay -= _this._throttleMs;\n      }, this._throttleMs);\n\n      return delayPromise;\n    }\n\n    /*\n       Time in milliseconds to add to the throttle delay\n    */\n  }, {\n    key: 'addTime',\n    value: function addTime(timeMs) {\n      this._throttleDelay += timeMs;\n    }\n  }]);\n\n  return Throttle;\n})();\n\nexports['default'] = Throttle;\nmodule.exports = exports['default'];\n//# sourceMappingURL=Throttle.js.map\n\n},{\"when\":69,\"when/delay\":51}],9:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _utils = require('./utils');\n\nvar u = _interopRequireWildcard(_utils);\n\n/*\n   A class made up of the user configuration.\n\n   Normalizes the configuraiton & checks for simple errors.\n\n   Provides some helper functons for getting user set values.\n */\n\nvar UserConfig = (function () {\n  function UserConfig(userConfiguration) {\n    _classCallCheck(this, UserConfig);\n\n    //\n    // - - - CONFIGURATION VALUES - - -\n    //\n\n    var missingMsg = 'Missing required userConfiguration value ';\n\n    // ** IDENFIFICATION\n    this.userAgent = u.thisOrThrow(userConfiguration.userAgent, 'Missing required userConfiguration value `userAgent`');\n\n    this.isNode = u.thisOrThat(userConfiguration.browser, u.isNode());\n\n    this.mobile = u.thisOrThat(userConfiguration.mobile, false);\n\n    this.useBrowserCookies = u.thisOrThat(userConfiguration.useBrowserCookies, false);\n\n    if (userConfiguration.apiServerUri) {\n      userConfiguration.serverOAuth = userConfiguration.apiServerUri;\n    }\n\n    if (userConfiguration.authServerUri) {\n      userConfiguration.serverWWW = userConfiguration.authServerUri;\n    }\n\n    // ** SERVERS\n    if (this.useBrowserCookies) {\n      this.serverOAuth = u.thisOrThat(userConfiguration.serverOAuth, 'www.reddit.com');\n    } else {\n      this.serverOAuth = u.thisOrThat(userConfiguration.serverOAuth, 'oauth.reddit.com');\n    }\n\n    this.serverWWW = u.thisOrThat(userConfiguration.serverWWW, 'www.reddit.com');\n    this.serverOAuthPort = u.thisOrThat(userConfiguration.serverOAuthPort, 80);\n    this.serverWWWPort = u.thisOrThat(userConfiguration.serverWWWPort, 80);\n\n    // ** CALL MODIFICATIONS\n    this.throttle = u.thisOrThat(userConfiguration.throttle, 1000);\n\n    this.decodeHtmlEntities = u.thisOrThat(userConfiguration.decodeHtmlEntities, false);\n\n    this.apiType = u.thisOrThat(userConfiguration.apiType, 'json');\n\n    // ** RETRY ATTEMPTS\n    this.retryAttempts = u.thisOrThat(userConfiguration.retryAttempts, 60);\n\n    this.retryDelay = u.thisOrThat(userConfiguration.retryDelay, 5000);\n\n    this.requestTimeout = u.thisOrThat(userConfiguration.requestTimeout, 20000);\n\n    // ** OAUTH\n    this.oauth = u.thisOrThat(userConfiguration.oauth, {});\n\n    this.oauth.scope = u.thisOrThat(this.oauth.scope, []);\n\n    this.oauth.deviceId = u.thisOrThat(this.oauth.deviceId, 'DO_NOT_TRACK_THIS_DEVICE');\n    this.oauth.duration = u.thisOrThat(this.oauth.duration, 'temporary');\n\n    if (this.useBrowserCookies) {\n      this.oauth.type = u.thisOrThat(this.oauth.type, '');\n      this.oauth.key = u.thisOrThat(this.oauth.key, '');\n    } else {\n      this.oauth.type = u.thisOrThrow(this.oauth.type, missingMsg + '`oauth.type`');\n      this.oauth.key = u.thisOrThrow(this.oauth.key, missingMsg + '`oauth.key`');\n    }\n\n    //\n    // - - - VALIDATION\n    //\n\n    if (this.oauth.duration !== 'temporary' && this.oauth.duration !== 'permanent') {\n      throw new Error('Invalid `oauth.duration`. Must be one of: permanent, temporary');\n    }\n\n    if (this.oauth.deviceId !== 'DO_NOT_TRACK_THIS_DEVICE' && (this.oauth.deviceId.length < 20 || this.oauth.deviceId.length > 30)) {\n      throw new Error('Invalid device_id length. Must be 20-30 characters');\n    }\n\n    if (!this.isOAuthType('explicit') && !this.isOAuthType('implicit') && !this.isOAuthType('script') && !this.useBrowserCookies) {\n      throw new Error('Invalid `oauth.type`. Must be one of: explicit, implicit, or script');\n    }\n\n    if (!this.useBrowserCookies) {\n      if (this.isOAuthType('explicit') || this.isOAuthType('script')) {\n        this.oauth.secret = u.thisOrThrow(this.oauth.secret, missingMsg + '`oauth.secret` for type explicit/script');\n      }\n\n      if (this.isOAuthType('script')) {\n        this.oauth.username = u.thisOrThrow(this.oauth.username, missingMsg + '`oauth.username` for type script');\n        this.oauth.password = u.thisOrThrow(this.oauth.password, missingMsg + '`oauth.password` for type script');\n      }\n\n      if (this.isOAuthType('implicit') || this.isOAuthType('explicit')) {\n        this.oauth.redirectUri = u.thisOrThrow(this.oauth.redirectUri, missingMsg + '`oauth.redirectUri` for type implicit/explicit');\n      }\n    }\n\n    //\n    // TESTING CONFIGURATION\n    //\n    // Some test cases require some deep messing around with the library\n    // in order to be nice to the API server when testing.\n    //\n    // These should never be used by anything other than the test cases to\n    // modify internal variables. They are only used if needed!\n\n    /*\n       Used to determine when we have gone over the rate limit. The default\n       would be \"0\", e.g. when there are not more requests remaining in the\n       current time slot\n     */\n    this.__test = {};\n    userConfiguration.__test = userConfiguration.__test || {};\n\n    this.__test.rateLimitRemainingCutoff = u.thisOrThat(userConfiguration.__test.rateLimitRemainingCutoff, 0);\n  }\n\n  /*\n     Checks if the oauth is of a specific type, e.g.\n      isOAuthType('script')\n   */\n\n  _createClass(UserConfig, [{\n    key: 'isOAuthType',\n    value: function isOAuthType(type) {\n      return this.oauth.type === type;\n    }\n  }]);\n\n  return UserConfig;\n})();\n\nexports['default'] = UserConfig;\nmodule.exports = exports['default'];\n//# sourceMappingURL=UserConfig.js.map\n\n},{\"./utils\":14}],10:[function(require,module,exports){\n(function (Buffer){\n/*\nRepresents a file that we wish to upload to reddit.\n\nAll files have a name, mimeType, and data. \n\nIn the browser data can be a `File` object directly from\na file input, or a `Blob` object.\n\nIn node, data can be a `utf8` string, or a buffer\ncontaining the content of the file.\n*/\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nexports['default'] = function (name, mimeType, data) {\n  var self = {};\n\n  self.name = name;\n  self.mimeType = mimeType;\n\n  if (typeof File !== 'undefined' && data instanceof File || typeof Blob !== 'undefined' && data instanceof Blob) {\n    self.data = data;\n  } else {\n    self.data = typeof data === 'string' ? new Buffer(data) : data;\n  }\n\n  return self;\n};\n\nmodule.exports = exports['default'];\n\n\n}).call(this,require(\"buffer\").Buffer)\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1aWxkL3NyYy9odHRwcy9maWxlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5SZXByZXNlbnRzIGEgZmlsZSB0aGF0IHdlIHdpc2ggdG8gdXBsb2FkIHRvIHJlZGRpdC5cblxuQWxsIGZpbGVzIGhhdmUgYSBuYW1lLCBtaW1lVHlwZSwgYW5kIGRhdGEuIFxuXG5JbiB0aGUgYnJvd3NlciBkYXRhIGNhbiBiZSBhIGBGaWxlYCBvYmplY3QgZGlyZWN0bHkgZnJvbVxuYSBmaWxlIGlucHV0LCBvciBhIGBCbG9iYCBvYmplY3QuXG5cbkluIG5vZGUsIGRhdGEgY2FuIGJlIGEgYHV0ZjhgIHN0cmluZywgb3IgYSBidWZmZXJcbmNvbnRhaW5pbmcgdGhlIGNvbnRlbnQgb2YgdGhlIGZpbGUuXG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBmdW5jdGlvbiAobmFtZSwgbWltZVR5cGUsIGRhdGEpIHtcbiAgdmFyIHNlbGYgPSB7fTtcblxuICBzZWxmLm5hbWUgPSBuYW1lO1xuICBzZWxmLm1pbWVUeXBlID0gbWltZVR5cGU7XG5cbiAgaWYgKHR5cGVvZiBGaWxlICE9PSAndW5kZWZpbmVkJyAmJiBkYXRhIGluc3RhbmNlb2YgRmlsZSB8fCB0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgJiYgZGF0YSBpbnN0YW5jZW9mIEJsb2IpIHtcbiAgICBzZWxmLmRhdGEgPSBkYXRhO1xuICB9IGVsc2Uge1xuICAgIHNlbGYuZGF0YSA9IHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJyA/IG5ldyBCdWZmZXIoZGF0YSkgOiBkYXRhO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbGUuanMubWFwXG4iXX0=\n},{\"buffer\":16}],11:[function(require,module,exports){\n(function (Buffer){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.getSectionBoundary = getSectionBoundary;\nexports.getEndBoundary = getEndBoundary;\nexports.encodeFieldPart = encodeFieldPart;\nexports.encodeFilePart = encodeFilePart;\nexports.getMultipartFormData = getMultipartFormData;\nexports.getData = getData;\nexports.getFormData = getFormData;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _querystring = require('querystring');\n\nvar _querystring2 = _interopRequireDefault(_querystring);\n\nvar _when = require('when');\n\nvar _when2 = _interopRequireDefault(_when);\n\nfunction getSectionBoundary(boundary) {\n  return '--' + boundary;\n}\n\nfunction getEndBoundary(boundary) {\n  return '--' + boundary + '--';\n}\n\nfunction encodeFieldPart(boundary, key, value) {\n  return new Buffer([getSectionBoundary(boundary), '\\r\\n', 'Content-Disposition: form-data; name=\"' + key + '\"', '\\r\\n\\r\\n', value, '\\r\\n'].join(''));\n}\n\nfunction encodeFilePart(boundary, key, name, mimeType, data) {\n  return Buffer.concat([new Buffer([getSectionBoundary(boundary), '\\r\\n', 'Content-Disposition: form-data; ' + 'name=\"' + key + '\"; ' + 'filename=\"' + name + '\"', '\\r\\n', 'Content-Type: ' + mimeType, '\\r\\n\\r\\n'].join('')), data, // already a buffer\n  new Buffer('\\r\\n')]);\n}\n\n/*\n   Converts a list of parameters to form data\n\n   - `fields` - a property map of key value pairs\n   - `files` - a list of property maps of content\n   --> `type` - the type of file data\n   --> `keyname` - the name of the key corresponding to the file\n   --> `valuename` - the name of the value corresponding to the file\n   --> `dataBuffer` - A buffer containing the files data\n */\n\nfunction getMultipartFormData(boundary, fields, files) {\n\n  var dataBuffer = new Buffer(0);\n  var key;\n\n  if (fields) {\n    for (key in fields) {\n      // skip over any file fields\n      if (key === 'file') {\n        continue;\n      }\n\n      var value = fields[key];\n\n      dataBuffer = Buffer.concat([dataBuffer, encodeFieldPart(boundary, key, value)]);\n    }\n  }\n\n  if (files) {\n    for (key in files) {\n      var file = files[key];\n\n      dataBuffer = Buffer.concat([dataBuffer, encodeFilePart(boundary, file.key, file.name, file.mimeType, file.data)]);\n    }\n  }\n\n  // close with a final boundary closed with '--' at the end\n  dataBuffer = Buffer.concat([dataBuffer, new Buffer(getEndBoundary(boundary))]);\n\n  return dataBuffer;\n}\n\n/*\n   Takes an existing string or key-value pair that represents form data\n   and returns form data in the form of an Array.\n\n   If the formData is an object, and that object has a 'file' key,\n   we will assume that it is going to be a multipart request and we\n   will also assume that the file is actually a file path on the system\n   that we wish to use in the multipart data.\n */\n\nfunction getData(formData) {\n\n  var data = {\n    contentType: 'application/x-www-form-urlencoded',\n    contentLength: 0,\n    buffer: new Buffer(0)\n  };\n\n  // The data is already in a string format. There is nothing\n  // to do really\n  if (typeof formData === 'string') {\n    data.buffer = new Buffer(formData);\n  }\n\n  if (typeof formData === 'object') {\n    // The data is an object *without* a file key. We will assume\n    // that we want this data in an url encoded format\n    if (!formData.file) {\n      data.buffer = new Buffer(_querystring2['default'].stringify(formData));\n    } else {\n      // for now we only have to handle one file, with one key name of 'file'\n      var singleFile = formData.file;\n      singleFile.key = 'file';\n\n      var files = [formData.file];\n\n      var boundary = '---------Snoocore' + Math.floor(Math.random() * 10000);\n      data.contentType = 'multipart/form-data; boundary=' + boundary;\n      data.buffer = getMultipartFormData(boundary, formData, files);\n    }\n  }\n\n  data.contentLength = data.buffer.length;\n  return data;\n}\n\n/*\n   Takes an key-value pair and turns them into a FormData object. This is for when\n   we want to upload a file using XMLHttpRequest.\n*/\n\nfunction getFormData(formData) {\n  var data = new FormData();\n\n  for (var key in formData) {\n    if (key === 'file') {\n      data.append(key, formData[key].data, formData[key].name);\n    } else {\n      data.append(key, formData[key]);\n    }\n  }\n\n  return data;\n}\n\n\n}).call(this,require(\"buffer\").Buffer)\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1aWxkL3NyYy9odHRwcy9mb3JtLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5nZXRTZWN0aW9uQm91bmRhcnkgPSBnZXRTZWN0aW9uQm91bmRhcnk7XG5leHBvcnRzLmdldEVuZEJvdW5kYXJ5ID0gZ2V0RW5kQm91bmRhcnk7XG5leHBvcnRzLmVuY29kZUZpZWxkUGFydCA9IGVuY29kZUZpZWxkUGFydDtcbmV4cG9ydHMuZW5jb2RlRmlsZVBhcnQgPSBlbmNvZGVGaWxlUGFydDtcbmV4cG9ydHMuZ2V0TXVsdGlwYXJ0Rm9ybURhdGEgPSBnZXRNdWx0aXBhcnRGb3JtRGF0YTtcbmV4cG9ydHMuZ2V0RGF0YSA9IGdldERhdGE7XG5leHBvcnRzLmdldEZvcm1EYXRhID0gZ2V0Rm9ybURhdGE7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF9xdWVyeXN0cmluZyA9IHJlcXVpcmUoJ3F1ZXJ5c3RyaW5nJyk7XG5cbnZhciBfcXVlcnlzdHJpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVlcnlzdHJpbmcpO1xuXG52YXIgX3doZW4gPSByZXF1aXJlKCd3aGVuJyk7XG5cbnZhciBfd2hlbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93aGVuKTtcblxuZnVuY3Rpb24gZ2V0U2VjdGlvbkJvdW5kYXJ5KGJvdW5kYXJ5KSB7XG4gIHJldHVybiAnLS0nICsgYm91bmRhcnk7XG59XG5cbmZ1bmN0aW9uIGdldEVuZEJvdW5kYXJ5KGJvdW5kYXJ5KSB7XG4gIHJldHVybiAnLS0nICsgYm91bmRhcnkgKyAnLS0nO1xufVxuXG5mdW5jdGlvbiBlbmNvZGVGaWVsZFBhcnQoYm91bmRhcnksIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIG5ldyBCdWZmZXIoW2dldFNlY3Rpb25Cb3VuZGFyeShib3VuZGFyeSksICdcXHJcXG4nLCAnQ29udGVudC1EaXNwb3NpdGlvbjogZm9ybS1kYXRhOyBuYW1lPVwiJyArIGtleSArICdcIicsICdcXHJcXG5cXHJcXG4nLCB2YWx1ZSwgJ1xcclxcbiddLmpvaW4oJycpKTtcbn1cblxuZnVuY3Rpb24gZW5jb2RlRmlsZVBhcnQoYm91bmRhcnksIGtleSwgbmFtZSwgbWltZVR5cGUsIGRhdGEpIHtcbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoW25ldyBCdWZmZXIoW2dldFNlY3Rpb25Cb3VuZGFyeShib3VuZGFyeSksICdcXHJcXG4nLCAnQ29udGVudC1EaXNwb3NpdGlvbjogZm9ybS1kYXRhOyAnICsgJ25hbWU9XCInICsga2V5ICsgJ1wiOyAnICsgJ2ZpbGVuYW1lPVwiJyArIG5hbWUgKyAnXCInLCAnXFxyXFxuJywgJ0NvbnRlbnQtVHlwZTogJyArIG1pbWVUeXBlLCAnXFxyXFxuXFxyXFxuJ10uam9pbignJykpLCBkYXRhLCAvLyBhbHJlYWR5IGEgYnVmZmVyXG4gIG5ldyBCdWZmZXIoJ1xcclxcbicpXSk7XG59XG5cbi8qXG4gICBDb252ZXJ0cyBhIGxpc3Qgb2YgcGFyYW1ldGVycyB0byBmb3JtIGRhdGFcblxuICAgLSBgZmllbGRzYCAtIGEgcHJvcGVydHkgbWFwIG9mIGtleSB2YWx1ZSBwYWlyc1xuICAgLSBgZmlsZXNgIC0gYSBsaXN0IG9mIHByb3BlcnR5IG1hcHMgb2YgY29udGVudFxuICAgLS0+IGB0eXBlYCAtIHRoZSB0eXBlIG9mIGZpbGUgZGF0YVxuICAgLS0+IGBrZXluYW1lYCAtIHRoZSBuYW1lIG9mIHRoZSBrZXkgY29ycmVzcG9uZGluZyB0byB0aGUgZmlsZVxuICAgLS0+IGB2YWx1ZW5hbWVgIC0gdGhlIG5hbWUgb2YgdGhlIHZhbHVlIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGZpbGVcbiAgIC0tPiBgZGF0YUJ1ZmZlcmAgLSBBIGJ1ZmZlciBjb250YWluaW5nIHRoZSBmaWxlcyBkYXRhXG4gKi9cblxuZnVuY3Rpb24gZ2V0TXVsdGlwYXJ0Rm9ybURhdGEoYm91bmRhcnksIGZpZWxkcywgZmlsZXMpIHtcblxuICB2YXIgZGF0YUJ1ZmZlciA9IG5ldyBCdWZmZXIoMCk7XG4gIHZhciBrZXk7XG5cbiAgaWYgKGZpZWxkcykge1xuICAgIGZvciAoa2V5IGluIGZpZWxkcykge1xuICAgICAgLy8gc2tpcCBvdmVyIGFueSBmaWxlIGZpZWxkc1xuICAgICAgaWYgKGtleSA9PT0gJ2ZpbGUnKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBmaWVsZHNba2V5XTtcblxuICAgICAgZGF0YUJ1ZmZlciA9IEJ1ZmZlci5jb25jYXQoW2RhdGFCdWZmZXIsIGVuY29kZUZpZWxkUGFydChib3VuZGFyeSwga2V5LCB2YWx1ZSldKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZmlsZXMpIHtcbiAgICBmb3IgKGtleSBpbiBmaWxlcykge1xuICAgICAgdmFyIGZpbGUgPSBmaWxlc1trZXldO1xuXG4gICAgICBkYXRhQnVmZmVyID0gQnVmZmVyLmNvbmNhdChbZGF0YUJ1ZmZlciwgZW5jb2RlRmlsZVBhcnQoYm91bmRhcnksIGZpbGUua2V5LCBmaWxlLm5hbWUsIGZpbGUubWltZVR5cGUsIGZpbGUuZGF0YSldKTtcbiAgICB9XG4gIH1cblxuICAvLyBjbG9zZSB3aXRoIGEgZmluYWwgYm91bmRhcnkgY2xvc2VkIHdpdGggJy0tJyBhdCB0aGUgZW5kXG4gIGRhdGFCdWZmZXIgPSBCdWZmZXIuY29uY2F0KFtkYXRhQnVmZmVyLCBuZXcgQnVmZmVyKGdldEVuZEJvdW5kYXJ5KGJvdW5kYXJ5KSldKTtcblxuICByZXR1cm4gZGF0YUJ1ZmZlcjtcbn1cblxuLypcbiAgIFRha2VzIGFuIGV4aXN0aW5nIHN0cmluZyBvciBrZXktdmFsdWUgcGFpciB0aGF0IHJlcHJlc2VudHMgZm9ybSBkYXRhXG4gICBhbmQgcmV0dXJucyBmb3JtIGRhdGEgaW4gdGhlIGZvcm0gb2YgYW4gQXJyYXkuXG5cbiAgIElmIHRoZSBmb3JtRGF0YSBpcyBhbiBvYmplY3QsIGFuZCB0aGF0IG9iamVjdCBoYXMgYSAnZmlsZScga2V5LFxuICAgd2Ugd2lsbCBhc3N1bWUgdGhhdCBpdCBpcyBnb2luZyB0byBiZSBhIG11bHRpcGFydCByZXF1ZXN0IGFuZCB3ZVxuICAgd2lsbCBhbHNvIGFzc3VtZSB0aGF0IHRoZSBmaWxlIGlzIGFjdHVhbGx5IGEgZmlsZSBwYXRoIG9uIHRoZSBzeXN0ZW1cbiAgIHRoYXQgd2Ugd2lzaCB0byB1c2UgaW4gdGhlIG11bHRpcGFydCBkYXRhLlxuICovXG5cbmZ1bmN0aW9uIGdldERhdGEoZm9ybURhdGEpIHtcblxuICB2YXIgZGF0YSA9IHtcbiAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsXG4gICAgY29udGVudExlbmd0aDogMCxcbiAgICBidWZmZXI6IG5ldyBCdWZmZXIoMClcbiAgfTtcblxuICAvLyBUaGUgZGF0YSBpcyBhbHJlYWR5IGluIGEgc3RyaW5nIGZvcm1hdC4gVGhlcmUgaXMgbm90aGluZ1xuICAvLyB0byBkbyByZWFsbHlcbiAgaWYgKHR5cGVvZiBmb3JtRGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBkYXRhLmJ1ZmZlciA9IG5ldyBCdWZmZXIoZm9ybURhdGEpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBmb3JtRGF0YSA9PT0gJ29iamVjdCcpIHtcbiAgICAvLyBUaGUgZGF0YSBpcyBhbiBvYmplY3QgKndpdGhvdXQqIGEgZmlsZSBrZXkuIFdlIHdpbGwgYXNzdW1lXG4gICAgLy8gdGhhdCB3ZSB3YW50IHRoaXMgZGF0YSBpbiBhbiB1cmwgZW5jb2RlZCBmb3JtYXRcbiAgICBpZiAoIWZvcm1EYXRhLmZpbGUpIHtcbiAgICAgIGRhdGEuYnVmZmVyID0gbmV3IEJ1ZmZlcihfcXVlcnlzdHJpbmcyWydkZWZhdWx0J10uc3RyaW5naWZ5KGZvcm1EYXRhKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGZvciBub3cgd2Ugb25seSBoYXZlIHRvIGhhbmRsZSBvbmUgZmlsZSwgd2l0aCBvbmUga2V5IG5hbWUgb2YgJ2ZpbGUnXG4gICAgICB2YXIgc2luZ2xlRmlsZSA9IGZvcm1EYXRhLmZpbGU7XG4gICAgICBzaW5nbGVGaWxlLmtleSA9ICdmaWxlJztcblxuICAgICAgdmFyIGZpbGVzID0gW2Zvcm1EYXRhLmZpbGVdO1xuXG4gICAgICB2YXIgYm91bmRhcnkgPSAnLS0tLS0tLS0tU25vb2NvcmUnICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDApO1xuICAgICAgZGF0YS5jb250ZW50VHlwZSA9ICdtdWx0aXBhcnQvZm9ybS1kYXRhOyBib3VuZGFyeT0nICsgYm91bmRhcnk7XG4gICAgICBkYXRhLmJ1ZmZlciA9IGdldE11bHRpcGFydEZvcm1EYXRhKGJvdW5kYXJ5LCBmb3JtRGF0YSwgZmlsZXMpO1xuICAgIH1cbiAgfVxuXG4gIGRhdGEuY29udGVudExlbmd0aCA9IGRhdGEuYnVmZmVyLmxlbmd0aDtcbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qXG4gICBUYWtlcyBhbiBrZXktdmFsdWUgcGFpciBhbmQgdHVybnMgdGhlbSBpbnRvIGEgRm9ybURhdGEgb2JqZWN0LiBUaGlzIGlzIGZvciB3aGVuXG4gICB3ZSB3YW50IHRvIHVwbG9hZCBhIGZpbGUgdXNpbmcgWE1MSHR0cFJlcXVlc3QuXG4qL1xuXG5mdW5jdGlvbiBnZXRGb3JtRGF0YShmb3JtRGF0YSkge1xuICB2YXIgZGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuXG4gIGZvciAodmFyIGtleSBpbiBmb3JtRGF0YSkge1xuICAgIGlmIChrZXkgPT09ICdmaWxlJykge1xuICAgICAgZGF0YS5hcHBlbmQoa2V5LCBmb3JtRGF0YVtrZXldLmRhdGEsIGZvcm1EYXRhW2tleV0ubmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEuYXBwZW5kKGtleSwgZm9ybURhdGFba2V5XSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb3JtLmpzLm1hcFxuIl19\n},{\"buffer\":16,\"querystring\":33,\"when\":69}],12:[function(require,module,exports){\n//\n// Browser requests, mirrors the syntax of the node requests\n//\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports['default'] = https;\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _url = require('url');\n\nvar _url2 = _interopRequireDefault(_url);\n\nvar _when = require('when');\n\nvar _when2 = _interopRequireDefault(_when);\n\nvar _form = require('./form');\n\nvar form = _interopRequireWildcard(_form);\n\n// https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#getAllResponseHeaders()\n\n// Set to true to print useful http debug information on a lower level\nvar DEBUG_LOG = false ? console.error : function () {};\n\n/**\n * Modified from https://gist.github.com/monsur/706839\n *\n * XmlHttpRequest's getAllResponseHeaders() method returns a string of response\n * headers according to the format described here:\n * http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders-method\n * This method parses that string into a user-friendly key/value pair object.\n */\nfunction parseResponseHeaders(headerStr) {\n  var headers = {};\n  if (!headerStr) {\n    return headers;\n  }\n  var headerPairs = headerStr.split('\\r\\n');\n  for (var i = 0, len = headerPairs.length; i < len; i++) {\n    var headerPair = headerPairs[i];\n    // Can't use split() here because it does the wrong thing\n    // if the header value has the string \": \" in it.\n    var index = headerPair.indexOf(': ');\n    if (index > 0) {\n      // make all keys lowercase\n      var key = headerPair.substring(0, index).toLowerCase();\n      var val = headerPair.substring(index + 2);\n      headers[key] = val;\n    }\n  }\n  return headers;\n}\n\nfunction https(options, formData) {\n\n  DEBUG_LOG('>> browser https call');\n\n  options = options || {};\n  options.headers = options.headers || {};\n\n  var data;\n\n  if (formData.file) {\n    data = form.getFormData(formData);\n  } else {\n    data = form.getData(formData);\n    options.headers['Content-Type'] = data.contentType;\n  }\n\n  if (options.method === 'PUT' && options.path.substr(0, 18) === '/api/v1/me/friends') {\n    options.headers['Content-Type'] = 'application/json';\n  }\n\n  return _when2['default'].promise(function (resolve, reject) {\n\n    try {\n      if (options.method === 'GET' && data instanceof FormData) {\n        return reject(new Error('Cannot make a GET request while handling a file!'));\n      }\n\n      // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\n      var x = new window.XMLHttpRequest();\n\n      var url = 'https://' + options.hostname + options.path;\n\n      DEBUG_LOG('>> url: ', url);\n\n      // append the form data to the end of the url\n      if (options.method === 'GET') {\n        url += '?' + data.buffer.toString();\n      }\n\n      x.open(options.method, url, true);\n\n      if (options.useBrowserCookies) {\n        x.withCredentials = true;\n      }\n\n      Object.keys(options.headers).forEach(function (headerKey) {\n        x.setRequestHeader(headerKey, options.headers[headerKey]);\n      });\n\n      x.onreadystatechange = function () {\n        if (x.readyState > 3) {\n          // Normalize the result to match how requestNode.js works\n\n          DEBUG_LOG('finished...', x.status);\n\n          return resolve({\n            _body: x.responseText,\n            _status: x.status,\n            _headers: parseResponseHeaders(x.getAllResponseHeaders())\n          });\n        }\n      };\n\n      if (data instanceof FormData) {\n        x.send(data);\n      } else {\n        x.send(options.method === 'GET' ? null : data.buffer.toString());\n      }\n    } catch (e) {\n      return reject(e);\n    }\n  }).then(function (res) {\n    var canRedirect = String(res._status).substring(0, 1) === '3' && typeof res._headers.location !== 'undefined';\n\n    if (canRedirect) {\n      // Make the call again with the new hostname, path, and form data\n      var parsed = _url2['default'].parse(res._headers.location);\n      options.hostname = parsed.hostname;\n      options.path = parsed.pathname;\n      return https(options, parsed.query);\n    }\n\n    return res;\n  });\n}\n\nmodule.exports = exports['default'];\n//# sourceMappingURL=httpsBrowser.js.map\n\n},{\"./form\":11,\"url\":47,\"when\":69}],13:[function(require,module,exports){\n//\n// Node requests\n//\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports['default'] = https;\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _https = require('https');\n\nvar _https2 = _interopRequireDefault(_https);\n\nvar _url = require('url');\n\nvar _url2 = _interopRequireDefault(_url);\n\nvar _when = require('when');\n\nvar _when2 = _interopRequireDefault(_when);\n\nvar _form = require('./form');\n\nvar form = _interopRequireWildcard(_form);\n\n// Set to true to print useful http debug information on a lower level\nvar DEBUG_LOG = false ? console.error : function () {};\n\n/*\n   Form data can be a raw string, or an object containing key/value pairs\n */\n\nfunction https(options, formData) {\n  DEBUG_LOG('\\n\\n\\n\\n');\n  DEBUG_LOG('>>> request:\\n' + options.method + ': ' + options.hostname + options.path);\n\n  options = options || {};\n  options.headers = options.headers || {};\n\n  formData = formData || [];\n\n  var data = form.getData(formData);\n\n  options.headers['Content-Type'] = data.contentType;\n\n  if (options.method === 'PUT' && options.path.substr(0, 18) === '/api/v1/me/friends') {\n    options.headers['Content-Type'] = 'application/json';\n  }\n\n  if (options.method !== 'GET') {\n    options.headers['Content-Length'] = data.contentLength;\n  }\n\n  DEBUG_LOG('\\n>>> request headers\\n', options.headers);\n\n  // stick the data at the end of the url for GET requests\n  if (options.method === 'GET' && data.buffer.toString() !== '') {\n    DEBUG_LOG('\\n>>> query string:\\n', data.buffer.toString());\n    options.path += '?' + data.buffer.toString();\n  }\n\n  return _when2['default'].promise(function (resolve, reject) {\n\n    var req = _https2['default'].request(options, function (res) {\n\n      res._req = req; // attach a reference back to the request\n\n      res.setEncoding('utf8');\n      var body = '';\n      res.on('error', function (error) {\n        return reject(error);\n      });\n      res.on('data', function (chunk) {\n        body += chunk;\n      });\n      res.on('end', function () {\n        res._body = body; // attach the response body to the object\n        res._status = res.statusCode;\n        res._headers = res.headers;\n        DEBUG_LOG('\\n>>> response headers:\\n', res._headers);\n        DEBUG_LOG('\\n>>> response body:\\n', String(body).substring(0, 1000));\n        DEBUG_LOG('\\n>>> status:\\n', res.statusCode);\n        return resolve(res);\n      });\n    });\n\n    req.on('error', function (error) {\n      return reject(error);\n    });\n\n    if (options.method !== 'GET') {\n      DEBUG_LOG('\\n>>> request body:\\n', data.buffer.toString());\n      req.write(data.buffer);\n    }\n\n    req.end();\n  }).then(function (res) {\n    var canRedirect = String(res._status).substring(0, 1) === '3' && typeof res._headers.location !== 'undefined';\n\n    if (canRedirect) {\n      // Make the call again with the new hostname, path, and form data\n      var parsed = _url2['default'].parse(res._headers.location);\n      options.hostname = parsed.hostname;\n      options.path = parsed.pathname;\n      return https(options, parsed.query);\n    }\n\n    return res;\n  });\n}\n\nmodule.exports = exports['default'];\n//# sourceMappingURL=httpsNode.js.map\n\n},{\"./form\":11,\"https\":25,\"url\":47,\"when\":69}],14:[function(require,module,exports){\n\n// checks basic globals to help determine which environment we are in\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isNode = isNode;\nexports.thisOrThat = thisOrThat;\nexports.thisOrThrow = thisOrThrow;\n\nfunction isNode() {\n  return typeof require === \"function\" && typeof exports === \"object\" && typeof module === \"object\" && typeof window === \"undefined\";\n}\n\n/*\n   Return the value of `tryThis` unless it's undefined, then return `that`\n */\n\nfunction thisOrThat(tryThis, that) {\n  return typeof tryThis !== 'undefined' ? tryThis : that;\n}\n\n/*\n   Return the value of `tryThir` or throw an error (with provided message);\n */\n\nfunction thisOrThrow(tryThis, orThrowMessage) {\n  if (typeof tryThis !== 'undefined') {\n    return tryThis;\n  }\n  throw new Error(orThrowMessage);\n}\n//# sourceMappingURL=utils.js.map\n\n},{}],15:[function(require,module,exports){\n\n},{}],16:[function(require,module,exports){\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('is-array')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = Buffer\nexports.INSPECT_MAX_BYTES = 50\nBuffer.poolSize = 8192 // not used by this implementation\n\nvar kMaxLength = 0x3fffffff\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Note:\n *\n * - Implementation must support adding new properties to `Uint8Array` instances.\n *   Firefox 4-29 lacked support, fixed in Firefox 30+.\n *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *    incorrect length in some situations.\n *\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will\n * get the Object implementation, which is slower but will work correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = (function () {\n  try {\n    var buf = new ArrayBuffer(0)\n    var arr = new Uint8Array(buf)\n    arr.foo = function () { return 42 }\n    return 42 === arr.foo() && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n})()\n\n/**\n * Class: Buffer\n * =============\n *\n * The Buffer constructor returns instances of `Uint8Array` that are augmented\n * with function properties for all the node `Buffer` API functions. We use\n * `Uint8Array` so that square bracket notation works as expected -- it returns\n * a single octet.\n *\n * By augmenting the instances, we can avoid modifying the `Uint8Array`\n * prototype.\n */\nfunction Buffer (subject, encoding, noZero) {\n  if (!(this instanceof Buffer))\n    return new Buffer(subject, encoding, noZero)\n\n  var type = typeof subject\n\n  // Find the length\n  var length\n  if (type === 'number')\n    length = subject > 0 ? subject >>> 0 : 0\n  else if (type === 'string') {\n    if (encoding === 'base64')\n      subject = base64clean(subject)\n    length = Buffer.byteLength(subject, encoding)\n  } else if (type === 'object' && subject !== null) { // assume object is array-like\n    if (subject.type === 'Buffer' && isArray(subject.data))\n      subject = subject.data\n    length = +subject.length > 0 ? Math.floor(+subject.length) : 0\n  } else\n    throw new TypeError('must start with number, buffer, array or string')\n\n  if (this.length > kMaxLength)\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n      'size: 0x' + kMaxLength.toString(16) + ' bytes')\n\n  var buf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Preferred: Return an augmented `Uint8Array` instance for best performance\n    buf = Buffer._augment(new Uint8Array(length))\n  } else {\n    // Fallback: Return THIS instance of Buffer (created by `new`)\n    buf = this\n    buf.length = length\n    buf._isBuffer = true\n  }\n\n  var i\n  if (Buffer.TYPED_ARRAY_SUPPORT && typeof subject.byteLength === 'number') {\n    // Speed optimization -- use set if we're copying from a typed array\n    buf._set(subject)\n  } else if (isArrayish(subject)) {\n    // Treat array-ish objects as a byte array\n    if (Buffer.isBuffer(subject)) {\n      for (i = 0; i < length; i++)\n        buf[i] = subject.readUInt8(i)\n    } else {\n      for (i = 0; i < length; i++)\n        buf[i] = ((subject[i] % 256) + 256) % 256\n    }\n  } else if (type === 'string') {\n    buf.write(subject, 0, encoding)\n  } else if (type === 'number' && !Buffer.TYPED_ARRAY_SUPPORT && !noZero) {\n    for (i = 0; i < length; i++) {\n      buf[i] = 0\n    }\n  }\n\n  return buf\n}\n\nBuffer.isBuffer = function (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b))\n    throw new TypeError('Arguments must be Buffers')\n\n  var x = a.length\n  var y = b.length\n  for (var i = 0, len = Math.min(x, y); i < len && a[i] === b[i]; i++) {}\n  if (i !== len) {\n    x = a[i]\n    y = b[i]\n  }\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'binary':\n    case 'base64':\n    case 'raw':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function (list, totalLength) {\n  if (!isArray(list)) throw new TypeError('Usage: Buffer.concat(list[, length])')\n\n  if (list.length === 0) {\n    return new Buffer(0)\n  } else if (list.length === 1) {\n    return list[0]\n  }\n\n  var i\n  if (totalLength === undefined) {\n    totalLength = 0\n    for (i = 0; i < list.length; i++) {\n      totalLength += list[i].length\n    }\n  }\n\n  var buf = new Buffer(totalLength)\n  var pos = 0\n  for (i = 0; i < list.length; i++) {\n    var item = list[i]\n    item.copy(buf, pos)\n    pos += item.length\n  }\n  return buf\n}\n\nBuffer.byteLength = function (str, encoding) {\n  var ret\n  str = str + ''\n  switch (encoding || 'utf8') {\n    case 'ascii':\n    case 'binary':\n    case 'raw':\n      ret = str.length\n      break\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      ret = str.length * 2\n      break\n    case 'hex':\n      ret = str.length >>> 1\n      break\n    case 'utf8':\n    case 'utf-8':\n      ret = utf8ToBytes(str).length\n      break\n    case 'base64':\n      ret = base64ToBytes(str).length\n      break\n    default:\n      ret = str.length\n  }\n  return ret\n}\n\n// pre-set for values that may exist in the future\nBuffer.prototype.length = undefined\nBuffer.prototype.parent = undefined\n\n// toString(encoding, start=0, end=buffer.length)\nBuffer.prototype.toString = function (encoding, start, end) {\n  var loweredCase = false\n\n  start = start >>> 0\n  end = end === undefined || end === Infinity ? this.length : end >>> 0\n\n  if (!encoding) encoding = 'utf8'\n  if (start < 0) start = 0\n  if (end > this.length) end = this.length\n  if (end <= start) return ''\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'binary':\n        return binarySlice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase)\n          throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.equals = function (b) {\n  if(!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max)\n      str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  return Buffer.compare(this, b)\n}\n\n// `get` will be removed in Node 0.13+\nBuffer.prototype.get = function (offset) {\n  console.log('.get() is deprecated. Access using array indexes instead.')\n  return this.readUInt8(offset)\n}\n\n// `set` will be removed in Node 0.13+\nBuffer.prototype.set = function (v, offset) {\n  console.log('.set() is deprecated. Access using array indexes instead.')\n  return this.writeUInt8(v, offset)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new Error('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; i++) {\n    var byte = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(byte)) throw new Error('Invalid hex string')\n    buf[offset + i] = byte\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  var charsWritten = blitBuffer(utf8ToBytes(string), buf, offset, length)\n  return charsWritten\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  var charsWritten = blitBuffer(asciiToBytes(string), buf, offset, length)\n  return charsWritten\n}\n\nfunction binaryWrite (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  var charsWritten = blitBuffer(base64ToBytes(string), buf, offset, length)\n  return charsWritten\n}\n\nfunction utf16leWrite (buf, string, offset, length) {\n  var charsWritten = blitBuffer(utf16leToBytes(string), buf, offset, length, 2)\n  return charsWritten\n}\n\nBuffer.prototype.write = function (string, offset, length, encoding) {\n  // Support both (string, offset, length, encoding)\n  // and the legacy (string, encoding, offset, length)\n  if (isFinite(offset)) {\n    if (!isFinite(length)) {\n      encoding = length\n      length = undefined\n    }\n  } else {  // legacy\n    var swap = encoding\n    encoding = offset\n    offset = length\n    length = swap\n  }\n\n  offset = Number(offset) || 0\n  var remaining = this.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n  encoding = String(encoding || 'utf8').toLowerCase()\n\n  var ret\n  switch (encoding) {\n    case 'hex':\n      ret = hexWrite(this, string, offset, length)\n      break\n    case 'utf8':\n    case 'utf-8':\n      ret = utf8Write(this, string, offset, length)\n      break\n    case 'ascii':\n      ret = asciiWrite(this, string, offset, length)\n      break\n    case 'binary':\n      ret = binaryWrite(this, string, offset, length)\n      break\n    case 'base64':\n      ret = base64Write(this, string, offset, length)\n      break\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      ret = utf16leWrite(this, string, offset, length)\n      break\n    default:\n      throw new TypeError('Unknown encoding: ' + encoding)\n  }\n  return ret\n}\n\nBuffer.prototype.toJSON = function () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  var res = ''\n  var tmp = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    if (buf[i] <= 0x7F) {\n      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])\n      tmp = ''\n    } else {\n      tmp += '%' + buf[i].toString(16)\n    }\n  }\n\n  return res + decodeUtf8Char(tmp)\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction binarySlice (buf, start, end) {\n  return asciiSlice(buf, start, end)\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; i++) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len;\n    if (start < 0)\n      start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0)\n      end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start)\n    end = start\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    return Buffer._augment(this.subarray(start, end))\n  } else {\n    var sliceLen = end - start\n    var newBuf = new Buffer(sliceLen, undefined, true)\n    for (var i = 0; i < sliceLen; i++) {\n      newBuf[i] = this[i + start]\n    }\n    return newBuf\n  }\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0)\n    throw new RangeError('offset is not uint')\n  if (offset + ext > length)\n    throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUInt8 = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n      ((this[offset + 1] << 16) |\n      (this[offset + 2] << 8) |\n      this[offset + 3])\n}\n\nBuffer.prototype.readInt8 = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80))\n    return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16) |\n      (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n      (this[offset + 1] << 16) |\n      (this[offset + 2] << 8) |\n      (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')\n  if (value > max || value < min) throw new TypeError('value is out of bounds')\n  if (offset + ext > buf.length) throw new TypeError('index out of range')\n}\n\nBuffer.prototype.writeUInt8 = function (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert)\n    checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = value\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert)\n    checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value\n    this[offset + 1] = (value >>> 8)\n  } else objectWriteUInt16(this, value, offset, true)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert)\n    checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = value\n  } else objectWriteUInt16(this, value, offset, false)\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert)\n    checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = value\n  } else objectWriteUInt32(this, value, offset, true)\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert)\n    checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = value\n  } else objectWriteUInt32(this, value, offset, false)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt8 = function (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert)\n    checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = value\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert)\n    checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value\n    this[offset + 1] = (value >>> 8)\n  } else objectWriteUInt16(this, value, offset, true)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert)\n    checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = value\n  } else objectWriteUInt16(this, value, offset, false)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert)\n    checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else objectWriteUInt32(this, value, offset, true)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert)\n    checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = value\n  } else objectWriteUInt32(this, value, offset, false)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (value > max || value < min) throw new TypeError('value is out of bounds')\n  if (offset + ext > buf.length) throw new TypeError('index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert)\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert)\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function (target, target_start, start, end) {\n  var source = this\n\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (!target_start) target_start = 0\n\n  // Copy 0 bytes; we're done\n  if (end === start) return\n  if (target.length === 0 || source.length === 0) return\n\n  // Fatal error conditions\n  if (end < start) throw new TypeError('sourceEnd < sourceStart')\n  if (target_start < 0 || target_start >= target.length)\n    throw new TypeError('targetStart out of bounds')\n  if (start < 0 || start >= source.length) throw new TypeError('sourceStart out of bounds')\n  if (end < 0 || end > source.length) throw new TypeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length)\n    end = this.length\n  if (target.length - target_start < end - start)\n    end = target.length - target_start + start\n\n  var len = end - start\n\n  if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < len; i++) {\n      target[i + target_start] = this[i + start]\n    }\n  } else {\n    target._set(this.subarray(start, start + len), target_start)\n  }\n}\n\n// fill(value, start=0, end=buffer.length)\nBuffer.prototype.fill = function (value, start, end) {\n  if (!value) value = 0\n  if (!start) start = 0\n  if (!end) end = this.length\n\n  if (end < start) throw new TypeError('end < start')\n\n  // Fill 0 bytes; we're done\n  if (end === start) return\n  if (this.length === 0) return\n\n  if (start < 0 || start >= this.length) throw new TypeError('start out of bounds')\n  if (end < 0 || end > this.length) throw new TypeError('end out of bounds')\n\n  var i\n  if (typeof value === 'number') {\n    for (i = start; i < end; i++) {\n      this[i] = value\n    }\n  } else {\n    var bytes = utf8ToBytes(value.toString())\n    var len = bytes.length\n    for (i = start; i < end; i++) {\n      this[i] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n/**\n * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.\n * Added in Node 0.12. Only available in browsers that support ArrayBuffer.\n */\nBuffer.prototype.toArrayBuffer = function () {\n  if (typeof Uint8Array !== 'undefined') {\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n      return (new Buffer(this)).buffer\n    } else {\n      var buf = new Uint8Array(this.length)\n      for (var i = 0, len = buf.length; i < len; i += 1) {\n        buf[i] = this[i]\n      }\n      return buf.buffer\n    }\n  } else {\n    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')\n  }\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar BP = Buffer.prototype\n\n/**\n * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods\n */\nBuffer._augment = function (arr) {\n  arr.constructor = Buffer\n  arr._isBuffer = true\n\n  // save reference to original Uint8Array get/set methods before overwriting\n  arr._get = arr.get\n  arr._set = arr.set\n\n  // deprecated, will be removed in node 0.13+\n  arr.get = BP.get\n  arr.set = BP.set\n\n  arr.write = BP.write\n  arr.toString = BP.toString\n  arr.toLocaleString = BP.toString\n  arr.toJSON = BP.toJSON\n  arr.equals = BP.equals\n  arr.compare = BP.compare\n  arr.copy = BP.copy\n  arr.slice = BP.slice\n  arr.readUInt8 = BP.readUInt8\n  arr.readUInt16LE = BP.readUInt16LE\n  arr.readUInt16BE = BP.readUInt16BE\n  arr.readUInt32LE = BP.readUInt32LE\n  arr.readUInt32BE = BP.readUInt32BE\n  arr.readInt8 = BP.readInt8\n  arr.readInt16LE = BP.readInt16LE\n  arr.readInt16BE = BP.readInt16BE\n  arr.readInt32LE = BP.readInt32LE\n  arr.readInt32BE = BP.readInt32BE\n  arr.readFloatLE = BP.readFloatLE\n  arr.readFloatBE = BP.readFloatBE\n  arr.readDoubleLE = BP.readDoubleLE\n  arr.readDoubleBE = BP.readDoubleBE\n  arr.writeUInt8 = BP.writeUInt8\n  arr.writeUInt16LE = BP.writeUInt16LE\n  arr.writeUInt16BE = BP.writeUInt16BE\n  arr.writeUInt32LE = BP.writeUInt32LE\n  arr.writeUInt32BE = BP.writeUInt32BE\n  arr.writeInt8 = BP.writeInt8\n  arr.writeInt16LE = BP.writeInt16LE\n  arr.writeInt16BE = BP.writeInt16BE\n  arr.writeInt32LE = BP.writeInt32LE\n  arr.writeInt32BE = BP.writeInt32BE\n  arr.writeFloatLE = BP.writeFloatLE\n  arr.writeFloatBE = BP.writeFloatBE\n  arr.writeDoubleLE = BP.writeDoubleLE\n  arr.writeDoubleBE = BP.writeDoubleBE\n  arr.fill = BP.fill\n  arr.inspect = BP.inspect\n  arr.toArrayBuffer = BP.toArrayBuffer\n\n  return arr\n}\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-z]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction isArrayish (subject) {\n  return isArray(subject) || Buffer.isBuffer(subject) ||\n      subject && typeof subject === 'object' &&\n      typeof subject.length === 'number'\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    var b = str.charCodeAt(i)\n    if (b <= 0x7F) {\n      byteArray.push(b)\n    } else {\n      var start = i\n      if (b >= 0xD800 && b <= 0xDFFF) i++\n      var h = encodeURIComponent(str.slice(start, i+1)).substr(1).split('%')\n      for (var j = 0; j < h.length; j++) {\n        byteArray.push(parseInt(h[j], 16))\n      }\n    }\n  }\n  return byteArray\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(str)\n}\n\nfunction blitBuffer (src, dst, offset, length, unitSize) {\n  if (unitSize) length -= length % unitSize;\n  for (var i = 0; i < length; i++) {\n    if ((i + offset >= dst.length) || (i >= src.length))\n      break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction decodeUtf8Char (str) {\n  try {\n    return decodeURIComponent(str)\n  } catch (err) {\n    return String.fromCharCode(0xFFFD) // UTF 8 invalid char\n  }\n}\n\n},{\"base64-js\":17,\"ieee754\":18,\"is-array\":19}],17:[function(require,module,exports){\nvar lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n;(function (exports) {\n\t'use strict';\n\n  var Arr = (typeof Uint8Array !== 'undefined')\n    ? Uint8Array\n    : Array\n\n\tvar PLUS   = '+'.charCodeAt(0)\n\tvar SLASH  = '/'.charCodeAt(0)\n\tvar NUMBER = '0'.charCodeAt(0)\n\tvar LOWER  = 'a'.charCodeAt(0)\n\tvar UPPER  = 'A'.charCodeAt(0)\n\n\tfunction decode (elt) {\n\t\tvar code = elt.charCodeAt(0)\n\t\tif (code === PLUS)\n\t\t\treturn 62 // '+'\n\t\tif (code === SLASH)\n\t\t\treturn 63 // '/'\n\t\tif (code < NUMBER)\n\t\t\treturn -1 //no match\n\t\tif (code < NUMBER + 10)\n\t\t\treturn code - NUMBER + 26 + 26\n\t\tif (code < UPPER + 26)\n\t\t\treturn code - UPPER\n\t\tif (code < LOWER + 26)\n\t\t\treturn code - LOWER + 26\n\t}\n\n\tfunction b64ToByteArray (b64) {\n\t\tvar i, j, l, tmp, placeHolders, arr\n\n\t\tif (b64.length % 4 > 0) {\n\t\t\tthrow new Error('Invalid string. Length must be a multiple of 4')\n\t\t}\n\n\t\t// the number of equal signs (place holders)\n\t\t// if there are two placeholders, than the two characters before it\n\t\t// represent one byte\n\t\t// if there is only one, then the three characters before it represent 2 bytes\n\t\t// this is just a cheap hack to not do indexOf twice\n\t\tvar len = b64.length\n\t\tplaceHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0\n\n\t\t// base64 is 4/3 + up to two characters of the original data\n\t\tarr = new Arr(b64.length * 3 / 4 - placeHolders)\n\n\t\t// if there are placeholders, only get up to the last complete 4 chars\n\t\tl = placeHolders > 0 ? b64.length - 4 : b64.length\n\n\t\tvar L = 0\n\n\t\tfunction push (v) {\n\t\t\tarr[L++] = v\n\t\t}\n\n\t\tfor (i = 0, j = 0; i < l; i += 4, j += 3) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))\n\t\t\tpush((tmp & 0xFF0000) >> 16)\n\t\t\tpush((tmp & 0xFF00) >> 8)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\tif (placeHolders === 2) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)\n\t\t\tpush(tmp & 0xFF)\n\t\t} else if (placeHolders === 1) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)\n\t\t\tpush((tmp >> 8) & 0xFF)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\treturn arr\n\t}\n\n\tfunction uint8ToBase64 (uint8) {\n\t\tvar i,\n\t\t\textraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes\n\t\t\toutput = \"\",\n\t\t\ttemp, length\n\n\t\tfunction encode (num) {\n\t\t\treturn lookup.charAt(num)\n\t\t}\n\n\t\tfunction tripletToBase64 (num) {\n\t\t\treturn encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)\n\t\t}\n\n\t\t// go through the array every three bytes, we'll deal with trailing stuff later\n\t\tfor (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {\n\t\t\ttemp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n\t\t\toutput += tripletToBase64(temp)\n\t\t}\n\n\t\t// pad the end with zeros, but make sure to not forget the extra bytes\n\t\tswitch (extraBytes) {\n\t\t\tcase 1:\n\t\t\t\ttemp = uint8[uint8.length - 1]\n\t\t\t\toutput += encode(temp >> 2)\n\t\t\t\toutput += encode((temp << 4) & 0x3F)\n\t\t\t\toutput += '=='\n\t\t\t\tbreak\n\t\t\tcase 2:\n\t\t\t\ttemp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])\n\t\t\t\toutput += encode(temp >> 10)\n\t\t\t\toutput += encode((temp >> 4) & 0x3F)\n\t\t\t\toutput += encode((temp << 2) & 0x3F)\n\t\t\t\toutput += '='\n\t\t\t\tbreak\n\t\t}\n\n\t\treturn output\n\t}\n\n\texports.toByteArray = b64ToByteArray\n\texports.fromByteArray = uint8ToBase64\n}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))\n\n},{}],18:[function(require,module,exports){\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n},{}],19:[function(require,module,exports){\n\n/**\n * isArray\n */\n\nvar isArray = Array.isArray;\n\n/**\n * toString\n */\n\nvar str = Object.prototype.toString;\n\n/**\n * Whether or not the given `val`\n * is an array.\n *\n * example:\n *\n *        isArray([]);\n *        // > true\n *        isArray(arguments);\n *        // > false\n *        isArray('');\n *        // > false\n *\n * @param {mixed} val\n * @return {bool}\n */\n\nmodule.exports = isArray || function (val) {\n  return !! val && '[object Array]' == str.call(val);\n};\n\n},{}],20:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      }\n      throw TypeError('Uncaught, unspecified \"error\" event.');\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        len = arguments.length;\n        args = new Array(len - 1);\n        for (i = 1; i < len; i++)\n          args[i - 1] = arguments[i];\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    len = arguments.length;\n    args = new Array(len - 1);\n    for (i = 1; i < len; i++)\n      args[i - 1] = arguments[i];\n\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    var m;\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  var ret;\n  if (!emitter._events || !emitter._events[type])\n    ret = 0;\n  else if (isFunction(emitter._events[type]))\n    ret = 1;\n  else\n    ret = emitter._events[type].length;\n  return ret;\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n},{}],21:[function(require,module,exports){\nvar http = module.exports;\nvar EventEmitter = require('events').EventEmitter;\nvar Request = require('./lib/request');\nvar url = require('url')\n\nhttp.request = function (params, cb) {\n    if (typeof params === 'string') {\n        params = url.parse(params)\n    }\n    if (!params) params = {};\n    if (!params.host && !params.port) {\n        params.port = parseInt(window.location.port, 10);\n    }\n    if (!params.host && params.hostname) {\n        params.host = params.hostname;\n    }\n\n    if (!params.protocol) {\n        if (params.scheme) {\n            params.protocol = params.scheme + ':';\n        } else {\n            params.protocol = window.location.protocol;\n        }\n    }\n\n    if (!params.host) {\n        params.host = window.location.hostname || window.location.host;\n    }\n    if (/:/.test(params.host)) {\n        if (!params.port) {\n            params.port = params.host.split(':')[1];\n        }\n        params.host = params.host.split(':')[0];\n    }\n    if (!params.port) params.port = params.protocol == 'https:' ? 443 : 80;\n    \n    var req = new Request(new xhrHttp, params);\n    if (cb) req.on('response', cb);\n    return req;\n};\n\nhttp.get = function (params, cb) {\n    params.method = 'GET';\n    var req = http.request(params, cb);\n    req.end();\n    return req;\n};\n\nhttp.Agent = function () {};\nhttp.Agent.defaultMaxSockets = 4;\n\nvar xhrHttp = (function () {\n    if (typeof window === 'undefined') {\n        throw new Error('no window object present');\n    }\n    else if (window.XMLHttpRequest) {\n        return window.XMLHttpRequest;\n    }\n    else if (window.ActiveXObject) {\n        var axs = [\n            'Msxml2.XMLHTTP.6.0',\n            'Msxml2.XMLHTTP.3.0',\n            'Microsoft.XMLHTTP'\n        ];\n        for (var i = 0; i < axs.length; i++) {\n            try {\n                var ax = new(window.ActiveXObject)(axs[i]);\n                return function () {\n                    if (ax) {\n                        var ax_ = ax;\n                        ax = null;\n                        return ax_;\n                    }\n                    else {\n                        return new(window.ActiveXObject)(axs[i]);\n                    }\n                };\n            }\n            catch (e) {}\n        }\n        throw new Error('ajax not supported in this browser')\n    }\n    else {\n        throw new Error('ajax not supported in this browser');\n    }\n})();\n\nhttp.STATUS_CODES = {\n    100 : 'Continue',\n    101 : 'Switching Protocols',\n    102 : 'Processing',                 // RFC 2518, obsoleted by RFC 4918\n    200 : 'OK',\n    201 : 'Created',\n    202 : 'Accepted',\n    203 : 'Non-Authoritative Information',\n    204 : 'No Content',\n    205 : 'Reset Content',\n    206 : 'Partial Content',\n    207 : 'Multi-Status',               // RFC 4918\n    300 : 'Multiple Choices',\n    301 : 'Moved Permanently',\n    302 : 'Moved Temporarily',\n    303 : 'See Other',\n    304 : 'Not Modified',\n    305 : 'Use Proxy',\n    307 : 'Temporary Redirect',\n    400 : 'Bad Request',\n    401 : 'Unauthorized',\n    402 : 'Payment Required',\n    403 : 'Forbidden',\n    404 : 'Not Found',\n    405 : 'Method Not Allowed',\n    406 : 'Not Acceptable',\n    407 : 'Proxy Authentication Required',\n    408 : 'Request Time-out',\n    409 : 'Conflict',\n    410 : 'Gone',\n    411 : 'Length Required',\n    412 : 'Precondition Failed',\n    413 : 'Request Entity Too Large',\n    414 : 'Request-URI Too Large',\n    415 : 'Unsupported Media Type',\n    416 : 'Requested Range Not Satisfiable',\n    417 : 'Expectation Failed',\n    418 : 'I\\'m a teapot',              // RFC 2324\n    422 : 'Unprocessable Entity',       // RFC 4918\n    423 : 'Locked',                     // RFC 4918\n    424 : 'Failed Dependency',          // RFC 4918\n    425 : 'Unordered Collection',       // RFC 4918\n    426 : 'Upgrade Required',           // RFC 2817\n    428 : 'Precondition Required',      // RFC 6585\n    429 : 'Too Many Requests',          // RFC 6585\n    431 : 'Request Header Fields Too Large',// RFC 6585\n    500 : 'Internal Server Error',\n    501 : 'Not Implemented',\n    502 : 'Bad Gateway',\n    503 : 'Service Unavailable',\n    504 : 'Gateway Time-out',\n    505 : 'HTTP Version Not Supported',\n    506 : 'Variant Also Negotiates',    // RFC 2295\n    507 : 'Insufficient Storage',       // RFC 4918\n    509 : 'Bandwidth Limit Exceeded',\n    510 : 'Not Extended',               // RFC 2774\n    511 : 'Network Authentication Required' // RFC 6585\n};\n},{\"./lib/request\":22,\"events\":20,\"url\":47}],22:[function(require,module,exports){\nvar Stream = require('stream');\nvar Response = require('./response');\nvar Base64 = require('Base64');\nvar inherits = require('inherits');\n\nvar Request = module.exports = function (xhr, params) {\n    var self = this;\n    self.writable = true;\n    self.xhr = xhr;\n    self.body = [];\n    \n    self.uri = (params.protocol || 'http:') + '//'\n        + params.host\n        + (params.port ? ':' + params.port : '')\n        + (params.path || '/')\n    ;\n    \n    if (typeof params.withCredentials === 'undefined') {\n        params.withCredentials = true;\n    }\n\n    try { xhr.withCredentials = params.withCredentials }\n    catch (e) {}\n    \n    if (params.responseType) try { xhr.responseType = params.responseType }\n    catch (e) {}\n    \n    xhr.open(\n        params.method || 'GET',\n        self.uri,\n        true\n    );\n\n    xhr.onerror = function(event) {\n        self.emit('error', new Error('Network error'));\n    };\n\n    self._headers = {};\n    \n    if (params.headers) {\n        var keys = objectKeys(params.headers);\n        for (var i = 0; i < keys.length; i++) {\n            var key = keys[i];\n            if (!self.isSafeRequestHeader(key)) continue;\n            var value = params.headers[key];\n            self.setHeader(key, value);\n        }\n    }\n    \n    if (params.auth) {\n        //basic auth\n        this.setHeader('Authorization', 'Basic ' + Base64.btoa(params.auth));\n    }\n\n    var res = new Response;\n    res.on('close', function () {\n        self.emit('close');\n    });\n    \n    res.on('ready', function () {\n        self.emit('response', res);\n    });\n\n    res.on('error', function (err) {\n        self.emit('error', err);\n    });\n    \n    xhr.onreadystatechange = function () {\n        // Fix for IE9 bug\n        // SCRIPT575: Could not complete the operation due to error c00c023f\n        // It happens when a request is aborted, calling the success callback anyway with readyState === 4\n        if (xhr.__aborted) return;\n        res.handle(xhr);\n    };\n};\n\ninherits(Request, Stream);\n\nRequest.prototype.setHeader = function (key, value) {\n    this._headers[key.toLowerCase()] = value\n};\n\nRequest.prototype.getHeader = function (key) {\n    return this._headers[key.toLowerCase()]\n};\n\nRequest.prototype.removeHeader = function (key) {\n    delete this._headers[key.toLowerCase()]\n};\n\nRequest.prototype.write = function (s) {\n    this.body.push(s);\n};\n\nRequest.prototype.destroy = function (s) {\n    this.xhr.__aborted = true;\n    this.xhr.abort();\n    this.emit('close');\n};\n\nRequest.prototype.end = function (s) {\n    if (s !== undefined) this.body.push(s);\n\n    var keys = objectKeys(this._headers);\n    for (var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        var value = this._headers[key];\n        if (isArray(value)) {\n            for (var j = 0; j < value.length; j++) {\n                this.xhr.setRequestHeader(key, value[j]);\n            }\n        }\n        else this.xhr.setRequestHeader(key, value)\n    }\n\n    if (this.body.length === 0) {\n        this.xhr.send('');\n    }\n    else if (typeof this.body[0] === 'string') {\n        this.xhr.send(this.body.join(''));\n    }\n    else if (isArray(this.body[0])) {\n        var body = [];\n        for (var i = 0; i < this.body.length; i++) {\n            body.push.apply(body, this.body[i]);\n        }\n        this.xhr.send(body);\n    }\n    else if (/Array/.test(Object.prototype.toString.call(this.body[0]))) {\n        var len = 0;\n        for (var i = 0; i < this.body.length; i++) {\n            len += this.body[i].length;\n        }\n        var body = new(this.body[0].constructor)(len);\n        var k = 0;\n        \n        for (var i = 0; i < this.body.length; i++) {\n            var b = this.body[i];\n            for (var j = 0; j < b.length; j++) {\n                body[k++] = b[j];\n            }\n        }\n        this.xhr.send(body);\n    }\n    else if (isXHR2Compatible(this.body[0])) {\n        this.xhr.send(this.body[0]);\n    }\n    else {\n        var body = '';\n        for (var i = 0; i < this.body.length; i++) {\n            body += this.body[i].toString();\n        }\n        this.xhr.send(body);\n    }\n};\n\n// Taken from http://dxr.mozilla.org/mozilla/mozilla-central/content/base/src/nsXMLHttpRequest.cpp.html\nRequest.unsafeHeaders = [\n    \"accept-charset\",\n    \"accept-encoding\",\n    \"access-control-request-headers\",\n    \"access-control-request-method\",\n    \"connection\",\n    \"content-length\",\n    \"cookie\",\n    \"cookie2\",\n    \"content-transfer-encoding\",\n    \"date\",\n    \"expect\",\n    \"host\",\n    \"keep-alive\",\n    \"origin\",\n    \"referer\",\n    \"te\",\n    \"trailer\",\n    \"transfer-encoding\",\n    \"upgrade\",\n    \"user-agent\",\n    \"via\"\n];\n\nRequest.prototype.isSafeRequestHeader = function (headerName) {\n    if (!headerName) return false;\n    return indexOf(Request.unsafeHeaders, headerName.toLowerCase()) === -1;\n};\n\nvar objectKeys = Object.keys || function (obj) {\n    var keys = [];\n    for (var key in obj) keys.push(key);\n    return keys;\n};\n\nvar isArray = Array.isArray || function (xs) {\n    return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nvar indexOf = function (xs, x) {\n    if (xs.indexOf) return xs.indexOf(x);\n    for (var i = 0; i < xs.length; i++) {\n        if (xs[i] === x) return i;\n    }\n    return -1;\n};\n\nvar isXHR2Compatible = function (obj) {\n    if (typeof Blob !== 'undefined' && obj instanceof Blob) return true;\n    if (typeof ArrayBuffer !== 'undefined' && obj instanceof ArrayBuffer) return true;\n    if (typeof FormData !== 'undefined' && obj instanceof FormData) return true;\n};\n\n},{\"./response\":23,\"Base64\":24,\"inherits\":26,\"stream\":45}],23:[function(require,module,exports){\nvar Stream = require('stream');\nvar util = require('util');\n\nvar Response = module.exports = function (res) {\n    this.offset = 0;\n    this.readable = true;\n};\n\nutil.inherits(Response, Stream);\n\nvar capable = {\n    streaming : true,\n    status2 : true\n};\n\nfunction parseHeaders (res) {\n    var lines = res.getAllResponseHeaders().split(/\\r?\\n/);\n    var headers = {};\n    for (var i = 0; i < lines.length; i++) {\n        var line = lines[i];\n        if (line === '') continue;\n        \n        var m = line.match(/^([^:]+):\\s*(.*)/);\n        if (m) {\n            var key = m[1].toLowerCase(), value = m[2];\n            \n            if (headers[key] !== undefined) {\n            \n                if (isArray(headers[key])) {\n                    headers[key].push(value);\n                }\n                else {\n                    headers[key] = [ headers[key], value ];\n                }\n            }\n            else {\n                headers[key] = value;\n            }\n        }\n        else {\n            headers[line] = true;\n        }\n    }\n    return headers;\n}\n\nResponse.prototype.getResponse = function (xhr) {\n    var respType = String(xhr.responseType).toLowerCase();\n    if (respType === 'blob') return xhr.responseBlob || xhr.response;\n    if (respType === 'arraybuffer') return xhr.response;\n    return xhr.responseText;\n}\n\nResponse.prototype.getHeader = function (key) {\n    return this.headers[key.toLowerCase()];\n};\n\nResponse.prototype.handle = function (res) {\n    if (res.readyState === 2 && capable.status2) {\n        try {\n            this.statusCode = res.status;\n            this.headers = parseHeaders(res);\n        }\n        catch (err) {\n            capable.status2 = false;\n        }\n        \n        if (capable.status2) {\n            this.emit('ready');\n        }\n    }\n    else if (capable.streaming && res.readyState === 3) {\n        try {\n            if (!this.statusCode) {\n                this.statusCode = res.status;\n                this.headers = parseHeaders(res);\n                this.emit('ready');\n            }\n        }\n        catch (err) {}\n        \n        try {\n            this._emitData(res);\n        }\n        catch (err) {\n            capable.streaming = false;\n        }\n    }\n    else if (res.readyState === 4) {\n        if (!this.statusCode) {\n            this.statusCode = res.status;\n            this.emit('ready');\n        }\n        this._emitData(res);\n        \n        if (res.error) {\n            this.emit('error', this.getResponse(res));\n        }\n        else this.emit('end');\n        \n        this.emit('close');\n    }\n};\n\nResponse.prototype._emitData = function (res) {\n    var respBody = this.getResponse(res);\n    if (respBody.toString().match(/ArrayBuffer/)) {\n        this.emit('data', new Uint8Array(respBody, this.offset));\n        this.offset = respBody.byteLength;\n        return;\n    }\n    if (respBody.length > this.offset) {\n        this.emit('data', respBody.slice(this.offset));\n        this.offset = respBody.length;\n    }\n};\n\nvar isArray = Array.isArray || function (xs) {\n    return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\n},{\"stream\":45,\"util\":49}],24:[function(require,module,exports){\n;(function () {\n\n  var object = typeof exports != 'undefined' ? exports : this; // #8: web workers\n  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n  function InvalidCharacterError(message) {\n    this.message = message;\n  }\n  InvalidCharacterError.prototype = new Error;\n  InvalidCharacterError.prototype.name = 'InvalidCharacterError';\n\n  // encoder\n  // [https://gist.github.com/999166] by [https://github.com/nignag]\n  object.btoa || (\n  object.btoa = function (input) {\n    for (\n      // initialize result and counter\n      var block, charCode, idx = 0, map = chars, output = '';\n      // if the next input index does not exist:\n      //   change the mapping table to \"=\"\n      //   check if d has no fractional digits\n      input.charAt(idx | 0) || (map = '=', idx % 1);\n      // \"8 - idx % 1 * 8\" generates the sequence 2, 4, 6, 8\n      output += map.charAt(63 & block >> 8 - idx % 1 * 8)\n    ) {\n      charCode = input.charCodeAt(idx += 3/4);\n      if (charCode > 0xFF) {\n        throw new InvalidCharacterError(\"'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\");\n      }\n      block = block << 8 | charCode;\n    }\n    return output;\n  });\n\n  // decoder\n  // [https://gist.github.com/1020396] by [https://github.com/atk]\n  object.atob || (\n  object.atob = function (input) {\n    input = input.replace(/=+$/, '');\n    if (input.length % 4 == 1) {\n      throw new InvalidCharacterError(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n    }\n    for (\n      // initialize result and counters\n      var bc = 0, bs, buffer, idx = 0, output = '';\n      // get next character\n      buffer = input.charAt(idx++);\n      // character found in table? initialize bit storage and add its ascii value;\n      ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n        // and if not first of each 4 characters,\n        // convert the first 8 bits to one ascii character\n        bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0\n    ) {\n      // try to find character in table (0-63, not found => -1)\n      buffer = chars.indexOf(buffer);\n    }\n    return output;\n  });\n\n}());\n\n},{}],25:[function(require,module,exports){\nvar http = require('http');\n\nvar https = module.exports;\n\nfor (var key in http) {\n    if (http.hasOwnProperty(key)) https[key] = http[key];\n};\n\nhttps.request = function (params, cb) {\n    if (!params) params = {};\n    params.scheme = 'https';\n    params.protocol = 'https:';\n    return http.request.call(this, params, cb);\n}\n\n},{\"http\":21}],26:[function(require,module,exports){\nif (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n},{}],27:[function(require,module,exports){\n/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n\n},{}],28:[function(require,module,exports){\nmodule.exports = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n\n},{}],29:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\n\nprocess.nextTick = (function () {\n    var canSetImmediate = typeof window !== 'undefined'\n    && window.setImmediate;\n    var canMutationObserver = typeof window !== 'undefined'\n    && window.MutationObserver;\n    var canPost = typeof window !== 'undefined'\n    && window.postMessage && window.addEventListener\n    ;\n\n    if (canSetImmediate) {\n        return function (f) { return window.setImmediate(f) };\n    }\n\n    var queue = [];\n\n    if (canMutationObserver) {\n        var hiddenDiv = document.createElement(\"div\");\n        var observer = new MutationObserver(function () {\n            var queueList = queue.slice();\n            queue.length = 0;\n            queueList.forEach(function (fn) {\n                fn();\n            });\n        });\n\n        observer.observe(hiddenDiv, { attributes: true });\n\n        return function nextTick(fn) {\n            if (!queue.length) {\n                hiddenDiv.setAttribute('yes', 'no');\n            }\n            queue.push(fn);\n        };\n    }\n\n    if (canPost) {\n        window.addEventListener('message', function (ev) {\n            var source = ev.source;\n            if ((source === window || source === null) && ev.data === 'process-tick') {\n                ev.stopPropagation();\n                if (queue.length > 0) {\n                    var fn = queue.shift();\n                    fn();\n                }\n            }\n        }, true);\n\n        return function nextTick(fn) {\n            queue.push(fn);\n            window.postMessage('process-tick', '*');\n        };\n    }\n\n    return function nextTick(fn) {\n        setTimeout(fn, 0);\n    };\n})();\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\n\n},{}],30:[function(require,module,exports){\n(function (global){\n/*! http://mths.be/punycode v1.2.4 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\tmodule.exports == freeExports && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^ -~]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /\\x2E|\\u3002|\\uFF0E|\\uFF61/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\twhile (length--) {\n\t\t\tarray[length] = fn(array[length]);\n\t\t}\n\t\treturn array;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings.\n\t * @private\n\t * @param {String} domain The domain name.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\treturn map(string.split(regexSeparators), fn).join('.');\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <http://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * http://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols to a Punycode string of ASCII-only\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name to Unicode. Only the\n\t * Punycoded parts of the domain name will be converted, i.e. it doesn't\n\t * matter if you call it on a string that has already been converted to\n\t * Unicode.\n\t * @memberOf punycode\n\t * @param {String} domain The Punycode domain name to convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(domain) {\n\t\treturn mapDomain(domain, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name to Punycode. Only the\n\t * non-ASCII parts of the domain name will be converted, i.e. it doesn't\n\t * matter if you call it with a domain that's already in ASCII.\n\t * @memberOf punycode\n\t * @param {String} domain The domain name to convert, as a Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name.\n\t */\n\tfunction toASCII(domain) {\n\t\treturn mapDomain(domain, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.2.4',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <http://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && !freeExports.nodeType) {\n\t\tif (freeModule) { // in Node.js or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else { // in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n},{}],31:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\n},{}],32:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return map(objectKeys(obj), function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (isArray(obj[k])) {\n        return map(obj[k], function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nfunction map (xs, f) {\n  if (xs.map) return xs.map(f);\n  var res = [];\n  for (var i = 0; i < xs.length; i++) {\n    res.push(f(xs[i], i));\n  }\n  return res;\n}\n\nvar objectKeys = Object.keys || function (obj) {\n  var res = [];\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);\n  }\n  return res;\n};\n\n},{}],33:[function(require,module,exports){\n'use strict';\n\nexports.decode = exports.parse = require('./decode');\nexports.encode = exports.stringify = require('./encode');\n\n},{\"./decode\":31,\"./encode\":32}],34:[function(require,module,exports){\nmodule.exports = require(\"./lib/_stream_duplex.js\")\n\n},{\"./lib/_stream_duplex.js\":35}],35:[function(require,module,exports){\n(function (process){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\nmodule.exports = Duplex;\n\n/*<replacement>*/\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n/*</replacement>*/\n\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Readable = require('./_stream_readable');\nvar Writable = require('./_stream_writable');\n\nutil.inherits(Duplex, Readable);\n\nforEach(objectKeys(Writable.prototype), function(method) {\n  if (!Duplex.prototype[method])\n    Duplex.prototype[method] = Writable.prototype[method];\n});\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex))\n    return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false)\n    this.readable = false;\n\n  if (options && options.writable === false)\n    this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false)\n    this.allowHalfOpen = false;\n\n  this.once('end', onend);\n}\n\n// the no-half-open enforcer\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended)\n    return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  process.nextTick(this.end.bind(this));\n}\n\nfunction forEach (xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fZHVwbGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBhIGR1cGxleCBzdHJlYW0gaXMganVzdCBhIHN0cmVhbSB0aGF0IGlzIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLlxuLy8gU2luY2UgSlMgZG9lc24ndCBoYXZlIG11bHRpcGxlIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UsIHRoaXMgY2xhc3Ncbi8vIHByb3RvdHlwYWxseSBpbmhlcml0cyBmcm9tIFJlYWRhYmxlLCBhbmQgdGhlbiBwYXJhc2l0aWNhbGx5IGZyb21cbi8vIFdyaXRhYmxlLlxuXG5tb2R1bGUuZXhwb3J0cyA9IER1cGxleDtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICB2YXIga2V5cyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSBrZXlzLnB1c2goa2V5KTtcbiAgcmV0dXJuIGtleXM7XG59XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBSZWFkYWJsZSA9IHJlcXVpcmUoJy4vX3N0cmVhbV9yZWFkYWJsZScpO1xudmFyIFdyaXRhYmxlID0gcmVxdWlyZSgnLi9fc3RyZWFtX3dyaXRhYmxlJyk7XG5cbnV0aWwuaW5oZXJpdHMoRHVwbGV4LCBSZWFkYWJsZSk7XG5cbmZvckVhY2gob2JqZWN0S2V5cyhXcml0YWJsZS5wcm90b3R5cGUpLCBmdW5jdGlvbihtZXRob2QpIHtcbiAgaWYgKCFEdXBsZXgucHJvdG90eXBlW21ldGhvZF0pXG4gICAgRHVwbGV4LnByb3RvdHlwZVttZXRob2RdID0gV3JpdGFibGUucHJvdG90eXBlW21ldGhvZF07XG59KTtcblxuZnVuY3Rpb24gRHVwbGV4KG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpXG4gICAgcmV0dXJuIG5ldyBEdXBsZXgob3B0aW9ucyk7XG5cbiAgUmVhZGFibGUuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgV3JpdGFibGUuY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnJlYWRhYmxlID09PSBmYWxzZSlcbiAgICB0aGlzLnJlYWRhYmxlID0gZmFsc2U7XG5cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy53cml0YWJsZSA9PT0gZmFsc2UpXG4gICAgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuXG4gIHRoaXMuYWxsb3dIYWxmT3BlbiA9IHRydWU7XG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuYWxsb3dIYWxmT3BlbiA9PT0gZmFsc2UpXG4gICAgdGhpcy5hbGxvd0hhbGZPcGVuID0gZmFsc2U7XG5cbiAgdGhpcy5vbmNlKCdlbmQnLCBvbmVuZCk7XG59XG5cbi8vIHRoZSBuby1oYWxmLW9wZW4gZW5mb3JjZXJcbmZ1bmN0aW9uIG9uZW5kKCkge1xuICAvLyBpZiB3ZSBhbGxvdyBoYWxmLW9wZW4gc3RhdGUsIG9yIGlmIHRoZSB3cml0YWJsZSBzaWRlIGVuZGVkLFxuICAvLyB0aGVuIHdlJ3JlIG9rLlxuICBpZiAodGhpcy5hbGxvd0hhbGZPcGVuIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQpXG4gICAgcmV0dXJuO1xuXG4gIC8vIG5vIG1vcmUgZGF0YSBjYW4gYmUgd3JpdHRlbi5cbiAgLy8gQnV0IGFsbG93IG1vcmUgd3JpdGVzIHRvIGhhcHBlbiBpbiB0aGlzIHRpY2suXG4gIHByb2Nlc3MubmV4dFRpY2sodGhpcy5lbmQuYmluZCh0aGlzKSk7XG59XG5cbmZ1bmN0aW9uIGZvckVhY2ggKHhzLCBmKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZih4c1tpXSwgaSk7XG4gIH1cbn1cbiJdfQ==\n},{\"./_stream_readable\":37,\"./_stream_writable\":39,\"_process\":29,\"core-util-is\":40,\"inherits\":26}],36:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\nmodule.exports = PassThrough;\n\nvar Transform = require('./_stream_transform');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough))\n    return new PassThrough(options);\n\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function(chunk, encoding, cb) {\n  cb(null, chunk);\n};\n\n},{\"./_stream_transform\":38,\"core-util-is\":40,\"inherits\":26}],37:[function(require,module,exports){\n(function (process){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n\n/*<replacement>*/\nvar Buffer = require('buffer').Buffer;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\nvar EE = require('events').EventEmitter;\n\n/*<replacement>*/\nif (!EE.listenerCount) EE.listenerCount = function(emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\nvar Stream = require('stream');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar StringDecoder;\n\n\n/*<replacement>*/\nvar debug = require('util');\nif (debug && debug.debuglog) {\n  debug = debug.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\n\nutil.inherits(Readable, Stream);\n\nfunction ReadableState(options, stream) {\n  var Duplex = require('./_stream_duplex');\n\n  options = options || {};\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var defaultHwm = options.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = ~~this.highWaterMark;\n\n  this.buffer = [];\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Duplex)\n    this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // when piping, we only care about 'readable' events that happen\n  // after read()ing all the bytes and not getting any pushback.\n  this.ranOut = false;\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder)\n      StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  var Duplex = require('./_stream_duplex');\n\n  if (!(this instanceof Readable))\n    return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  Stream.call(this);\n}\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function(chunk, encoding) {\n  var state = this._readableState;\n\n  if (util.isString(chunk) && !state.objectMode) {\n    encoding = encoding || state.defaultEncoding;\n    if (encoding !== state.encoding) {\n      chunk = new Buffer(chunk, encoding);\n      encoding = '';\n    }\n  }\n\n  return readableAddChunk(this, state, chunk, encoding, false);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function(chunk) {\n  var state = this._readableState;\n  return readableAddChunk(this, state, chunk, '', true);\n};\n\nfunction readableAddChunk(stream, state, chunk, encoding, addToFront) {\n  var er = chunkInvalid(state, chunk);\n  if (er) {\n    stream.emit('error', er);\n  } else if (util.isNullOrUndefined(chunk)) {\n    state.reading = false;\n    if (!state.ended)\n      onEofChunk(stream, state);\n  } else if (state.objectMode || chunk && chunk.length > 0) {\n    if (state.ended && !addToFront) {\n      var e = new Error('stream.push() after EOF');\n      stream.emit('error', e);\n    } else if (state.endEmitted && addToFront) {\n      var e = new Error('stream.unshift() after end event');\n      stream.emit('error', e);\n    } else {\n      if (state.decoder && !addToFront && !encoding)\n        chunk = state.decoder.write(chunk);\n\n      if (!addToFront)\n        state.reading = false;\n\n      // if we want the data now, just emit it.\n      if (state.flowing && state.length === 0 && !state.sync) {\n        stream.emit('data', chunk);\n        stream.read(0);\n      } else {\n        // update the buffer info.\n        state.length += state.objectMode ? 1 : chunk.length;\n        if (addToFront)\n          state.buffer.unshift(chunk);\n        else\n          state.buffer.push(chunk);\n\n        if (state.needReadable)\n          emitReadable(stream);\n      }\n\n      maybeReadMore(stream, state);\n    }\n  } else if (!addToFront) {\n    state.reading = false;\n  }\n\n  return needMoreData(state);\n}\n\n\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended &&\n         (state.needReadable ||\n          state.length < state.highWaterMark ||\n          state.length === 0);\n}\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function(enc) {\n  if (!StringDecoder)\n    StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 128MB\nvar MAX_HWM = 0x800000;\nfunction roundUpToNextPowerOf2(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2\n    n--;\n    for (var p = 1; p < 32; p <<= 1) n |= n >> p;\n    n++;\n  }\n  return n;\n}\n\nfunction howMuchToRead(n, state) {\n  if (state.length === 0 && state.ended)\n    return 0;\n\n  if (state.objectMode)\n    return n === 0 ? 0 : 1;\n\n  if (isNaN(n) || util.isNull(n)) {\n    // only flow one buffer at a time\n    if (state.flowing && state.buffer.length)\n      return state.buffer[0].length;\n    else\n      return state.length;\n  }\n\n  if (n <= 0)\n    return 0;\n\n  // If we're asking for more than the target buffer level,\n  // then raise the water mark.  Bump up to the next highest\n  // power of 2, to prevent increasing it excessively in tiny\n  // amounts.\n  if (n > state.highWaterMark)\n    state.highWaterMark = roundUpToNextPowerOf2(n);\n\n  // don't have that much.  return null, unless we've ended.\n  if (n > state.length) {\n    if (!state.ended) {\n      state.needReadable = true;\n      return 0;\n    } else\n      return state.length;\n  }\n\n  return n;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function(n) {\n  debug('read', n);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (!util.isNumber(n) || n > 0)\n    state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 &&\n      state.needReadable &&\n      (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended)\n      endReadable(this);\n    else\n      emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0)\n      endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  }\n\n  if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0)\n      state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n  }\n\n  // If _read pushed data synchronously, then `reading` will be false,\n  // and we need to re-evaluate how much data we can return to the user.\n  if (doRead && !state.reading)\n    n = howMuchToRead(nOrig, state);\n\n  var ret;\n  if (n > 0)\n    ret = fromList(n, state);\n  else\n    ret = null;\n\n  if (util.isNull(ret)) {\n    state.needReadable = true;\n    n = 0;\n  }\n\n  state.length -= n;\n\n  // If we have nothing in the buffer, then we want to know\n  // as soon as we *do* get something into the buffer.\n  if (state.length === 0 && !state.ended)\n    state.needReadable = true;\n\n  // If we tried to read() past the EOF, then emit end on the next tick.\n  if (nOrig !== n && state.ended && state.length === 0)\n    endReadable(this);\n\n  if (!util.isNull(ret))\n    this.emit('data', ret);\n\n  return ret;\n};\n\nfunction chunkInvalid(state, chunk) {\n  var er = null;\n  if (!util.isBuffer(chunk) &&\n      !util.isString(chunk) &&\n      !util.isNullOrUndefined(chunk) &&\n      !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\n\nfunction onEofChunk(stream, state) {\n  if (state.decoder && !state.ended) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync)\n      process.nextTick(function() {\n        emitReadable_(stream);\n      });\n    else\n      emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    process.nextTick(function() {\n      maybeReadMore_(stream, state);\n    });\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended &&\n         state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;\n    else\n      len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function(n) {\n  this.emit('error', new Error('not implemented'));\n};\n\nReadable.prototype.pipe = function(dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&\n              dest !== process.stdout &&\n              dest !== process.stderr;\n\n  var endFn = doEnd ? onend : cleanup;\n  if (state.endEmitted)\n    process.nextTick(endFn);\n  else\n    src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable) {\n    debug('onunpipe');\n    if (readable === src) {\n      cleanup();\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', cleanup);\n    src.removeListener('data', ondata);\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain &&\n        (!dest._writableState || dest._writableState.needDrain))\n      ondrain();\n  }\n\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    var ret = dest.write(chunk);\n    if (false === ret) {\n      debug('false write response, pause',\n            src._readableState.awaitDrain);\n      src._readableState.awaitDrain++;\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EE.listenerCount(dest, 'error') === 0)\n      dest.emit('error', er);\n  }\n  // This is a brutally ugly hack to make sure that our error handler\n  // is attached before any userland ones.  NEVER DO THIS.\n  if (!dest._events || !dest._events.error)\n    dest.on('error', onerror);\n  else if (isArray(dest._events.error))\n    dest._events.error.unshift(onerror);\n  else\n    dest._events.error = [onerror, dest._events.error];\n\n\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function() {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain)\n      state.awaitDrain--;\n    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\n\nReadable.prototype.unpipe = function(dest) {\n  var state = this._readableState;\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0)\n    return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes)\n      return this;\n\n    if (!dest)\n      dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest)\n      dest.emit('unpipe', this);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++)\n      dests[i].emit('unpipe', this);\n    return this;\n  }\n\n  // try to find the right one.\n  var i = indexOf(state.pipes, dest);\n  if (i === -1)\n    return this;\n\n  state.pipes.splice(i, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1)\n    state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function(ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  // If listening to data, and it has not explicitly been paused,\n  // then call resume to start the flow of data on the next tick.\n  if (ev === 'data' && false !== this._readableState.flowing) {\n    this.resume();\n  }\n\n  if (ev === 'readable' && this.readable) {\n    var state = this._readableState;\n    if (!state.readableListening) {\n      state.readableListening = true;\n      state.emittedReadable = false;\n      state.needReadable = true;\n      if (!state.reading) {\n        var self = this;\n        process.nextTick(function() {\n          debug('readable nexttick read 0');\n          self.read(0);\n        });\n      } else if (state.length) {\n        emitReadable(this, state);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function() {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    if (!state.reading) {\n      debug('resume read 0');\n      this.read(0);\n    }\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    process.nextTick(function() {\n      resume_(stream, state);\n    });\n  }\n}\n\nfunction resume_(stream, state) {\n  state.resumeScheduled = false;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading)\n    stream.read(0);\n}\n\nReadable.prototype.pause = function() {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  if (state.flowing) {\n    do {\n      var chunk = stream.read();\n    } while (null !== chunk && state.flowing);\n  }\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function(stream) {\n  var state = this._readableState;\n  var paused = false;\n\n  var self = this;\n  stream.on('end', function() {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length)\n        self.push(chunk);\n    }\n\n    self.push(null);\n  });\n\n  stream.on('data', function(chunk) {\n    debug('wrapped data');\n    if (state.decoder)\n      chunk = state.decoder.write(chunk);\n    if (!chunk || !state.objectMode && !chunk.length)\n      return;\n\n    var ret = self.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {\n      this[i] = function(method) { return function() {\n        return stream[method].apply(stream, arguments);\n      }}(i);\n    }\n  }\n\n  // proxy certain important events.\n  var events = ['error', 'close', 'destroy', 'pause', 'resume'];\n  forEach(events, function(ev) {\n    stream.on(ev, self.emit.bind(self, ev));\n  });\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  self._read = function(n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return self;\n};\n\n\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\nfunction fromList(n, state) {\n  var list = state.buffer;\n  var length = state.length;\n  var stringMode = !!state.decoder;\n  var objectMode = !!state.objectMode;\n  var ret;\n\n  // nothing in the list, definitely empty.\n  if (list.length === 0)\n    return null;\n\n  if (length === 0)\n    ret = null;\n  else if (objectMode)\n    ret = list.shift();\n  else if (!n || n >= length) {\n    // read it all, truncate the array.\n    if (stringMode)\n      ret = list.join('');\n    else\n      ret = Buffer.concat(list, length);\n    list.length = 0;\n  } else {\n    // read just some of it.\n    if (n < list[0].length) {\n      // just take a part of the first list item.\n      // slice is the same for buffers and strings.\n      var buf = list[0];\n      ret = buf.slice(0, n);\n      list[0] = buf.slice(n);\n    } else if (n === list[0].length) {\n      // first list is a perfect match\n      ret = list.shift();\n    } else {\n      // complex case.\n      // we have enough to cover it, but it spans past the first buffer.\n      if (stringMode)\n        ret = '';\n      else\n        ret = new Buffer(n);\n\n      var c = 0;\n      for (var i = 0, l = list.length; i < l && c < n; i++) {\n        var buf = list[0];\n        var cpy = Math.min(n - c, buf.length);\n\n        if (stringMode)\n          ret += buf.slice(0, cpy);\n        else\n          buf.copy(ret, c, 0, cpy);\n\n        if (cpy < buf.length)\n          list[0] = buf.slice(cpy);\n        else\n          list.shift();\n\n        c += cpy;\n      }\n    }\n  }\n\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0)\n    throw new Error('endReadable called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    process.nextTick(function() {\n      // Check that we didn't get one last unshift.\n      if (!state.endEmitted && state.length === 0) {\n        state.endEmitted = true;\n        stream.readable = false;\n        stream.emit('end');\n      }\n    });\n  }\n}\n\nfunction forEach (xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n\nfunction indexOf (xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}\n\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n},{\"./_stream_duplex\":35,\"_process\":29,\"buffer\":16,\"core-util-is\":40,\"events\":20,\"inherits\":26,\"isarray\":28,\"stream\":45,\"string_decoder/\":46,\"util\":15}],38:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\nmodule.exports = Transform;\n\nvar Duplex = require('./_stream_duplex');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\n\nfunction TransformState(options, stream) {\n  this.afterTransform = function(er, data) {\n    return afterTransform(stream, er, data);\n  };\n\n  this.needTransform = false;\n  this.transforming = false;\n  this.writecb = null;\n  this.writechunk = null;\n}\n\nfunction afterTransform(stream, er, data) {\n  var ts = stream._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb)\n    return stream.emit('error', new Error('no writecb in Transform class'));\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (!util.isNullOrUndefined(data))\n    stream.push(data);\n\n  if (cb)\n    cb(er);\n\n  var rs = stream._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    stream._read(rs.highWaterMark);\n  }\n}\n\n\nfunction Transform(options) {\n  if (!(this instanceof Transform))\n    return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = new TransformState(options, this);\n\n  // when the writable side finishes, then flush out anything remaining.\n  var stream = this;\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  this.once('prefinish', function() {\n    if (util.isFunction(this._flush))\n      this._flush(function(er) {\n        done(stream, er);\n      });\n    else\n      done(stream);\n  });\n}\n\nTransform.prototype.push = function(chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function(chunk, encoding, cb) {\n  throw new Error('not implemented');\n};\n\nTransform.prototype._write = function(chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform ||\n        rs.needReadable ||\n        rs.length < rs.highWaterMark)\n      this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function(n) {\n  var ts = this._transformState;\n\n  if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\n\nfunction done(stream, er) {\n  if (er)\n    return stream.emit('error', er);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  var ws = stream._writableState;\n  var ts = stream._transformState;\n\n  if (ws.length)\n    throw new Error('calling transform done when ws.length != 0');\n\n  if (ts.transforming)\n    throw new Error('calling transform done when still transforming');\n\n  return stream.push(null);\n}\n\n},{\"./_stream_duplex\":35,\"core-util-is\":40,\"inherits\":26}],39:[function(require,module,exports){\n(function (process){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, cb), and it'll handle all\n// the drain event emission and buffering.\n\nmodule.exports = Writable;\n\n/*<replacement>*/\nvar Buffer = require('buffer').Buffer;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Stream = require('stream');\n\nutil.inherits(Writable, Stream);\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n}\n\nfunction WritableState(options, stream) {\n  var Duplex = require('./_stream_duplex');\n\n  options = options || {};\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var defaultHwm = options.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Duplex)\n    this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // cast to ints.\n  this.highWaterMark = ~~this.highWaterMark;\n\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function(er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.buffer = [];\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n}\n\nfunction Writable(options) {\n  var Duplex = require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, though they're not\n  // instanceof Writable, they're instanceof Readable.\n  if (!(this instanceof Writable) && !(this instanceof Duplex))\n    return new Writable(options);\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function() {\n  this.emit('error', new Error('Cannot pipe. Not readable.'));\n};\n\n\nfunction writeAfterEnd(stream, state, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  process.nextTick(function() {\n    cb(er);\n  });\n}\n\n// If we get something that is not a buffer, string, null, or undefined,\n// and we're not in objectMode, then that's an error.\n// Otherwise stream chunks are all considered to be of length=1, and the\n// watermarks determine how many objects to keep in the buffer, rather than\n// how many bytes or characters.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  if (!util.isBuffer(chunk) &&\n      !util.isString(chunk) &&\n      !util.isNullOrUndefined(chunk) &&\n      !state.objectMode) {\n    var er = new TypeError('Invalid non-string/buffer chunk');\n    stream.emit('error', er);\n    process.nextTick(function() {\n      cb(er);\n    });\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function(chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  if (util.isFunction(encoding)) {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (util.isBuffer(chunk))\n    encoding = 'buffer';\n  else if (!encoding)\n    encoding = state.defaultEncoding;\n\n  if (!util.isFunction(cb))\n    cb = function() {};\n\n  if (state.ended)\n    writeAfterEnd(this, state, cb);\n  else if (validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function() {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function() {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing &&\n        !state.corked &&\n        !state.finished &&\n        !state.bufferProcessing &&\n        state.buffer.length)\n      clearBuffer(this, state);\n  }\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode &&\n      state.decodeStrings !== false &&\n      util.isString(chunk)) {\n    chunk = new Buffer(chunk, encoding);\n  }\n  return chunk;\n}\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, chunk, encoding, cb) {\n  chunk = decodeChunk(state, chunk, encoding);\n  if (util.isBuffer(chunk))\n    encoding = 'buffer';\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret)\n    state.needDrain = true;\n\n  if (state.writing || state.corked)\n    state.buffer.push(new WriteReq(chunk, encoding, cb));\n  else\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev)\n    stream._writev(chunk, state.onwrite);\n  else\n    stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  if (sync)\n    process.nextTick(function() {\n      state.pendingcb--;\n      cb(er);\n    });\n  else {\n    state.pendingcb--;\n    cb(er);\n  }\n\n  stream._writableState.errorEmitted = true;\n  stream.emit('error', er);\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er)\n    onwriteError(stream, state, sync, er, cb);\n  else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(stream, state);\n\n    if (!finished &&\n        !state.corked &&\n        !state.bufferProcessing &&\n        state.buffer.length) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      process.nextTick(function() {\n        afterWrite(stream, state, finished, cb);\n      });\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished)\n    onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n\n  if (stream._writev && state.buffer.length > 1) {\n    // Fast case, write everything using _writev()\n    var cbs = [];\n    for (var c = 0; c < state.buffer.length; c++)\n      cbs.push(state.buffer[c].callback);\n\n    // count the one we are adding, as well.\n    // TODO(isaacs) clean this up\n    state.pendingcb++;\n    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {\n      for (var i = 0; i < cbs.length; i++) {\n        state.pendingcb--;\n        cbs[i](err);\n      }\n    });\n\n    // Clear buffer\n    state.buffer = [];\n  } else {\n    // Slow case, write chunks one-by-one\n    for (var c = 0; c < state.buffer.length; c++) {\n      var entry = state.buffer[c];\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        c++;\n        break;\n      }\n    }\n\n    if (c < state.buffer.length)\n      state.buffer = state.buffer.slice(c);\n    else\n      state.buffer.length = 0;\n  }\n\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function(chunk, encoding, cb) {\n  cb(new Error('not implemented'));\n\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function(chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (util.isFunction(chunk)) {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (util.isFunction(encoding)) {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (!util.isNullOrUndefined(chunk))\n    this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished)\n    endWritable(this, state, cb);\n};\n\n\nfunction needFinish(stream, state) {\n  return (state.ending &&\n          state.length === 0 &&\n          !state.finished &&\n          !state.writing);\n}\n\nfunction prefinish(stream, state) {\n  if (!state.prefinished) {\n    state.prefinished = true;\n    stream.emit('prefinish');\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(stream, state);\n  if (need) {\n    if (state.pendingcb === 0) {\n      prefinish(stream, state);\n      state.finished = true;\n      stream.emit('finish');\n    } else\n      prefinish(stream, state);\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished)\n      process.nextTick(cb);\n    else\n      stream.once('finish', cb);\n  }\n  state.ended = true;\n}\n\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n},{\"./_stream_duplex\":35,\"_process\":29,\"buffer\":16,\"core-util-is\":40,\"inherits\":26,\"stream\":45}],40:[function(require,module,exports){\n(function (Buffer){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\n\nfunction isArray(arg) {\n  if (Array.isArray) {\n    return Array.isArray(arg);\n  }\n  return objectToString(arg) === '[object Array]';\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = Buffer.isBuffer;\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n}).call(this,{\"isBuffer\":require(\"../../../../insert-module-globals/node_modules/is-buffer/index.js\")})\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbm9kZV9tb2R1bGVzL2NvcmUtdXRpbC1pcy9saWIvdXRpbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgXG4vLyBiZWNhdXNlIGl0IGlzIGZyYWdpbGUgYW5kIGNhbiBiZSBlYXNpbHkgZmFrZWQgd2l0aCBgT2JqZWN0LmNyZWF0ZSgpYC5cblxuZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShhcmcpO1xuICB9XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhhcmcpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcblxuZnVuY3Rpb24gaXNCb29sZWFuKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nO1xufVxuZXhwb3J0cy5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG5cbmZ1bmN0aW9uIGlzTnVsbChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsID0gaXNOdWxsO1xuXG5mdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZCA9IGlzTnVsbE9yVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuZXhwb3J0cy5pc051bWJlciA9IGlzTnVtYmVyO1xuXG5mdW5jdGlvbiBpc1N0cmluZyhhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnO1xufVxuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuXG5mdW5jdGlvbiBpc1N5bWJvbChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnO1xufVxuZXhwb3J0cy5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuZXhwb3J0cy5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc1JlZ0V4cChyZSkge1xuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcocmUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cbmV4cG9ydHMuaXNSZWdFeHAgPSBpc1JlZ0V4cDtcblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzRGF0ZShkKSB7XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuZXhwb3J0cy5pc0RhdGUgPSBpc0RhdGU7XG5cbmZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICByZXR1cm4gKG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nIHx8IGUgaW5zdGFuY2VvZiBFcnJvcik7XG59XG5leHBvcnRzLmlzRXJyb3IgPSBpc0Vycm9yO1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCcgfHwgIC8vIEVTNiBzeW1ib2xcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnO1xufVxuZXhwb3J0cy5pc1ByaW1pdGl2ZSA9IGlzUHJpbWl0aXZlO1xuXG5leHBvcnRzLmlzQnVmZmVyID0gQnVmZmVyLmlzQnVmZmVyO1xuXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59XG4iXX0=\n},{\"../../../../insert-module-globals/node_modules/is-buffer/index.js\":27}],41:[function(require,module,exports){\nmodule.exports = require(\"./lib/_stream_passthrough.js\")\n\n},{\"./lib/_stream_passthrough.js\":36}],42:[function(require,module,exports){\n(function (process){\nexports = module.exports = require('./lib/_stream_readable.js');\nexports.Stream = require('stream');\nexports.Readable = exports;\nexports.Writable = require('./lib/_stream_writable.js');\nexports.Duplex = require('./lib/_stream_duplex.js');\nexports.Transform = require('./lib/_stream_transform.js');\nexports.PassThrough = require('./lib/_stream_passthrough.js');\nif (!process.browser && process.env.READABLE_STREAM === 'disable') {\n  module.exports = require('stream');\n}\n\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vcmVhZGFibGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcmVhZGFibGUuanMnKTtcbmV4cG9ydHMuU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJyk7XG5leHBvcnRzLlJlYWRhYmxlID0gZXhwb3J0cztcbmV4cG9ydHMuV3JpdGFibGUgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzJyk7XG5leHBvcnRzLkR1cGxleCA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fZHVwbGV4LmpzJyk7XG5leHBvcnRzLlRyYW5zZm9ybSA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzJyk7XG5leHBvcnRzLlBhc3NUaHJvdWdoID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qcycpO1xuaWYgKCFwcm9jZXNzLmJyb3dzZXIgJiYgcHJvY2Vzcy5lbnYuUkVBREFCTEVfU1RSRUFNID09PSAnZGlzYWJsZScpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdzdHJlYW0nKTtcbn1cbiJdfQ==\n},{\"./lib/_stream_duplex.js\":35,\"./lib/_stream_passthrough.js\":36,\"./lib/_stream_readable.js\":37,\"./lib/_stream_transform.js\":38,\"./lib/_stream_writable.js\":39,\"_process\":29,\"stream\":45}],43:[function(require,module,exports){\nmodule.exports = require(\"./lib/_stream_transform.js\")\n\n},{\"./lib/_stream_transform.js\":38}],44:[function(require,module,exports){\nmodule.exports = require(\"./lib/_stream_writable.js\")\n\n},{\"./lib/_stream_writable.js\":39}],45:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Stream;\n\nvar EE = require('events').EventEmitter;\nvar inherits = require('inherits');\n\ninherits(Stream, EE);\nStream.Readable = require('readable-stream/readable.js');\nStream.Writable = require('readable-stream/writable.js');\nStream.Duplex = require('readable-stream/duplex.js');\nStream.Transform = require('readable-stream/transform.js');\nStream.PassThrough = require('readable-stream/passthrough.js');\n\n// Backwards-compat with node 0.4.x\nStream.Stream = Stream;\n\n\n\n// old-style streams.  Note that the pipe method (the only relevant\n// part of this class) is overridden in the Readable class.\n\nfunction Stream() {\n  EE.call(this);\n}\n\nStream.prototype.pipe = function(dest, options) {\n  var source = this;\n\n  function ondata(chunk) {\n    if (dest.writable) {\n      if (false === dest.write(chunk) && source.pause) {\n        source.pause();\n      }\n    }\n  }\n\n  source.on('data', ondata);\n\n  function ondrain() {\n    if (source.readable && source.resume) {\n      source.resume();\n    }\n  }\n\n  dest.on('drain', ondrain);\n\n  // If the 'end' option is not supplied, dest.end() will be called when\n  // source gets the 'end' or 'close' events.  Only dest.end() once.\n  if (!dest._isStdio && (!options || options.end !== false)) {\n    source.on('end', onend);\n    source.on('close', onclose);\n  }\n\n  var didOnEnd = false;\n  function onend() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    dest.end();\n  }\n\n\n  function onclose() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    if (typeof dest.destroy === 'function') dest.destroy();\n  }\n\n  // don't leave dangling pipes when there are errors.\n  function onerror(er) {\n    cleanup();\n    if (EE.listenerCount(this, 'error') === 0) {\n      throw er; // Unhandled stream error in pipe.\n    }\n  }\n\n  source.on('error', onerror);\n  dest.on('error', onerror);\n\n  // remove all the event listeners that were added.\n  function cleanup() {\n    source.removeListener('data', ondata);\n    dest.removeListener('drain', ondrain);\n\n    source.removeListener('end', onend);\n    source.removeListener('close', onclose);\n\n    source.removeListener('error', onerror);\n    dest.removeListener('error', onerror);\n\n    source.removeListener('end', cleanup);\n    source.removeListener('close', cleanup);\n\n    dest.removeListener('close', cleanup);\n  }\n\n  source.on('end', cleanup);\n  source.on('close', cleanup);\n\n  dest.on('close', cleanup);\n\n  dest.emit('pipe', source);\n\n  // Allow for unix-like usage: A.pipe(B).pipe(C)\n  return dest;\n};\n\n},{\"events\":20,\"inherits\":26,\"readable-stream/duplex.js\":34,\"readable-stream/passthrough.js\":41,\"readable-stream/readable.js\":42,\"readable-stream/transform.js\":43,\"readable-stream/writable.js\":44}],46:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar Buffer = require('buffer').Buffer;\n\nvar isBufferEncoding = Buffer.isEncoding\n  || function(encoding) {\n       switch (encoding && encoding.toLowerCase()) {\n         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;\n         default: return false;\n       }\n     }\n\n\nfunction assertEncoding(encoding) {\n  if (encoding && !isBufferEncoding(encoding)) {\n    throw new Error('Unknown encoding: ' + encoding);\n  }\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters. CESU-8 is handled as part of the UTF-8 encoding.\n//\n// @TODO Handling all encodings inside a single object makes it very difficult\n// to reason about this code, so it should be split up in the future.\n// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code\n// points as used by CESU-8.\nvar StringDecoder = exports.StringDecoder = function(encoding) {\n  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');\n  assertEncoding(encoding);\n  switch (this.encoding) {\n    case 'utf8':\n      // CESU-8 represents each of Surrogate Pair by 3-bytes\n      this.surrogateSize = 3;\n      break;\n    case 'ucs2':\n    case 'utf16le':\n      // UTF-16 represents each of Surrogate Pair by 2-bytes\n      this.surrogateSize = 2;\n      this.detectIncompleteChar = utf16DetectIncompleteChar;\n      break;\n    case 'base64':\n      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.\n      this.surrogateSize = 3;\n      this.detectIncompleteChar = base64DetectIncompleteChar;\n      break;\n    default:\n      this.write = passThroughWrite;\n      return;\n  }\n\n  // Enough space to store all bytes of a single character. UTF-8 needs 4\n  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).\n  this.charBuffer = new Buffer(6);\n  // Number of bytes received for the current incomplete multi-byte character.\n  this.charReceived = 0;\n  // Number of bytes expected for the current incomplete multi-byte character.\n  this.charLength = 0;\n};\n\n\n// write decodes the given buffer and returns it as JS string that is\n// guaranteed to not contain any partial multi-byte characters. Any partial\n// character found at the end of the buffer is buffered up, and will be\n// returned when calling write again with the remaining bytes.\n//\n// Note: Converting a Buffer containing an orphan surrogate to a String\n// currently works, but converting a String to a Buffer (via `new Buffer`, or\n// Buffer#write) will replace incomplete surrogates with the unicode\n// replacement character. See https://codereview.chromium.org/121173009/ .\nStringDecoder.prototype.write = function(buffer) {\n  var charStr = '';\n  // if our last write ended with an incomplete multibyte character\n  while (this.charLength) {\n    // determine how many remaining bytes this buffer has to offer for this char\n    var available = (buffer.length >= this.charLength - this.charReceived) ?\n        this.charLength - this.charReceived :\n        buffer.length;\n\n    // add the new bytes to the char buffer\n    buffer.copy(this.charBuffer, this.charReceived, 0, available);\n    this.charReceived += available;\n\n    if (this.charReceived < this.charLength) {\n      // still not enough chars in this buffer? wait for more ...\n      return '';\n    }\n\n    // remove bytes belonging to the current character from the buffer\n    buffer = buffer.slice(available, buffer.length);\n\n    // get the character that was split\n    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);\n\n    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n    var charCode = charStr.charCodeAt(charStr.length - 1);\n    if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n      this.charLength += this.surrogateSize;\n      charStr = '';\n      continue;\n    }\n    this.charReceived = this.charLength = 0;\n\n    // if there are no more bytes in this buffer, just emit our char\n    if (buffer.length === 0) {\n      return charStr;\n    }\n    break;\n  }\n\n  // determine and set charLength / charReceived\n  this.detectIncompleteChar(buffer);\n\n  var end = buffer.length;\n  if (this.charLength) {\n    // buffer the incomplete character bytes we got\n    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);\n    end -= this.charReceived;\n  }\n\n  charStr += buffer.toString(this.encoding, 0, end);\n\n  var end = charStr.length - 1;\n  var charCode = charStr.charCodeAt(end);\n  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n  if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n    var size = this.surrogateSize;\n    this.charLength += size;\n    this.charReceived += size;\n    this.charBuffer.copy(this.charBuffer, size, 0, size);\n    buffer.copy(this.charBuffer, 0, 0, size);\n    return charStr.substring(0, end);\n  }\n\n  // or just emit the charStr\n  return charStr;\n};\n\n// detectIncompleteChar determines if there is an incomplete UTF-8 character at\n// the end of the given buffer. If so, it sets this.charLength to the byte\n// length that character, and sets this.charReceived to the number of bytes\n// that are available for this character.\nStringDecoder.prototype.detectIncompleteChar = function(buffer) {\n  // determine how many bytes we have to check at the end of this buffer\n  var i = (buffer.length >= 3) ? 3 : buffer.length;\n\n  // Figure out if one of the last i bytes of our buffer announces an\n  // incomplete char.\n  for (; i > 0; i--) {\n    var c = buffer[buffer.length - i];\n\n    // See http://en.wikipedia.org/wiki/UTF-8#Description\n\n    // 110XXXXX\n    if (i == 1 && c >> 5 == 0x06) {\n      this.charLength = 2;\n      break;\n    }\n\n    // 1110XXXX\n    if (i <= 2 && c >> 4 == 0x0E) {\n      this.charLength = 3;\n      break;\n    }\n\n    // 11110XXX\n    if (i <= 3 && c >> 3 == 0x1E) {\n      this.charLength = 4;\n      break;\n    }\n  }\n  this.charReceived = i;\n};\n\nStringDecoder.prototype.end = function(buffer) {\n  var res = '';\n  if (buffer && buffer.length)\n    res = this.write(buffer);\n\n  if (this.charReceived) {\n    var cr = this.charReceived;\n    var buf = this.charBuffer;\n    var enc = this.encoding;\n    res += buf.slice(0, cr).toString(enc);\n  }\n\n  return res;\n};\n\nfunction passThroughWrite(buffer) {\n  return buffer.toString(this.encoding);\n}\n\nfunction utf16DetectIncompleteChar(buffer) {\n  this.charReceived = buffer.length % 2;\n  this.charLength = this.charReceived ? 2 : 0;\n}\n\nfunction base64DetectIncompleteChar(buffer) {\n  this.charReceived = buffer.length % 3;\n  this.charLength = this.charReceived ? 3 : 0;\n}\n\n},{\"buffer\":16}],47:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar punycode = require('punycode');\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    querystring = require('querystring');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (!isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a puny coded representation of \"domain\".\n      // It only converts the part of the domain name that\n      // has non ASCII characters. I.e. it dosent matter if\n      // you call it with a domain that already is in ASCII.\n      var domainArray = this.hostname.split('.');\n      var newOut = [];\n      for (var i = 0; i < domainArray.length; ++i) {\n        var s = domainArray[i];\n        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?\n            'xn--' + punycode.encode(s) : s);\n      }\n      this.hostname = newOut.join('.');\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n        this.hostname :\n        '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query &&\n      isObject(this.query) &&\n      Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  Object.keys(this).forEach(function(k) {\n    result[k] = this[k];\n  }, this);\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    Object.keys(relative).forEach(function(k) {\n      if (k !== 'protocol')\n        result[k] = relative[k];\n    });\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      Object.keys(relative).forEach(function(k) {\n        result[k] = relative[k];\n      });\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n                  relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especialy happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!isNull(result.pathname) || !isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (result.host || relative.host) && (last === '.' || last === '..') ||\n      last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last == '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especialy happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                     result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!isNull(result.pathname) || !isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n\nfunction isString(arg) {\n  return typeof arg === \"string\";\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isNull(arg) {\n  return arg === null;\n}\nfunction isNullOrUndefined(arg) {\n  return  arg == null;\n}\n\n},{\"punycode\":30,\"querystring\":33}],48:[function(require,module,exports){\nmodule.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}\n},{}],49:[function(require,module,exports){\n(function (process,global){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n},{\"./support/isBuffer\":48,\"_process\":29,\"inherits\":26}],50:[function(require,module,exports){\n(function (global){\n/*! http://mths.be/he v0.5.0 by @mathias | MIT license */\n;(function(root) {\n\n\t// Detect free variables `exports`.\n\tvar freeExports = typeof exports == 'object' && exports;\n\n\t// Detect free variable `module`.\n\tvar freeModule = typeof module == 'object' && module &&\n\t\tmodule.exports == freeExports && module;\n\n\t// Detect free variable `global`, from Node.js or Browserified code,\n\t// and use it as `root`.\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {\n\t\troot = freeGlobal;\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t// All astral symbols.\n\tvar regexAstralSymbols = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n\t// All ASCII symbols (not just printable ASCII) except those listed in the\n\t// first column of the overrides table.\n\t// http://whatwg.org/html/tokenization.html#table-charref-overrides\n\tvar regexAsciiWhitelist = /[\\x01-\\x7F]/g;\n\t// All BMP symbols that are not ASCII newlines, printable ASCII symbols, or\n\t// code points listed in the first column of the overrides table on\n\t// http://whatwg.org/html/tokenization.html#table-charref-overrides.\n\tvar regexBmpWhitelist = /[\\x01-\\t\\x0B\\f\\x0E-\\x1F\\x7F\\x81\\x8D\\x8F\\x90\\x9D\\xA0-\\uFFFF]/g;\n\n\tvar regexEncodeNonAscii = /<\\u20D2|=\\u20E5|>\\u20D2|\\u205F\\u200A|\\u219D\\u0338|\\u2202\\u0338|\\u2220\\u20D2|\\u2229\\uFE00|\\u222A\\uFE00|\\u223C\\u20D2|\\u223D\\u0331|\\u223E\\u0333|\\u2242\\u0338|\\u224B\\u0338|\\u224D\\u20D2|\\u224E\\u0338|\\u224F\\u0338|\\u2250\\u0338|\\u2261\\u20E5|\\u2264\\u20D2|\\u2265\\u20D2|\\u2266\\u0338|\\u2267\\u0338|\\u2268\\uFE00|\\u2269\\uFE00|\\u226A\\u0338|\\u226A\\u20D2|\\u226B\\u0338|\\u226B\\u20D2|\\u227F\\u0338|\\u2282\\u20D2|\\u2283\\u20D2|\\u228A\\uFE00|\\u228B\\uFE00|\\u228F\\u0338|\\u2290\\u0338|\\u2293\\uFE00|\\u2294\\uFE00|\\u22B4\\u20D2|\\u22B5\\u20D2|\\u22D8\\u0338|\\u22D9\\u0338|\\u22DA\\uFE00|\\u22DB\\uFE00|\\u22F5\\u0338|\\u22F9\\u0338|\\u2933\\u0338|\\u29CF\\u0338|\\u29D0\\u0338|\\u2A6D\\u0338|\\u2A70\\u0338|\\u2A7D\\u0338|\\u2A7E\\u0338|\\u2AA1\\u0338|\\u2AA2\\u0338|\\u2AAC\\uFE00|\\u2AAD\\uFE00|\\u2AAF\\u0338|\\u2AB0\\u0338|\\u2AC5\\u0338|\\u2AC6\\u0338|\\u2ACB\\uFE00|\\u2ACC\\uFE00|\\u2AFD\\u20E5|[\\xA0-\\u0113\\u0116-\\u0122\\u0124-\\u012B\\u012E-\\u014D\\u0150-\\u017E\\u0192\\u01B5\\u01F5\\u0237\\u02C6\\u02C7\\u02D8-\\u02DD\\u0311\\u0391-\\u03A1\\u03A3-\\u03A9\\u03B1-\\u03C9\\u03D1\\u03D2\\u03D5\\u03D6\\u03DC\\u03DD\\u03F0\\u03F1\\u03F5\\u03F6\\u0401-\\u040C\\u040E-\\u044F\\u0451-\\u045C\\u045E\\u045F\\u2002-\\u2005\\u2007-\\u2010\\u2013-\\u2016\\u2018-\\u201A\\u201C-\\u201E\\u2020-\\u2022\\u2025\\u2026\\u2030-\\u2035\\u2039\\u203A\\u203E\\u2041\\u2043\\u2044\\u204F\\u2057\\u205F-\\u2063\\u20AC\\u20DB\\u20DC\\u2102\\u2105\\u210A-\\u2113\\u2115-\\u211E\\u2122\\u2124\\u2127-\\u2129\\u212C\\u212D\\u212F-\\u2131\\u2133-\\u2138\\u2145-\\u2148\\u2153-\\u215E\\u2190-\\u219B\\u219D-\\u21A7\\u21A9-\\u21AE\\u21B0-\\u21B3\\u21B5-\\u21B7\\u21BA-\\u21DB\\u21DD\\u21E4\\u21E5\\u21F5\\u21FD-\\u2205\\u2207-\\u2209\\u220B\\u220C\\u220F-\\u2214\\u2216-\\u2218\\u221A\\u221D-\\u2238\\u223A-\\u2257\\u2259\\u225A\\u225C\\u225F-\\u2262\\u2264-\\u228B\\u228D-\\u229B\\u229D-\\u22A5\\u22A7-\\u22B0\\u22B2-\\u22BB\\u22BD-\\u22DB\\u22DE-\\u22E3\\u22E6-\\u22F7\\u22F9-\\u22FE\\u2305\\u2306\\u2308-\\u2310\\u2312\\u2313\\u2315\\u2316\\u231C-\\u231F\\u2322\\u2323\\u232D\\u232E\\u2336\\u233D\\u233F\\u237C\\u23B0\\u23B1\\u23B4-\\u23B6\\u23DC-\\u23DF\\u23E2\\u23E7\\u2423\\u24C8\\u2500\\u2502\\u250C\\u2510\\u2514\\u2518\\u251C\\u2524\\u252C\\u2534\\u253C\\u2550-\\u256C\\u2580\\u2584\\u2588\\u2591-\\u2593\\u25A1\\u25AA\\u25AB\\u25AD\\u25AE\\u25B1\\u25B3-\\u25B5\\u25B8\\u25B9\\u25BD-\\u25BF\\u25C2\\u25C3\\u25CA\\u25CB\\u25EC\\u25EF\\u25F8-\\u25FC\\u2605\\u2606\\u260E\\u2640\\u2642\\u2660\\u2663\\u2665\\u2666\\u266A\\u266D-\\u266F\\u2713\\u2717\\u2720\\u2736\\u2758\\u2772\\u2773\\u27C8\\u27C9\\u27E6-\\u27ED\\u27F5-\\u27FA\\u27FC\\u27FF\\u2902-\\u2905\\u290C-\\u2913\\u2916\\u2919-\\u2920\\u2923-\\u292A\\u2933\\u2935-\\u2939\\u293C\\u293D\\u2945\\u2948-\\u294B\\u294E-\\u2976\\u2978\\u2979\\u297B-\\u297F\\u2985\\u2986\\u298B-\\u2996\\u299A\\u299C\\u299D\\u29A4-\\u29B7\\u29B9\\u29BB\\u29BC\\u29BE-\\u29C5\\u29C9\\u29CD-\\u29D0\\u29DC-\\u29DE\\u29E3-\\u29E5\\u29EB\\u29F4\\u29F6\\u2A00-\\u2A02\\u2A04\\u2A06\\u2A0C\\u2A0D\\u2A10-\\u2A17\\u2A22-\\u2A27\\u2A29\\u2A2A\\u2A2D-\\u2A31\\u2A33-\\u2A3C\\u2A3F\\u2A40\\u2A42-\\u2A4D\\u2A50\\u2A53-\\u2A58\\u2A5A-\\u2A5D\\u2A5F\\u2A66\\u2A6A\\u2A6D-\\u2A75\\u2A77-\\u2A9A\\u2A9D-\\u2AA2\\u2AA4-\\u2AB0\\u2AB3-\\u2AC8\\u2ACB\\u2ACC\\u2ACF-\\u2ADB\\u2AE4\\u2AE6-\\u2AE9\\u2AEB-\\u2AF3\\u2AFD\\uFB00-\\uFB04]|\\uD835[\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDCCF\\uDD04\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDD6B]/g;\n\tvar encodeMap = {'\\xC1':'Aacute','\\xE1':'aacute','\\u0102':'Abreve','\\u0103':'abreve','\\u223E':'ac','\\u223F':'acd','\\u223E\\u0333':'acE','\\xC2':'Acirc','\\xE2':'acirc','\\xB4':'acute','\\u0410':'Acy','\\u0430':'acy','\\xC6':'AElig','\\xE6':'aelig','\\u2061':'af','\\uD835\\uDD04':'Afr','\\uD835\\uDD1E':'afr','\\xC0':'Agrave','\\xE0':'agrave','\\u2135':'aleph','\\u0391':'Alpha','\\u03B1':'alpha','\\u0100':'Amacr','\\u0101':'amacr','\\u2A3F':'amalg','&':'amp','\\u2A55':'andand','\\u2A53':'And','\\u2227':'and','\\u2A5C':'andd','\\u2A58':'andslope','\\u2A5A':'andv','\\u2220':'ang','\\u29A4':'ange','\\u29A8':'angmsdaa','\\u29A9':'angmsdab','\\u29AA':'angmsdac','\\u29AB':'angmsdad','\\u29AC':'angmsdae','\\u29AD':'angmsdaf','\\u29AE':'angmsdag','\\u29AF':'angmsdah','\\u2221':'angmsd','\\u221F':'angrt','\\u22BE':'angrtvb','\\u299D':'angrtvbd','\\u2222':'angsph','\\xC5':'angst','\\u237C':'angzarr','\\u0104':'Aogon','\\u0105':'aogon','\\uD835\\uDD38':'Aopf','\\uD835\\uDD52':'aopf','\\u2A6F':'apacir','\\u2248':'ap','\\u2A70':'apE','\\u224A':'ape','\\u224B':'apid','\\'':'apos','\\xE5':'aring','\\uD835\\uDC9C':'Ascr','\\uD835\\uDCB6':'ascr','\\u2254':'colone','*':'ast','\\u224D':'CupCap','\\xC3':'Atilde','\\xE3':'atilde','\\xC4':'Auml','\\xE4':'auml','\\u2233':'awconint','\\u2A11':'awint','\\u224C':'bcong','\\u03F6':'bepsi','\\u2035':'bprime','\\u223D':'bsim','\\u22CD':'bsime','\\u2216':'setmn','\\u2AE7':'Barv','\\u22BD':'barvee','\\u2305':'barwed','\\u2306':'Barwed','\\u23B5':'bbrk','\\u23B6':'bbrktbrk','\\u0411':'Bcy','\\u0431':'bcy','\\u201E':'bdquo','\\u2235':'becaus','\\u29B0':'bemptyv','\\u212C':'Bscr','\\u0392':'Beta','\\u03B2':'beta','\\u2136':'beth','\\u226C':'twixt','\\uD835\\uDD05':'Bfr','\\uD835\\uDD1F':'bfr','\\u22C2':'xcap','\\u25EF':'xcirc','\\u22C3':'xcup','\\u2A00':'xodot','\\u2A01':'xoplus','\\u2A02':'xotime','\\u2A06':'xsqcup','\\u2605':'starf','\\u25BD':'xdtri','\\u25B3':'xutri','\\u2A04':'xuplus','\\u22C1':'Vee','\\u22C0':'Wedge','\\u290D':'rbarr','\\u29EB':'lozf','\\u25AA':'squf','\\u25B4':'utrif','\\u25BE':'dtrif','\\u25C2':'ltrif','\\u25B8':'rtrif','\\u2423':'blank','\\u2592':'blk12','\\u2591':'blk14','\\u2593':'blk34','\\u2588':'block','=\\u20E5':'bne','\\u2261\\u20E5':'bnequiv','\\u2AED':'bNot','\\u2310':'bnot','\\uD835\\uDD39':'Bopf','\\uD835\\uDD53':'bopf','\\u22A5':'bot','\\u22C8':'bowtie','\\u29C9':'boxbox','\\u2510':'boxdl','\\u2555':'boxdL','\\u2556':'boxDl','\\u2557':'boxDL','\\u250C':'boxdr','\\u2552':'boxdR','\\u2553':'boxDr','\\u2554':'boxDR','\\u2500':'boxh','\\u2550':'boxH','\\u252C':'boxhd','\\u2564':'boxHd','\\u2565':'boxhD','\\u2566':'boxHD','\\u2534':'boxhu','\\u2567':'boxHu','\\u2568':'boxhU','\\u2569':'boxHU','\\u229F':'minusb','\\u229E':'plusb','\\u22A0':'timesb','\\u2518':'boxul','\\u255B':'boxuL','\\u255C':'boxUl','\\u255D':'boxUL','\\u2514':'boxur','\\u2558':'boxuR','\\u2559':'boxUr','\\u255A':'boxUR','\\u2502':'boxv','\\u2551':'boxV','\\u253C':'boxvh','\\u256A':'boxvH','\\u256B':'boxVh','\\u256C':'boxVH','\\u2524':'boxvl','\\u2561':'boxvL','\\u2562':'boxVl','\\u2563':'boxVL','\\u251C':'boxvr','\\u255E':'boxvR','\\u255F':'boxVr','\\u2560':'boxVR','\\u02D8':'breve','\\xA6':'brvbar','\\uD835\\uDCB7':'bscr','\\u204F':'bsemi','\\u29C5':'bsolb','\\\\':'bsol','\\u27C8':'bsolhsub','\\u2022':'bull','\\u224E':'bump','\\u2AAE':'bumpE','\\u224F':'bumpe','\\u0106':'Cacute','\\u0107':'cacute','\\u2A44':'capand','\\u2A49':'capbrcup','\\u2A4B':'capcap','\\u2229':'cap','\\u22D2':'Cap','\\u2A47':'capcup','\\u2A40':'capdot','\\u2145':'DD','\\u2229\\uFE00':'caps','\\u2041':'caret','\\u02C7':'caron','\\u212D':'Cfr','\\u2A4D':'ccaps','\\u010C':'Ccaron','\\u010D':'ccaron','\\xC7':'Ccedil','\\xE7':'ccedil','\\u0108':'Ccirc','\\u0109':'ccirc','\\u2230':'Cconint','\\u2A4C':'ccups','\\u2A50':'ccupssm','\\u010A':'Cdot','\\u010B':'cdot','\\xB8':'cedil','\\u29B2':'cemptyv','\\xA2':'cent','\\xB7':'middot','\\uD835\\uDD20':'cfr','\\u0427':'CHcy','\\u0447':'chcy','\\u2713':'check','\\u03A7':'Chi','\\u03C7':'chi','\\u02C6':'circ','\\u2257':'cire','\\u21BA':'olarr','\\u21BB':'orarr','\\u229B':'oast','\\u229A':'ocir','\\u229D':'odash','\\u2299':'odot','\\xAE':'reg','\\u24C8':'oS','\\u2296':'ominus','\\u2295':'oplus','\\u2297':'otimes','\\u25CB':'cir','\\u29C3':'cirE','\\u2A10':'cirfnint','\\u2AEF':'cirmid','\\u29C2':'cirscir','\\u2232':'cwconint','\\u201D':'rdquo','\\u2019':'rsquo','\\u2663':'clubs',':':'colon','\\u2237':'Colon','\\u2A74':'Colone',',':'comma','@':'commat','\\u2201':'comp','\\u2218':'compfn','\\u2102':'Copf','\\u2245':'cong','\\u2A6D':'congdot','\\u2261':'equiv','\\u222E':'oint','\\u222F':'Conint','\\uD835\\uDD54':'copf','\\u2210':'coprod','\\xA9':'copy','\\u2117':'copysr','\\u21B5':'crarr','\\u2717':'cross','\\u2A2F':'Cross','\\uD835\\uDC9E':'Cscr','\\uD835\\uDCB8':'cscr','\\u2ACF':'csub','\\u2AD1':'csube','\\u2AD0':'csup','\\u2AD2':'csupe','\\u22EF':'ctdot','\\u2938':'cudarrl','\\u2935':'cudarrr','\\u22DE':'cuepr','\\u22DF':'cuesc','\\u21B6':'cularr','\\u293D':'cularrp','\\u2A48':'cupbrcap','\\u2A46':'cupcap','\\u222A':'cup','\\u22D3':'Cup','\\u2A4A':'cupcup','\\u228D':'cupdot','\\u2A45':'cupor','\\u222A\\uFE00':'cups','\\u21B7':'curarr','\\u293C':'curarrm','\\u22CE':'cuvee','\\u22CF':'cuwed','\\xA4':'curren','\\u2231':'cwint','\\u232D':'cylcty','\\u2020':'dagger','\\u2021':'Dagger','\\u2138':'daleth','\\u2193':'darr','\\u21A1':'Darr','\\u21D3':'dArr','\\u2010':'dash','\\u2AE4':'Dashv','\\u22A3':'dashv','\\u290F':'rBarr','\\u02DD':'dblac','\\u010E':'Dcaron','\\u010F':'dcaron','\\u0414':'Dcy','\\u0434':'dcy','\\u21CA':'ddarr','\\u2146':'dd','\\u2911':'DDotrahd','\\u2A77':'eDDot','\\xB0':'deg','\\u2207':'Del','\\u0394':'Delta','\\u03B4':'delta','\\u29B1':'demptyv','\\u297F':'dfisht','\\uD835\\uDD07':'Dfr','\\uD835\\uDD21':'dfr','\\u2965':'dHar','\\u21C3':'dharl','\\u21C2':'dharr','\\u02D9':'dot','`':'grave','\\u02DC':'tilde','\\u22C4':'diam','\\u2666':'diams','\\xA8':'die','\\u03DD':'gammad','\\u22F2':'disin','\\xF7':'div','\\u22C7':'divonx','\\u0402':'DJcy','\\u0452':'djcy','\\u231E':'dlcorn','\\u230D':'dlcrop','$':'dollar','\\uD835\\uDD3B':'Dopf','\\uD835\\uDD55':'dopf','\\u20DC':'DotDot','\\u2250':'doteq','\\u2251':'eDot','\\u2238':'minusd','\\u2214':'plusdo','\\u22A1':'sdotb','\\u21D0':'lArr','\\u21D4':'iff','\\u27F8':'xlArr','\\u27FA':'xhArr','\\u27F9':'xrArr','\\u21D2':'rArr','\\u22A8':'vDash','\\u21D1':'uArr','\\u21D5':'vArr','\\u2225':'par','\\u2913':'DownArrowBar','\\u21F5':'duarr','\\u0311':'DownBreve','\\u2950':'DownLeftRightVector','\\u295E':'DownLeftTeeVector','\\u2956':'DownLeftVectorBar','\\u21BD':'lhard','\\u295F':'DownRightTeeVector','\\u2957':'DownRightVectorBar','\\u21C1':'rhard','\\u21A7':'mapstodown','\\u22A4':'top','\\u2910':'RBarr','\\u231F':'drcorn','\\u230C':'drcrop','\\uD835\\uDC9F':'Dscr','\\uD835\\uDCB9':'dscr','\\u0405':'DScy','\\u0455':'dscy','\\u29F6':'dsol','\\u0110':'Dstrok','\\u0111':'dstrok','\\u22F1':'dtdot','\\u25BF':'dtri','\\u296F':'duhar','\\u29A6':'dwangle','\\u040F':'DZcy','\\u045F':'dzcy','\\u27FF':'dzigrarr','\\xC9':'Eacute','\\xE9':'eacute','\\u2A6E':'easter','\\u011A':'Ecaron','\\u011B':'ecaron','\\xCA':'Ecirc','\\xEA':'ecirc','\\u2256':'ecir','\\u2255':'ecolon','\\u042D':'Ecy','\\u044D':'ecy','\\u0116':'Edot','\\u0117':'edot','\\u2147':'ee','\\u2252':'efDot','\\uD835\\uDD08':'Efr','\\uD835\\uDD22':'efr','\\u2A9A':'eg','\\xC8':'Egrave','\\xE8':'egrave','\\u2A96':'egs','\\u2A98':'egsdot','\\u2A99':'el','\\u2208':'in','\\u23E7':'elinters','\\u2113':'ell','\\u2A95':'els','\\u2A97':'elsdot','\\u0112':'Emacr','\\u0113':'emacr','\\u2205':'empty','\\u25FB':'EmptySmallSquare','\\u25AB':'EmptyVerySmallSquare','\\u2004':'emsp13','\\u2005':'emsp14','\\u2003':'emsp','\\u014A':'ENG','\\u014B':'eng','\\u2002':'ensp','\\u0118':'Eogon','\\u0119':'eogon','\\uD835\\uDD3C':'Eopf','\\uD835\\uDD56':'eopf','\\u22D5':'epar','\\u29E3':'eparsl','\\u2A71':'eplus','\\u03B5':'epsi','\\u0395':'Epsilon','\\u03F5':'epsiv','\\u2242':'esim','\\u2A75':'Equal','=':'equals','\\u225F':'equest','\\u21CC':'rlhar','\\u2A78':'equivDD','\\u29E5':'eqvparsl','\\u2971':'erarr','\\u2253':'erDot','\\u212F':'escr','\\u2130':'Escr','\\u2A73':'Esim','\\u0397':'Eta','\\u03B7':'eta','\\xD0':'ETH','\\xF0':'eth','\\xCB':'Euml','\\xEB':'euml','\\u20AC':'euro','!':'excl','\\u2203':'exist','\\u0424':'Fcy','\\u0444':'fcy','\\u2640':'female','\\uFB03':'ffilig','\\uFB00':'fflig','\\uFB04':'ffllig','\\uD835\\uDD09':'Ffr','\\uD835\\uDD23':'ffr','\\uFB01':'filig','\\u25FC':'FilledSmallSquare','fj':'fjlig','\\u266D':'flat','\\uFB02':'fllig','\\u25B1':'fltns','\\u0192':'fnof','\\uD835\\uDD3D':'Fopf','\\uD835\\uDD57':'fopf','\\u2200':'forall','\\u22D4':'fork','\\u2AD9':'forkv','\\u2131':'Fscr','\\u2A0D':'fpartint','\\xBD':'half','\\u2153':'frac13','\\xBC':'frac14','\\u2155':'frac15','\\u2159':'frac16','\\u215B':'frac18','\\u2154':'frac23','\\u2156':'frac25','\\xBE':'frac34','\\u2157':'frac35','\\u215C':'frac38','\\u2158':'frac45','\\u215A':'frac56','\\u215D':'frac58','\\u215E':'frac78','\\u2044':'frasl','\\u2322':'frown','\\uD835\\uDCBB':'fscr','\\u01F5':'gacute','\\u0393':'Gamma','\\u03B3':'gamma','\\u03DC':'Gammad','\\u2A86':'gap','\\u011E':'Gbreve','\\u011F':'gbreve','\\u0122':'Gcedil','\\u011C':'Gcirc','\\u011D':'gcirc','\\u0413':'Gcy','\\u0433':'gcy','\\u0120':'Gdot','\\u0121':'gdot','\\u2265':'ge','\\u2267':'gE','\\u2A8C':'gEl','\\u22DB':'gel','\\u2A7E':'ges','\\u2AA9':'gescc','\\u2A80':'gesdot','\\u2A82':'gesdoto','\\u2A84':'gesdotol','\\u22DB\\uFE00':'gesl','\\u2A94':'gesles','\\uD835\\uDD0A':'Gfr','\\uD835\\uDD24':'gfr','\\u226B':'gg','\\u22D9':'Gg','\\u2137':'gimel','\\u0403':'GJcy','\\u0453':'gjcy','\\u2AA5':'gla','\\u2277':'gl','\\u2A92':'glE','\\u2AA4':'glj','\\u2A8A':'gnap','\\u2A88':'gne','\\u2269':'gnE','\\u22E7':'gnsim','\\uD835\\uDD3E':'Gopf','\\uD835\\uDD58':'gopf','\\u2AA2':'GreaterGreater','\\u2273':'gsim','\\uD835\\uDCA2':'Gscr','\\u210A':'gscr','\\u2A8E':'gsime','\\u2A90':'gsiml','\\u2AA7':'gtcc','\\u2A7A':'gtcir','>':'gt','\\u22D7':'gtdot','\\u2995':'gtlPar','\\u2A7C':'gtquest','\\u2978':'gtrarr','\\u2269\\uFE00':'gvnE','\\u200A':'hairsp','\\u210B':'Hscr','\\u042A':'HARDcy','\\u044A':'hardcy','\\u2948':'harrcir','\\u2194':'harr','\\u21AD':'harrw','^':'Hat','\\u210F':'hbar','\\u0124':'Hcirc','\\u0125':'hcirc','\\u2665':'hearts','\\u2026':'mldr','\\u22B9':'hercon','\\uD835\\uDD25':'hfr','\\u210C':'Hfr','\\u2925':'searhk','\\u2926':'swarhk','\\u21FF':'hoarr','\\u223B':'homtht','\\u21A9':'larrhk','\\u21AA':'rarrhk','\\uD835\\uDD59':'hopf','\\u210D':'Hopf','\\u2015':'horbar','\\uD835\\uDCBD':'hscr','\\u0126':'Hstrok','\\u0127':'hstrok','\\u2043':'hybull','\\xCD':'Iacute','\\xED':'iacute','\\u2063':'ic','\\xCE':'Icirc','\\xEE':'icirc','\\u0418':'Icy','\\u0438':'icy','\\u0130':'Idot','\\u0415':'IEcy','\\u0435':'iecy','\\xA1':'iexcl','\\uD835\\uDD26':'ifr','\\u2111':'Im','\\xCC':'Igrave','\\xEC':'igrave','\\u2148':'ii','\\u2A0C':'qint','\\u222D':'tint','\\u29DC':'iinfin','\\u2129':'iiota','\\u0132':'IJlig','\\u0133':'ijlig','\\u012A':'Imacr','\\u012B':'imacr','\\u2110':'Iscr','\\u0131':'imath','\\u22B7':'imof','\\u01B5':'imped','\\u2105':'incare','\\u221E':'infin','\\u29DD':'infintie','\\u22BA':'intcal','\\u222B':'int','\\u222C':'Int','\\u2124':'Zopf','\\u2A17':'intlarhk','\\u2A3C':'iprod','\\u2062':'it','\\u0401':'IOcy','\\u0451':'iocy','\\u012E':'Iogon','\\u012F':'iogon','\\uD835\\uDD40':'Iopf','\\uD835\\uDD5A':'iopf','\\u0399':'Iota','\\u03B9':'iota','\\xBF':'iquest','\\uD835\\uDCBE':'iscr','\\u22F5':'isindot','\\u22F9':'isinE','\\u22F4':'isins','\\u22F3':'isinsv','\\u0128':'Itilde','\\u0129':'itilde','\\u0406':'Iukcy','\\u0456':'iukcy','\\xCF':'Iuml','\\xEF':'iuml','\\u0134':'Jcirc','\\u0135':'jcirc','\\u0419':'Jcy','\\u0439':'jcy','\\uD835\\uDD0D':'Jfr','\\uD835\\uDD27':'jfr','\\u0237':'jmath','\\uD835\\uDD41':'Jopf','\\uD835\\uDD5B':'jopf','\\uD835\\uDCA5':'Jscr','\\uD835\\uDCBF':'jscr','\\u0408':'Jsercy','\\u0458':'jsercy','\\u0404':'Jukcy','\\u0454':'jukcy','\\u039A':'Kappa','\\u03BA':'kappa','\\u03F0':'kappav','\\u0136':'Kcedil','\\u0137':'kcedil','\\u041A':'Kcy','\\u043A':'kcy','\\uD835\\uDD0E':'Kfr','\\uD835\\uDD28':'kfr','\\u0138':'kgreen','\\u0425':'KHcy','\\u0445':'khcy','\\u040C':'KJcy','\\u045C':'kjcy','\\uD835\\uDD42':'Kopf','\\uD835\\uDD5C':'kopf','\\uD835\\uDCA6':'Kscr','\\uD835\\uDCC0':'kscr','\\u21DA':'lAarr','\\u0139':'Lacute','\\u013A':'lacute','\\u29B4':'laemptyv','\\u2112':'Lscr','\\u039B':'Lambda','\\u03BB':'lambda','\\u27E8':'lang','\\u27EA':'Lang','\\u2991':'langd','\\u2A85':'lap','\\xAB':'laquo','\\u21E4':'larrb','\\u291F':'larrbfs','\\u2190':'larr','\\u219E':'Larr','\\u291D':'larrfs','\\u21AB':'larrlp','\\u2939':'larrpl','\\u2973':'larrsim','\\u21A2':'larrtl','\\u2919':'latail','\\u291B':'lAtail','\\u2AAB':'lat','\\u2AAD':'late','\\u2AAD\\uFE00':'lates','\\u290C':'lbarr','\\u290E':'lBarr','\\u2772':'lbbrk','{':'lcub','[':'lsqb','\\u298B':'lbrke','\\u298F':'lbrksld','\\u298D':'lbrkslu','\\u013D':'Lcaron','\\u013E':'lcaron','\\u013B':'Lcedil','\\u013C':'lcedil','\\u2308':'lceil','\\u041B':'Lcy','\\u043B':'lcy','\\u2936':'ldca','\\u201C':'ldquo','\\u2967':'ldrdhar','\\u294B':'ldrushar','\\u21B2':'ldsh','\\u2264':'le','\\u2266':'lE','\\u21C6':'lrarr','\\u27E6':'lobrk','\\u2961':'LeftDownTeeVector','\\u2959':'LeftDownVectorBar','\\u230A':'lfloor','\\u21BC':'lharu','\\u21C7':'llarr','\\u21CB':'lrhar','\\u294E':'LeftRightVector','\\u21A4':'mapstoleft','\\u295A':'LeftTeeVector','\\u22CB':'lthree','\\u29CF':'LeftTriangleBar','\\u22B2':'vltri','\\u22B4':'ltrie','\\u2951':'LeftUpDownVector','\\u2960':'LeftUpTeeVector','\\u2958':'LeftUpVectorBar','\\u21BF':'uharl','\\u2952':'LeftVectorBar','\\u2A8B':'lEg','\\u22DA':'leg','\\u2A7D':'les','\\u2AA8':'lescc','\\u2A7F':'lesdot','\\u2A81':'lesdoto','\\u2A83':'lesdotor','\\u22DA\\uFE00':'lesg','\\u2A93':'lesges','\\u22D6':'ltdot','\\u2276':'lg','\\u2AA1':'LessLess','\\u2272':'lsim','\\u297C':'lfisht','\\uD835\\uDD0F':'Lfr','\\uD835\\uDD29':'lfr','\\u2A91':'lgE','\\u2962':'lHar','\\u296A':'lharul','\\u2584':'lhblk','\\u0409':'LJcy','\\u0459':'ljcy','\\u226A':'ll','\\u22D8':'Ll','\\u296B':'llhard','\\u25FA':'lltri','\\u013F':'Lmidot','\\u0140':'lmidot','\\u23B0':'lmoust','\\u2A89':'lnap','\\u2A87':'lne','\\u2268':'lnE','\\u22E6':'lnsim','\\u27EC':'loang','\\u21FD':'loarr','\\u27F5':'xlarr','\\u27F7':'xharr','\\u27FC':'xmap','\\u27F6':'xrarr','\\u21AC':'rarrlp','\\u2985':'lopar','\\uD835\\uDD43':'Lopf','\\uD835\\uDD5D':'lopf','\\u2A2D':'loplus','\\u2A34':'lotimes','\\u2217':'lowast','_':'lowbar','\\u2199':'swarr','\\u2198':'searr','\\u25CA':'loz','(':'lpar','\\u2993':'lparlt','\\u296D':'lrhard','\\u200E':'lrm','\\u22BF':'lrtri','\\u2039':'lsaquo','\\uD835\\uDCC1':'lscr','\\u21B0':'lsh','\\u2A8D':'lsime','\\u2A8F':'lsimg','\\u2018':'lsquo','\\u201A':'sbquo','\\u0141':'Lstrok','\\u0142':'lstrok','\\u2AA6':'ltcc','\\u2A79':'ltcir','<':'lt','\\u22C9':'ltimes','\\u2976':'ltlarr','\\u2A7B':'ltquest','\\u25C3':'ltri','\\u2996':'ltrPar','\\u294A':'lurdshar','\\u2966':'luruhar','\\u2268\\uFE00':'lvnE','\\xAF':'macr','\\u2642':'male','\\u2720':'malt','\\u2905':'Map','\\u21A6':'map','\\u21A5':'mapstoup','\\u25AE':'marker','\\u2A29':'mcomma','\\u041C':'Mcy','\\u043C':'mcy','\\u2014':'mdash','\\u223A':'mDDot','\\u205F':'MediumSpace','\\u2133':'Mscr','\\uD835\\uDD10':'Mfr','\\uD835\\uDD2A':'mfr','\\u2127':'mho','\\xB5':'micro','\\u2AF0':'midcir','\\u2223':'mid','\\u2212':'minus','\\u2A2A':'minusdu','\\u2213':'mp','\\u2ADB':'mlcp','\\u22A7':'models','\\uD835\\uDD44':'Mopf','\\uD835\\uDD5E':'mopf','\\uD835\\uDCC2':'mscr','\\u039C':'Mu','\\u03BC':'mu','\\u22B8':'mumap','\\u0143':'Nacute','\\u0144':'nacute','\\u2220\\u20D2':'nang','\\u2249':'nap','\\u2A70\\u0338':'napE','\\u224B\\u0338':'napid','\\u0149':'napos','\\u266E':'natur','\\u2115':'Nopf','\\xA0':'nbsp','\\u224E\\u0338':'nbump','\\u224F\\u0338':'nbumpe','\\u2A43':'ncap','\\u0147':'Ncaron','\\u0148':'ncaron','\\u0145':'Ncedil','\\u0146':'ncedil','\\u2247':'ncong','\\u2A6D\\u0338':'ncongdot','\\u2A42':'ncup','\\u041D':'Ncy','\\u043D':'ncy','\\u2013':'ndash','\\u2924':'nearhk','\\u2197':'nearr','\\u21D7':'neArr','\\u2260':'ne','\\u2250\\u0338':'nedot','\\u200B':'ZeroWidthSpace','\\u2262':'nequiv','\\u2928':'toea','\\u2242\\u0338':'nesim','\\n':'NewLine','\\u2204':'nexist','\\uD835\\uDD11':'Nfr','\\uD835\\uDD2B':'nfr','\\u2267\\u0338':'ngE','\\u2271':'nge','\\u2A7E\\u0338':'nges','\\u22D9\\u0338':'nGg','\\u2275':'ngsim','\\u226B\\u20D2':'nGt','\\u226F':'ngt','\\u226B\\u0338':'nGtv','\\u21AE':'nharr','\\u21CE':'nhArr','\\u2AF2':'nhpar','\\u220B':'ni','\\u22FC':'nis','\\u22FA':'nisd','\\u040A':'NJcy','\\u045A':'njcy','\\u219A':'nlarr','\\u21CD':'nlArr','\\u2025':'nldr','\\u2266\\u0338':'nlE','\\u2270':'nle','\\u2A7D\\u0338':'nles','\\u226E':'nlt','\\u22D8\\u0338':'nLl','\\u2274':'nlsim','\\u226A\\u20D2':'nLt','\\u22EA':'nltri','\\u22EC':'nltrie','\\u226A\\u0338':'nLtv','\\u2224':'nmid','\\u2060':'NoBreak','\\uD835\\uDD5F':'nopf','\\u2AEC':'Not','\\xAC':'not','\\u226D':'NotCupCap','\\u2226':'npar','\\u2209':'notin','\\u2279':'ntgl','\\u22F5\\u0338':'notindot','\\u22F9\\u0338':'notinE','\\u22F7':'notinvb','\\u22F6':'notinvc','\\u29CF\\u0338':'NotLeftTriangleBar','\\u2278':'ntlg','\\u2AA2\\u0338':'NotNestedGreaterGreater','\\u2AA1\\u0338':'NotNestedLessLess','\\u220C':'notni','\\u22FE':'notnivb','\\u22FD':'notnivc','\\u2280':'npr','\\u2AAF\\u0338':'npre','\\u22E0':'nprcue','\\u29D0\\u0338':'NotRightTriangleBar','\\u22EB':'nrtri','\\u22ED':'nrtrie','\\u228F\\u0338':'NotSquareSubset','\\u22E2':'nsqsube','\\u2290\\u0338':'NotSquareSuperset','\\u22E3':'nsqsupe','\\u2282\\u20D2':'vnsub','\\u2288':'nsube','\\u2281':'nsc','\\u2AB0\\u0338':'nsce','\\u22E1':'nsccue','\\u227F\\u0338':'NotSucceedsTilde','\\u2283\\u20D2':'vnsup','\\u2289':'nsupe','\\u2241':'nsim','\\u2244':'nsime','\\u2AFD\\u20E5':'nparsl','\\u2202\\u0338':'npart','\\u2A14':'npolint','\\u2933\\u0338':'nrarrc','\\u219B':'nrarr','\\u21CF':'nrArr','\\u219D\\u0338':'nrarrw','\\uD835\\uDCA9':'Nscr','\\uD835\\uDCC3':'nscr','\\u2284':'nsub','\\u2AC5\\u0338':'nsubE','\\u2285':'nsup','\\u2AC6\\u0338':'nsupE','\\xD1':'Ntilde','\\xF1':'ntilde','\\u039D':'Nu','\\u03BD':'nu','#':'num','\\u2116':'numero','\\u2007':'numsp','\\u224D\\u20D2':'nvap','\\u22AC':'nvdash','\\u22AD':'nvDash','\\u22AE':'nVdash','\\u22AF':'nVDash','\\u2265\\u20D2':'nvge','>\\u20D2':'nvgt','\\u2904':'nvHarr','\\u29DE':'nvinfin','\\u2902':'nvlArr','\\u2264\\u20D2':'nvle','<\\u20D2':'nvlt','\\u22B4\\u20D2':'nvltrie','\\u2903':'nvrArr','\\u22B5\\u20D2':'nvrtrie','\\u223C\\u20D2':'nvsim','\\u2923':'nwarhk','\\u2196':'nwarr','\\u21D6':'nwArr','\\u2927':'nwnear','\\xD3':'Oacute','\\xF3':'oacute','\\xD4':'Ocirc','\\xF4':'ocirc','\\u041E':'Ocy','\\u043E':'ocy','\\u0150':'Odblac','\\u0151':'odblac','\\u2A38':'odiv','\\u29BC':'odsold','\\u0152':'OElig','\\u0153':'oelig','\\u29BF':'ofcir','\\uD835\\uDD12':'Ofr','\\uD835\\uDD2C':'ofr','\\u02DB':'ogon','\\xD2':'Ograve','\\xF2':'ograve','\\u29C1':'ogt','\\u29B5':'ohbar','\\u03A9':'ohm','\\u29BE':'olcir','\\u29BB':'olcross','\\u203E':'oline','\\u29C0':'olt','\\u014C':'Omacr','\\u014D':'omacr','\\u03C9':'omega','\\u039F':'Omicron','\\u03BF':'omicron','\\u29B6':'omid','\\uD835\\uDD46':'Oopf','\\uD835\\uDD60':'oopf','\\u29B7':'opar','\\u29B9':'operp','\\u2A54':'Or','\\u2228':'or','\\u2A5D':'ord','\\u2134':'oscr','\\xAA':'ordf','\\xBA':'ordm','\\u22B6':'origof','\\u2A56':'oror','\\u2A57':'orslope','\\u2A5B':'orv','\\uD835\\uDCAA':'Oscr','\\xD8':'Oslash','\\xF8':'oslash','\\u2298':'osol','\\xD5':'Otilde','\\xF5':'otilde','\\u2A36':'otimesas','\\u2A37':'Otimes','\\xD6':'Ouml','\\xF6':'ouml','\\u233D':'ovbar','\\u23DE':'OverBrace','\\u23B4':'tbrk','\\u23DC':'OverParenthesis','\\xB6':'para','\\u2AF3':'parsim','\\u2AFD':'parsl','\\u2202':'part','\\u041F':'Pcy','\\u043F':'pcy','%':'percnt','.':'period','\\u2030':'permil','\\u2031':'pertenk','\\uD835\\uDD13':'Pfr','\\uD835\\uDD2D':'pfr','\\u03A6':'Phi','\\u03C6':'phi','\\u03D5':'phiv','\\u260E':'phone','\\u03A0':'Pi','\\u03C0':'pi','\\u03D6':'piv','\\u210E':'planckh','\\u2A23':'plusacir','\\u2A22':'pluscir','+':'plus','\\u2A25':'plusdu','\\u2A72':'pluse','\\xB1':'pm','\\u2A26':'plussim','\\u2A27':'plustwo','\\u2A15':'pointint','\\uD835\\uDD61':'popf','\\u2119':'Popf','\\xA3':'pound','\\u2AB7':'prap','\\u2ABB':'Pr','\\u227A':'pr','\\u227C':'prcue','\\u2AAF':'pre','\\u227E':'prsim','\\u2AB9':'prnap','\\u2AB5':'prnE','\\u22E8':'prnsim','\\u2AB3':'prE','\\u2032':'prime','\\u2033':'Prime','\\u220F':'prod','\\u232E':'profalar','\\u2312':'profline','\\u2313':'profsurf','\\u221D':'prop','\\u22B0':'prurel','\\uD835\\uDCAB':'Pscr','\\uD835\\uDCC5':'pscr','\\u03A8':'Psi','\\u03C8':'psi','\\u2008':'puncsp','\\uD835\\uDD14':'Qfr','\\uD835\\uDD2E':'qfr','\\uD835\\uDD62':'qopf','\\u211A':'Qopf','\\u2057':'qprime','\\uD835\\uDCAC':'Qscr','\\uD835\\uDCC6':'qscr','\\u2A16':'quatint','?':'quest','\"':'quot','\\u21DB':'rAarr','\\u223D\\u0331':'race','\\u0154':'Racute','\\u0155':'racute','\\u221A':'Sqrt','\\u29B3':'raemptyv','\\u27E9':'rang','\\u27EB':'Rang','\\u2992':'rangd','\\u29A5':'range','\\xBB':'raquo','\\u2975':'rarrap','\\u21E5':'rarrb','\\u2920':'rarrbfs','\\u2933':'rarrc','\\u2192':'rarr','\\u21A0':'Rarr','\\u291E':'rarrfs','\\u2945':'rarrpl','\\u2974':'rarrsim','\\u2916':'Rarrtl','\\u21A3':'rarrtl','\\u219D':'rarrw','\\u291A':'ratail','\\u291C':'rAtail','\\u2236':'ratio','\\u2773':'rbbrk','}':'rcub',']':'rsqb','\\u298C':'rbrke','\\u298E':'rbrksld','\\u2990':'rbrkslu','\\u0158':'Rcaron','\\u0159':'rcaron','\\u0156':'Rcedil','\\u0157':'rcedil','\\u2309':'rceil','\\u0420':'Rcy','\\u0440':'rcy','\\u2937':'rdca','\\u2969':'rdldhar','\\u21B3':'rdsh','\\u211C':'Re','\\u211B':'Rscr','\\u211D':'Ropf','\\u25AD':'rect','\\u297D':'rfisht','\\u230B':'rfloor','\\uD835\\uDD2F':'rfr','\\u2964':'rHar','\\u21C0':'rharu','\\u296C':'rharul','\\u03A1':'Rho','\\u03C1':'rho','\\u03F1':'rhov','\\u21C4':'rlarr','\\u27E7':'robrk','\\u295D':'RightDownTeeVector','\\u2955':'RightDownVectorBar','\\u21C9':'rrarr','\\u22A2':'vdash','\\u295B':'RightTeeVector','\\u22CC':'rthree','\\u29D0':'RightTriangleBar','\\u22B3':'vrtri','\\u22B5':'rtrie','\\u294F':'RightUpDownVector','\\u295C':'RightUpTeeVector','\\u2954':'RightUpVectorBar','\\u21BE':'uharr','\\u2953':'RightVectorBar','\\u02DA':'ring','\\u200F':'rlm','\\u23B1':'rmoust','\\u2AEE':'rnmid','\\u27ED':'roang','\\u21FE':'roarr','\\u2986':'ropar','\\uD835\\uDD63':'ropf','\\u2A2E':'roplus','\\u2A35':'rotimes','\\u2970':'RoundImplies',')':'rpar','\\u2994':'rpargt','\\u2A12':'rppolint','\\u203A':'rsaquo','\\uD835\\uDCC7':'rscr','\\u21B1':'rsh','\\u22CA':'rtimes','\\u25B9':'rtri','\\u29CE':'rtriltri','\\u29F4':'RuleDelayed','\\u2968':'ruluhar','\\u211E':'rx','\\u015A':'Sacute','\\u015B':'sacute','\\u2AB8':'scap','\\u0160':'Scaron','\\u0161':'scaron','\\u2ABC':'Sc','\\u227B':'sc','\\u227D':'sccue','\\u2AB0':'sce','\\u2AB4':'scE','\\u015E':'Scedil','\\u015F':'scedil','\\u015C':'Scirc','\\u015D':'scirc','\\u2ABA':'scnap','\\u2AB6':'scnE','\\u22E9':'scnsim','\\u2A13':'scpolint','\\u227F':'scsim','\\u0421':'Scy','\\u0441':'scy','\\u22C5':'sdot','\\u2A66':'sdote','\\u21D8':'seArr','\\xA7':'sect',';':'semi','\\u2929':'tosa','\\u2736':'sext','\\uD835\\uDD16':'Sfr','\\uD835\\uDD30':'sfr','\\u266F':'sharp','\\u0429':'SHCHcy','\\u0449':'shchcy','\\u0428':'SHcy','\\u0448':'shcy','\\u2191':'uarr','\\xAD':'shy','\\u03A3':'Sigma','\\u03C3':'sigma','\\u03C2':'sigmaf','\\u223C':'sim','\\u2A6A':'simdot','\\u2243':'sime','\\u2A9E':'simg','\\u2AA0':'simgE','\\u2A9D':'siml','\\u2A9F':'simlE','\\u2246':'simne','\\u2A24':'simplus','\\u2972':'simrarr','\\u2A33':'smashp','\\u29E4':'smeparsl','\\u2323':'smile','\\u2AAA':'smt','\\u2AAC':'smte','\\u2AAC\\uFE00':'smtes','\\u042C':'SOFTcy','\\u044C':'softcy','\\u233F':'solbar','\\u29C4':'solb','/':'sol','\\uD835\\uDD4A':'Sopf','\\uD835\\uDD64':'sopf','\\u2660':'spades','\\u2293':'sqcap','\\u2293\\uFE00':'sqcaps','\\u2294':'sqcup','\\u2294\\uFE00':'sqcups','\\u228F':'sqsub','\\u2291':'sqsube','\\u2290':'sqsup','\\u2292':'sqsupe','\\u25A1':'squ','\\uD835\\uDCAE':'Sscr','\\uD835\\uDCC8':'sscr','\\u22C6':'Star','\\u2606':'star','\\u2282':'sub','\\u22D0':'Sub','\\u2ABD':'subdot','\\u2AC5':'subE','\\u2286':'sube','\\u2AC3':'subedot','\\u2AC1':'submult','\\u2ACB':'subnE','\\u228A':'subne','\\u2ABF':'subplus','\\u2979':'subrarr','\\u2AC7':'subsim','\\u2AD5':'subsub','\\u2AD3':'subsup','\\u2211':'sum','\\u266A':'sung','\\xB9':'sup1','\\xB2':'sup2','\\xB3':'sup3','\\u2283':'sup','\\u22D1':'Sup','\\u2ABE':'supdot','\\u2AD8':'supdsub','\\u2AC6':'supE','\\u2287':'supe','\\u2AC4':'supedot','\\u27C9':'suphsol','\\u2AD7':'suphsub','\\u297B':'suplarr','\\u2AC2':'supmult','\\u2ACC':'supnE','\\u228B':'supne','\\u2AC0':'supplus','\\u2AC8':'supsim','\\u2AD4':'supsub','\\u2AD6':'supsup','\\u21D9':'swArr','\\u292A':'swnwar','\\xDF':'szlig','\\t':'Tab','\\u2316':'target','\\u03A4':'Tau','\\u03C4':'tau','\\u0164':'Tcaron','\\u0165':'tcaron','\\u0162':'Tcedil','\\u0163':'tcedil','\\u0422':'Tcy','\\u0442':'tcy','\\u20DB':'tdot','\\u2315':'telrec','\\uD835\\uDD17':'Tfr','\\uD835\\uDD31':'tfr','\\u2234':'there4','\\u0398':'Theta','\\u03B8':'theta','\\u03D1':'thetav','\\u205F\\u200A':'ThickSpace','\\u2009':'thinsp','\\xDE':'THORN','\\xFE':'thorn','\\u2A31':'timesbar','\\xD7':'times','\\u2A30':'timesd','\\u2336':'topbot','\\u2AF1':'topcir','\\uD835\\uDD4B':'Topf','\\uD835\\uDD65':'topf','\\u2ADA':'topfork','\\u2034':'tprime','\\u2122':'trade','\\u25B5':'utri','\\u225C':'trie','\\u25EC':'tridot','\\u2A3A':'triminus','\\u2A39':'triplus','\\u29CD':'trisb','\\u2A3B':'tritime','\\u23E2':'trpezium','\\uD835\\uDCAF':'Tscr','\\uD835\\uDCC9':'tscr','\\u0426':'TScy','\\u0446':'tscy','\\u040B':'TSHcy','\\u045B':'tshcy','\\u0166':'Tstrok','\\u0167':'tstrok','\\xDA':'Uacute','\\xFA':'uacute','\\u219F':'Uarr','\\u2949':'Uarrocir','\\u040E':'Ubrcy','\\u045E':'ubrcy','\\u016C':'Ubreve','\\u016D':'ubreve','\\xDB':'Ucirc','\\xFB':'ucirc','\\u0423':'Ucy','\\u0443':'ucy','\\u21C5':'udarr','\\u0170':'Udblac','\\u0171':'udblac','\\u296E':'udhar','\\u297E':'ufisht','\\uD835\\uDD18':'Ufr','\\uD835\\uDD32':'ufr','\\xD9':'Ugrave','\\xF9':'ugrave','\\u2963':'uHar','\\u2580':'uhblk','\\u231C':'ulcorn','\\u230F':'ulcrop','\\u25F8':'ultri','\\u016A':'Umacr','\\u016B':'umacr','\\u23DF':'UnderBrace','\\u23DD':'UnderParenthesis','\\u228E':'uplus','\\u0172':'Uogon','\\u0173':'uogon','\\uD835\\uDD4C':'Uopf','\\uD835\\uDD66':'uopf','\\u2912':'UpArrowBar','\\u2195':'varr','\\u03C5':'upsi','\\u03D2':'Upsi','\\u03A5':'Upsilon','\\u21C8':'uuarr','\\u231D':'urcorn','\\u230E':'urcrop','\\u016E':'Uring','\\u016F':'uring','\\u25F9':'urtri','\\uD835\\uDCB0':'Uscr','\\uD835\\uDCCA':'uscr','\\u22F0':'utdot','\\u0168':'Utilde','\\u0169':'utilde','\\xDC':'Uuml','\\xFC':'uuml','\\u29A7':'uwangle','\\u299C':'vangrt','\\u228A\\uFE00':'vsubne','\\u2ACB\\uFE00':'vsubnE','\\u228B\\uFE00':'vsupne','\\u2ACC\\uFE00':'vsupnE','\\u2AE8':'vBar','\\u2AEB':'Vbar','\\u2AE9':'vBarv','\\u0412':'Vcy','\\u0432':'vcy','\\u22A9':'Vdash','\\u22AB':'VDash','\\u2AE6':'Vdashl','\\u22BB':'veebar','\\u225A':'veeeq','\\u22EE':'vellip','|':'vert','\\u2016':'Vert','\\u2758':'VerticalSeparator','\\u2240':'wr','\\uD835\\uDD19':'Vfr','\\uD835\\uDD33':'vfr','\\uD835\\uDD4D':'Vopf','\\uD835\\uDD67':'vopf','\\uD835\\uDCB1':'Vscr','\\uD835\\uDCCB':'vscr','\\u22AA':'Vvdash','\\u299A':'vzigzag','\\u0174':'Wcirc','\\u0175':'wcirc','\\u2A5F':'wedbar','\\u2259':'wedgeq','\\u2118':'wp','\\uD835\\uDD1A':'Wfr','\\uD835\\uDD34':'wfr','\\uD835\\uDD4E':'Wopf','\\uD835\\uDD68':'wopf','\\uD835\\uDCB2':'Wscr','\\uD835\\uDCCC':'wscr','\\uD835\\uDD1B':'Xfr','\\uD835\\uDD35':'xfr','\\u039E':'Xi','\\u03BE':'xi','\\u22FB':'xnis','\\uD835\\uDD4F':'Xopf','\\uD835\\uDD69':'xopf','\\uD835\\uDCB3':'Xscr','\\uD835\\uDCCD':'xscr','\\xDD':'Yacute','\\xFD':'yacute','\\u042F':'YAcy','\\u044F':'yacy','\\u0176':'Ycirc','\\u0177':'ycirc','\\u042B':'Ycy','\\u044B':'ycy','\\xA5':'yen','\\uD835\\uDD1C':'Yfr','\\uD835\\uDD36':'yfr','\\u0407':'YIcy','\\u0457':'yicy','\\uD835\\uDD50':'Yopf','\\uD835\\uDD6A':'yopf','\\uD835\\uDCB4':'Yscr','\\uD835\\uDCCE':'yscr','\\u042E':'YUcy','\\u044E':'yucy','\\xFF':'yuml','\\u0178':'Yuml','\\u0179':'Zacute','\\u017A':'zacute','\\u017D':'Zcaron','\\u017E':'zcaron','\\u0417':'Zcy','\\u0437':'zcy','\\u017B':'Zdot','\\u017C':'zdot','\\u2128':'Zfr','\\u0396':'Zeta','\\u03B6':'zeta','\\uD835\\uDD37':'zfr','\\u0416':'ZHcy','\\u0436':'zhcy','\\u21DD':'zigrarr','\\uD835\\uDD6B':'zopf','\\uD835\\uDCB5':'Zscr','\\uD835\\uDCCF':'zscr','\\u200D':'zwj','\\u200C':'zwnj'};\n\n\tvar regexEscape = /[\"&'<>`]/g;\n\tvar escapeMap = {\n\t\t'\"': '&quot;',\n\t\t'&': '&amp;',\n\t\t'\\'': '&#x27;',\n\t\t'<': '&lt;',\n\t\t// See https://mathiasbynens.be/notes/ambiguous-ampersands: in HTML, the\n\t\t// following is not strictly necessary unless it’s part of a tag or an\n\t\t// unquoted attribute value. We’re only escaping it to support those\n\t\t// situations, and for XML support.\n\t\t'>': '&gt;',\n\t\t// In Internet Explorer ≤ 8, the backtick character can be used\n\t\t// to break out of (un)quoted attribute values or HTML comments.\n\t\t// See http://html5sec.org/#102, http://html5sec.org/#108, and\n\t\t// http://html5sec.org/#133.\n\t\t'`': '&#x60;'\n\t};\n\n\tvar regexInvalidEntity = /&#(?:[xX][^a-fA-F0-9]|[^0-9xX])/;\n\tvar regexInvalidRawCodePoint = /[\\0-\\x08\\x0B\\x0E-\\x1F\\x7F-\\x9F\\uFDD0-\\uFDEF\\uFFFE\\uFFFF]|[\\uD83F\\uD87F\\uD8BF\\uD8FF\\uD93F\\uD97F\\uD9BF\\uD9FF\\uDA3F\\uDA7F\\uDABF\\uDAFF\\uDB3F\\uDB7F\\uDBBF\\uDBFF][\\uDFFE\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n\tvar regexDecode = /&#([0-9]+)(;?)|&#[xX]([a-fA-F0-9]+)(;?)|&([0-9a-zA-Z]+);|&(Aacute|iacute|Uacute|plusmn|otilde|Otilde|Agrave|agrave|yacute|Yacute|oslash|Oslash|Atilde|atilde|brvbar|Ccedil|ccedil|ograve|curren|divide|Eacute|eacute|Ograve|oacute|Egrave|egrave|ugrave|frac12|frac14|frac34|Ugrave|Oacute|Iacute|ntilde|Ntilde|uacute|middot|Igrave|igrave|iquest|aacute|laquo|THORN|micro|iexcl|icirc|Icirc|Acirc|ucirc|ecirc|Ocirc|ocirc|Ecirc|Ucirc|aring|Aring|aelig|AElig|acute|pound|raquo|acirc|times|thorn|szlig|cedil|COPY|Auml|ordf|ordm|uuml|macr|Uuml|auml|Ouml|ouml|para|nbsp|Euml|quot|QUOT|euml|yuml|cent|sect|copy|sup1|sup2|sup3|Iuml|iuml|shy|eth|reg|not|yen|amp|AMP|REG|uml|ETH|deg|gt|GT|LT|lt)([=a-zA-Z0-9])?/g;\n\tvar decodeMap = {'Aacute':'\\xC1','aacute':'\\xE1','Abreve':'\\u0102','abreve':'\\u0103','ac':'\\u223E','acd':'\\u223F','acE':'\\u223E\\u0333','Acirc':'\\xC2','acirc':'\\xE2','acute':'\\xB4','Acy':'\\u0410','acy':'\\u0430','AElig':'\\xC6','aelig':'\\xE6','af':'\\u2061','Afr':'\\uD835\\uDD04','afr':'\\uD835\\uDD1E','Agrave':'\\xC0','agrave':'\\xE0','alefsym':'\\u2135','aleph':'\\u2135','Alpha':'\\u0391','alpha':'\\u03B1','Amacr':'\\u0100','amacr':'\\u0101','amalg':'\\u2A3F','amp':'&','AMP':'&','andand':'\\u2A55','And':'\\u2A53','and':'\\u2227','andd':'\\u2A5C','andslope':'\\u2A58','andv':'\\u2A5A','ang':'\\u2220','ange':'\\u29A4','angle':'\\u2220','angmsdaa':'\\u29A8','angmsdab':'\\u29A9','angmsdac':'\\u29AA','angmsdad':'\\u29AB','angmsdae':'\\u29AC','angmsdaf':'\\u29AD','angmsdag':'\\u29AE','angmsdah':'\\u29AF','angmsd':'\\u2221','angrt':'\\u221F','angrtvb':'\\u22BE','angrtvbd':'\\u299D','angsph':'\\u2222','angst':'\\xC5','angzarr':'\\u237C','Aogon':'\\u0104','aogon':'\\u0105','Aopf':'\\uD835\\uDD38','aopf':'\\uD835\\uDD52','apacir':'\\u2A6F','ap':'\\u2248','apE':'\\u2A70','ape':'\\u224A','apid':'\\u224B','apos':'\\'','ApplyFunction':'\\u2061','approx':'\\u2248','approxeq':'\\u224A','Aring':'\\xC5','aring':'\\xE5','Ascr':'\\uD835\\uDC9C','ascr':'\\uD835\\uDCB6','Assign':'\\u2254','ast':'*','asymp':'\\u2248','asympeq':'\\u224D','Atilde':'\\xC3','atilde':'\\xE3','Auml':'\\xC4','auml':'\\xE4','awconint':'\\u2233','awint':'\\u2A11','backcong':'\\u224C','backepsilon':'\\u03F6','backprime':'\\u2035','backsim':'\\u223D','backsimeq':'\\u22CD','Backslash':'\\u2216','Barv':'\\u2AE7','barvee':'\\u22BD','barwed':'\\u2305','Barwed':'\\u2306','barwedge':'\\u2305','bbrk':'\\u23B5','bbrktbrk':'\\u23B6','bcong':'\\u224C','Bcy':'\\u0411','bcy':'\\u0431','bdquo':'\\u201E','becaus':'\\u2235','because':'\\u2235','Because':'\\u2235','bemptyv':'\\u29B0','bepsi':'\\u03F6','bernou':'\\u212C','Bernoullis':'\\u212C','Beta':'\\u0392','beta':'\\u03B2','beth':'\\u2136','between':'\\u226C','Bfr':'\\uD835\\uDD05','bfr':'\\uD835\\uDD1F','bigcap':'\\u22C2','bigcirc':'\\u25EF','bigcup':'\\u22C3','bigodot':'\\u2A00','bigoplus':'\\u2A01','bigotimes':'\\u2A02','bigsqcup':'\\u2A06','bigstar':'\\u2605','bigtriangledown':'\\u25BD','bigtriangleup':'\\u25B3','biguplus':'\\u2A04','bigvee':'\\u22C1','bigwedge':'\\u22C0','bkarow':'\\u290D','blacklozenge':'\\u29EB','blacksquare':'\\u25AA','blacktriangle':'\\u25B4','blacktriangledown':'\\u25BE','blacktriangleleft':'\\u25C2','blacktriangleright':'\\u25B8','blank':'\\u2423','blk12':'\\u2592','blk14':'\\u2591','blk34':'\\u2593','block':'\\u2588','bne':'=\\u20E5','bnequiv':'\\u2261\\u20E5','bNot':'\\u2AED','bnot':'\\u2310','Bopf':'\\uD835\\uDD39','bopf':'\\uD835\\uDD53','bot':'\\u22A5','bottom':'\\u22A5','bowtie':'\\u22C8','boxbox':'\\u29C9','boxdl':'\\u2510','boxdL':'\\u2555','boxDl':'\\u2556','boxDL':'\\u2557','boxdr':'\\u250C','boxdR':'\\u2552','boxDr':'\\u2553','boxDR':'\\u2554','boxh':'\\u2500','boxH':'\\u2550','boxhd':'\\u252C','boxHd':'\\u2564','boxhD':'\\u2565','boxHD':'\\u2566','boxhu':'\\u2534','boxHu':'\\u2567','boxhU':'\\u2568','boxHU':'\\u2569','boxminus':'\\u229F','boxplus':'\\u229E','boxtimes':'\\u22A0','boxul':'\\u2518','boxuL':'\\u255B','boxUl':'\\u255C','boxUL':'\\u255D','boxur':'\\u2514','boxuR':'\\u2558','boxUr':'\\u2559','boxUR':'\\u255A','boxv':'\\u2502','boxV':'\\u2551','boxvh':'\\u253C','boxvH':'\\u256A','boxVh':'\\u256B','boxVH':'\\u256C','boxvl':'\\u2524','boxvL':'\\u2561','boxVl':'\\u2562','boxVL':'\\u2563','boxvr':'\\u251C','boxvR':'\\u255E','boxVr':'\\u255F','boxVR':'\\u2560','bprime':'\\u2035','breve':'\\u02D8','Breve':'\\u02D8','brvbar':'\\xA6','bscr':'\\uD835\\uDCB7','Bscr':'\\u212C','bsemi':'\\u204F','bsim':'\\u223D','bsime':'\\u22CD','bsolb':'\\u29C5','bsol':'\\\\','bsolhsub':'\\u27C8','bull':'\\u2022','bullet':'\\u2022','bump':'\\u224E','bumpE':'\\u2AAE','bumpe':'\\u224F','Bumpeq':'\\u224E','bumpeq':'\\u224F','Cacute':'\\u0106','cacute':'\\u0107','capand':'\\u2A44','capbrcup':'\\u2A49','capcap':'\\u2A4B','cap':'\\u2229','Cap':'\\u22D2','capcup':'\\u2A47','capdot':'\\u2A40','CapitalDifferentialD':'\\u2145','caps':'\\u2229\\uFE00','caret':'\\u2041','caron':'\\u02C7','Cayleys':'\\u212D','ccaps':'\\u2A4D','Ccaron':'\\u010C','ccaron':'\\u010D','Ccedil':'\\xC7','ccedil':'\\xE7','Ccirc':'\\u0108','ccirc':'\\u0109','Cconint':'\\u2230','ccups':'\\u2A4C','ccupssm':'\\u2A50','Cdot':'\\u010A','cdot':'\\u010B','cedil':'\\xB8','Cedilla':'\\xB8','cemptyv':'\\u29B2','cent':'\\xA2','centerdot':'\\xB7','CenterDot':'\\xB7','cfr':'\\uD835\\uDD20','Cfr':'\\u212D','CHcy':'\\u0427','chcy':'\\u0447','check':'\\u2713','checkmark':'\\u2713','Chi':'\\u03A7','chi':'\\u03C7','circ':'\\u02C6','circeq':'\\u2257','circlearrowleft':'\\u21BA','circlearrowright':'\\u21BB','circledast':'\\u229B','circledcirc':'\\u229A','circleddash':'\\u229D','CircleDot':'\\u2299','circledR':'\\xAE','circledS':'\\u24C8','CircleMinus':'\\u2296','CirclePlus':'\\u2295','CircleTimes':'\\u2297','cir':'\\u25CB','cirE':'\\u29C3','cire':'\\u2257','cirfnint':'\\u2A10','cirmid':'\\u2AEF','cirscir':'\\u29C2','ClockwiseContourIntegral':'\\u2232','CloseCurlyDoubleQuote':'\\u201D','CloseCurlyQuote':'\\u2019','clubs':'\\u2663','clubsuit':'\\u2663','colon':':','Colon':'\\u2237','Colone':'\\u2A74','colone':'\\u2254','coloneq':'\\u2254','comma':',','commat':'@','comp':'\\u2201','compfn':'\\u2218','complement':'\\u2201','complexes':'\\u2102','cong':'\\u2245','congdot':'\\u2A6D','Congruent':'\\u2261','conint':'\\u222E','Conint':'\\u222F','ContourIntegral':'\\u222E','copf':'\\uD835\\uDD54','Copf':'\\u2102','coprod':'\\u2210','Coproduct':'\\u2210','copy':'\\xA9','COPY':'\\xA9','copysr':'\\u2117','CounterClockwiseContourIntegral':'\\u2233','crarr':'\\u21B5','cross':'\\u2717','Cross':'\\u2A2F','Cscr':'\\uD835\\uDC9E','cscr':'\\uD835\\uDCB8','csub':'\\u2ACF','csube':'\\u2AD1','csup':'\\u2AD0','csupe':'\\u2AD2','ctdot':'\\u22EF','cudarrl':'\\u2938','cudarrr':'\\u2935','cuepr':'\\u22DE','cuesc':'\\u22DF','cularr':'\\u21B6','cularrp':'\\u293D','cupbrcap':'\\u2A48','cupcap':'\\u2A46','CupCap':'\\u224D','cup':'\\u222A','Cup':'\\u22D3','cupcup':'\\u2A4A','cupdot':'\\u228D','cupor':'\\u2A45','cups':'\\u222A\\uFE00','curarr':'\\u21B7','curarrm':'\\u293C','curlyeqprec':'\\u22DE','curlyeqsucc':'\\u22DF','curlyvee':'\\u22CE','curlywedge':'\\u22CF','curren':'\\xA4','curvearrowleft':'\\u21B6','curvearrowright':'\\u21B7','cuvee':'\\u22CE','cuwed':'\\u22CF','cwconint':'\\u2232','cwint':'\\u2231','cylcty':'\\u232D','dagger':'\\u2020','Dagger':'\\u2021','daleth':'\\u2138','darr':'\\u2193','Darr':'\\u21A1','dArr':'\\u21D3','dash':'\\u2010','Dashv':'\\u2AE4','dashv':'\\u22A3','dbkarow':'\\u290F','dblac':'\\u02DD','Dcaron':'\\u010E','dcaron':'\\u010F','Dcy':'\\u0414','dcy':'\\u0434','ddagger':'\\u2021','ddarr':'\\u21CA','DD':'\\u2145','dd':'\\u2146','DDotrahd':'\\u2911','ddotseq':'\\u2A77','deg':'\\xB0','Del':'\\u2207','Delta':'\\u0394','delta':'\\u03B4','demptyv':'\\u29B1','dfisht':'\\u297F','Dfr':'\\uD835\\uDD07','dfr':'\\uD835\\uDD21','dHar':'\\u2965','dharl':'\\u21C3','dharr':'\\u21C2','DiacriticalAcute':'\\xB4','DiacriticalDot':'\\u02D9','DiacriticalDoubleAcute':'\\u02DD','DiacriticalGrave':'`','DiacriticalTilde':'\\u02DC','diam':'\\u22C4','diamond':'\\u22C4','Diamond':'\\u22C4','diamondsuit':'\\u2666','diams':'\\u2666','die':'\\xA8','DifferentialD':'\\u2146','digamma':'\\u03DD','disin':'\\u22F2','div':'\\xF7','divide':'\\xF7','divideontimes':'\\u22C7','divonx':'\\u22C7','DJcy':'\\u0402','djcy':'\\u0452','dlcorn':'\\u231E','dlcrop':'\\u230D','dollar':'$','Dopf':'\\uD835\\uDD3B','dopf':'\\uD835\\uDD55','Dot':'\\xA8','dot':'\\u02D9','DotDot':'\\u20DC','doteq':'\\u2250','doteqdot':'\\u2251','DotEqual':'\\u2250','dotminus':'\\u2238','dotplus':'\\u2214','dotsquare':'\\u22A1','doublebarwedge':'\\u2306','DoubleContourIntegral':'\\u222F','DoubleDot':'\\xA8','DoubleDownArrow':'\\u21D3','DoubleLeftArrow':'\\u21D0','DoubleLeftRightArrow':'\\u21D4','DoubleLeftTee':'\\u2AE4','DoubleLongLeftArrow':'\\u27F8','DoubleLongLeftRightArrow':'\\u27FA','DoubleLongRightArrow':'\\u27F9','DoubleRightArrow':'\\u21D2','DoubleRightTee':'\\u22A8','DoubleUpArrow':'\\u21D1','DoubleUpDownArrow':'\\u21D5','DoubleVerticalBar':'\\u2225','DownArrowBar':'\\u2913','downarrow':'\\u2193','DownArrow':'\\u2193','Downarrow':'\\u21D3','DownArrowUpArrow':'\\u21F5','DownBreve':'\\u0311','downdownarrows':'\\u21CA','downharpoonleft':'\\u21C3','downharpoonright':'\\u21C2','DownLeftRightVector':'\\u2950','DownLeftTeeVector':'\\u295E','DownLeftVectorBar':'\\u2956','DownLeftVector':'\\u21BD','DownRightTeeVector':'\\u295F','DownRightVectorBar':'\\u2957','DownRightVector':'\\u21C1','DownTeeArrow':'\\u21A7','DownTee':'\\u22A4','drbkarow':'\\u2910','drcorn':'\\u231F','drcrop':'\\u230C','Dscr':'\\uD835\\uDC9F','dscr':'\\uD835\\uDCB9','DScy':'\\u0405','dscy':'\\u0455','dsol':'\\u29F6','Dstrok':'\\u0110','dstrok':'\\u0111','dtdot':'\\u22F1','dtri':'\\u25BF','dtrif':'\\u25BE','duarr':'\\u21F5','duhar':'\\u296F','dwangle':'\\u29A6','DZcy':'\\u040F','dzcy':'\\u045F','dzigrarr':'\\u27FF','Eacute':'\\xC9','eacute':'\\xE9','easter':'\\u2A6E','Ecaron':'\\u011A','ecaron':'\\u011B','Ecirc':'\\xCA','ecirc':'\\xEA','ecir':'\\u2256','ecolon':'\\u2255','Ecy':'\\u042D','ecy':'\\u044D','eDDot':'\\u2A77','Edot':'\\u0116','edot':'\\u0117','eDot':'\\u2251','ee':'\\u2147','efDot':'\\u2252','Efr':'\\uD835\\uDD08','efr':'\\uD835\\uDD22','eg':'\\u2A9A','Egrave':'\\xC8','egrave':'\\xE8','egs':'\\u2A96','egsdot':'\\u2A98','el':'\\u2A99','Element':'\\u2208','elinters':'\\u23E7','ell':'\\u2113','els':'\\u2A95','elsdot':'\\u2A97','Emacr':'\\u0112','emacr':'\\u0113','empty':'\\u2205','emptyset':'\\u2205','EmptySmallSquare':'\\u25FB','emptyv':'\\u2205','EmptyVerySmallSquare':'\\u25AB','emsp13':'\\u2004','emsp14':'\\u2005','emsp':'\\u2003','ENG':'\\u014A','eng':'\\u014B','ensp':'\\u2002','Eogon':'\\u0118','eogon':'\\u0119','Eopf':'\\uD835\\uDD3C','eopf':'\\uD835\\uDD56','epar':'\\u22D5','eparsl':'\\u29E3','eplus':'\\u2A71','epsi':'\\u03B5','Epsilon':'\\u0395','epsilon':'\\u03B5','epsiv':'\\u03F5','eqcirc':'\\u2256','eqcolon':'\\u2255','eqsim':'\\u2242','eqslantgtr':'\\u2A96','eqslantless':'\\u2A95','Equal':'\\u2A75','equals':'=','EqualTilde':'\\u2242','equest':'\\u225F','Equilibrium':'\\u21CC','equiv':'\\u2261','equivDD':'\\u2A78','eqvparsl':'\\u29E5','erarr':'\\u2971','erDot':'\\u2253','escr':'\\u212F','Escr':'\\u2130','esdot':'\\u2250','Esim':'\\u2A73','esim':'\\u2242','Eta':'\\u0397','eta':'\\u03B7','ETH':'\\xD0','eth':'\\xF0','Euml':'\\xCB','euml':'\\xEB','euro':'\\u20AC','excl':'!','exist':'\\u2203','Exists':'\\u2203','expectation':'\\u2130','exponentiale':'\\u2147','ExponentialE':'\\u2147','fallingdotseq':'\\u2252','Fcy':'\\u0424','fcy':'\\u0444','female':'\\u2640','ffilig':'\\uFB03','fflig':'\\uFB00','ffllig':'\\uFB04','Ffr':'\\uD835\\uDD09','ffr':'\\uD835\\uDD23','filig':'\\uFB01','FilledSmallSquare':'\\u25FC','FilledVerySmallSquare':'\\u25AA','fjlig':'fj','flat':'\\u266D','fllig':'\\uFB02','fltns':'\\u25B1','fnof':'\\u0192','Fopf':'\\uD835\\uDD3D','fopf':'\\uD835\\uDD57','forall':'\\u2200','ForAll':'\\u2200','fork':'\\u22D4','forkv':'\\u2AD9','Fouriertrf':'\\u2131','fpartint':'\\u2A0D','frac12':'\\xBD','frac13':'\\u2153','frac14':'\\xBC','frac15':'\\u2155','frac16':'\\u2159','frac18':'\\u215B','frac23':'\\u2154','frac25':'\\u2156','frac34':'\\xBE','frac35':'\\u2157','frac38':'\\u215C','frac45':'\\u2158','frac56':'\\u215A','frac58':'\\u215D','frac78':'\\u215E','frasl':'\\u2044','frown':'\\u2322','fscr':'\\uD835\\uDCBB','Fscr':'\\u2131','gacute':'\\u01F5','Gamma':'\\u0393','gamma':'\\u03B3','Gammad':'\\u03DC','gammad':'\\u03DD','gap':'\\u2A86','Gbreve':'\\u011E','gbreve':'\\u011F','Gcedil':'\\u0122','Gcirc':'\\u011C','gcirc':'\\u011D','Gcy':'\\u0413','gcy':'\\u0433','Gdot':'\\u0120','gdot':'\\u0121','ge':'\\u2265','gE':'\\u2267','gEl':'\\u2A8C','gel':'\\u22DB','geq':'\\u2265','geqq':'\\u2267','geqslant':'\\u2A7E','gescc':'\\u2AA9','ges':'\\u2A7E','gesdot':'\\u2A80','gesdoto':'\\u2A82','gesdotol':'\\u2A84','gesl':'\\u22DB\\uFE00','gesles':'\\u2A94','Gfr':'\\uD835\\uDD0A','gfr':'\\uD835\\uDD24','gg':'\\u226B','Gg':'\\u22D9','ggg':'\\u22D9','gimel':'\\u2137','GJcy':'\\u0403','gjcy':'\\u0453','gla':'\\u2AA5','gl':'\\u2277','glE':'\\u2A92','glj':'\\u2AA4','gnap':'\\u2A8A','gnapprox':'\\u2A8A','gne':'\\u2A88','gnE':'\\u2269','gneq':'\\u2A88','gneqq':'\\u2269','gnsim':'\\u22E7','Gopf':'\\uD835\\uDD3E','gopf':'\\uD835\\uDD58','grave':'`','GreaterEqual':'\\u2265','GreaterEqualLess':'\\u22DB','GreaterFullEqual':'\\u2267','GreaterGreater':'\\u2AA2','GreaterLess':'\\u2277','GreaterSlantEqual':'\\u2A7E','GreaterTilde':'\\u2273','Gscr':'\\uD835\\uDCA2','gscr':'\\u210A','gsim':'\\u2273','gsime':'\\u2A8E','gsiml':'\\u2A90','gtcc':'\\u2AA7','gtcir':'\\u2A7A','gt':'>','GT':'>','Gt':'\\u226B','gtdot':'\\u22D7','gtlPar':'\\u2995','gtquest':'\\u2A7C','gtrapprox':'\\u2A86','gtrarr':'\\u2978','gtrdot':'\\u22D7','gtreqless':'\\u22DB','gtreqqless':'\\u2A8C','gtrless':'\\u2277','gtrsim':'\\u2273','gvertneqq':'\\u2269\\uFE00','gvnE':'\\u2269\\uFE00','Hacek':'\\u02C7','hairsp':'\\u200A','half':'\\xBD','hamilt':'\\u210B','HARDcy':'\\u042A','hardcy':'\\u044A','harrcir':'\\u2948','harr':'\\u2194','hArr':'\\u21D4','harrw':'\\u21AD','Hat':'^','hbar':'\\u210F','Hcirc':'\\u0124','hcirc':'\\u0125','hearts':'\\u2665','heartsuit':'\\u2665','hellip':'\\u2026','hercon':'\\u22B9','hfr':'\\uD835\\uDD25','Hfr':'\\u210C','HilbertSpace':'\\u210B','hksearow':'\\u2925','hkswarow':'\\u2926','hoarr':'\\u21FF','homtht':'\\u223B','hookleftarrow':'\\u21A9','hookrightarrow':'\\u21AA','hopf':'\\uD835\\uDD59','Hopf':'\\u210D','horbar':'\\u2015','HorizontalLine':'\\u2500','hscr':'\\uD835\\uDCBD','Hscr':'\\u210B','hslash':'\\u210F','Hstrok':'\\u0126','hstrok':'\\u0127','HumpDownHump':'\\u224E','HumpEqual':'\\u224F','hybull':'\\u2043','hyphen':'\\u2010','Iacute':'\\xCD','iacute':'\\xED','ic':'\\u2063','Icirc':'\\xCE','icirc':'\\xEE','Icy':'\\u0418','icy':'\\u0438','Idot':'\\u0130','IEcy':'\\u0415','iecy':'\\u0435','iexcl':'\\xA1','iff':'\\u21D4','ifr':'\\uD835\\uDD26','Ifr':'\\u2111','Igrave':'\\xCC','igrave':'\\xEC','ii':'\\u2148','iiiint':'\\u2A0C','iiint':'\\u222D','iinfin':'\\u29DC','iiota':'\\u2129','IJlig':'\\u0132','ijlig':'\\u0133','Imacr':'\\u012A','imacr':'\\u012B','image':'\\u2111','ImaginaryI':'\\u2148','imagline':'\\u2110','imagpart':'\\u2111','imath':'\\u0131','Im':'\\u2111','imof':'\\u22B7','imped':'\\u01B5','Implies':'\\u21D2','incare':'\\u2105','in':'\\u2208','infin':'\\u221E','infintie':'\\u29DD','inodot':'\\u0131','intcal':'\\u22BA','int':'\\u222B','Int':'\\u222C','integers':'\\u2124','Integral':'\\u222B','intercal':'\\u22BA','Intersection':'\\u22C2','intlarhk':'\\u2A17','intprod':'\\u2A3C','InvisibleComma':'\\u2063','InvisibleTimes':'\\u2062','IOcy':'\\u0401','iocy':'\\u0451','Iogon':'\\u012E','iogon':'\\u012F','Iopf':'\\uD835\\uDD40','iopf':'\\uD835\\uDD5A','Iota':'\\u0399','iota':'\\u03B9','iprod':'\\u2A3C','iquest':'\\xBF','iscr':'\\uD835\\uDCBE','Iscr':'\\u2110','isin':'\\u2208','isindot':'\\u22F5','isinE':'\\u22F9','isins':'\\u22F4','isinsv':'\\u22F3','isinv':'\\u2208','it':'\\u2062','Itilde':'\\u0128','itilde':'\\u0129','Iukcy':'\\u0406','iukcy':'\\u0456','Iuml':'\\xCF','iuml':'\\xEF','Jcirc':'\\u0134','jcirc':'\\u0135','Jcy':'\\u0419','jcy':'\\u0439','Jfr':'\\uD835\\uDD0D','jfr':'\\uD835\\uDD27','jmath':'\\u0237','Jopf':'\\uD835\\uDD41','jopf':'\\uD835\\uDD5B','Jscr':'\\uD835\\uDCA5','jscr':'\\uD835\\uDCBF','Jsercy':'\\u0408','jsercy':'\\u0458','Jukcy':'\\u0404','jukcy':'\\u0454','Kappa':'\\u039A','kappa':'\\u03BA','kappav':'\\u03F0','Kcedil':'\\u0136','kcedil':'\\u0137','Kcy':'\\u041A','kcy':'\\u043A','Kfr':'\\uD835\\uDD0E','kfr':'\\uD835\\uDD28','kgreen':'\\u0138','KHcy':'\\u0425','khcy':'\\u0445','KJcy':'\\u040C','kjcy':'\\u045C','Kopf':'\\uD835\\uDD42','kopf':'\\uD835\\uDD5C','Kscr':'\\uD835\\uDCA6','kscr':'\\uD835\\uDCC0','lAarr':'\\u21DA','Lacute':'\\u0139','lacute':'\\u013A','laemptyv':'\\u29B4','lagran':'\\u2112','Lambda':'\\u039B','lambda':'\\u03BB','lang':'\\u27E8','Lang':'\\u27EA','langd':'\\u2991','langle':'\\u27E8','lap':'\\u2A85','Laplacetrf':'\\u2112','laquo':'\\xAB','larrb':'\\u21E4','larrbfs':'\\u291F','larr':'\\u2190','Larr':'\\u219E','lArr':'\\u21D0','larrfs':'\\u291D','larrhk':'\\u21A9','larrlp':'\\u21AB','larrpl':'\\u2939','larrsim':'\\u2973','larrtl':'\\u21A2','latail':'\\u2919','lAtail':'\\u291B','lat':'\\u2AAB','late':'\\u2AAD','lates':'\\u2AAD\\uFE00','lbarr':'\\u290C','lBarr':'\\u290E','lbbrk':'\\u2772','lbrace':'{','lbrack':'[','lbrke':'\\u298B','lbrksld':'\\u298F','lbrkslu':'\\u298D','Lcaron':'\\u013D','lcaron':'\\u013E','Lcedil':'\\u013B','lcedil':'\\u013C','lceil':'\\u2308','lcub':'{','Lcy':'\\u041B','lcy':'\\u043B','ldca':'\\u2936','ldquo':'\\u201C','ldquor':'\\u201E','ldrdhar':'\\u2967','ldrushar':'\\u294B','ldsh':'\\u21B2','le':'\\u2264','lE':'\\u2266','LeftAngleBracket':'\\u27E8','LeftArrowBar':'\\u21E4','leftarrow':'\\u2190','LeftArrow':'\\u2190','Leftarrow':'\\u21D0','LeftArrowRightArrow':'\\u21C6','leftarrowtail':'\\u21A2','LeftCeiling':'\\u2308','LeftDoubleBracket':'\\u27E6','LeftDownTeeVector':'\\u2961','LeftDownVectorBar':'\\u2959','LeftDownVector':'\\u21C3','LeftFloor':'\\u230A','leftharpoondown':'\\u21BD','leftharpoonup':'\\u21BC','leftleftarrows':'\\u21C7','leftrightarrow':'\\u2194','LeftRightArrow':'\\u2194','Leftrightarrow':'\\u21D4','leftrightarrows':'\\u21C6','leftrightharpoons':'\\u21CB','leftrightsquigarrow':'\\u21AD','LeftRightVector':'\\u294E','LeftTeeArrow':'\\u21A4','LeftTee':'\\u22A3','LeftTeeVector':'\\u295A','leftthreetimes':'\\u22CB','LeftTriangleBar':'\\u29CF','LeftTriangle':'\\u22B2','LeftTriangleEqual':'\\u22B4','LeftUpDownVector':'\\u2951','LeftUpTeeVector':'\\u2960','LeftUpVectorBar':'\\u2958','LeftUpVector':'\\u21BF','LeftVectorBar':'\\u2952','LeftVector':'\\u21BC','lEg':'\\u2A8B','leg':'\\u22DA','leq':'\\u2264','leqq':'\\u2266','leqslant':'\\u2A7D','lescc':'\\u2AA8','les':'\\u2A7D','lesdot':'\\u2A7F','lesdoto':'\\u2A81','lesdotor':'\\u2A83','lesg':'\\u22DA\\uFE00','lesges':'\\u2A93','lessapprox':'\\u2A85','lessdot':'\\u22D6','lesseqgtr':'\\u22DA','lesseqqgtr':'\\u2A8B','LessEqualGreater':'\\u22DA','LessFullEqual':'\\u2266','LessGreater':'\\u2276','lessgtr':'\\u2276','LessLess':'\\u2AA1','lesssim':'\\u2272','LessSlantEqual':'\\u2A7D','LessTilde':'\\u2272','lfisht':'\\u297C','lfloor':'\\u230A','Lfr':'\\uD835\\uDD0F','lfr':'\\uD835\\uDD29','lg':'\\u2276','lgE':'\\u2A91','lHar':'\\u2962','lhard':'\\u21BD','lharu':'\\u21BC','lharul':'\\u296A','lhblk':'\\u2584','LJcy':'\\u0409','ljcy':'\\u0459','llarr':'\\u21C7','ll':'\\u226A','Ll':'\\u22D8','llcorner':'\\u231E','Lleftarrow':'\\u21DA','llhard':'\\u296B','lltri':'\\u25FA','Lmidot':'\\u013F','lmidot':'\\u0140','lmoustache':'\\u23B0','lmoust':'\\u23B0','lnap':'\\u2A89','lnapprox':'\\u2A89','lne':'\\u2A87','lnE':'\\u2268','lneq':'\\u2A87','lneqq':'\\u2268','lnsim':'\\u22E6','loang':'\\u27EC','loarr':'\\u21FD','lobrk':'\\u27E6','longleftarrow':'\\u27F5','LongLeftArrow':'\\u27F5','Longleftarrow':'\\u27F8','longleftrightarrow':'\\u27F7','LongLeftRightArrow':'\\u27F7','Longleftrightarrow':'\\u27FA','longmapsto':'\\u27FC','longrightarrow':'\\u27F6','LongRightArrow':'\\u27F6','Longrightarrow':'\\u27F9','looparrowleft':'\\u21AB','looparrowright':'\\u21AC','lopar':'\\u2985','Lopf':'\\uD835\\uDD43','lopf':'\\uD835\\uDD5D','loplus':'\\u2A2D','lotimes':'\\u2A34','lowast':'\\u2217','lowbar':'_','LowerLeftArrow':'\\u2199','LowerRightArrow':'\\u2198','loz':'\\u25CA','lozenge':'\\u25CA','lozf':'\\u29EB','lpar':'(','lparlt':'\\u2993','lrarr':'\\u21C6','lrcorner':'\\u231F','lrhar':'\\u21CB','lrhard':'\\u296D','lrm':'\\u200E','lrtri':'\\u22BF','lsaquo':'\\u2039','lscr':'\\uD835\\uDCC1','Lscr':'\\u2112','lsh':'\\u21B0','Lsh':'\\u21B0','lsim':'\\u2272','lsime':'\\u2A8D','lsimg':'\\u2A8F','lsqb':'[','lsquo':'\\u2018','lsquor':'\\u201A','Lstrok':'\\u0141','lstrok':'\\u0142','ltcc':'\\u2AA6','ltcir':'\\u2A79','lt':'<','LT':'<','Lt':'\\u226A','ltdot':'\\u22D6','lthree':'\\u22CB','ltimes':'\\u22C9','ltlarr':'\\u2976','ltquest':'\\u2A7B','ltri':'\\u25C3','ltrie':'\\u22B4','ltrif':'\\u25C2','ltrPar':'\\u2996','lurdshar':'\\u294A','luruhar':'\\u2966','lvertneqq':'\\u2268\\uFE00','lvnE':'\\u2268\\uFE00','macr':'\\xAF','male':'\\u2642','malt':'\\u2720','maltese':'\\u2720','Map':'\\u2905','map':'\\u21A6','mapsto':'\\u21A6','mapstodown':'\\u21A7','mapstoleft':'\\u21A4','mapstoup':'\\u21A5','marker':'\\u25AE','mcomma':'\\u2A29','Mcy':'\\u041C','mcy':'\\u043C','mdash':'\\u2014','mDDot':'\\u223A','measuredangle':'\\u2221','MediumSpace':'\\u205F','Mellintrf':'\\u2133','Mfr':'\\uD835\\uDD10','mfr':'\\uD835\\uDD2A','mho':'\\u2127','micro':'\\xB5','midast':'*','midcir':'\\u2AF0','mid':'\\u2223','middot':'\\xB7','minusb':'\\u229F','minus':'\\u2212','minusd':'\\u2238','minusdu':'\\u2A2A','MinusPlus':'\\u2213','mlcp':'\\u2ADB','mldr':'\\u2026','mnplus':'\\u2213','models':'\\u22A7','Mopf':'\\uD835\\uDD44','mopf':'\\uD835\\uDD5E','mp':'\\u2213','mscr':'\\uD835\\uDCC2','Mscr':'\\u2133','mstpos':'\\u223E','Mu':'\\u039C','mu':'\\u03BC','multimap':'\\u22B8','mumap':'\\u22B8','nabla':'\\u2207','Nacute':'\\u0143','nacute':'\\u0144','nang':'\\u2220\\u20D2','nap':'\\u2249','napE':'\\u2A70\\u0338','napid':'\\u224B\\u0338','napos':'\\u0149','napprox':'\\u2249','natural':'\\u266E','naturals':'\\u2115','natur':'\\u266E','nbsp':'\\xA0','nbump':'\\u224E\\u0338','nbumpe':'\\u224F\\u0338','ncap':'\\u2A43','Ncaron':'\\u0147','ncaron':'\\u0148','Ncedil':'\\u0145','ncedil':'\\u0146','ncong':'\\u2247','ncongdot':'\\u2A6D\\u0338','ncup':'\\u2A42','Ncy':'\\u041D','ncy':'\\u043D','ndash':'\\u2013','nearhk':'\\u2924','nearr':'\\u2197','neArr':'\\u21D7','nearrow':'\\u2197','ne':'\\u2260','nedot':'\\u2250\\u0338','NegativeMediumSpace':'\\u200B','NegativeThickSpace':'\\u200B','NegativeThinSpace':'\\u200B','NegativeVeryThinSpace':'\\u200B','nequiv':'\\u2262','nesear':'\\u2928','nesim':'\\u2242\\u0338','NestedGreaterGreater':'\\u226B','NestedLessLess':'\\u226A','NewLine':'\\n','nexist':'\\u2204','nexists':'\\u2204','Nfr':'\\uD835\\uDD11','nfr':'\\uD835\\uDD2B','ngE':'\\u2267\\u0338','nge':'\\u2271','ngeq':'\\u2271','ngeqq':'\\u2267\\u0338','ngeqslant':'\\u2A7E\\u0338','nges':'\\u2A7E\\u0338','nGg':'\\u22D9\\u0338','ngsim':'\\u2275','nGt':'\\u226B\\u20D2','ngt':'\\u226F','ngtr':'\\u226F','nGtv':'\\u226B\\u0338','nharr':'\\u21AE','nhArr':'\\u21CE','nhpar':'\\u2AF2','ni':'\\u220B','nis':'\\u22FC','nisd':'\\u22FA','niv':'\\u220B','NJcy':'\\u040A','njcy':'\\u045A','nlarr':'\\u219A','nlArr':'\\u21CD','nldr':'\\u2025','nlE':'\\u2266\\u0338','nle':'\\u2270','nleftarrow':'\\u219A','nLeftarrow':'\\u21CD','nleftrightarrow':'\\u21AE','nLeftrightarrow':'\\u21CE','nleq':'\\u2270','nleqq':'\\u2266\\u0338','nleqslant':'\\u2A7D\\u0338','nles':'\\u2A7D\\u0338','nless':'\\u226E','nLl':'\\u22D8\\u0338','nlsim':'\\u2274','nLt':'\\u226A\\u20D2','nlt':'\\u226E','nltri':'\\u22EA','nltrie':'\\u22EC','nLtv':'\\u226A\\u0338','nmid':'\\u2224','NoBreak':'\\u2060','NonBreakingSpace':'\\xA0','nopf':'\\uD835\\uDD5F','Nopf':'\\u2115','Not':'\\u2AEC','not':'\\xAC','NotCongruent':'\\u2262','NotCupCap':'\\u226D','NotDoubleVerticalBar':'\\u2226','NotElement':'\\u2209','NotEqual':'\\u2260','NotEqualTilde':'\\u2242\\u0338','NotExists':'\\u2204','NotGreater':'\\u226F','NotGreaterEqual':'\\u2271','NotGreaterFullEqual':'\\u2267\\u0338','NotGreaterGreater':'\\u226B\\u0338','NotGreaterLess':'\\u2279','NotGreaterSlantEqual':'\\u2A7E\\u0338','NotGreaterTilde':'\\u2275','NotHumpDownHump':'\\u224E\\u0338','NotHumpEqual':'\\u224F\\u0338','notin':'\\u2209','notindot':'\\u22F5\\u0338','notinE':'\\u22F9\\u0338','notinva':'\\u2209','notinvb':'\\u22F7','notinvc':'\\u22F6','NotLeftTriangleBar':'\\u29CF\\u0338','NotLeftTriangle':'\\u22EA','NotLeftTriangleEqual':'\\u22EC','NotLess':'\\u226E','NotLessEqual':'\\u2270','NotLessGreater':'\\u2278','NotLessLess':'\\u226A\\u0338','NotLessSlantEqual':'\\u2A7D\\u0338','NotLessTilde':'\\u2274','NotNestedGreaterGreater':'\\u2AA2\\u0338','NotNestedLessLess':'\\u2AA1\\u0338','notni':'\\u220C','notniva':'\\u220C','notnivb':'\\u22FE','notnivc':'\\u22FD','NotPrecedes':'\\u2280','NotPrecedesEqual':'\\u2AAF\\u0338','NotPrecedesSlantEqual':'\\u22E0','NotReverseElement':'\\u220C','NotRightTriangleBar':'\\u29D0\\u0338','NotRightTriangle':'\\u22EB','NotRightTriangleEqual':'\\u22ED','NotSquareSubset':'\\u228F\\u0338','NotSquareSubsetEqual':'\\u22E2','NotSquareSuperset':'\\u2290\\u0338','NotSquareSupersetEqual':'\\u22E3','NotSubset':'\\u2282\\u20D2','NotSubsetEqual':'\\u2288','NotSucceeds':'\\u2281','NotSucceedsEqual':'\\u2AB0\\u0338','NotSucceedsSlantEqual':'\\u22E1','NotSucceedsTilde':'\\u227F\\u0338','NotSuperset':'\\u2283\\u20D2','NotSupersetEqual':'\\u2289','NotTilde':'\\u2241','NotTildeEqual':'\\u2244','NotTildeFullEqual':'\\u2247','NotTildeTilde':'\\u2249','NotVerticalBar':'\\u2224','nparallel':'\\u2226','npar':'\\u2226','nparsl':'\\u2AFD\\u20E5','npart':'\\u2202\\u0338','npolint':'\\u2A14','npr':'\\u2280','nprcue':'\\u22E0','nprec':'\\u2280','npreceq':'\\u2AAF\\u0338','npre':'\\u2AAF\\u0338','nrarrc':'\\u2933\\u0338','nrarr':'\\u219B','nrArr':'\\u21CF','nrarrw':'\\u219D\\u0338','nrightarrow':'\\u219B','nRightarrow':'\\u21CF','nrtri':'\\u22EB','nrtrie':'\\u22ED','nsc':'\\u2281','nsccue':'\\u22E1','nsce':'\\u2AB0\\u0338','Nscr':'\\uD835\\uDCA9','nscr':'\\uD835\\uDCC3','nshortmid':'\\u2224','nshortparallel':'\\u2226','nsim':'\\u2241','nsime':'\\u2244','nsimeq':'\\u2244','nsmid':'\\u2224','nspar':'\\u2226','nsqsube':'\\u22E2','nsqsupe':'\\u22E3','nsub':'\\u2284','nsubE':'\\u2AC5\\u0338','nsube':'\\u2288','nsubset':'\\u2282\\u20D2','nsubseteq':'\\u2288','nsubseteqq':'\\u2AC5\\u0338','nsucc':'\\u2281','nsucceq':'\\u2AB0\\u0338','nsup':'\\u2285','nsupE':'\\u2AC6\\u0338','nsupe':'\\u2289','nsupset':'\\u2283\\u20D2','nsupseteq':'\\u2289','nsupseteqq':'\\u2AC6\\u0338','ntgl':'\\u2279','Ntilde':'\\xD1','ntilde':'\\xF1','ntlg':'\\u2278','ntriangleleft':'\\u22EA','ntrianglelefteq':'\\u22EC','ntriangleright':'\\u22EB','ntrianglerighteq':'\\u22ED','Nu':'\\u039D','nu':'\\u03BD','num':'#','numero':'\\u2116','numsp':'\\u2007','nvap':'\\u224D\\u20D2','nvdash':'\\u22AC','nvDash':'\\u22AD','nVdash':'\\u22AE','nVDash':'\\u22AF','nvge':'\\u2265\\u20D2','nvgt':'>\\u20D2','nvHarr':'\\u2904','nvinfin':'\\u29DE','nvlArr':'\\u2902','nvle':'\\u2264\\u20D2','nvlt':'<\\u20D2','nvltrie':'\\u22B4\\u20D2','nvrArr':'\\u2903','nvrtrie':'\\u22B5\\u20D2','nvsim':'\\u223C\\u20D2','nwarhk':'\\u2923','nwarr':'\\u2196','nwArr':'\\u21D6','nwarrow':'\\u2196','nwnear':'\\u2927','Oacute':'\\xD3','oacute':'\\xF3','oast':'\\u229B','Ocirc':'\\xD4','ocirc':'\\xF4','ocir':'\\u229A','Ocy':'\\u041E','ocy':'\\u043E','odash':'\\u229D','Odblac':'\\u0150','odblac':'\\u0151','odiv':'\\u2A38','odot':'\\u2299','odsold':'\\u29BC','OElig':'\\u0152','oelig':'\\u0153','ofcir':'\\u29BF','Ofr':'\\uD835\\uDD12','ofr':'\\uD835\\uDD2C','ogon':'\\u02DB','Ograve':'\\xD2','ograve':'\\xF2','ogt':'\\u29C1','ohbar':'\\u29B5','ohm':'\\u03A9','oint':'\\u222E','olarr':'\\u21BA','olcir':'\\u29BE','olcross':'\\u29BB','oline':'\\u203E','olt':'\\u29C0','Omacr':'\\u014C','omacr':'\\u014D','Omega':'\\u03A9','omega':'\\u03C9','Omicron':'\\u039F','omicron':'\\u03BF','omid':'\\u29B6','ominus':'\\u2296','Oopf':'\\uD835\\uDD46','oopf':'\\uD835\\uDD60','opar':'\\u29B7','OpenCurlyDoubleQuote':'\\u201C','OpenCurlyQuote':'\\u2018','operp':'\\u29B9','oplus':'\\u2295','orarr':'\\u21BB','Or':'\\u2A54','or':'\\u2228','ord':'\\u2A5D','order':'\\u2134','orderof':'\\u2134','ordf':'\\xAA','ordm':'\\xBA','origof':'\\u22B6','oror':'\\u2A56','orslope':'\\u2A57','orv':'\\u2A5B','oS':'\\u24C8','Oscr':'\\uD835\\uDCAA','oscr':'\\u2134','Oslash':'\\xD8','oslash':'\\xF8','osol':'\\u2298','Otilde':'\\xD5','otilde':'\\xF5','otimesas':'\\u2A36','Otimes':'\\u2A37','otimes':'\\u2297','Ouml':'\\xD6','ouml':'\\xF6','ovbar':'\\u233D','OverBar':'\\u203E','OverBrace':'\\u23DE','OverBracket':'\\u23B4','OverParenthesis':'\\u23DC','para':'\\xB6','parallel':'\\u2225','par':'\\u2225','parsim':'\\u2AF3','parsl':'\\u2AFD','part':'\\u2202','PartialD':'\\u2202','Pcy':'\\u041F','pcy':'\\u043F','percnt':'%','period':'.','permil':'\\u2030','perp':'\\u22A5','pertenk':'\\u2031','Pfr':'\\uD835\\uDD13','pfr':'\\uD835\\uDD2D','Phi':'\\u03A6','phi':'\\u03C6','phiv':'\\u03D5','phmmat':'\\u2133','phone':'\\u260E','Pi':'\\u03A0','pi':'\\u03C0','pitchfork':'\\u22D4','piv':'\\u03D6','planck':'\\u210F','planckh':'\\u210E','plankv':'\\u210F','plusacir':'\\u2A23','plusb':'\\u229E','pluscir':'\\u2A22','plus':'+','plusdo':'\\u2214','plusdu':'\\u2A25','pluse':'\\u2A72','PlusMinus':'\\xB1','plusmn':'\\xB1','plussim':'\\u2A26','plustwo':'\\u2A27','pm':'\\xB1','Poincareplane':'\\u210C','pointint':'\\u2A15','popf':'\\uD835\\uDD61','Popf':'\\u2119','pound':'\\xA3','prap':'\\u2AB7','Pr':'\\u2ABB','pr':'\\u227A','prcue':'\\u227C','precapprox':'\\u2AB7','prec':'\\u227A','preccurlyeq':'\\u227C','Precedes':'\\u227A','PrecedesEqual':'\\u2AAF','PrecedesSlantEqual':'\\u227C','PrecedesTilde':'\\u227E','preceq':'\\u2AAF','precnapprox':'\\u2AB9','precneqq':'\\u2AB5','precnsim':'\\u22E8','pre':'\\u2AAF','prE':'\\u2AB3','precsim':'\\u227E','prime':'\\u2032','Prime':'\\u2033','primes':'\\u2119','prnap':'\\u2AB9','prnE':'\\u2AB5','prnsim':'\\u22E8','prod':'\\u220F','Product':'\\u220F','profalar':'\\u232E','profline':'\\u2312','profsurf':'\\u2313','prop':'\\u221D','Proportional':'\\u221D','Proportion':'\\u2237','propto':'\\u221D','prsim':'\\u227E','prurel':'\\u22B0','Pscr':'\\uD835\\uDCAB','pscr':'\\uD835\\uDCC5','Psi':'\\u03A8','psi':'\\u03C8','puncsp':'\\u2008','Qfr':'\\uD835\\uDD14','qfr':'\\uD835\\uDD2E','qint':'\\u2A0C','qopf':'\\uD835\\uDD62','Qopf':'\\u211A','qprime':'\\u2057','Qscr':'\\uD835\\uDCAC','qscr':'\\uD835\\uDCC6','quaternions':'\\u210D','quatint':'\\u2A16','quest':'?','questeq':'\\u225F','quot':'\"','QUOT':'\"','rAarr':'\\u21DB','race':'\\u223D\\u0331','Racute':'\\u0154','racute':'\\u0155','radic':'\\u221A','raemptyv':'\\u29B3','rang':'\\u27E9','Rang':'\\u27EB','rangd':'\\u2992','range':'\\u29A5','rangle':'\\u27E9','raquo':'\\xBB','rarrap':'\\u2975','rarrb':'\\u21E5','rarrbfs':'\\u2920','rarrc':'\\u2933','rarr':'\\u2192','Rarr':'\\u21A0','rArr':'\\u21D2','rarrfs':'\\u291E','rarrhk':'\\u21AA','rarrlp':'\\u21AC','rarrpl':'\\u2945','rarrsim':'\\u2974','Rarrtl':'\\u2916','rarrtl':'\\u21A3','rarrw':'\\u219D','ratail':'\\u291A','rAtail':'\\u291C','ratio':'\\u2236','rationals':'\\u211A','rbarr':'\\u290D','rBarr':'\\u290F','RBarr':'\\u2910','rbbrk':'\\u2773','rbrace':'}','rbrack':']','rbrke':'\\u298C','rbrksld':'\\u298E','rbrkslu':'\\u2990','Rcaron':'\\u0158','rcaron':'\\u0159','Rcedil':'\\u0156','rcedil':'\\u0157','rceil':'\\u2309','rcub':'}','Rcy':'\\u0420','rcy':'\\u0440','rdca':'\\u2937','rdldhar':'\\u2969','rdquo':'\\u201D','rdquor':'\\u201D','rdsh':'\\u21B3','real':'\\u211C','realine':'\\u211B','realpart':'\\u211C','reals':'\\u211D','Re':'\\u211C','rect':'\\u25AD','reg':'\\xAE','REG':'\\xAE','ReverseElement':'\\u220B','ReverseEquilibrium':'\\u21CB','ReverseUpEquilibrium':'\\u296F','rfisht':'\\u297D','rfloor':'\\u230B','rfr':'\\uD835\\uDD2F','Rfr':'\\u211C','rHar':'\\u2964','rhard':'\\u21C1','rharu':'\\u21C0','rharul':'\\u296C','Rho':'\\u03A1','rho':'\\u03C1','rhov':'\\u03F1','RightAngleBracket':'\\u27E9','RightArrowBar':'\\u21E5','rightarrow':'\\u2192','RightArrow':'\\u2192','Rightarrow':'\\u21D2','RightArrowLeftArrow':'\\u21C4','rightarrowtail':'\\u21A3','RightCeiling':'\\u2309','RightDoubleBracket':'\\u27E7','RightDownTeeVector':'\\u295D','RightDownVectorBar':'\\u2955','RightDownVector':'\\u21C2','RightFloor':'\\u230B','rightharpoondown':'\\u21C1','rightharpoonup':'\\u21C0','rightleftarrows':'\\u21C4','rightleftharpoons':'\\u21CC','rightrightarrows':'\\u21C9','rightsquigarrow':'\\u219D','RightTeeArrow':'\\u21A6','RightTee':'\\u22A2','RightTeeVector':'\\u295B','rightthreetimes':'\\u22CC','RightTriangleBar':'\\u29D0','RightTriangle':'\\u22B3','RightTriangleEqual':'\\u22B5','RightUpDownVector':'\\u294F','RightUpTeeVector':'\\u295C','RightUpVectorBar':'\\u2954','RightUpVector':'\\u21BE','RightVectorBar':'\\u2953','RightVector':'\\u21C0','ring':'\\u02DA','risingdotseq':'\\u2253','rlarr':'\\u21C4','rlhar':'\\u21CC','rlm':'\\u200F','rmoustache':'\\u23B1','rmoust':'\\u23B1','rnmid':'\\u2AEE','roang':'\\u27ED','roarr':'\\u21FE','robrk':'\\u27E7','ropar':'\\u2986','ropf':'\\uD835\\uDD63','Ropf':'\\u211D','roplus':'\\u2A2E','rotimes':'\\u2A35','RoundImplies':'\\u2970','rpar':')','rpargt':'\\u2994','rppolint':'\\u2A12','rrarr':'\\u21C9','Rrightarrow':'\\u21DB','rsaquo':'\\u203A','rscr':'\\uD835\\uDCC7','Rscr':'\\u211B','rsh':'\\u21B1','Rsh':'\\u21B1','rsqb':']','rsquo':'\\u2019','rsquor':'\\u2019','rthree':'\\u22CC','rtimes':'\\u22CA','rtri':'\\u25B9','rtrie':'\\u22B5','rtrif':'\\u25B8','rtriltri':'\\u29CE','RuleDelayed':'\\u29F4','ruluhar':'\\u2968','rx':'\\u211E','Sacute':'\\u015A','sacute':'\\u015B','sbquo':'\\u201A','scap':'\\u2AB8','Scaron':'\\u0160','scaron':'\\u0161','Sc':'\\u2ABC','sc':'\\u227B','sccue':'\\u227D','sce':'\\u2AB0','scE':'\\u2AB4','Scedil':'\\u015E','scedil':'\\u015F','Scirc':'\\u015C','scirc':'\\u015D','scnap':'\\u2ABA','scnE':'\\u2AB6','scnsim':'\\u22E9','scpolint':'\\u2A13','scsim':'\\u227F','Scy':'\\u0421','scy':'\\u0441','sdotb':'\\u22A1','sdot':'\\u22C5','sdote':'\\u2A66','searhk':'\\u2925','searr':'\\u2198','seArr':'\\u21D8','searrow':'\\u2198','sect':'\\xA7','semi':';','seswar':'\\u2929','setminus':'\\u2216','setmn':'\\u2216','sext':'\\u2736','Sfr':'\\uD835\\uDD16','sfr':'\\uD835\\uDD30','sfrown':'\\u2322','sharp':'\\u266F','SHCHcy':'\\u0429','shchcy':'\\u0449','SHcy':'\\u0428','shcy':'\\u0448','ShortDownArrow':'\\u2193','ShortLeftArrow':'\\u2190','shortmid':'\\u2223','shortparallel':'\\u2225','ShortRightArrow':'\\u2192','ShortUpArrow':'\\u2191','shy':'\\xAD','Sigma':'\\u03A3','sigma':'\\u03C3','sigmaf':'\\u03C2','sigmav':'\\u03C2','sim':'\\u223C','simdot':'\\u2A6A','sime':'\\u2243','simeq':'\\u2243','simg':'\\u2A9E','simgE':'\\u2AA0','siml':'\\u2A9D','simlE':'\\u2A9F','simne':'\\u2246','simplus':'\\u2A24','simrarr':'\\u2972','slarr':'\\u2190','SmallCircle':'\\u2218','smallsetminus':'\\u2216','smashp':'\\u2A33','smeparsl':'\\u29E4','smid':'\\u2223','smile':'\\u2323','smt':'\\u2AAA','smte':'\\u2AAC','smtes':'\\u2AAC\\uFE00','SOFTcy':'\\u042C','softcy':'\\u044C','solbar':'\\u233F','solb':'\\u29C4','sol':'/','Sopf':'\\uD835\\uDD4A','sopf':'\\uD835\\uDD64','spades':'\\u2660','spadesuit':'\\u2660','spar':'\\u2225','sqcap':'\\u2293','sqcaps':'\\u2293\\uFE00','sqcup':'\\u2294','sqcups':'\\u2294\\uFE00','Sqrt':'\\u221A','sqsub':'\\u228F','sqsube':'\\u2291','sqsubset':'\\u228F','sqsubseteq':'\\u2291','sqsup':'\\u2290','sqsupe':'\\u2292','sqsupset':'\\u2290','sqsupseteq':'\\u2292','square':'\\u25A1','Square':'\\u25A1','SquareIntersection':'\\u2293','SquareSubset':'\\u228F','SquareSubsetEqual':'\\u2291','SquareSuperset':'\\u2290','SquareSupersetEqual':'\\u2292','SquareUnion':'\\u2294','squarf':'\\u25AA','squ':'\\u25A1','squf':'\\u25AA','srarr':'\\u2192','Sscr':'\\uD835\\uDCAE','sscr':'\\uD835\\uDCC8','ssetmn':'\\u2216','ssmile':'\\u2323','sstarf':'\\u22C6','Star':'\\u22C6','star':'\\u2606','starf':'\\u2605','straightepsilon':'\\u03F5','straightphi':'\\u03D5','strns':'\\xAF','sub':'\\u2282','Sub':'\\u22D0','subdot':'\\u2ABD','subE':'\\u2AC5','sube':'\\u2286','subedot':'\\u2AC3','submult':'\\u2AC1','subnE':'\\u2ACB','subne':'\\u228A','subplus':'\\u2ABF','subrarr':'\\u2979','subset':'\\u2282','Subset':'\\u22D0','subseteq':'\\u2286','subseteqq':'\\u2AC5','SubsetEqual':'\\u2286','subsetneq':'\\u228A','subsetneqq':'\\u2ACB','subsim':'\\u2AC7','subsub':'\\u2AD5','subsup':'\\u2AD3','succapprox':'\\u2AB8','succ':'\\u227B','succcurlyeq':'\\u227D','Succeeds':'\\u227B','SucceedsEqual':'\\u2AB0','SucceedsSlantEqual':'\\u227D','SucceedsTilde':'\\u227F','succeq':'\\u2AB0','succnapprox':'\\u2ABA','succneqq':'\\u2AB6','succnsim':'\\u22E9','succsim':'\\u227F','SuchThat':'\\u220B','sum':'\\u2211','Sum':'\\u2211','sung':'\\u266A','sup1':'\\xB9','sup2':'\\xB2','sup3':'\\xB3','sup':'\\u2283','Sup':'\\u22D1','supdot':'\\u2ABE','supdsub':'\\u2AD8','supE':'\\u2AC6','supe':'\\u2287','supedot':'\\u2AC4','Superset':'\\u2283','SupersetEqual':'\\u2287','suphsol':'\\u27C9','suphsub':'\\u2AD7','suplarr':'\\u297B','supmult':'\\u2AC2','supnE':'\\u2ACC','supne':'\\u228B','supplus':'\\u2AC0','supset':'\\u2283','Supset':'\\u22D1','supseteq':'\\u2287','supseteqq':'\\u2AC6','supsetneq':'\\u228B','supsetneqq':'\\u2ACC','supsim':'\\u2AC8','supsub':'\\u2AD4','supsup':'\\u2AD6','swarhk':'\\u2926','swarr':'\\u2199','swArr':'\\u21D9','swarrow':'\\u2199','swnwar':'\\u292A','szlig':'\\xDF','Tab':'\\t','target':'\\u2316','Tau':'\\u03A4','tau':'\\u03C4','tbrk':'\\u23B4','Tcaron':'\\u0164','tcaron':'\\u0165','Tcedil':'\\u0162','tcedil':'\\u0163','Tcy':'\\u0422','tcy':'\\u0442','tdot':'\\u20DB','telrec':'\\u2315','Tfr':'\\uD835\\uDD17','tfr':'\\uD835\\uDD31','there4':'\\u2234','therefore':'\\u2234','Therefore':'\\u2234','Theta':'\\u0398','theta':'\\u03B8','thetasym':'\\u03D1','thetav':'\\u03D1','thickapprox':'\\u2248','thicksim':'\\u223C','ThickSpace':'\\u205F\\u200A','ThinSpace':'\\u2009','thinsp':'\\u2009','thkap':'\\u2248','thksim':'\\u223C','THORN':'\\xDE','thorn':'\\xFE','tilde':'\\u02DC','Tilde':'\\u223C','TildeEqual':'\\u2243','TildeFullEqual':'\\u2245','TildeTilde':'\\u2248','timesbar':'\\u2A31','timesb':'\\u22A0','times':'\\xD7','timesd':'\\u2A30','tint':'\\u222D','toea':'\\u2928','topbot':'\\u2336','topcir':'\\u2AF1','top':'\\u22A4','Topf':'\\uD835\\uDD4B','topf':'\\uD835\\uDD65','topfork':'\\u2ADA','tosa':'\\u2929','tprime':'\\u2034','trade':'\\u2122','TRADE':'\\u2122','triangle':'\\u25B5','triangledown':'\\u25BF','triangleleft':'\\u25C3','trianglelefteq':'\\u22B4','triangleq':'\\u225C','triangleright':'\\u25B9','trianglerighteq':'\\u22B5','tridot':'\\u25EC','trie':'\\u225C','triminus':'\\u2A3A','TripleDot':'\\u20DB','triplus':'\\u2A39','trisb':'\\u29CD','tritime':'\\u2A3B','trpezium':'\\u23E2','Tscr':'\\uD835\\uDCAF','tscr':'\\uD835\\uDCC9','TScy':'\\u0426','tscy':'\\u0446','TSHcy':'\\u040B','tshcy':'\\u045B','Tstrok':'\\u0166','tstrok':'\\u0167','twixt':'\\u226C','twoheadleftarrow':'\\u219E','twoheadrightarrow':'\\u21A0','Uacute':'\\xDA','uacute':'\\xFA','uarr':'\\u2191','Uarr':'\\u219F','uArr':'\\u21D1','Uarrocir':'\\u2949','Ubrcy':'\\u040E','ubrcy':'\\u045E','Ubreve':'\\u016C','ubreve':'\\u016D','Ucirc':'\\xDB','ucirc':'\\xFB','Ucy':'\\u0423','ucy':'\\u0443','udarr':'\\u21C5','Udblac':'\\u0170','udblac':'\\u0171','udhar':'\\u296E','ufisht':'\\u297E','Ufr':'\\uD835\\uDD18','ufr':'\\uD835\\uDD32','Ugrave':'\\xD9','ugrave':'\\xF9','uHar':'\\u2963','uharl':'\\u21BF','uharr':'\\u21BE','uhblk':'\\u2580','ulcorn':'\\u231C','ulcorner':'\\u231C','ulcrop':'\\u230F','ultri':'\\u25F8','Umacr':'\\u016A','umacr':'\\u016B','uml':'\\xA8','UnderBar':'_','UnderBrace':'\\u23DF','UnderBracket':'\\u23B5','UnderParenthesis':'\\u23DD','Union':'\\u22C3','UnionPlus':'\\u228E','Uogon':'\\u0172','uogon':'\\u0173','Uopf':'\\uD835\\uDD4C','uopf':'\\uD835\\uDD66','UpArrowBar':'\\u2912','uparrow':'\\u2191','UpArrow':'\\u2191','Uparrow':'\\u21D1','UpArrowDownArrow':'\\u21C5','updownarrow':'\\u2195','UpDownArrow':'\\u2195','Updownarrow':'\\u21D5','UpEquilibrium':'\\u296E','upharpoonleft':'\\u21BF','upharpoonright':'\\u21BE','uplus':'\\u228E','UpperLeftArrow':'\\u2196','UpperRightArrow':'\\u2197','upsi':'\\u03C5','Upsi':'\\u03D2','upsih':'\\u03D2','Upsilon':'\\u03A5','upsilon':'\\u03C5','UpTeeArrow':'\\u21A5','UpTee':'\\u22A5','upuparrows':'\\u21C8','urcorn':'\\u231D','urcorner':'\\u231D','urcrop':'\\u230E','Uring':'\\u016E','uring':'\\u016F','urtri':'\\u25F9','Uscr':'\\uD835\\uDCB0','uscr':'\\uD835\\uDCCA','utdot':'\\u22F0','Utilde':'\\u0168','utilde':'\\u0169','utri':'\\u25B5','utrif':'\\u25B4','uuarr':'\\u21C8','Uuml':'\\xDC','uuml':'\\xFC','uwangle':'\\u29A7','vangrt':'\\u299C','varepsilon':'\\u03F5','varkappa':'\\u03F0','varnothing':'\\u2205','varphi':'\\u03D5','varpi':'\\u03D6','varpropto':'\\u221D','varr':'\\u2195','vArr':'\\u21D5','varrho':'\\u03F1','varsigma':'\\u03C2','varsubsetneq':'\\u228A\\uFE00','varsubsetneqq':'\\u2ACB\\uFE00','varsupsetneq':'\\u228B\\uFE00','varsupsetneqq':'\\u2ACC\\uFE00','vartheta':'\\u03D1','vartriangleleft':'\\u22B2','vartriangleright':'\\u22B3','vBar':'\\u2AE8','Vbar':'\\u2AEB','vBarv':'\\u2AE9','Vcy':'\\u0412','vcy':'\\u0432','vdash':'\\u22A2','vDash':'\\u22A8','Vdash':'\\u22A9','VDash':'\\u22AB','Vdashl':'\\u2AE6','veebar':'\\u22BB','vee':'\\u2228','Vee':'\\u22C1','veeeq':'\\u225A','vellip':'\\u22EE','verbar':'|','Verbar':'\\u2016','vert':'|','Vert':'\\u2016','VerticalBar':'\\u2223','VerticalLine':'|','VerticalSeparator':'\\u2758','VerticalTilde':'\\u2240','VeryThinSpace':'\\u200A','Vfr':'\\uD835\\uDD19','vfr':'\\uD835\\uDD33','vltri':'\\u22B2','vnsub':'\\u2282\\u20D2','vnsup':'\\u2283\\u20D2','Vopf':'\\uD835\\uDD4D','vopf':'\\uD835\\uDD67','vprop':'\\u221D','vrtri':'\\u22B3','Vscr':'\\uD835\\uDCB1','vscr':'\\uD835\\uDCCB','vsubnE':'\\u2ACB\\uFE00','vsubne':'\\u228A\\uFE00','vsupnE':'\\u2ACC\\uFE00','vsupne':'\\u228B\\uFE00','Vvdash':'\\u22AA','vzigzag':'\\u299A','Wcirc':'\\u0174','wcirc':'\\u0175','wedbar':'\\u2A5F','wedge':'\\u2227','Wedge':'\\u22C0','wedgeq':'\\u2259','weierp':'\\u2118','Wfr':'\\uD835\\uDD1A','wfr':'\\uD835\\uDD34','Wopf':'\\uD835\\uDD4E','wopf':'\\uD835\\uDD68','wp':'\\u2118','wr':'\\u2240','wreath':'\\u2240','Wscr':'\\uD835\\uDCB2','wscr':'\\uD835\\uDCCC','xcap':'\\u22C2','xcirc':'\\u25EF','xcup':'\\u22C3','xdtri':'\\u25BD','Xfr':'\\uD835\\uDD1B','xfr':'\\uD835\\uDD35','xharr':'\\u27F7','xhArr':'\\u27FA','Xi':'\\u039E','xi':'\\u03BE','xlarr':'\\u27F5','xlArr':'\\u27F8','xmap':'\\u27FC','xnis':'\\u22FB','xodot':'\\u2A00','Xopf':'\\uD835\\uDD4F','xopf':'\\uD835\\uDD69','xoplus':'\\u2A01','xotime':'\\u2A02','xrarr':'\\u27F6','xrArr':'\\u27F9','Xscr':'\\uD835\\uDCB3','xscr':'\\uD835\\uDCCD','xsqcup':'\\u2A06','xuplus':'\\u2A04','xutri':'\\u25B3','xvee':'\\u22C1','xwedge':'\\u22C0','Yacute':'\\xDD','yacute':'\\xFD','YAcy':'\\u042F','yacy':'\\u044F','Ycirc':'\\u0176','ycirc':'\\u0177','Ycy':'\\u042B','ycy':'\\u044B','yen':'\\xA5','Yfr':'\\uD835\\uDD1C','yfr':'\\uD835\\uDD36','YIcy':'\\u0407','yicy':'\\u0457','Yopf':'\\uD835\\uDD50','yopf':'\\uD835\\uDD6A','Yscr':'\\uD835\\uDCB4','yscr':'\\uD835\\uDCCE','YUcy':'\\u042E','yucy':'\\u044E','yuml':'\\xFF','Yuml':'\\u0178','Zacute':'\\u0179','zacute':'\\u017A','Zcaron':'\\u017D','zcaron':'\\u017E','Zcy':'\\u0417','zcy':'\\u0437','Zdot':'\\u017B','zdot':'\\u017C','zeetrf':'\\u2128','ZeroWidthSpace':'\\u200B','Zeta':'\\u0396','zeta':'\\u03B6','zfr':'\\uD835\\uDD37','Zfr':'\\u2128','ZHcy':'\\u0416','zhcy':'\\u0436','zigrarr':'\\u21DD','zopf':'\\uD835\\uDD6B','Zopf':'\\u2124','Zscr':'\\uD835\\uDCB5','zscr':'\\uD835\\uDCCF','zwj':'\\u200D','zwnj':'\\u200C'};\n\tvar decodeMapLegacy = {'Aacute':'\\xC1','aacute':'\\xE1','Acirc':'\\xC2','acirc':'\\xE2','acute':'\\xB4','AElig':'\\xC6','aelig':'\\xE6','Agrave':'\\xC0','agrave':'\\xE0','amp':'&','AMP':'&','Aring':'\\xC5','aring':'\\xE5','Atilde':'\\xC3','atilde':'\\xE3','Auml':'\\xC4','auml':'\\xE4','brvbar':'\\xA6','Ccedil':'\\xC7','ccedil':'\\xE7','cedil':'\\xB8','cent':'\\xA2','copy':'\\xA9','COPY':'\\xA9','curren':'\\xA4','deg':'\\xB0','divide':'\\xF7','Eacute':'\\xC9','eacute':'\\xE9','Ecirc':'\\xCA','ecirc':'\\xEA','Egrave':'\\xC8','egrave':'\\xE8','ETH':'\\xD0','eth':'\\xF0','Euml':'\\xCB','euml':'\\xEB','frac12':'\\xBD','frac14':'\\xBC','frac34':'\\xBE','gt':'>','GT':'>','Iacute':'\\xCD','iacute':'\\xED','Icirc':'\\xCE','icirc':'\\xEE','iexcl':'\\xA1','Igrave':'\\xCC','igrave':'\\xEC','iquest':'\\xBF','Iuml':'\\xCF','iuml':'\\xEF','laquo':'\\xAB','lt':'<','LT':'<','macr':'\\xAF','micro':'\\xB5','middot':'\\xB7','nbsp':'\\xA0','not':'\\xAC','Ntilde':'\\xD1','ntilde':'\\xF1','Oacute':'\\xD3','oacute':'\\xF3','Ocirc':'\\xD4','ocirc':'\\xF4','Ograve':'\\xD2','ograve':'\\xF2','ordf':'\\xAA','ordm':'\\xBA','Oslash':'\\xD8','oslash':'\\xF8','Otilde':'\\xD5','otilde':'\\xF5','Ouml':'\\xD6','ouml':'\\xF6','para':'\\xB6','plusmn':'\\xB1','pound':'\\xA3','quot':'\"','QUOT':'\"','raquo':'\\xBB','reg':'\\xAE','REG':'\\xAE','sect':'\\xA7','shy':'\\xAD','sup1':'\\xB9','sup2':'\\xB2','sup3':'\\xB3','szlig':'\\xDF','THORN':'\\xDE','thorn':'\\xFE','times':'\\xD7','Uacute':'\\xDA','uacute':'\\xFA','Ucirc':'\\xDB','ucirc':'\\xFB','Ugrave':'\\xD9','ugrave':'\\xF9','uml':'\\xA8','Uuml':'\\xDC','uuml':'\\xFC','Yacute':'\\xDD','yacute':'\\xFD','yen':'\\xA5','yuml':'\\xFF'};\n\tvar decodeMapNumeric = {'0':'\\uFFFD','128':'\\u20AC','130':'\\u201A','131':'\\u0192','132':'\\u201E','133':'\\u2026','134':'\\u2020','135':'\\u2021','136':'\\u02C6','137':'\\u2030','138':'\\u0160','139':'\\u2039','140':'\\u0152','142':'\\u017D','145':'\\u2018','146':'\\u2019','147':'\\u201C','148':'\\u201D','149':'\\u2022','150':'\\u2013','151':'\\u2014','152':'\\u02DC','153':'\\u2122','154':'\\u0161','155':'\\u203A','156':'\\u0153','158':'\\u017E','159':'\\u0178'};\n\tvar invalidReferenceCodePoints = [1,2,3,4,5,6,7,8,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,64976,64977,64978,64979,64980,64981,64982,64983,64984,64985,64986,64987,64988,64989,64990,64991,64992,64993,64994,64995,64996,64997,64998,64999,65000,65001,65002,65003,65004,65005,65006,65007,65534,65535,131070,131071,196606,196607,262142,262143,327678,327679,393214,393215,458750,458751,524286,524287,589822,589823,655358,655359,720894,720895,786430,786431,851966,851967,917502,917503,983038,983039,1048574,1048575,1114110,1114111];\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar stringFromCharCode = String.fromCharCode;\n\n\tvar object = {};\n\tvar hasOwnProperty = object.hasOwnProperty;\n\tvar has = function(object, propertyName) {\n\t\treturn hasOwnProperty.call(object, propertyName);\n\t};\n\n\tvar contains = function(array, value) {\n\t\tvar index = -1;\n\t\tvar length = array.length;\n\t\twhile (++index < length) {\n\t\t\tif (array[index] == value) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t};\n\n\tvar merge = function(options, defaults) {\n\t\tif (!options) {\n\t\t\treturn defaults;\n\t\t}\n\t\tvar result = {};\n\t\tvar key;\n\t\tfor (key in defaults) {\n\t\t\t// A `hasOwnProperty` check is not needed here, since only recognized\n\t\t\t// option names are used anyway. Any others are ignored.\n\t\t\tresult[key] = has(options, key) ? options[key] : defaults[key];\n\t\t}\n\t\treturn result;\n\t};\n\n\t// Modified version of `ucs2encode`; see http://mths.be/punycode.\n\tvar codePointToSymbol = function(codePoint, strict) {\n\t\tvar output = '';\n\t\tif ((codePoint >= 0xD800 && codePoint <= 0xDFFF) || codePoint > 0x10FFFF) {\n\t\t\t// See issue #4:\n\t\t\t// “Otherwise, if the number is in the range 0xD800 to 0xDFFF or is\n\t\t\t// greater than 0x10FFFF, then this is a parse error. Return a U+FFFD\n\t\t\t// REPLACEMENT CHARACTER.”\n\t\t\tif (strict) {\n\t\t\t\tparseError('character reference outside the permissible Unicode range');\n\t\t\t}\n\t\t\treturn '\\uFFFD';\n\t\t}\n\t\tif (has(decodeMapNumeric, codePoint)) {\n\t\t\tif (strict) {\n\t\t\t\tparseError('disallowed character reference');\n\t\t\t}\n\t\t\treturn decodeMapNumeric[codePoint];\n\t\t}\n\t\tif (strict && contains(invalidReferenceCodePoints, codePoint)) {\n\t\t\tparseError('disallowed character reference');\n\t\t}\n\t\tif (codePoint > 0xFFFF) {\n\t\t\tcodePoint -= 0x10000;\n\t\t\toutput += stringFromCharCode(codePoint >>> 10 & 0x3FF | 0xD800);\n\t\t\tcodePoint = 0xDC00 | codePoint & 0x3FF;\n\t\t}\n\t\toutput += stringFromCharCode(codePoint);\n\t\treturn output;\n\t};\n\n\tvar hexEscape = function(symbol) {\n\t\treturn '&#x' + symbol.charCodeAt(0).toString(16).toUpperCase() + ';';\n\t};\n\n\tvar parseError = function(message) {\n\t\tthrow Error('Parse error: ' + message);\n\t};\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar encode = function(string, options) {\n\t\toptions = merge(options, encode.options);\n\t\tvar strict = options.strict;\n\t\tif (strict && regexInvalidRawCodePoint.test(string)) {\n\t\t\tparseError('forbidden code point');\n\t\t}\n\t\tvar encodeEverything = options.encodeEverything;\n\t\tvar useNamedReferences = options.useNamedReferences;\n\t\tvar allowUnsafeSymbols = options.allowUnsafeSymbols;\n\t\tif (encodeEverything) {\n\t\t\t// Encode ASCII symbols.\n\t\t\tstring = string.replace(regexAsciiWhitelist, function(symbol) {\n\t\t\t\t// Use named references if requested & possible.\n\t\t\t\tif (useNamedReferences && has(encodeMap, symbol)) {\n\t\t\t\t\treturn '&' + encodeMap[symbol] + ';';\n\t\t\t\t}\n\t\t\t\treturn hexEscape(symbol);\n\t\t\t});\n\t\t\t// Shorten a few escapes that represent two symbols, of which at least one\n\t\t\t// is within the ASCII range.\n\t\t\tif (useNamedReferences) {\n\t\t\t\tstring = string\n\t\t\t\t\t.replace(/&gt;\\u20D2/g, '&nvgt;')\n\t\t\t\t\t.replace(/&lt;\\u20D2/g, '&nvlt;')\n\t\t\t\t\t.replace(/&#x66;&#x6A;/g, '&fjlig;');\n\t\t\t}\n\t\t\t// Encode non-ASCII symbols.\n\t\t\tif (useNamedReferences) {\n\t\t\t\t// Encode non-ASCII symbols that can be replaced with a named reference.\n\t\t\t\tstring = string.replace(regexEncodeNonAscii, function(string) {\n\t\t\t\t\t// Note: there is no need to check `has(encodeMap, string)` here.\n\t\t\t\t\treturn '&' + encodeMap[string] + ';';\n\t\t\t\t});\n\t\t\t}\n\t\t\t// Note: any remaining non-ASCII symbols are handled outside of the `if`.\n\t\t} else if (useNamedReferences) {\n\t\t\t// Apply named character references.\n\t\t\t// Encode `<>\"'&` using named character references.\n\t\t\tif (!allowUnsafeSymbols) {\n\t\t\t\tstring = string.replace(regexEscape, function(string) {\n\t\t\t\t\treturn '&' + encodeMap[string] + ';'; // no need to check `has()` here\n\t\t\t\t});\n\t\t\t}\n\t\t\t// Shorten escapes that represent two symbols, of which at least one is\n\t\t\t// `<>\"'&`.\n\t\t\tstring = string\n\t\t\t\t.replace(/&gt;\\u20D2/g, '&nvgt;')\n\t\t\t\t.replace(/&lt;\\u20D2/g, '&nvlt;');\n\t\t\t// Encode non-ASCII symbols that can be replaced with a named reference.\n\t\t\tstring = string.replace(regexEncodeNonAscii, function(string) {\n\t\t\t\t// Note: there is no need to check `has(encodeMap, string)` here.\n\t\t\t\treturn '&' + encodeMap[string] + ';';\n\t\t\t});\n\t\t} else if (!allowUnsafeSymbols) {\n\t\t\t// Encode `<>\"'&` using hexadecimal escapes, now that they’re not handled\n\t\t\t// using named character references.\n\t\t\tstring = string.replace(regexEscape, hexEscape);\n\t\t}\n\t\treturn string\n\t\t\t// Encode astral symbols.\n\t\t\t.replace(regexAstralSymbols, function($0) {\n\t\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\t\tvar high = $0.charCodeAt(0);\n\t\t\t\tvar low = $0.charCodeAt(1);\n\t\t\t\tvar codePoint = (high - 0xD800) * 0x400 + low - 0xDC00 + 0x10000;\n\t\t\t\treturn '&#x' + codePoint.toString(16).toUpperCase() + ';';\n\t\t\t})\n\t\t\t// Encode any remaining BMP symbols that are not printable ASCII symbols\n\t\t\t// using a hexadecimal escape.\n\t\t\t.replace(regexBmpWhitelist, hexEscape);\n\t};\n\t// Expose default options (so they can be overridden globally).\n\tencode.options = {\n\t\t'allowUnsafeSymbols': false,\n\t\t'encodeEverything': false,\n\t\t'strict': false,\n\t\t'useNamedReferences': false\n\t};\n\n\tvar decode = function(html, options) {\n\t\toptions = merge(options, decode.options);\n\t\tvar strict = options.strict;\n\t\tif (strict && regexInvalidEntity.test(html)) {\n\t\t\tparseError('malformed character reference');\n\t\t}\n\t\treturn html.replace(regexDecode, function($0, $1, $2, $3, $4, $5, $6, $7) {\n\t\t\tvar codePoint;\n\t\t\tvar semicolon;\n\t\t\tvar hexDigits;\n\t\t\tvar reference;\n\t\t\tvar next;\n\t\t\tif ($1) {\n\t\t\t\t// Decode decimal escapes, e.g. `&#119558;`.\n\t\t\t\tcodePoint = $1;\n\t\t\t\tsemicolon = $2;\n\t\t\t\tif (strict && !semicolon) {\n\t\t\t\t\tparseError('character reference was not terminated by a semicolon');\n\t\t\t\t}\n\t\t\t\treturn codePointToSymbol(codePoint, strict);\n\t\t\t}\n\t\t\tif ($3) {\n\t\t\t\t// Decode hexadecimal escapes, e.g. `&#x1D306;`.\n\t\t\t\thexDigits = $3;\n\t\t\t\tsemicolon = $4;\n\t\t\t\tif (strict && !semicolon) {\n\t\t\t\t\tparseError('character reference was not terminated by a semicolon');\n\t\t\t\t}\n\t\t\t\tcodePoint = parseInt(hexDigits, 16);\n\t\t\t\treturn codePointToSymbol(codePoint, strict);\n\t\t\t}\n\t\t\tif ($5) {\n\t\t\t\t// Decode named character references with trailing `;`, e.g. `&copy;`.\n\t\t\t\treference = $5;\n\t\t\t\tif (has(decodeMap, reference)) {\n\t\t\t\t\treturn decodeMap[reference];\n\t\t\t\t} else {\n\t\t\t\t\t// Ambiguous ampersand; see http://mths.be/notes/ambiguous-ampersands.\n\t\t\t\t\tif (strict) {\n\t\t\t\t\t\tparseError(\n\t\t\t\t\t\t\t'named character reference was not terminated by a semicolon'\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn $0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If we’re still here, it’s a legacy reference for sure. No need for an\n\t\t\t// extra `if` check.\n\t\t\t// Decode named character references without trailing `;`, e.g. `&amp`\n\t\t\t// This is only a parse error if it gets converted to `&`, or if it is\n\t\t\t// followed by `=` in an attribute context.\n\t\t\treference = $6;\n\t\t\tnext = $7;\n\t\t\tif (next && options.isAttributeValue) {\n\t\t\t\tif (strict && next == '=') {\n\t\t\t\t\tparseError('`&` did not start a character reference');\n\t\t\t\t}\n\t\t\t\treturn $0;\n\t\t\t} else {\n\t\t\t\tif (strict) {\n\t\t\t\t\tparseError(\n\t\t\t\t\t\t'named character reference was not terminated by a semicolon'\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t// Note: there is no need to check `has(decodeMapLegacy, reference)`.\n\t\t\t\treturn decodeMapLegacy[reference] + (next || '');\n\t\t\t}\n\t\t});\n\t};\n\t// Expose default options (so they can be overridden globally).\n\tdecode.options = {\n\t\t'isAttributeValue': false,\n\t\t'strict': false\n\t};\n\n\tvar escape = function(string) {\n\t\treturn string.replace(regexEscape, function($0) {\n\t\t\t// Note: there is no need to check `has(escapeMap, $0)` here.\n\t\t\treturn escapeMap[$0];\n\t\t});\n\t};\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar he = {\n\t\t'version': '0.5.0',\n\t\t'encode': encode,\n\t\t'decode': decode,\n\t\t'escape': escape,\n\t\t'unescape': decode\n\t};\n\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine(function() {\n\t\t\treturn he;\n\t\t});\n\t}\telse if (freeExports && !freeExports.nodeType) {\n\t\tif (freeModule) { // in Node.js or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = he;\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (var key in he) {\n\t\t\t\thas(he, key) && (freeExports[key] = he[key]);\n\t\t\t}\n\t\t}\n\t} else { // in Rhino or a web browser\n\t\troot.he = he;\n\t}\n\n}(this));\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n},{}],51:[function(require,module,exports){\n/** @license MIT License (c) copyright 2011-2013 original author or authors */\n\n/**\n * delay.js\n *\n * Helper that returns a promise that resolves after a delay.\n *\n * @author Brian Cavalier\n * @author John Hann\n */\n\n(function(define) {\ndefine(function(require) {\n\n\tvar when = require('./when');\n\n    /**\n\t * @deprecated Use when(value).delay(ms)\n     */\n    return function delay(msec, value) {\n\t\treturn when(value).delay(msec);\n    };\n\n});\n})(typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); });\n\n\n\n},{\"./when\":69}],52:[function(require,module,exports){\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function (require) {\n\n\tvar makePromise = require('./makePromise');\n\tvar Scheduler = require('./Scheduler');\n\tvar async = require('./env').asap;\n\n\treturn makePromise({\n\t\tscheduler: new Scheduler(async)\n\t});\n\n});\n})(typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); });\n\n},{\"./Scheduler\":53,\"./env\":65,\"./makePromise\":67}],53:[function(require,module,exports){\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\t// Credit to Twisol (https://github.com/Twisol) for suggesting\n\t// this type of extensible queue + trampoline approach for next-tick conflation.\n\n\t/**\n\t * Async task scheduler\n\t * @param {function} async function to schedule a single async function\n\t * @constructor\n\t */\n\tfunction Scheduler(async) {\n\t\tthis._async = async;\n\t\tthis._running = false;\n\n\t\tthis._queue = this;\n\t\tthis._queueLen = 0;\n\t\tthis._afterQueue = {};\n\t\tthis._afterQueueLen = 0;\n\n\t\tvar self = this;\n\t\tthis.drain = function() {\n\t\t\tself._drain();\n\t\t};\n\t}\n\n\t/**\n\t * Enqueue a task\n\t * @param {{ run:function }} task\n\t */\n\tScheduler.prototype.enqueue = function(task) {\n\t\tthis._queue[this._queueLen++] = task;\n\t\tthis.run();\n\t};\n\n\t/**\n\t * Enqueue a task to run after the main task queue\n\t * @param {{ run:function }} task\n\t */\n\tScheduler.prototype.afterQueue = function(task) {\n\t\tthis._afterQueue[this._afterQueueLen++] = task;\n\t\tthis.run();\n\t};\n\n\tScheduler.prototype.run = function() {\n\t\tif (!this._running) {\n\t\t\tthis._running = true;\n\t\t\tthis._async(this.drain);\n\t\t}\n\t};\n\n\t/**\n\t * Drain the handler queue entirely, and then the after queue\n\t */\n\tScheduler.prototype._drain = function() {\n\t\tvar i = 0;\n\t\tfor (; i < this._queueLen; ++i) {\n\t\t\tthis._queue[i].run();\n\t\t\tthis._queue[i] = void 0;\n\t\t}\n\n\t\tthis._queueLen = 0;\n\t\tthis._running = false;\n\n\t\tfor (i = 0; i < this._afterQueueLen; ++i) {\n\t\t\tthis._afterQueue[i].run();\n\t\t\tthis._afterQueue[i] = void 0;\n\t\t}\n\n\t\tthis._afterQueueLen = 0;\n\t};\n\n\treturn Scheduler;\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n\n},{}],54:[function(require,module,exports){\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\t/**\n\t * Custom error type for promises rejected by promise.timeout\n\t * @param {string} message\n\t * @constructor\n\t */\n\tfunction TimeoutError (message) {\n\t\tError.call(this);\n\t\tthis.message = message;\n\t\tthis.name = TimeoutError.name;\n\t\tif (typeof Error.captureStackTrace === 'function') {\n\t\t\tError.captureStackTrace(this, TimeoutError);\n\t\t}\n\t}\n\n\tTimeoutError.prototype = Object.create(Error.prototype);\n\tTimeoutError.prototype.constructor = TimeoutError;\n\n\treturn TimeoutError;\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n},{}],55:[function(require,module,exports){\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\tmakeApply.tryCatchResolve = tryCatchResolve;\n\n\treturn makeApply;\n\n\tfunction makeApply(Promise, call) {\n\t\tif(arguments.length < 2) {\n\t\t\tcall = tryCatchResolve;\n\t\t}\n\n\t\treturn apply;\n\n\t\tfunction apply(f, thisArg, args) {\n\t\t\tvar p = Promise._defer();\n\t\t\tvar l = args.length;\n\t\t\tvar params = new Array(l);\n\t\t\tcallAndResolve({ f:f, thisArg:thisArg, args:args, params:params, i:l-1, call:call }, p._handler);\n\n\t\t\treturn p;\n\t\t}\n\n\t\tfunction callAndResolve(c, h) {\n\t\t\tif(c.i < 0) {\n\t\t\t\treturn call(c.f, c.thisArg, c.params, h);\n\t\t\t}\n\n\t\t\tvar handler = Promise._handler(c.args[c.i]);\n\t\t\thandler.fold(callAndResolveNext, c, void 0, h);\n\t\t}\n\n\t\tfunction callAndResolveNext(c, x, h) {\n\t\t\tc.params[c.i] = x;\n\t\t\tc.i -= 1;\n\t\t\tcallAndResolve(c, h);\n\t\t}\n\t}\n\n\tfunction tryCatchResolve(f, thisArg, args, resolver) {\n\t\ttry {\n\t\t\tresolver.resolve(f.apply(thisArg, args));\n\t\t} catch(e) {\n\t\t\tresolver.reject(e);\n\t\t}\n\t}\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n\n\n\n},{}],56:[function(require,module,exports){\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function(require) {\n\n\tvar state = require('../state');\n\tvar applier = require('../apply');\n\n\treturn function array(Promise) {\n\n\t\tvar applyFold = applier(Promise);\n\t\tvar toPromise = Promise.resolve;\n\t\tvar all = Promise.all;\n\n\t\tvar ar = Array.prototype.reduce;\n\t\tvar arr = Array.prototype.reduceRight;\n\t\tvar slice = Array.prototype.slice;\n\n\t\t// Additional array combinators\n\n\t\tPromise.any = any;\n\t\tPromise.some = some;\n\t\tPromise.settle = settle;\n\n\t\tPromise.map = map;\n\t\tPromise.filter = filter;\n\t\tPromise.reduce = reduce;\n\t\tPromise.reduceRight = reduceRight;\n\n\t\t/**\n\t\t * When this promise fulfills with an array, do\n\t\t * onFulfilled.apply(void 0, array)\n\t\t * @param {function} onFulfilled function to apply\n\t\t * @returns {Promise} promise for the result of applying onFulfilled\n\t\t */\n\t\tPromise.prototype.spread = function(onFulfilled) {\n\t\t\treturn this.then(all).then(function(array) {\n\t\t\t\treturn onFulfilled.apply(this, array);\n\t\t\t});\n\t\t};\n\n\t\treturn Promise;\n\n\t\t/**\n\t\t * One-winner competitive race.\n\t\t * Return a promise that will fulfill when one of the promises\n\t\t * in the input array fulfills, or will reject when all promises\n\t\t * have rejected.\n\t\t * @param {array} promises\n\t\t * @returns {Promise} promise for the first fulfilled value\n\t\t */\n\t\tfunction any(promises) {\n\t\t\tvar p = Promise._defer();\n\t\t\tvar resolver = p._handler;\n\t\t\tvar l = promises.length>>>0;\n\n\t\t\tvar pending = l;\n\t\t\tvar errors = [];\n\n\t\t\tfor (var h, x, i = 0; i < l; ++i) {\n\t\t\t\tx = promises[i];\n\t\t\t\tif(x === void 0 && !(i in promises)) {\n\t\t\t\t\t--pending;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\th = Promise._handler(x);\n\t\t\t\tif(h.state() > 0) {\n\t\t\t\t\tresolver.become(h);\n\t\t\t\t\tPromise._visitRemaining(promises, i, h);\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\th.visit(resolver, handleFulfill, handleReject);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(pending === 0) {\n\t\t\t\tresolver.reject(new RangeError('any(): array must not be empty'));\n\t\t\t}\n\n\t\t\treturn p;\n\n\t\t\tfunction handleFulfill(x) {\n\t\t\t\t/*jshint validthis:true*/\n\t\t\t\terrors = null;\n\t\t\t\tthis.resolve(x); // this === resolver\n\t\t\t}\n\n\t\t\tfunction handleReject(e) {\n\t\t\t\t/*jshint validthis:true*/\n\t\t\t\tif(this.resolved) { // this === resolver\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\terrors.push(e);\n\t\t\t\tif(--pending === 0) {\n\t\t\t\t\tthis.reject(errors);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * N-winner competitive race\n\t\t * Return a promise that will fulfill when n input promises have\n\t\t * fulfilled, or will reject when it becomes impossible for n\n\t\t * input promises to fulfill (ie when promises.length - n + 1\n\t\t * have rejected)\n\t\t * @param {array} promises\n\t\t * @param {number} n\n\t\t * @returns {Promise} promise for the earliest n fulfillment values\n\t\t *\n\t\t * @deprecated\n\t\t */\n\t\tfunction some(promises, n) {\n\t\t\t/*jshint maxcomplexity:7*/\n\t\t\tvar p = Promise._defer();\n\t\t\tvar resolver = p._handler;\n\n\t\t\tvar results = [];\n\t\t\tvar errors = [];\n\n\t\t\tvar l = promises.length>>>0;\n\t\t\tvar nFulfill = 0;\n\t\t\tvar nReject;\n\t\t\tvar x, i; // reused in both for() loops\n\n\t\t\t// First pass: count actual array items\n\t\t\tfor(i=0; i<l; ++i) {\n\t\t\t\tx = promises[i];\n\t\t\t\tif(x === void 0 && !(i in promises)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t++nFulfill;\n\t\t\t}\n\n\t\t\t// Compute actual goals\n\t\t\tn = Math.max(n, 0);\n\t\t\tnReject = (nFulfill - n + 1);\n\t\t\tnFulfill = Math.min(n, nFulfill);\n\n\t\t\tif(n > nFulfill) {\n\t\t\t\tresolver.reject(new RangeError('some(): array must contain at least '\n\t\t\t\t+ n + ' item(s), but had ' + nFulfill));\n\t\t\t} else if(nFulfill === 0) {\n\t\t\t\tresolver.resolve(results);\n\t\t\t}\n\n\t\t\t// Second pass: observe each array item, make progress toward goals\n\t\t\tfor(i=0; i<l; ++i) {\n\t\t\t\tx = promises[i];\n\t\t\t\tif(x === void 0 && !(i in promises)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tPromise._handler(x).visit(resolver, fulfill, reject, resolver.notify);\n\t\t\t}\n\n\t\t\treturn p;\n\n\t\t\tfunction fulfill(x) {\n\t\t\t\t/*jshint validthis:true*/\n\t\t\t\tif(this.resolved) { // this === resolver\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresults.push(x);\n\t\t\t\tif(--nFulfill === 0) {\n\t\t\t\t\terrors = null;\n\t\t\t\t\tthis.resolve(results);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction reject(e) {\n\t\t\t\t/*jshint validthis:true*/\n\t\t\t\tif(this.resolved) { // this === resolver\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\terrors.push(e);\n\t\t\t\tif(--nReject === 0) {\n\t\t\t\t\tresults = null;\n\t\t\t\t\tthis.reject(errors);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Apply f to the value of each promise in a list of promises\n\t\t * and return a new list containing the results.\n\t\t * @param {array} promises\n\t\t * @param {function(x:*, index:Number):*} f mapping function\n\t\t * @returns {Promise}\n\t\t */\n\t\tfunction map(promises, f) {\n\t\t\treturn Promise._traverse(f, promises);\n\t\t}\n\n\t\t/**\n\t\t * Filter the provided array of promises using the provided predicate.  Input may\n\t\t * contain promises and values\n\t\t * @param {Array} promises array of promises and values\n\t\t * @param {function(x:*, index:Number):boolean} predicate filtering predicate.\n\t\t *  Must return truthy (or promise for truthy) for items to retain.\n\t\t * @returns {Promise} promise that will fulfill with an array containing all items\n\t\t *  for which predicate returned truthy.\n\t\t */\n\t\tfunction filter(promises, predicate) {\n\t\t\tvar a = slice.call(promises);\n\t\t\treturn Promise._traverse(predicate, a).then(function(keep) {\n\t\t\t\treturn filterSync(a, keep);\n\t\t\t});\n\t\t}\n\n\t\tfunction filterSync(promises, keep) {\n\t\t\t// Safe because we know all promises have fulfilled if we've made it this far\n\t\t\tvar l = keep.length;\n\t\t\tvar filtered = new Array(l);\n\t\t\tfor(var i=0, j=0; i<l; ++i) {\n\t\t\t\tif(keep[i]) {\n\t\t\t\t\tfiltered[j++] = Promise._handler(promises[i]).value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfiltered.length = j;\n\t\t\treturn filtered;\n\n\t\t}\n\n\t\t/**\n\t\t * Return a promise that will always fulfill with an array containing\n\t\t * the outcome states of all input promises.  The returned promise\n\t\t * will never reject.\n\t\t * @param {Array} promises\n\t\t * @returns {Promise} promise for array of settled state descriptors\n\t\t */\n\t\tfunction settle(promises) {\n\t\t\treturn all(promises.map(settleOne));\n\t\t}\n\n\t\tfunction settleOne(p) {\n\t\t\tvar h = Promise._handler(p);\n\t\t\tif(h.state() === 0) {\n\t\t\t\treturn toPromise(p).then(state.fulfilled, state.rejected);\n\t\t\t}\n\n\t\t\th._unreport();\n\t\t\treturn state.inspect(h);\n\t\t}\n\n\t\t/**\n\t\t * Traditional reduce function, similar to `Array.prototype.reduce()`, but\n\t\t * input may contain promises and/or values, and reduceFunc\n\t\t * may return either a value or a promise, *and* initialValue may\n\t\t * be a promise for the starting value.\n\t\t * @param {Array|Promise} promises array or promise for an array of anything,\n\t\t *      may contain a mix of promises and values.\n\t\t * @param {function(accumulated:*, x:*, index:Number):*} f reduce function\n\t\t * @returns {Promise} that will resolve to the final reduced value\n\t\t */\n\t\tfunction reduce(promises, f /*, initialValue */) {\n\t\t\treturn arguments.length > 2 ? ar.call(promises, liftCombine(f), arguments[2])\n\t\t\t\t\t: ar.call(promises, liftCombine(f));\n\t\t}\n\n\t\t/**\n\t\t * Traditional reduce function, similar to `Array.prototype.reduceRight()`, but\n\t\t * input may contain promises and/or values, and reduceFunc\n\t\t * may return either a value or a promise, *and* initialValue may\n\t\t * be a promise for the starting value.\n\t\t * @param {Array|Promise} promises array or promise for an array of anything,\n\t\t *      may contain a mix of promises and values.\n\t\t * @param {function(accumulated:*, x:*, index:Number):*} f reduce function\n\t\t * @returns {Promise} that will resolve to the final reduced value\n\t\t */\n\t\tfunction reduceRight(promises, f /*, initialValue */) {\n\t\t\treturn arguments.length > 2 ? arr.call(promises, liftCombine(f), arguments[2])\n\t\t\t\t\t: arr.call(promises, liftCombine(f));\n\t\t}\n\n\t\tfunction liftCombine(f) {\n\t\t\treturn function(z, x, i) {\n\t\t\t\treturn applyFold(f, void 0, [z,x,i]);\n\t\t\t};\n\t\t}\n\t};\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));\n\n},{\"../apply\":55,\"../state\":68}],57:[function(require,module,exports){\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\treturn function flow(Promise) {\n\n\t\tvar resolve = Promise.resolve;\n\t\tvar reject = Promise.reject;\n\t\tvar origCatch = Promise.prototype['catch'];\n\n\t\t/**\n\t\t * Handle the ultimate fulfillment value or rejection reason, and assume\n\t\t * responsibility for all errors.  If an error propagates out of result\n\t\t * or handleFatalError, it will be rethrown to the host, resulting in a\n\t\t * loud stack track on most platforms and a crash on some.\n\t\t * @param {function?} onResult\n\t\t * @param {function?} onError\n\t\t * @returns {undefined}\n\t\t */\n\t\tPromise.prototype.done = function(onResult, onError) {\n\t\t\tthis._handler.visit(this._handler.receiver, onResult, onError);\n\t\t};\n\n\t\t/**\n\t\t * Add Error-type and predicate matching to catch.  Examples:\n\t\t * promise.catch(TypeError, handleTypeError)\n\t\t *   .catch(predicate, handleMatchedErrors)\n\t\t *   .catch(handleRemainingErrors)\n\t\t * @param onRejected\n\t\t * @returns {*}\n\t\t */\n\t\tPromise.prototype['catch'] = Promise.prototype.otherwise = function(onRejected) {\n\t\t\tif (arguments.length < 2) {\n\t\t\t\treturn origCatch.call(this, onRejected);\n\t\t\t}\n\n\t\t\tif(typeof onRejected !== 'function') {\n\t\t\t\treturn this.ensure(rejectInvalidPredicate);\n\t\t\t}\n\n\t\t\treturn origCatch.call(this, createCatchFilter(arguments[1], onRejected));\n\t\t};\n\n\t\t/**\n\t\t * Wraps the provided catch handler, so that it will only be called\n\t\t * if the predicate evaluates truthy\n\t\t * @param {?function} handler\n\t\t * @param {function} predicate\n\t\t * @returns {function} conditional catch handler\n\t\t */\n\t\tfunction createCatchFilter(handler, predicate) {\n\t\t\treturn function(e) {\n\t\t\t\treturn evaluatePredicate(e, predicate)\n\t\t\t\t\t? handler.call(this, e)\n\t\t\t\t\t: reject(e);\n\t\t\t};\n\t\t}\n\n\t\t/**\n\t\t * Ensures that onFulfilledOrRejected will be called regardless of whether\n\t\t * this promise is fulfilled or rejected.  onFulfilledOrRejected WILL NOT\n\t\t * receive the promises' value or reason.  Any returned value will be disregarded.\n\t\t * onFulfilledOrRejected may throw or return a rejected promise to signal\n\t\t * an additional error.\n\t\t * @param {function} handler handler to be called regardless of\n\t\t *  fulfillment or rejection\n\t\t * @returns {Promise}\n\t\t */\n\t\tPromise.prototype['finally'] = Promise.prototype.ensure = function(handler) {\n\t\t\tif(typeof handler !== 'function') {\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\treturn this.then(function(x) {\n\t\t\t\treturn runSideEffect(handler, this, identity, x);\n\t\t\t}, function(e) {\n\t\t\t\treturn runSideEffect(handler, this, reject, e);\n\t\t\t});\n\t\t};\n\n\t\tfunction runSideEffect (handler, thisArg, propagate, value) {\n\t\t\tvar result = handler.call(thisArg);\n\t\t\treturn maybeThenable(result)\n\t\t\t\t? propagateValue(result, propagate, value)\n\t\t\t\t: propagate(value);\n\t\t}\n\n\t\tfunction propagateValue (result, propagate, x) {\n\t\t\treturn resolve(result).then(function () {\n\t\t\t\treturn propagate(x);\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Recover from a failure by returning a defaultValue.  If defaultValue\n\t\t * is a promise, it's fulfillment value will be used.  If defaultValue is\n\t\t * a promise that rejects, the returned promise will reject with the\n\t\t * same reason.\n\t\t * @param {*} defaultValue\n\t\t * @returns {Promise} new promise\n\t\t */\n\t\tPromise.prototype['else'] = Promise.prototype.orElse = function(defaultValue) {\n\t\t\treturn this.then(void 0, function() {\n\t\t\t\treturn defaultValue;\n\t\t\t});\n\t\t};\n\n\t\t/**\n\t\t * Shortcut for .then(function() { return value; })\n\t\t * @param  {*} value\n\t\t * @return {Promise} a promise that:\n\t\t *  - is fulfilled if value is not a promise, or\n\t\t *  - if value is a promise, will fulfill with its value, or reject\n\t\t *    with its reason.\n\t\t */\n\t\tPromise.prototype['yield'] = function(value) {\n\t\t\treturn this.then(function() {\n\t\t\t\treturn value;\n\t\t\t});\n\t\t};\n\n\t\t/**\n\t\t * Runs a side effect when this promise fulfills, without changing the\n\t\t * fulfillment value.\n\t\t * @param {function} onFulfilledSideEffect\n\t\t * @returns {Promise}\n\t\t */\n\t\tPromise.prototype.tap = function(onFulfilledSideEffect) {\n\t\t\treturn this.then(onFulfilledSideEffect)['yield'](this);\n\t\t};\n\n\t\treturn Promise;\n\t};\n\n\tfunction rejectInvalidPredicate() {\n\t\tthrow new TypeError('catch predicate must be a function');\n\t}\n\n\tfunction evaluatePredicate(e, predicate) {\n\t\treturn isError(predicate) ? e instanceof predicate : predicate(e);\n\t}\n\n\tfunction isError(predicate) {\n\t\treturn predicate === Error\n\t\t\t|| (predicate != null && predicate.prototype instanceof Error);\n\t}\n\n\tfunction maybeThenable(x) {\n\t\treturn (typeof x === 'object' || typeof x === 'function') && x !== null;\n\t}\n\n\tfunction identity(x) {\n\t\treturn x;\n\t}\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n\n},{}],58:[function(require,module,exports){\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n/** @author Jeff Escalante */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\treturn function fold(Promise) {\n\n\t\tPromise.prototype.fold = function(f, z) {\n\t\t\tvar promise = this._beget();\n\n\t\t\tthis._handler.fold(function(z, x, to) {\n\t\t\t\tPromise._handler(z).fold(function(x, z, to) {\n\t\t\t\t\tto.resolve(f.call(this, z, x));\n\t\t\t\t}, x, this, to);\n\t\t\t}, z, promise._handler.receiver, promise._handler);\n\n\t\t\treturn promise;\n\t\t};\n\n\t\treturn Promise;\n\t};\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n\n},{}],59:[function(require,module,exports){\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function(require) {\n\n\tvar inspect = require('../state').inspect;\n\n\treturn function inspection(Promise) {\n\n\t\tPromise.prototype.inspect = function() {\n\t\t\treturn inspect(Promise._handler(this));\n\t\t};\n\n\t\treturn Promise;\n\t};\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));\n\n},{\"../state\":68}],60:[function(require,module,exports){\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\treturn function generate(Promise) {\n\n\t\tvar resolve = Promise.resolve;\n\n\t\tPromise.iterate = iterate;\n\t\tPromise.unfold = unfold;\n\n\t\treturn Promise;\n\n\t\t/**\n\t\t * @deprecated Use github.com/cujojs/most streams and most.iterate\n\t\t * Generate a (potentially infinite) stream of promised values:\n\t\t * x, f(x), f(f(x)), etc. until condition(x) returns true\n\t\t * @param {function} f function to generate a new x from the previous x\n\t\t * @param {function} condition function that, given the current x, returns\n\t\t *  truthy when the iterate should stop\n\t\t * @param {function} handler function to handle the value produced by f\n\t\t * @param {*|Promise} x starting value, may be a promise\n\t\t * @return {Promise} the result of the last call to f before\n\t\t *  condition returns true\n\t\t */\n\t\tfunction iterate(f, condition, handler, x) {\n\t\t\treturn unfold(function(x) {\n\t\t\t\treturn [x, f(x)];\n\t\t\t}, condition, handler, x);\n\t\t}\n\n\t\t/**\n\t\t * @deprecated Use github.com/cujojs/most streams and most.unfold\n\t\t * Generate a (potentially infinite) stream of promised values\n\t\t * by applying handler(generator(seed)) iteratively until\n\t\t * condition(seed) returns true.\n\t\t * @param {function} unspool function that generates a [value, newSeed]\n\t\t *  given a seed.\n\t\t * @param {function} condition function that, given the current seed, returns\n\t\t *  truthy when the unfold should stop\n\t\t * @param {function} handler function to handle the value produced by unspool\n\t\t * @param x {*|Promise} starting value, may be a promise\n\t\t * @return {Promise} the result of the last value produced by unspool before\n\t\t *  condition returns true\n\t\t */\n\t\tfunction unfold(unspool, condition, handler, x) {\n\t\t\treturn resolve(x).then(function(seed) {\n\t\t\t\treturn resolve(condition(seed)).then(function(done) {\n\t\t\t\t\treturn done ? seed : resolve(unspool(seed)).spread(next);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tfunction next(item, newSeed) {\n\t\t\t\treturn resolve(handler(item)).then(function() {\n\t\t\t\t\treturn unfold(unspool, condition, handler, newSeed);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n\n},{}],61:[function(require,module,exports){\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\treturn function progress(Promise) {\n\n\t\t/**\n\t\t * @deprecated\n\t\t * Register a progress handler for this promise\n\t\t * @param {function} onProgress\n\t\t * @returns {Promise}\n\t\t */\n\t\tPromise.prototype.progress = function(onProgress) {\n\t\t\treturn this.then(void 0, void 0, onProgress);\n\t\t};\n\n\t\treturn Promise;\n\t};\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n\n},{}],62:[function(require,module,exports){\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function(require) {\n\n\tvar env = require('../env');\n\tvar TimeoutError = require('../TimeoutError');\n\n\tfunction setTimeout(f, ms, x, y) {\n\t\treturn env.setTimer(function() {\n\t\t\tf(x, y, ms);\n\t\t}, ms);\n\t}\n\n\treturn function timed(Promise) {\n\t\t/**\n\t\t * Return a new promise whose fulfillment value is revealed only\n\t\t * after ms milliseconds\n\t\t * @param {number} ms milliseconds\n\t\t * @returns {Promise}\n\t\t */\n\t\tPromise.prototype.delay = function(ms) {\n\t\t\tvar p = this._beget();\n\t\t\tthis._handler.fold(handleDelay, ms, void 0, p._handler);\n\t\t\treturn p;\n\t\t};\n\n\t\tfunction handleDelay(ms, x, h) {\n\t\t\tsetTimeout(resolveDelay, ms, x, h);\n\t\t}\n\n\t\tfunction resolveDelay(x, h) {\n\t\t\th.resolve(x);\n\t\t}\n\n\t\t/**\n\t\t * Return a new promise that rejects after ms milliseconds unless\n\t\t * this promise fulfills earlier, in which case the returned promise\n\t\t * fulfills with the same value.\n\t\t * @param {number} ms milliseconds\n\t\t * @param {Error|*=} reason optional rejection reason to use, defaults\n\t\t *   to a TimeoutError if not provided\n\t\t * @returns {Promise}\n\t\t */\n\t\tPromise.prototype.timeout = function(ms, reason) {\n\t\t\tvar p = this._beget();\n\t\t\tvar h = p._handler;\n\n\t\t\tvar t = setTimeout(onTimeout, ms, reason, p._handler);\n\n\t\t\tthis._handler.visit(h,\n\t\t\t\tfunction onFulfill(x) {\n\t\t\t\t\tenv.clearTimer(t);\n\t\t\t\t\tthis.resolve(x); // this = h\n\t\t\t\t},\n\t\t\t\tfunction onReject(x) {\n\t\t\t\t\tenv.clearTimer(t);\n\t\t\t\t\tthis.reject(x); // this = h\n\t\t\t\t},\n\t\t\t\th.notify);\n\n\t\t\treturn p;\n\t\t};\n\n\t\tfunction onTimeout(reason, h, ms) {\n\t\t\tvar e = typeof reason === 'undefined'\n\t\t\t\t? new TimeoutError('timed out after ' + ms + 'ms')\n\t\t\t\t: reason;\n\t\t\th.reject(e);\n\t\t}\n\n\t\treturn Promise;\n\t};\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));\n\n},{\"../TimeoutError\":54,\"../env\":65}],63:[function(require,module,exports){\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function(require) {\n\n\tvar setTimer = require('../env').setTimer;\n\tvar format = require('../format');\n\n\treturn function unhandledRejection(Promise) {\n\n\t\tvar logError = noop;\n\t\tvar logInfo = noop;\n\t\tvar localConsole;\n\n\t\tif(typeof console !== 'undefined') {\n\t\t\t// Alias console to prevent things like uglify's drop_console option from\n\t\t\t// removing console.log/error. Unhandled rejections fall into the same\n\t\t\t// category as uncaught exceptions, and build tools shouldn't silence them.\n\t\t\tlocalConsole = console;\n\t\t\tlogError = typeof localConsole.error !== 'undefined'\n\t\t\t\t? function (e) { localConsole.error(e); }\n\t\t\t\t: function (e) { localConsole.log(e); };\n\n\t\t\tlogInfo = typeof localConsole.info !== 'undefined'\n\t\t\t\t? function (e) { localConsole.info(e); }\n\t\t\t\t: function (e) { localConsole.log(e); };\n\t\t}\n\n\t\tPromise.onPotentiallyUnhandledRejection = function(rejection) {\n\t\t\tenqueue(report, rejection);\n\t\t};\n\n\t\tPromise.onPotentiallyUnhandledRejectionHandled = function(rejection) {\n\t\t\tenqueue(unreport, rejection);\n\t\t};\n\n\t\tPromise.onFatalRejection = function(rejection) {\n\t\t\tenqueue(throwit, rejection.value);\n\t\t};\n\n\t\tvar tasks = [];\n\t\tvar reported = [];\n\t\tvar running = null;\n\n\t\tfunction report(r) {\n\t\t\tif(!r.handled) {\n\t\t\t\treported.push(r);\n\t\t\t\tlogError('Potentially unhandled rejection [' + r.id + '] ' + format.formatError(r.value));\n\t\t\t}\n\t\t}\n\n\t\tfunction unreport(r) {\n\t\t\tvar i = reported.indexOf(r);\n\t\t\tif(i >= 0) {\n\t\t\t\treported.splice(i, 1);\n\t\t\t\tlogInfo('Handled previous rejection [' + r.id + '] ' + format.formatObject(r.value));\n\t\t\t}\n\t\t}\n\n\t\tfunction enqueue(f, x) {\n\t\t\ttasks.push(f, x);\n\t\t\tif(running === null) {\n\t\t\t\trunning = setTimer(flush, 0);\n\t\t\t}\n\t\t}\n\n\t\tfunction flush() {\n\t\t\trunning = null;\n\t\t\twhile(tasks.length > 0) {\n\t\t\t\ttasks.shift()(tasks.shift());\n\t\t\t}\n\t\t}\n\n\t\treturn Promise;\n\t};\n\n\tfunction throwit(e) {\n\t\tthrow e;\n\t}\n\n\tfunction noop() {}\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));\n\n},{\"../env\":65,\"../format\":66}],64:[function(require,module,exports){\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\treturn function addWith(Promise) {\n\t\t/**\n\t\t * Returns a promise whose handlers will be called with `this` set to\n\t\t * the supplied receiver.  Subsequent promises derived from the\n\t\t * returned promise will also have their handlers called with receiver\n\t\t * as `this`. Calling `with` with undefined or no arguments will return\n\t\t * a promise whose handlers will again be called in the usual Promises/A+\n\t\t * way (no `this`) thus safely undoing any previous `with` in the\n\t\t * promise chain.\n\t\t *\n\t\t * WARNING: Promises returned from `with`/`withThis` are NOT Promises/A+\n\t\t * compliant, specifically violating 2.2.5 (http://promisesaplus.com/#point-41)\n\t\t *\n\t\t * @param {object} receiver `this` value for all handlers attached to\n\t\t *  the returned promise.\n\t\t * @returns {Promise}\n\t\t */\n\t\tPromise.prototype['with'] = Promise.prototype.withThis = function(receiver) {\n\t\t\tvar p = this._beget();\n\t\t\tvar child = p._handler;\n\t\t\tchild.receiver = receiver;\n\t\t\tthis._handler.chain(child, receiver);\n\t\t\treturn p;\n\t\t};\n\n\t\treturn Promise;\n\t};\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n\n\n},{}],65:[function(require,module,exports){\n(function (process){\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n/*global process,document,setTimeout,clearTimeout,MutationObserver,WebKitMutationObserver*/\n(function(define) { 'use strict';\ndefine(function(require) {\n\t/*jshint maxcomplexity:6*/\n\n\t// Sniff \"best\" async scheduling option\n\t// Prefer process.nextTick or MutationObserver, then check for\n\t// setTimeout, and finally vertx, since its the only env that doesn't\n\t// have setTimeout\n\n\tvar MutationObs;\n\tvar capturedSetTimeout = typeof setTimeout !== 'undefined' && setTimeout;\n\n\t// Default env\n\tvar setTimer = function(f, ms) { return setTimeout(f, ms); };\n\tvar clearTimer = function(t) { return clearTimeout(t); };\n\tvar asap = function (f) { return capturedSetTimeout(f, 0); };\n\n\t// Detect specific env\n\tif (isNode()) { // Node\n\t\tasap = function (f) { return process.nextTick(f); };\n\n\t} else if (MutationObs = hasMutationObserver()) { // Modern browser\n\t\tasap = initMutationObserver(MutationObs);\n\n\t} else if (!capturedSetTimeout) { // vert.x\n\t\tvar vertxRequire = require;\n\t\tvar vertx = vertxRequire('vertx');\n\t\tsetTimer = function (f, ms) { return vertx.setTimer(ms, f); };\n\t\tclearTimer = vertx.cancelTimer;\n\t\tasap = vertx.runOnLoop || vertx.runOnContext;\n\t}\n\n\treturn {\n\t\tsetTimer: setTimer,\n\t\tclearTimer: clearTimer,\n\t\tasap: asap\n\t};\n\n\tfunction isNode () {\n\t\treturn typeof process !== 'undefined' &&\n\t\t\tObject.prototype.toString.call(process) === '[object process]';\n\t}\n\n\tfunction hasMutationObserver () {\n\t\treturn (typeof MutationObserver === 'function' && MutationObserver) ||\n\t\t\t(typeof WebKitMutationObserver === 'function' && WebKitMutationObserver);\n\t}\n\n\tfunction initMutationObserver(MutationObserver) {\n\t\tvar scheduled;\n\t\tvar node = document.createTextNode('');\n\t\tvar o = new MutationObserver(run);\n\t\to.observe(node, { characterData: true });\n\n\t\tfunction run() {\n\t\t\tvar f = scheduled;\n\t\t\tscheduled = void 0;\n\t\t\tf();\n\t\t}\n\n\t\tvar i = 0;\n\t\treturn function (f) {\n\t\t\tscheduled = f;\n\t\t\tnode.data = (i ^= 1);\n\t\t};\n\t}\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));\n\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy93aGVuL2xpYi9lbnYuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAbGljZW5zZSBNSVQgTGljZW5zZSAoYykgY29weXJpZ2h0IDIwMTAtMjAxNCBvcmlnaW5hbCBhdXRob3Igb3IgYXV0aG9ycyAqL1xuLyoqIEBhdXRob3IgQnJpYW4gQ2F2YWxpZXIgKi9cbi8qKiBAYXV0aG9yIEpvaG4gSGFubiAqL1xuXG4vKmdsb2JhbCBwcm9jZXNzLGRvY3VtZW50LHNldFRpbWVvdXQsY2xlYXJUaW1lb3V0LE11dGF0aW9uT2JzZXJ2ZXIsV2ViS2l0TXV0YXRpb25PYnNlcnZlciovXG4oZnVuY3Rpb24oZGVmaW5lKSB7ICd1c2Ugc3RyaWN0JztcbmRlZmluZShmdW5jdGlvbihyZXF1aXJlKSB7XG5cdC8qanNoaW50IG1heGNvbXBsZXhpdHk6NiovXG5cblx0Ly8gU25pZmYgXCJiZXN0XCIgYXN5bmMgc2NoZWR1bGluZyBvcHRpb25cblx0Ly8gUHJlZmVyIHByb2Nlc3MubmV4dFRpY2sgb3IgTXV0YXRpb25PYnNlcnZlciwgdGhlbiBjaGVjayBmb3Jcblx0Ly8gc2V0VGltZW91dCwgYW5kIGZpbmFsbHkgdmVydHgsIHNpbmNlIGl0cyB0aGUgb25seSBlbnYgdGhhdCBkb2Vzbid0XG5cdC8vIGhhdmUgc2V0VGltZW91dFxuXG5cdHZhciBNdXRhdGlvbk9icztcblx0dmFyIGNhcHR1cmVkU2V0VGltZW91dCA9IHR5cGVvZiBzZXRUaW1lb3V0ICE9PSAndW5kZWZpbmVkJyAmJiBzZXRUaW1lb3V0O1xuXG5cdC8vIERlZmF1bHQgZW52XG5cdHZhciBzZXRUaW1lciA9IGZ1bmN0aW9uKGYsIG1zKSB7IHJldHVybiBzZXRUaW1lb3V0KGYsIG1zKTsgfTtcblx0dmFyIGNsZWFyVGltZXIgPSBmdW5jdGlvbih0KSB7IHJldHVybiBjbGVhclRpbWVvdXQodCk7IH07XG5cdHZhciBhc2FwID0gZnVuY3Rpb24gKGYpIHsgcmV0dXJuIGNhcHR1cmVkU2V0VGltZW91dChmLCAwKTsgfTtcblxuXHQvLyBEZXRlY3Qgc3BlY2lmaWMgZW52XG5cdGlmIChpc05vZGUoKSkgeyAvLyBOb2RlXG5cdFx0YXNhcCA9IGZ1bmN0aW9uIChmKSB7IHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGYpOyB9O1xuXG5cdH0gZWxzZSBpZiAoTXV0YXRpb25PYnMgPSBoYXNNdXRhdGlvbk9ic2VydmVyKCkpIHsgLy8gTW9kZXJuIGJyb3dzZXJcblx0XHRhc2FwID0gaW5pdE11dGF0aW9uT2JzZXJ2ZXIoTXV0YXRpb25PYnMpO1xuXG5cdH0gZWxzZSBpZiAoIWNhcHR1cmVkU2V0VGltZW91dCkgeyAvLyB2ZXJ0Lnhcblx0XHR2YXIgdmVydHhSZXF1aXJlID0gcmVxdWlyZTtcblx0XHR2YXIgdmVydHggPSB2ZXJ0eFJlcXVpcmUoJ3ZlcnR4Jyk7XG5cdFx0c2V0VGltZXIgPSBmdW5jdGlvbiAoZiwgbXMpIHsgcmV0dXJuIHZlcnR4LnNldFRpbWVyKG1zLCBmKTsgfTtcblx0XHRjbGVhclRpbWVyID0gdmVydHguY2FuY2VsVGltZXI7XG5cdFx0YXNhcCA9IHZlcnR4LnJ1bk9uTG9vcCB8fCB2ZXJ0eC5ydW5PbkNvbnRleHQ7XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdHNldFRpbWVyOiBzZXRUaW1lcixcblx0XHRjbGVhclRpbWVyOiBjbGVhclRpbWVyLFxuXHRcdGFzYXA6IGFzYXBcblx0fTtcblxuXHRmdW5jdGlvbiBpc05vZGUgKCkge1xuXHRcdHJldHVybiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiZcblx0XHRcdE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nO1xuXHR9XG5cblx0ZnVuY3Rpb24gaGFzTXV0YXRpb25PYnNlcnZlciAoKSB7XG5cdFx0cmV0dXJuICh0eXBlb2YgTXV0YXRpb25PYnNlcnZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBNdXRhdGlvbk9ic2VydmVyKSB8fFxuXHRcdFx0KHR5cGVvZiBXZWJLaXRNdXRhdGlvbk9ic2VydmVyID09PSAnZnVuY3Rpb24nICYmIFdlYktpdE11dGF0aW9uT2JzZXJ2ZXIpO1xuXHR9XG5cblx0ZnVuY3Rpb24gaW5pdE11dGF0aW9uT2JzZXJ2ZXIoTXV0YXRpb25PYnNlcnZlcikge1xuXHRcdHZhciBzY2hlZHVsZWQ7XG5cdFx0dmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG5cdFx0dmFyIG8gPSBuZXcgTXV0YXRpb25PYnNlcnZlcihydW4pO1xuXHRcdG8ub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7XG5cblx0XHRmdW5jdGlvbiBydW4oKSB7XG5cdFx0XHR2YXIgZiA9IHNjaGVkdWxlZDtcblx0XHRcdHNjaGVkdWxlZCA9IHZvaWQgMDtcblx0XHRcdGYoKTtcblx0XHR9XG5cblx0XHR2YXIgaSA9IDA7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uIChmKSB7XG5cdFx0XHRzY2hlZHVsZWQgPSBmO1xuXHRcdFx0bm9kZS5kYXRhID0gKGkgXj0gMSk7XG5cdFx0fTtcblx0fVxufSk7XG59KHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZSA6IGZ1bmN0aW9uKGZhY3RvcnkpIHsgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUpOyB9KSk7XG4iXX0=\n},{\"_process\":29}],66:[function(require,module,exports){\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\treturn {\n\t\tformatError: formatError,\n\t\tformatObject: formatObject,\n\t\ttryStringify: tryStringify\n\t};\n\n\t/**\n\t * Format an error into a string.  If e is an Error and has a stack property,\n\t * it's returned.  Otherwise, e is formatted using formatObject, with a\n\t * warning added about e not being a proper Error.\n\t * @param {*} e\n\t * @returns {String} formatted string, suitable for output to developers\n\t */\n\tfunction formatError(e) {\n\t\tvar s = typeof e === 'object' && e !== null && (e.stack || e.message) ? e.stack || e.message : formatObject(e);\n\t\treturn e instanceof Error ? s : s + ' (WARNING: non-Error used)';\n\t}\n\n\t/**\n\t * Format an object, detecting \"plain\" objects and running them through\n\t * JSON.stringify if possible.\n\t * @param {Object} o\n\t * @returns {string}\n\t */\n\tfunction formatObject(o) {\n\t\tvar s = String(o);\n\t\tif(s === '[object Object]' && typeof JSON !== 'undefined') {\n\t\t\ts = tryStringify(o, s);\n\t\t}\n\t\treturn s;\n\t}\n\n\t/**\n\t * Try to return the result of JSON.stringify(x).  If that fails, return\n\t * defaultValue\n\t * @param {*} x\n\t * @param {*} defaultValue\n\t * @returns {String|*} JSON.stringify(x) or defaultValue\n\t */\n\tfunction tryStringify(x, defaultValue) {\n\t\ttry {\n\t\t\treturn JSON.stringify(x);\n\t\t} catch(e) {\n\t\t\treturn defaultValue;\n\t\t}\n\t}\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n\n},{}],67:[function(require,module,exports){\n(function (process){\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\treturn function makePromise(environment) {\n\n\t\tvar tasks = environment.scheduler;\n\t\tvar emitRejection = initEmitRejection();\n\n\t\tvar objectCreate = Object.create ||\n\t\t\tfunction(proto) {\n\t\t\t\tfunction Child() {}\n\t\t\t\tChild.prototype = proto;\n\t\t\t\treturn new Child();\n\t\t\t};\n\n\t\t/**\n\t\t * Create a promise whose fate is determined by resolver\n\t\t * @constructor\n\t\t * @returns {Promise} promise\n\t\t * @name Promise\n\t\t */\n\t\tfunction Promise(resolver, handler) {\n\t\t\tthis._handler = resolver === Handler ? handler : init(resolver);\n\t\t}\n\n\t\t/**\n\t\t * Run the supplied resolver\n\t\t * @param resolver\n\t\t * @returns {Pending}\n\t\t */\n\t\tfunction init(resolver) {\n\t\t\tvar handler = new Pending();\n\n\t\t\ttry {\n\t\t\t\tresolver(promiseResolve, promiseReject, promiseNotify);\n\t\t\t} catch (e) {\n\t\t\t\tpromiseReject(e);\n\t\t\t}\n\n\t\t\treturn handler;\n\n\t\t\t/**\n\t\t\t * Transition from pre-resolution state to post-resolution state, notifying\n\t\t\t * all listeners of the ultimate fulfillment or rejection\n\t\t\t * @param {*} x resolution value\n\t\t\t */\n\t\t\tfunction promiseResolve (x) {\n\t\t\t\thandler.resolve(x);\n\t\t\t}\n\t\t\t/**\n\t\t\t * Reject this promise with reason, which will be used verbatim\n\t\t\t * @param {Error|*} reason rejection reason, strongly suggested\n\t\t\t *   to be an Error type\n\t\t\t */\n\t\t\tfunction promiseReject (reason) {\n\t\t\t\thandler.reject(reason);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @deprecated\n\t\t\t * Issue a progress event, notifying all progress listeners\n\t\t\t * @param {*} x progress event payload to pass to all listeners\n\t\t\t */\n\t\t\tfunction promiseNotify (x) {\n\t\t\t\thandler.notify(x);\n\t\t\t}\n\t\t}\n\n\t\t// Creation\n\n\t\tPromise.resolve = resolve;\n\t\tPromise.reject = reject;\n\t\tPromise.never = never;\n\n\t\tPromise._defer = defer;\n\t\tPromise._handler = getHandler;\n\n\t\t/**\n\t\t * Returns a trusted promise. If x is already a trusted promise, it is\n\t\t * returned, otherwise returns a new trusted Promise which follows x.\n\t\t * @param  {*} x\n\t\t * @return {Promise} promise\n\t\t */\n\t\tfunction resolve(x) {\n\t\t\treturn isPromise(x) ? x\n\t\t\t\t: new Promise(Handler, new Async(getHandler(x)));\n\t\t}\n\n\t\t/**\n\t\t * Return a reject promise with x as its reason (x is used verbatim)\n\t\t * @param {*} x\n\t\t * @returns {Promise} rejected promise\n\t\t */\n\t\tfunction reject(x) {\n\t\t\treturn new Promise(Handler, new Async(new Rejected(x)));\n\t\t}\n\n\t\t/**\n\t\t * Return a promise that remains pending forever\n\t\t * @returns {Promise} forever-pending promise.\n\t\t */\n\t\tfunction never() {\n\t\t\treturn foreverPendingPromise; // Should be frozen\n\t\t}\n\n\t\t/**\n\t\t * Creates an internal {promise, resolver} pair\n\t\t * @private\n\t\t * @returns {Promise}\n\t\t */\n\t\tfunction defer() {\n\t\t\treturn new Promise(Handler, new Pending());\n\t\t}\n\n\t\t// Transformation and flow control\n\n\t\t/**\n\t\t * Transform this promise's fulfillment value, returning a new Promise\n\t\t * for the transformed result.  If the promise cannot be fulfilled, onRejected\n\t\t * is called with the reason.  onProgress *may* be called with updates toward\n\t\t * this promise's fulfillment.\n\t\t * @param {function=} onFulfilled fulfillment handler\n\t\t * @param {function=} onRejected rejection handler\n\t\t * @param {function=} onProgress @deprecated progress handler\n\t\t * @return {Promise} new promise\n\t\t */\n\t\tPromise.prototype.then = function(onFulfilled, onRejected, onProgress) {\n\t\t\tvar parent = this._handler;\n\t\t\tvar state = parent.join().state();\n\n\t\t\tif ((typeof onFulfilled !== 'function' && state > 0) ||\n\t\t\t\t(typeof onRejected !== 'function' && state < 0)) {\n\t\t\t\t// Short circuit: value will not change, simply share handler\n\t\t\t\treturn new this.constructor(Handler, parent);\n\t\t\t}\n\n\t\t\tvar p = this._beget();\n\t\t\tvar child = p._handler;\n\n\t\t\tparent.chain(child, parent.receiver, onFulfilled, onRejected, onProgress);\n\n\t\t\treturn p;\n\t\t};\n\n\t\t/**\n\t\t * If this promise cannot be fulfilled due to an error, call onRejected to\n\t\t * handle the error. Shortcut for .then(undefined, onRejected)\n\t\t * @param {function?} onRejected\n\t\t * @return {Promise}\n\t\t */\n\t\tPromise.prototype['catch'] = function(onRejected) {\n\t\t\treturn this.then(void 0, onRejected);\n\t\t};\n\n\t\t/**\n\t\t * Creates a new, pending promise of the same type as this promise\n\t\t * @private\n\t\t * @returns {Promise}\n\t\t */\n\t\tPromise.prototype._beget = function() {\n\t\t\treturn begetFrom(this._handler, this.constructor);\n\t\t};\n\n\t\tfunction begetFrom(parent, Promise) {\n\t\t\tvar child = new Pending(parent.receiver, parent.join().context);\n\t\t\treturn new Promise(Handler, child);\n\t\t}\n\n\t\t// Array combinators\n\n\t\tPromise.all = all;\n\t\tPromise.race = race;\n\t\tPromise._traverse = traverse;\n\n\t\t/**\n\t\t * Return a promise that will fulfill when all promises in the\n\t\t * input array have fulfilled, or will reject when one of the\n\t\t * promises rejects.\n\t\t * @param {array} promises array of promises\n\t\t * @returns {Promise} promise for array of fulfillment values\n\t\t */\n\t\tfunction all(promises) {\n\t\t\treturn traverseWith(snd, null, promises);\n\t\t}\n\n\t\t/**\n\t\t * Array<Promise<X>> -> Promise<Array<f(X)>>\n\t\t * @private\n\t\t * @param {function} f function to apply to each promise's value\n\t\t * @param {Array} promises array of promises\n\t\t * @returns {Promise} promise for transformed values\n\t\t */\n\t\tfunction traverse(f, promises) {\n\t\t\treturn traverseWith(tryCatch2, f, promises);\n\t\t}\n\n\t\tfunction traverseWith(tryMap, f, promises) {\n\t\t\tvar handler = typeof f === 'function' ? mapAt : settleAt;\n\n\t\t\tvar resolver = new Pending();\n\t\t\tvar pending = promises.length >>> 0;\n\t\t\tvar results = new Array(pending);\n\n\t\t\tfor (var i = 0, x; i < promises.length && !resolver.resolved; ++i) {\n\t\t\t\tx = promises[i];\n\n\t\t\t\tif (x === void 0 && !(i in promises)) {\n\t\t\t\t\t--pending;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\ttraverseAt(promises, handler, i, x, resolver);\n\t\t\t}\n\n\t\t\tif(pending === 0) {\n\t\t\t\tresolver.become(new Fulfilled(results));\n\t\t\t}\n\n\t\t\treturn new Promise(Handler, resolver);\n\n\t\t\tfunction mapAt(i, x, resolver) {\n\t\t\t\tif(!resolver.resolved) {\n\t\t\t\t\ttraverseAt(promises, settleAt, i, tryMap(f, x, i), resolver);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction settleAt(i, x, resolver) {\n\t\t\t\tresults[i] = x;\n\t\t\t\tif(--pending === 0) {\n\t\t\t\t\tresolver.become(new Fulfilled(results));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction traverseAt(promises, handler, i, x, resolver) {\n\t\t\tif (maybeThenable(x)) {\n\t\t\t\tvar h = getHandlerMaybeThenable(x);\n\t\t\t\tvar s = h.state();\n\n\t\t\t\tif (s === 0) {\n\t\t\t\t\th.fold(handler, i, void 0, resolver);\n\t\t\t\t} else if (s > 0) {\n\t\t\t\t\thandler(i, h.value, resolver);\n\t\t\t\t} else {\n\t\t\t\t\tresolver.become(h);\n\t\t\t\t\tvisitRemaining(promises, i+1, h);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\thandler(i, x, resolver);\n\t\t\t}\n\t\t}\n\n\t\tPromise._visitRemaining = visitRemaining;\n\t\tfunction visitRemaining(promises, start, handler) {\n\t\t\tfor(var i=start; i<promises.length; ++i) {\n\t\t\t\tmarkAsHandled(getHandler(promises[i]), handler);\n\t\t\t}\n\t\t}\n\n\t\tfunction markAsHandled(h, handler) {\n\t\t\tif(h === handler) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar s = h.state();\n\t\t\tif(s === 0) {\n\t\t\t\th.visit(h, void 0, h._unreport);\n\t\t\t} else if(s < 0) {\n\t\t\t\th._unreport();\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Fulfill-reject competitive race. Return a promise that will settle\n\t\t * to the same state as the earliest input promise to settle.\n\t\t *\n\t\t * WARNING: The ES6 Promise spec requires that race()ing an empty array\n\t\t * must return a promise that is pending forever.  This implementation\n\t\t * returns a singleton forever-pending promise, the same singleton that is\n\t\t * returned by Promise.never(), thus can be checked with ===\n\t\t *\n\t\t * @param {array} promises array of promises to race\n\t\t * @returns {Promise} if input is non-empty, a promise that will settle\n\t\t * to the same outcome as the earliest input promise to settle. if empty\n\t\t * is empty, returns a promise that will never settle.\n\t\t */\n\t\tfunction race(promises) {\n\t\t\tif(typeof promises !== 'object' || promises === null) {\n\t\t\t\treturn reject(new TypeError('non-iterable passed to race()'));\n\t\t\t}\n\n\t\t\t// Sigh, race([]) is untestable unless we return *something*\n\t\t\t// that is recognizable without calling .then() on it.\n\t\t\treturn promises.length === 0 ? never()\n\t\t\t\t : promises.length === 1 ? resolve(promises[0])\n\t\t\t\t : runRace(promises);\n\t\t}\n\n\t\tfunction runRace(promises) {\n\t\t\tvar resolver = new Pending();\n\t\t\tvar i, x, h;\n\t\t\tfor(i=0; i<promises.length; ++i) {\n\t\t\t\tx = promises[i];\n\t\t\t\tif (x === void 0 && !(i in promises)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\th = getHandler(x);\n\t\t\t\tif(h.state() !== 0) {\n\t\t\t\t\tresolver.become(h);\n\t\t\t\t\tvisitRemaining(promises, i+1, h);\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\th.visit(resolver, resolver.resolve, resolver.reject);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new Promise(Handler, resolver);\n\t\t}\n\n\t\t// Promise internals\n\t\t// Below this, everything is @private\n\n\t\t/**\n\t\t * Get an appropriate handler for x, without checking for cycles\n\t\t * @param {*} x\n\t\t * @returns {object} handler\n\t\t */\n\t\tfunction getHandler(x) {\n\t\t\tif(isPromise(x)) {\n\t\t\t\treturn x._handler.join();\n\t\t\t}\n\t\t\treturn maybeThenable(x) ? getHandlerUntrusted(x) : new Fulfilled(x);\n\t\t}\n\n\t\t/**\n\t\t * Get a handler for thenable x.\n\t\t * NOTE: You must only call this if maybeThenable(x) == true\n\t\t * @param {object|function|Promise} x\n\t\t * @returns {object} handler\n\t\t */\n\t\tfunction getHandlerMaybeThenable(x) {\n\t\t\treturn isPromise(x) ? x._handler.join() : getHandlerUntrusted(x);\n\t\t}\n\n\t\t/**\n\t\t * Get a handler for potentially untrusted thenable x\n\t\t * @param {*} x\n\t\t * @returns {object} handler\n\t\t */\n\t\tfunction getHandlerUntrusted(x) {\n\t\t\ttry {\n\t\t\t\tvar untrustedThen = x.then;\n\t\t\t\treturn typeof untrustedThen === 'function'\n\t\t\t\t\t? new Thenable(untrustedThen, x)\n\t\t\t\t\t: new Fulfilled(x);\n\t\t\t} catch(e) {\n\t\t\t\treturn new Rejected(e);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Handler for a promise that is pending forever\n\t\t * @constructor\n\t\t */\n\t\tfunction Handler() {}\n\n\t\tHandler.prototype.when\n\t\t\t= Handler.prototype.become\n\t\t\t= Handler.prototype.notify // deprecated\n\t\t\t= Handler.prototype.fail\n\t\t\t= Handler.prototype._unreport\n\t\t\t= Handler.prototype._report\n\t\t\t= noop;\n\n\t\tHandler.prototype._state = 0;\n\n\t\tHandler.prototype.state = function() {\n\t\t\treturn this._state;\n\t\t};\n\n\t\t/**\n\t\t * Recursively collapse handler chain to find the handler\n\t\t * nearest to the fully resolved value.\n\t\t * @returns {object} handler nearest the fully resolved value\n\t\t */\n\t\tHandler.prototype.join = function() {\n\t\t\tvar h = this;\n\t\t\twhile(h.handler !== void 0) {\n\t\t\t\th = h.handler;\n\t\t\t}\n\t\t\treturn h;\n\t\t};\n\n\t\tHandler.prototype.chain = function(to, receiver, fulfilled, rejected, progress) {\n\t\t\tthis.when({\n\t\t\t\tresolver: to,\n\t\t\t\treceiver: receiver,\n\t\t\t\tfulfilled: fulfilled,\n\t\t\t\trejected: rejected,\n\t\t\t\tprogress: progress\n\t\t\t});\n\t\t};\n\n\t\tHandler.prototype.visit = function(receiver, fulfilled, rejected, progress) {\n\t\t\tthis.chain(failIfRejected, receiver, fulfilled, rejected, progress);\n\t\t};\n\n\t\tHandler.prototype.fold = function(f, z, c, to) {\n\t\t\tthis.when(new Fold(f, z, c, to));\n\t\t};\n\n\t\t/**\n\t\t * Handler that invokes fail() on any handler it becomes\n\t\t * @constructor\n\t\t */\n\t\tfunction FailIfRejected() {}\n\n\t\tinherit(Handler, FailIfRejected);\n\n\t\tFailIfRejected.prototype.become = function(h) {\n\t\t\th.fail();\n\t\t};\n\n\t\tvar failIfRejected = new FailIfRejected();\n\n\t\t/**\n\t\t * Handler that manages a queue of consumers waiting on a pending promise\n\t\t * @constructor\n\t\t */\n\t\tfunction Pending(receiver, inheritedContext) {\n\t\t\tPromise.createContext(this, inheritedContext);\n\n\t\t\tthis.consumers = void 0;\n\t\t\tthis.receiver = receiver;\n\t\t\tthis.handler = void 0;\n\t\t\tthis.resolved = false;\n\t\t}\n\n\t\tinherit(Handler, Pending);\n\n\t\tPending.prototype._state = 0;\n\n\t\tPending.prototype.resolve = function(x) {\n\t\t\tthis.become(getHandler(x));\n\t\t};\n\n\t\tPending.prototype.reject = function(x) {\n\t\t\tif(this.resolved) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.become(new Rejected(x));\n\t\t};\n\n\t\tPending.prototype.join = function() {\n\t\t\tif (!this.resolved) {\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar h = this;\n\n\t\t\twhile (h.handler !== void 0) {\n\t\t\t\th = h.handler;\n\t\t\t\tif (h === this) {\n\t\t\t\t\treturn this.handler = cycle();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn h;\n\t\t};\n\n\t\tPending.prototype.run = function() {\n\t\t\tvar q = this.consumers;\n\t\t\tvar handler = this.handler;\n\t\t\tthis.handler = this.handler.join();\n\t\t\tthis.consumers = void 0;\n\n\t\t\tfor (var i = 0; i < q.length; ++i) {\n\t\t\t\thandler.when(q[i]);\n\t\t\t}\n\t\t};\n\n\t\tPending.prototype.become = function(handler) {\n\t\t\tif(this.resolved) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.resolved = true;\n\t\t\tthis.handler = handler;\n\t\t\tif(this.consumers !== void 0) {\n\t\t\t\ttasks.enqueue(this);\n\t\t\t}\n\n\t\t\tif(this.context !== void 0) {\n\t\t\t\thandler._report(this.context);\n\t\t\t}\n\t\t};\n\n\t\tPending.prototype.when = function(continuation) {\n\t\t\tif(this.resolved) {\n\t\t\t\ttasks.enqueue(new ContinuationTask(continuation, this.handler));\n\t\t\t} else {\n\t\t\t\tif(this.consumers === void 0) {\n\t\t\t\t\tthis.consumers = [continuation];\n\t\t\t\t} else {\n\t\t\t\t\tthis.consumers.push(continuation);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * @deprecated\n\t\t */\n\t\tPending.prototype.notify = function(x) {\n\t\t\tif(!this.resolved) {\n\t\t\t\ttasks.enqueue(new ProgressTask(x, this));\n\t\t\t}\n\t\t};\n\n\t\tPending.prototype.fail = function(context) {\n\t\t\tvar c = typeof context === 'undefined' ? this.context : context;\n\t\t\tthis.resolved && this.handler.join().fail(c);\n\t\t};\n\n\t\tPending.prototype._report = function(context) {\n\t\t\tthis.resolved && this.handler.join()._report(context);\n\t\t};\n\n\t\tPending.prototype._unreport = function() {\n\t\t\tthis.resolved && this.handler.join()._unreport();\n\t\t};\n\n\t\t/**\n\t\t * Wrap another handler and force it into a future stack\n\t\t * @param {object} handler\n\t\t * @constructor\n\t\t */\n\t\tfunction Async(handler) {\n\t\t\tthis.handler = handler;\n\t\t}\n\n\t\tinherit(Handler, Async);\n\n\t\tAsync.prototype.when = function(continuation) {\n\t\t\ttasks.enqueue(new ContinuationTask(continuation, this));\n\t\t};\n\n\t\tAsync.prototype._report = function(context) {\n\t\t\tthis.join()._report(context);\n\t\t};\n\n\t\tAsync.prototype._unreport = function() {\n\t\t\tthis.join()._unreport();\n\t\t};\n\n\t\t/**\n\t\t * Handler that wraps an untrusted thenable and assimilates it in a future stack\n\t\t * @param {function} then\n\t\t * @param {{then: function}} thenable\n\t\t * @constructor\n\t\t */\n\t\tfunction Thenable(then, thenable) {\n\t\t\tPending.call(this);\n\t\t\ttasks.enqueue(new AssimilateTask(then, thenable, this));\n\t\t}\n\n\t\tinherit(Pending, Thenable);\n\n\t\t/**\n\t\t * Handler for a fulfilled promise\n\t\t * @param {*} x fulfillment value\n\t\t * @constructor\n\t\t */\n\t\tfunction Fulfilled(x) {\n\t\t\tPromise.createContext(this);\n\t\t\tthis.value = x;\n\t\t}\n\n\t\tinherit(Handler, Fulfilled);\n\n\t\tFulfilled.prototype._state = 1;\n\n\t\tFulfilled.prototype.fold = function(f, z, c, to) {\n\t\t\trunContinuation3(f, z, this, c, to);\n\t\t};\n\n\t\tFulfilled.prototype.when = function(cont) {\n\t\t\trunContinuation1(cont.fulfilled, this, cont.receiver, cont.resolver);\n\t\t};\n\n\t\tvar errorId = 0;\n\n\t\t/**\n\t\t * Handler for a rejected promise\n\t\t * @param {*} x rejection reason\n\t\t * @constructor\n\t\t */\n\t\tfunction Rejected(x) {\n\t\t\tPromise.createContext(this);\n\n\t\t\tthis.id = ++errorId;\n\t\t\tthis.value = x;\n\t\t\tthis.handled = false;\n\t\t\tthis.reported = false;\n\n\t\t\tthis._report();\n\t\t}\n\n\t\tinherit(Handler, Rejected);\n\n\t\tRejected.prototype._state = -1;\n\n\t\tRejected.prototype.fold = function(f, z, c, to) {\n\t\t\tto.become(this);\n\t\t};\n\n\t\tRejected.prototype.when = function(cont) {\n\t\t\tif(typeof cont.rejected === 'function') {\n\t\t\t\tthis._unreport();\n\t\t\t}\n\t\t\trunContinuation1(cont.rejected, this, cont.receiver, cont.resolver);\n\t\t};\n\n\t\tRejected.prototype._report = function(context) {\n\t\t\ttasks.afterQueue(new ReportTask(this, context));\n\t\t};\n\n\t\tRejected.prototype._unreport = function() {\n\t\t\tif(this.handled) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.handled = true;\n\t\t\ttasks.afterQueue(new UnreportTask(this));\n\t\t};\n\n\t\tRejected.prototype.fail = function(context) {\n\t\t\tthis.reported = true;\n\t\t\temitRejection('unhandledRejection', this);\n\t\t\tPromise.onFatalRejection(this, context === void 0 ? this.context : context);\n\t\t};\n\n\t\tfunction ReportTask(rejection, context) {\n\t\t\tthis.rejection = rejection;\n\t\t\tthis.context = context;\n\t\t}\n\n\t\tReportTask.prototype.run = function() {\n\t\t\tif(!this.rejection.handled && !this.rejection.reported) {\n\t\t\t\tthis.rejection.reported = true;\n\t\t\t\temitRejection('unhandledRejection', this.rejection) ||\n\t\t\t\t\tPromise.onPotentiallyUnhandledRejection(this.rejection, this.context);\n\t\t\t}\n\t\t};\n\n\t\tfunction UnreportTask(rejection) {\n\t\t\tthis.rejection = rejection;\n\t\t}\n\n\t\tUnreportTask.prototype.run = function() {\n\t\t\tif(this.rejection.reported) {\n\t\t\t\temitRejection('rejectionHandled', this.rejection) ||\n\t\t\t\t\tPromise.onPotentiallyUnhandledRejectionHandled(this.rejection);\n\t\t\t}\n\t\t};\n\n\t\t// Unhandled rejection hooks\n\t\t// By default, everything is a noop\n\n\t\tPromise.createContext\n\t\t\t= Promise.enterContext\n\t\t\t= Promise.exitContext\n\t\t\t= Promise.onPotentiallyUnhandledRejection\n\t\t\t= Promise.onPotentiallyUnhandledRejectionHandled\n\t\t\t= Promise.onFatalRejection\n\t\t\t= noop;\n\n\t\t// Errors and singletons\n\n\t\tvar foreverPendingHandler = new Handler();\n\t\tvar foreverPendingPromise = new Promise(Handler, foreverPendingHandler);\n\n\t\tfunction cycle() {\n\t\t\treturn new Rejected(new TypeError('Promise cycle'));\n\t\t}\n\n\t\t// Task runners\n\n\t\t/**\n\t\t * Run a single consumer\n\t\t * @constructor\n\t\t */\n\t\tfunction ContinuationTask(continuation, handler) {\n\t\t\tthis.continuation = continuation;\n\t\t\tthis.handler = handler;\n\t\t}\n\n\t\tContinuationTask.prototype.run = function() {\n\t\t\tthis.handler.join().when(this.continuation);\n\t\t};\n\n\t\t/**\n\t\t * Run a queue of progress handlers\n\t\t * @constructor\n\t\t */\n\t\tfunction ProgressTask(value, handler) {\n\t\t\tthis.handler = handler;\n\t\t\tthis.value = value;\n\t\t}\n\n\t\tProgressTask.prototype.run = function() {\n\t\t\tvar q = this.handler.consumers;\n\t\t\tif(q === void 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (var c, i = 0; i < q.length; ++i) {\n\t\t\t\tc = q[i];\n\t\t\t\trunNotify(c.progress, this.value, this.handler, c.receiver, c.resolver);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Assimilate a thenable, sending it's value to resolver\n\t\t * @param {function} then\n\t\t * @param {object|function} thenable\n\t\t * @param {object} resolver\n\t\t * @constructor\n\t\t */\n\t\tfunction AssimilateTask(then, thenable, resolver) {\n\t\t\tthis._then = then;\n\t\t\tthis.thenable = thenable;\n\t\t\tthis.resolver = resolver;\n\t\t}\n\n\t\tAssimilateTask.prototype.run = function() {\n\t\t\tvar h = this.resolver;\n\t\t\ttryAssimilate(this._then, this.thenable, _resolve, _reject, _notify);\n\n\t\t\tfunction _resolve(x) { h.resolve(x); }\n\t\t\tfunction _reject(x)  { h.reject(x); }\n\t\t\tfunction _notify(x)  { h.notify(x); }\n\t\t};\n\n\t\tfunction tryAssimilate(then, thenable, resolve, reject, notify) {\n\t\t\ttry {\n\t\t\t\tthen.call(thenable, resolve, reject, notify);\n\t\t\t} catch (e) {\n\t\t\t\treject(e);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Fold a handler value with z\n\t\t * @constructor\n\t\t */\n\t\tfunction Fold(f, z, c, to) {\n\t\t\tthis.f = f; this.z = z; this.c = c; this.to = to;\n\t\t\tthis.resolver = failIfRejected;\n\t\t\tthis.receiver = this;\n\t\t}\n\n\t\tFold.prototype.fulfilled = function(x) {\n\t\t\tthis.f.call(this.c, this.z, x, this.to);\n\t\t};\n\n\t\tFold.prototype.rejected = function(x) {\n\t\t\tthis.to.reject(x);\n\t\t};\n\n\t\tFold.prototype.progress = function(x) {\n\t\t\tthis.to.notify(x);\n\t\t};\n\n\t\t// Other helpers\n\n\t\t/**\n\t\t * @param {*} x\n\t\t * @returns {boolean} true iff x is a trusted Promise\n\t\t */\n\t\tfunction isPromise(x) {\n\t\t\treturn x instanceof Promise;\n\t\t}\n\n\t\t/**\n\t\t * Test just enough to rule out primitives, in order to take faster\n\t\t * paths in some code\n\t\t * @param {*} x\n\t\t * @returns {boolean} false iff x is guaranteed *not* to be a thenable\n\t\t */\n\t\tfunction maybeThenable(x) {\n\t\t\treturn (typeof x === 'object' || typeof x === 'function') && x !== null;\n\t\t}\n\n\t\tfunction runContinuation1(f, h, receiver, next) {\n\t\t\tif(typeof f !== 'function') {\n\t\t\t\treturn next.become(h);\n\t\t\t}\n\n\t\t\tPromise.enterContext(h);\n\t\t\ttryCatchReject(f, h.value, receiver, next);\n\t\t\tPromise.exitContext();\n\t\t}\n\n\t\tfunction runContinuation3(f, x, h, receiver, next) {\n\t\t\tif(typeof f !== 'function') {\n\t\t\t\treturn next.become(h);\n\t\t\t}\n\n\t\t\tPromise.enterContext(h);\n\t\t\ttryCatchReject3(f, x, h.value, receiver, next);\n\t\t\tPromise.exitContext();\n\t\t}\n\n\t\t/**\n\t\t * @deprecated\n\t\t */\n\t\tfunction runNotify(f, x, h, receiver, next) {\n\t\t\tif(typeof f !== 'function') {\n\t\t\t\treturn next.notify(x);\n\t\t\t}\n\n\t\t\tPromise.enterContext(h);\n\t\t\ttryCatchReturn(f, x, receiver, next);\n\t\t\tPromise.exitContext();\n\t\t}\n\n\t\tfunction tryCatch2(f, a, b) {\n\t\t\ttry {\n\t\t\t\treturn f(a, b);\n\t\t\t} catch(e) {\n\t\t\t\treturn reject(e);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Return f.call(thisArg, x), or if it throws return a rejected promise for\n\t\t * the thrown exception\n\t\t */\n\t\tfunction tryCatchReject(f, x, thisArg, next) {\n\t\t\ttry {\n\t\t\t\tnext.become(getHandler(f.call(thisArg, x)));\n\t\t\t} catch(e) {\n\t\t\t\tnext.become(new Rejected(e));\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Same as above, but includes the extra argument parameter.\n\t\t */\n\t\tfunction tryCatchReject3(f, x, y, thisArg, next) {\n\t\t\ttry {\n\t\t\t\tf.call(thisArg, x, y, next);\n\t\t\t} catch(e) {\n\t\t\t\tnext.become(new Rejected(e));\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @deprecated\n\t\t * Return f.call(thisArg, x), or if it throws, *return* the exception\n\t\t */\n\t\tfunction tryCatchReturn(f, x, thisArg, next) {\n\t\t\ttry {\n\t\t\t\tnext.notify(f.call(thisArg, x));\n\t\t\t} catch(e) {\n\t\t\t\tnext.notify(e);\n\t\t\t}\n\t\t}\n\n\t\tfunction inherit(Parent, Child) {\n\t\t\tChild.prototype = objectCreate(Parent.prototype);\n\t\t\tChild.prototype.constructor = Child;\n\t\t}\n\n\t\tfunction snd(x, y) {\n\t\t\treturn y;\n\t\t}\n\n\t\tfunction noop() {}\n\n\t\tfunction initEmitRejection() {\n\t\t\t/*global process, self, CustomEvent*/\n\t\t\tif(typeof process !== 'undefined' && process !== null\n\t\t\t\t&& typeof process.emit === 'function') {\n\t\t\t\t// Returning falsy here means to call the default\n\t\t\t\t// onPotentiallyUnhandledRejection API.  This is safe even in\n\t\t\t\t// browserify since process.emit always returns falsy in browserify:\n\t\t\t\t// https://github.com/defunctzombie/node-process/blob/master/browser.js#L40-L46\n\t\t\t\treturn function(type, rejection) {\n\t\t\t\t\treturn type === 'unhandledRejection'\n\t\t\t\t\t\t? process.emit(type, rejection.value, rejection)\n\t\t\t\t\t\t: process.emit(type, rejection);\n\t\t\t\t};\n\t\t\t} else if(typeof self !== 'undefined' && typeof CustomEvent === 'function') {\n\t\t\t\treturn (function(noop, self, CustomEvent) {\n\t\t\t\t\tvar hasCustomEvent = false;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tvar ev = new CustomEvent('unhandledRejection');\n\t\t\t\t\t\thasCustomEvent = ev instanceof CustomEvent;\n\t\t\t\t\t} catch (e) {}\n\n\t\t\t\t\treturn !hasCustomEvent ? noop : function(type, rejection) {\n\t\t\t\t\t\tvar ev = new CustomEvent(type, {\n\t\t\t\t\t\t\tdetail: {\n\t\t\t\t\t\t\t\treason: rejection.value,\n\t\t\t\t\t\t\t\tkey: rejection\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tbubbles: false,\n\t\t\t\t\t\t\tcancelable: true\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn !self.dispatchEvent(ev);\n\t\t\t\t\t};\n\t\t\t\t}(noop, self, CustomEvent));\n\t\t\t}\n\n\t\t\treturn noop;\n\t\t}\n\n\t\treturn Promise;\n\t};\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n\n}).call(this,require('_process'))\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n},{\"_process\":29}],68:[function(require,module,exports){\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine(function() {\n\n\treturn {\n\t\tpending: toPendingState,\n\t\tfulfilled: toFulfilledState,\n\t\trejected: toRejectedState,\n\t\tinspect: inspect\n\t};\n\n\tfunction toPendingState() {\n\t\treturn { state: 'pending' };\n\t}\n\n\tfunction toRejectedState(e) {\n\t\treturn { state: 'rejected', reason: e };\n\t}\n\n\tfunction toFulfilledState(x) {\n\t\treturn { state: 'fulfilled', value: x };\n\t}\n\n\tfunction inspect(handler) {\n\t\tvar state = handler.state();\n\t\treturn state === 0 ? toPendingState()\n\t\t\t : state > 0   ? toFulfilledState(handler.value)\n\t\t\t               : toRejectedState(handler.value);\n\t}\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n\n},{}],69:[function(require,module,exports){\n/** @license MIT License (c) copyright 2010-2014 original author or authors */\n\n/**\n * Promises/A+ and when() implementation\n * when is part of the cujoJS family of libraries (http://cujojs.com/)\n * @author Brian Cavalier\n * @author John Hann\n */\n(function(define) { 'use strict';\ndefine(function (require) {\n\n\tvar timed = require('./lib/decorators/timed');\n\tvar array = require('./lib/decorators/array');\n\tvar flow = require('./lib/decorators/flow');\n\tvar fold = require('./lib/decorators/fold');\n\tvar inspect = require('./lib/decorators/inspect');\n\tvar generate = require('./lib/decorators/iterate');\n\tvar progress = require('./lib/decorators/progress');\n\tvar withThis = require('./lib/decorators/with');\n\tvar unhandledRejection = require('./lib/decorators/unhandledRejection');\n\tvar TimeoutError = require('./lib/TimeoutError');\n\n\tvar Promise = [array, flow, fold, generate, progress,\n\t\tinspect, withThis, timed, unhandledRejection]\n\t\t.reduce(function(Promise, feature) {\n\t\t\treturn feature(Promise);\n\t\t}, require('./lib/Promise'));\n\n\tvar apply = require('./lib/apply')(Promise);\n\n\t// Public API\n\n\twhen.promise     = promise;              // Create a pending promise\n\twhen.resolve     = Promise.resolve;      // Create a resolved promise\n\twhen.reject      = Promise.reject;       // Create a rejected promise\n\n\twhen.lift        = lift;                 // lift a function to return promises\n\twhen['try']      = attempt;              // call a function and return a promise\n\twhen.attempt     = attempt;              // alias for when.try\n\n\twhen.iterate     = Promise.iterate;      // DEPRECATED (use cujojs/most streams) Generate a stream of promises\n\twhen.unfold      = Promise.unfold;       // DEPRECATED (use cujojs/most streams) Generate a stream of promises\n\n\twhen.join        = join;                 // Join 2 or more promises\n\n\twhen.all         = all;                  // Resolve a list of promises\n\twhen.settle      = settle;               // Settle a list of promises\n\n\twhen.any         = lift(Promise.any);    // One-winner race\n\twhen.some        = lift(Promise.some);   // Multi-winner race\n\twhen.race        = lift(Promise.race);   // First-to-settle race\n\n\twhen.map         = map;                  // Array.map() for promises\n\twhen.filter      = filter;               // Array.filter() for promises\n\twhen.reduce      = lift(Promise.reduce);       // Array.reduce() for promises\n\twhen.reduceRight = lift(Promise.reduceRight);  // Array.reduceRight() for promises\n\n\twhen.isPromiseLike = isPromiseLike;      // Is something promise-like, aka thenable\n\n\twhen.Promise     = Promise;              // Promise constructor\n\twhen.defer       = defer;                // Create a {promise, resolve, reject} tuple\n\n\t// Error types\n\n\twhen.TimeoutError = TimeoutError;\n\n\t/**\n\t * Get a trusted promise for x, or by transforming x with onFulfilled\n\t *\n\t * @param {*} x\n\t * @param {function?} onFulfilled callback to be called when x is\n\t *   successfully fulfilled.  If promiseOrValue is an immediate value, callback\n\t *   will be invoked immediately.\n\t * @param {function?} onRejected callback to be called when x is\n\t *   rejected.\n\t * @param {function?} onProgress callback to be called when progress updates\n\t *   are issued for x. @deprecated\n\t * @returns {Promise} a new promise that will fulfill with the return\n\t *   value of callback or errback or the completion value of promiseOrValue if\n\t *   callback and/or errback is not supplied.\n\t */\n\tfunction when(x, onFulfilled, onRejected, onProgress) {\n\t\tvar p = Promise.resolve(x);\n\t\tif (arguments.length < 2) {\n\t\t\treturn p;\n\t\t}\n\n\t\treturn p.then(onFulfilled, onRejected, onProgress);\n\t}\n\n\t/**\n\t * Creates a new promise whose fate is determined by resolver.\n\t * @param {function} resolver function(resolve, reject, notify)\n\t * @returns {Promise} promise whose fate is determine by resolver\n\t */\n\tfunction promise(resolver) {\n\t\treturn new Promise(resolver);\n\t}\n\n\t/**\n\t * Lift the supplied function, creating a version of f that returns\n\t * promises, and accepts promises as arguments.\n\t * @param {function} f\n\t * @returns {Function} version of f that returns promises\n\t */\n\tfunction lift(f) {\n\t\treturn function() {\n\t\t\tfor(var i=0, l=arguments.length, a=new Array(l); i<l; ++i) {\n\t\t\t\ta[i] = arguments[i];\n\t\t\t}\n\t\t\treturn apply(f, this, a);\n\t\t};\n\t}\n\n\t/**\n\t * Call f in a future turn, with the supplied args, and return a promise\n\t * for the result.\n\t * @param {function} f\n\t * @returns {Promise}\n\t */\n\tfunction attempt(f /*, args... */) {\n\t\t/*jshint validthis:true */\n\t\tfor(var i=0, l=arguments.length-1, a=new Array(l); i<l; ++i) {\n\t\t\ta[i] = arguments[i+1];\n\t\t}\n\t\treturn apply(f, this, a);\n\t}\n\n\t/**\n\t * Creates a {promise, resolver} pair, either or both of which\n\t * may be given out safely to consumers.\n\t * @return {{promise: Promise, resolve: function, reject: function, notify: function}}\n\t */\n\tfunction defer() {\n\t\treturn new Deferred();\n\t}\n\n\tfunction Deferred() {\n\t\tvar p = Promise._defer();\n\n\t\tfunction resolve(x) { p._handler.resolve(x); }\n\t\tfunction reject(x) { p._handler.reject(x); }\n\t\tfunction notify(x) { p._handler.notify(x); }\n\n\t\tthis.promise = p;\n\t\tthis.resolve = resolve;\n\t\tthis.reject = reject;\n\t\tthis.notify = notify;\n\t\tthis.resolver = { resolve: resolve, reject: reject, notify: notify };\n\t}\n\n\t/**\n\t * Determines if x is promise-like, i.e. a thenable object\n\t * NOTE: Will return true for *any thenable object*, and isn't truly\n\t * safe, since it may attempt to access the `then` property of x (i.e.\n\t *  clever/malicious getters may do weird things)\n\t * @param {*} x anything\n\t * @returns {boolean} true if x is promise-like\n\t */\n\tfunction isPromiseLike(x) {\n\t\treturn x && typeof x.then === 'function';\n\t}\n\n\t/**\n\t * Return a promise that will resolve only once all the supplied arguments\n\t * have resolved. The resolution value of the returned promise will be an array\n\t * containing the resolution values of each of the arguments.\n\t * @param {...*} arguments may be a mix of promises and values\n\t * @returns {Promise}\n\t */\n\tfunction join(/* ...promises */) {\n\t\treturn Promise.all(arguments);\n\t}\n\n\t/**\n\t * Return a promise that will fulfill once all input promises have\n\t * fulfilled, or reject when any one input promise rejects.\n\t * @param {array|Promise} promises array (or promise for an array) of promises\n\t * @returns {Promise}\n\t */\n\tfunction all(promises) {\n\t\treturn when(promises, Promise.all);\n\t}\n\n\t/**\n\t * Return a promise that will always fulfill with an array containing\n\t * the outcome states of all input promises.  The returned promise\n\t * will only reject if `promises` itself is a rejected promise.\n\t * @param {array|Promise} promises array (or promise for an array) of promises\n\t * @returns {Promise} promise for array of settled state descriptors\n\t */\n\tfunction settle(promises) {\n\t\treturn when(promises, Promise.settle);\n\t}\n\n\t/**\n\t * Promise-aware array map function, similar to `Array.prototype.map()`,\n\t * but input array may contain promises or values.\n\t * @param {Array|Promise} promises array of anything, may contain promises and values\n\t * @param {function(x:*, index:Number):*} mapFunc map function which may\n\t *  return a promise or value\n\t * @returns {Promise} promise that will fulfill with an array of mapped values\n\t *  or reject if any input promise rejects.\n\t */\n\tfunction map(promises, mapFunc) {\n\t\treturn when(promises, function(promises) {\n\t\t\treturn Promise.map(promises, mapFunc);\n\t\t});\n\t}\n\n\t/**\n\t * Filter the provided array of promises using the provided predicate.  Input may\n\t * contain promises and values\n\t * @param {Array|Promise} promises array of promises and values\n\t * @param {function(x:*, index:Number):boolean} predicate filtering predicate.\n\t *  Must return truthy (or promise for truthy) for items to retain.\n\t * @returns {Promise} promise that will fulfill with an array containing all items\n\t *  for which predicate returned truthy.\n\t */\n\tfunction filter(promises, predicate) {\n\t\treturn when(promises, function(promises) {\n\t\t\treturn Promise.filter(promises, predicate);\n\t\t});\n\t}\n\n\treturn when;\n});\n})(typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); });\n\n},{\"./lib/Promise\":52,\"./lib/TimeoutError\":54,\"./lib/apply\":55,\"./lib/decorators/array\":56,\"./lib/decorators/flow\":57,\"./lib/decorators/fold\":58,\"./lib/decorators/inspect\":59,\"./lib/decorators/iterate\":60,\"./lib/decorators/progress\":61,\"./lib/decorators/timed\":62,\"./lib/decorators/unhandledRejection\":63,\"./lib/decorators/with\":64}]},{},[1])(1)\n});\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJidWlsZC9zcmMvU25vb2NvcmUuanMiLCJidWlsZC9zcmMvRW5kcG9pbnQuanMiLCJidWlsZC9zcmMvTW9kaGFzaC5qcyIsImJ1aWxkL3NyYy9PQXV0aC5qcyIsImJ1aWxkL3NyYy9SZWRkaXRSZXF1ZXN0LmpzIiwiYnVpbGQvc3JjL1JlcXVlc3QuanMiLCJidWlsZC9zcmMvUmVzcG9uc2VFcnJvci5qcyIsImJ1aWxkL3NyYy9UaHJvdHRsZS5qcyIsImJ1aWxkL3NyYy9Vc2VyQ29uZmlnLmpzIiwiYnVpbGQvc3JjL2h0dHBzL2ZpbGUuanMiLCJidWlsZC9zcmMvaHR0cHMvZm9ybS5qcyIsImJ1aWxkL3NyYy9odHRwcy9odHRwc0Jyb3dzZXIuanMiLCJidWlsZC9zcmMvaHR0cHMvaHR0cHNOb2RlLmpzIiwiYnVpbGQvc3JjL3V0aWxzLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXItcmVzb2x2ZS9lbXB0eS5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnVmZmVyL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvbGliL2I2NC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9idWZmZXIvbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnVmZmVyL25vZGVfbW9kdWxlcy9pcy1hcnJheS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2h0dHAtYnJvd3NlcmlmeS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9odHRwLWJyb3dzZXJpZnkvbGliL3JlcXVlc3QuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvaHR0cC1icm93c2VyaWZ5L2xpYi9yZXNwb25zZS5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9odHRwLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL0Jhc2U2NC9iYXNlNjQuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvaHR0cHMtYnJvd3NlcmlmeS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2luc2VydC1tb2R1bGUtZ2xvYmFscy9ub2RlX21vZHVsZXMvaXMtYnVmZmVyL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3B1bnljb2RlL3B1bnljb2RlLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5nLWVzMy9kZWNvZGUuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2VuY29kZS5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9xdWVyeXN0cmluZy1lczMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2R1cGxleC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fZHVwbGV4LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fcmVhZGFibGUuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fd3JpdGFibGUuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL25vZGVfbW9kdWxlcy9jb3JlLXV0aWwtaXMvbGliL3V0aWwuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3Bhc3N0aHJvdWdoLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9yZWFkYWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vdHJhbnNmb3JtLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS93cml0YWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9zdHJlYW0tYnJvd3NlcmlmeS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9zdHJpbmdfZGVjb2Rlci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy91cmwvdXJsLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3V0aWwvc3VwcG9ydC9pc0J1ZmZlckJyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvdXRpbC91dGlsLmpzIiwibm9kZV9tb2R1bGVzL2hlL2hlLmpzIiwibm9kZV9tb2R1bGVzL3doZW4vZGVsYXkuanMiLCJub2RlX21vZHVsZXMvd2hlbi9saWIvUHJvbWlzZS5qcyIsIm5vZGVfbW9kdWxlcy93aGVuL2xpYi9TY2hlZHVsZXIuanMiLCJub2RlX21vZHVsZXMvd2hlbi9saWIvVGltZW91dEVycm9yLmpzIiwibm9kZV9tb2R1bGVzL3doZW4vbGliL2FwcGx5LmpzIiwibm9kZV9tb2R1bGVzL3doZW4vbGliL2RlY29yYXRvcnMvYXJyYXkuanMiLCJub2RlX21vZHVsZXMvd2hlbi9saWIvZGVjb3JhdG9ycy9mbG93LmpzIiwibm9kZV9tb2R1bGVzL3doZW4vbGliL2RlY29yYXRvcnMvZm9sZC5qcyIsIm5vZGVfbW9kdWxlcy93aGVuL2xpYi9kZWNvcmF0b3JzL2luc3BlY3QuanMiLCJub2RlX21vZHVsZXMvd2hlbi9saWIvZGVjb3JhdG9ycy9pdGVyYXRlLmpzIiwibm9kZV9tb2R1bGVzL3doZW4vbGliL2RlY29yYXRvcnMvcHJvZ3Jlc3MuanMiLCJub2RlX21vZHVsZXMvd2hlbi9saWIvZGVjb3JhdG9ycy90aW1lZC5qcyIsIm5vZGVfbW9kdWxlcy93aGVuL2xpYi9kZWNvcmF0b3JzL3VuaGFuZGxlZFJlamVjdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy93aGVuL2xpYi9kZWNvcmF0b3JzL3dpdGguanMiLCJub2RlX21vZHVsZXMvd2hlbi9saWIvZW52LmpzIiwibm9kZV9tb2R1bGVzL3doZW4vbGliL2Zvcm1hdC5qcyIsIm5vZGVfbW9kdWxlcy93aGVuL2xpYi9tYWtlUHJvbWlzZS5qcyIsIm5vZGVfbW9kdWxlcy93aGVuL2xpYi9zdGF0ZS5qcyIsIm5vZGVfbW9kdWxlcy93aGVuL3doZW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0TEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNySUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNWhCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbmRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2SEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQ0E7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3U0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5ZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzE3QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoZUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlHQTtBQUNBOztBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDYkE7QUFDQTs7QUNEQTtBQUNBOztBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3TkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25zQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN2tCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNVVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbDZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIi8vIE5vZGUuanMgbGlicmFyaWVzXG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgndmFsdWUnIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChfeCwgX3gyLCBfeDMpIHsgdmFyIF9hZ2FpbiA9IHRydWU7IF9mdW5jdGlvbjogd2hpbGUgKF9hZ2FpbikgeyB2YXIgb2JqZWN0ID0gX3gsIHByb3BlcnR5ID0gX3gyLCByZWNlaXZlciA9IF94MzsgX2FnYWluID0gZmFsc2U7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyBfeCA9IHBhcmVudDsgX3gyID0gcHJvcGVydHk7IF94MyA9IHJlY2VpdmVyOyBfYWdhaW4gPSB0cnVlOyBkZXNjID0gcGFyZW50ID0gdW5kZWZpbmVkOyBjb250aW51ZSBfZnVuY3Rpb247IH0gfSBlbHNlIGlmICgndmFsdWUnIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9IH07XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICdmdW5jdGlvbicgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICcgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBfZXZlbnRzID0gcmVxdWlyZSgnZXZlbnRzJyk7XG5cbnZhciBfZXZlbnRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V2ZW50cyk7XG5cbnZhciBfdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxudmFyIF91dGlsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3V0aWwpO1xuXG4vLyBPdXIgbW9kdWxlc1xuXG52YXIgX1JlcXVlc3QgPSByZXF1aXJlKCcuL1JlcXVlc3QnKTtcblxudmFyIF9SZXF1ZXN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JlcXVlc3QpO1xuXG52YXIgX1JlZGRpdFJlcXVlc3QgPSByZXF1aXJlKCcuL1JlZGRpdFJlcXVlc3QnKTtcblxudmFyIF9SZWRkaXRSZXF1ZXN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JlZGRpdFJlcXVlc3QpO1xuXG52YXIgX1Rocm90dGxlID0gcmVxdWlyZSgnLi9UaHJvdHRsZScpO1xuXG52YXIgX1Rocm90dGxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1Rocm90dGxlKTtcblxudmFyIF9Vc2VyQ29uZmlnID0gcmVxdWlyZSgnLi9Vc2VyQ29uZmlnJyk7XG5cbnZhciBfVXNlckNvbmZpZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Vc2VyQ29uZmlnKTtcblxudmFyIF9PQXV0aCA9IHJlcXVpcmUoJy4vT0F1dGgnKTtcblxudmFyIF9PQXV0aDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9PQXV0aCk7XG5cbnZhciBfTW9kaGFzaCA9IHJlcXVpcmUoJy4vTW9kaGFzaCcpO1xuXG52YXIgX01vZGhhc2gyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTW9kaGFzaCk7XG5cbnZhciBfaHR0cHNGaWxlID0gcmVxdWlyZSgnLi9odHRwcy9maWxlJyk7XG5cbnZhciBfaHR0cHNGaWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2h0dHBzRmlsZSk7XG5cbnZhciBTbm9vY29yZSA9IChmdW5jdGlvbiAoX2V2ZW50cyRFdmVudEVtaXR0ZXIpIHtcbiAgX2luaGVyaXRzKFNub29jb3JlLCBfZXZlbnRzJEV2ZW50RW1pdHRlcik7XG5cbiAgX2NyZWF0ZUNsYXNzKFNub29jb3JlLCBudWxsLCBbe1xuICAgIGtleTogJ2ZpbGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmaWxlKCkge1xuICAgICAgcmV0dXJuIF9odHRwc0ZpbGUyWydkZWZhdWx0J10uYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3ZlcnNpb24nLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuICczLjIuMCc7XG4gICAgfVxuICB9XSk7XG5cbiAgZnVuY3Rpb24gU25vb2NvcmUodXNlckNvbmZpZ3VyYXRpb24pIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNub29jb3JlKTtcblxuICAgIF9nZXQoT2JqZWN0LmdldFByb3RvdHlwZU9mKFNub29jb3JlLnByb3RvdHlwZSksICdjb25zdHJ1Y3RvcicsIHRoaXMpLmNhbGwodGhpcyk7XG5cbiAgICAvLyBAVE9ETyAtIHRoaXMgaXMgYSBcImdvZCBvYmplY3RcIiBvZiBzb3J0cy5cbiAgICB0aGlzLl91c2VyQ29uZmlnID0gbmV3IF9Vc2VyQ29uZmlnMlsnZGVmYXVsdCddKHVzZXJDb25maWd1cmF0aW9uKTtcblxuICAgIHRoaXMuX3Rocm90dGxlID0gbmV3IF9UaHJvdHRsZTJbJ2RlZmF1bHQnXSh0aGlzLl91c2VyQ29uZmlnLnRocm90dGxlKTtcblxuICAgIHRoaXMuX3JlcXVlc3QgPSBuZXcgX1JlcXVlc3QyWydkZWZhdWx0J10odGhpcy5fdGhyb3R0bGUpO1xuXG4gICAgdGhpcy5fcmVxdWVzdC5vbigncmVzcG9uc2VfZXJyb3InLCBmdW5jdGlvbiAocmVzcG9uc2VFcnJvcikge1xuICAgICAgX3RoaXMuZW1pdCgncmVzcG9uc2VfZXJyb3InLCByZXNwb25zZUVycm9yKTtcbiAgICB9KTtcblxuICAgIC8vIFR3byBPQXV0aCBpbnN0YW5jZXMuIE9uZSBmb3IgYXV0aGVudGljYXRlZCB1c2VycywgYW5kIGFub3RoZXIgZm9yXG4gICAgLy8gQXBwbGljYXRpb24gb25seSBPQXV0aC4gVHdvIGFyZSBuZWVkZWQgaW4gdGhlIGluc3RhbmNlIHdoZXJlXG4gICAgLy8gYSB1c2VyIHdhbnRzIHRvIGJ5cGFzcyBhdXRoZW50aWNhdGlvbiBmb3IgYSBjYWxsIC0gd2UgZG9uJ3Qgd2FudFxuICAgIC8vIHRvIHdhc3RlIHRpbWUgYnkgY3JlYXRpbmcgYSBuZXcgYXBwIG9ubHkgaW5zdGFuY2UsIGF1dGhlbnRpY2F0aW5nLFxuICAgIC8vIGV0Yy5cbiAgICB0aGlzLm9hdXRoID0gbmV3IF9PQXV0aDJbJ2RlZmF1bHQnXSh0aGlzLl91c2VyQ29uZmlnLCB0aGlzLl9yZXF1ZXN0KTtcbiAgICB0aGlzLm9hdXRoQXBwT25seSA9IG5ldyBfT0F1dGgyWydkZWZhdWx0J10odGhpcy5fdXNlckNvbmZpZywgdGhpcy5fcmVxdWVzdCk7XG5cbiAgICAvLyBFeHBvc2UgT0F1dGggZnVuY3Rpb25zIGluIGhlcmVcbiAgICBbJ2dldEV4cGxpY2l0QXV0aFVybCcsICdnZXRJbXBsaWNpdEF1dGhVcmwnLCAnZ2V0QXV0aFVybCcsICdhdXRoJywgJ3JlZnJlc2gnLCAnZGVhdXRoJywgJ2dldFJlZnJlc2hUb2tlbicsICdnZXRBY2Nlc3NUb2tlbicsICdzZXRSZWZyZXNoVG9rZW4nLCAnc2V0QWNjZXNzVG9rZW4nLCAnaGFzUmVmcmVzaFRva2VuJywgJ2hhc0FjY2Vzc1Rva2VuJ10uZm9yRWFjaChmdW5jdGlvbiAoZm4pIHtcbiAgICAgIF90aGlzW2ZuXSA9IF90aGlzLm9hdXRoW2ZuXS5iaW5kKF90aGlzLm9hdXRoKTtcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLl91c2VyQ29uZmlnLnVzZUJyb3dzZXJDb29raWVzKSB7XG4gICAgICB0aGlzLm1vZGhhc2ggPSBuZXcgX01vZGhhc2gyWydkZWZhdWx0J10odGhpcy5fdXNlckNvbmZpZywgdGhpcy5fcmVxdWVzdCk7XG5cbiAgICAgIC8vIEV4cG9zZSBNb2RoYXNoIGZ1bmN0aW9ucyBpbiBoZXJlXG4gICAgICBbJ2lzTW9kaGFzaE9sZCcsICdzZXRNb2RoYXNoJywgJ2dldE1vZGhhc2gnLCAnZ2V0Q3VycmVudE1vZGhhc2gnLCAncmVmcmVzaE1vZGhhc2gnXS5mb3JFYWNoKGZ1bmN0aW9uIChmbikge1xuICAgICAgICBfdGhpc1tmbl0gPSBfdGhpcy5tb2RoYXNoW2ZuXS5iaW5kKF90aGlzLm1vZGhhc2gpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5hcHBPbmx5QXV0aCA9IHRoaXMub2F1dGhBcHBPbmx5LmFwcGxpY2F0aW9uT25seUF1dGguYmluZCh0aGlzLm9hdXRoQXBwT25seSk7XG5cbiAgICAvLyBCdWJibGUgdXAgdGhlICBldmVudHNcbiAgICB0aGlzLm9hdXRoLm9uKCdhY2Nlc3NfdG9rZW5fcmVmcmVzaGVkJywgZnVuY3Rpb24gKGFjY2Vzc1Rva2VuKSB7XG4gICAgICBfdGhpcy5lbWl0KCdhY2Nlc3NfdG9rZW5fcmVmcmVzaGVkJywgYWNjZXNzVG9rZW4pO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fcmVkZGl0UmVxdWVzdCA9IG5ldyBfUmVkZGl0UmVxdWVzdDJbJ2RlZmF1bHQnXSh0aGlzLl91c2VyQ29uZmlnLCB0aGlzLl9yZXF1ZXN0LCB0aGlzLm9hdXRoLCB0aGlzLm9hdXRoQXBwT25seSwgdGhpcy5tb2RoYXNoKTtcblxuICAgIHRoaXMuX3JlZGRpdFJlcXVlc3Qub24oJ2FjY2Vzc190b2tlbl9leHBpcmVkJywgZnVuY3Rpb24gKHJlc3BvbnNlRXJyb3IpIHtcbiAgICAgIF90aGlzLmVtaXQoJ2FjY2Vzc190b2tlbl9leHBpcmVkJywgcmVzcG9uc2VFcnJvcik7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9yZWRkaXRSZXF1ZXN0Lm9uKCdyYXRlX2xpbWl0JywgZnVuY3Rpb24gKHJhdGVMaW1pdERhdGEpIHtcbiAgICAgIF90aGlzLmVtaXQoJ3JhdGVfbGltaXQnLCByYXRlTGltaXREYXRhKTtcbiAgICB9KTtcblxuICAgIHRoaXMuX3JlZGRpdFJlcXVlc3Qub24oJ3JhdGVfbGltaXRfcmVhY2hlZCcsIGZ1bmN0aW9uIChyYXRlTGltaXREYXRhKSB7XG4gICAgICAvLyBsZXQgdGhlIHVzZXIga25vdyB0aGF0IHRoZXkgaGF2ZSBnb25lIG92ZXJcbiAgICAgIF90aGlzLmVtaXQoJ3JhdGVfbGltaXRfcmVhY2hlZCcsIHJhdGVMaW1pdERhdGEpO1xuICAgICAgLy8gRGVsYXkgdGhlIG5leHQgY2FsbCB1bnRpbCB0aGUgcmF0ZSBsaW1pdCByZXNldCBvY2N1cnNcbiAgICAgIF90aGlzLl90aHJvdHRsZS5hZGRUaW1lKHJhdGVMaW1pdERhdGEucmF0ZUxpbWl0UmVzZXQgKiAxMDAwKTtcbiAgICB9KTtcblxuICAgIC8qXG4gICAgICAgTWFrZSB0aGlzLl9yZWRkaXRSZXF1ZXN0LnBhdGggdGhlIHByaW1hcnkgZnVuY3Rpb24gdGhhdCB3ZSByZXR1cm4sIGJ1dFxuICAgICAgIHN0aWNrIHRoZSByZXN0IG9mIHRoZSBhdmFpbGFibGUgZnVuY3Rpb25zIG9uIHRoZSBwcm90b3R5cGUgc28gd2VcbiAgICAgICBjYW4gdXNlIHRoZW0gYXMgd2VsbC5cbiAgICAgKi9cbiAgICB2YXIgcGF0aCA9IHRoaXMuX3JlZGRpdFJlcXVlc3QucGF0aC5iaW5kKHRoaXMuX3JlZGRpdFJlcXVlc3QpO1xuXG4gICAgdmFyIGtleSA9IHVuZGVmaW5lZDtcbiAgICBmb3IgKGtleSBpbiB0aGlzKSB7XG4gICAgICBwYXRoW2tleV0gPSB0aGlzW2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGg7XG4gIH1cblxuICByZXR1cm4gU25vb2NvcmU7XG59KShfZXZlbnRzMlsnZGVmYXVsdCddLkV2ZW50RW1pdHRlcik7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IFNub29jb3JlO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Tbm9vY29yZS5qcy5tYXBcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbmV4cG9ydHMucmVwbGFjZVVybFBhcmFtcyA9IHJlcGxhY2VVcmxQYXJhbXM7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmpbJ2RlZmF1bHQnXSA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cbnZhciBfdXJsID0gcmVxdWlyZSgndXJsJyk7XG5cbnZhciBfdXJsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3VybCk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbnZhciB1ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX3V0aWxzKTtcblxudmFyIEVuZHBvaW50ID0gKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRW5kcG9pbnQodXNlckNvbmZpZywgaG9zdG5hbWUsIG1ldGhvZCwgcGF0aCkge1xuICAgIHZhciBoZWFkZXJzID0gYXJndW1lbnRzLmxlbmd0aCA8PSA0IHx8IGFyZ3VtZW50c1s0XSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbNF07XG4gICAgdmFyIGdpdmVuQXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gNSB8fCBhcmd1bWVudHNbNV0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzVdO1xuICAgIHZhciBnaXZlbkNvbnRleHRPcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA8PSA2IHx8IGFyZ3VtZW50c1s2XSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbNl07XG4gICAgdmFyIHBvcnQgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDcgfHwgYXJndW1lbnRzWzddID09PSB1bmRlZmluZWQgPyA4MCA6IGFyZ3VtZW50c1s3XTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFbmRwb2ludCk7XG5cbiAgICB0aGlzLl91c2VyQ29uZmlnID0gdXNlckNvbmZpZztcblxuICAgIHRoaXMuaG9zdG5hbWUgPSBob3N0bmFtZTtcbiAgICB0aGlzLnBvcnQgPSBwb3J0O1xuICAgIHRoaXMubWV0aG9kID0gbWV0aG9kO1xuICAgIHRoaXMucGF0aCA9IHBhdGg7XG4gICAgdGhpcy5oZWFkZXJzID0gaGVhZGVycztcblxuICAgIHRoaXMuY29udGV4dE9wdGlvbnMgPSB0aGlzLm5vcm1hbGl6ZUNvbnRleHRPcHRpb25zKGdpdmVuQ29udGV4dE9wdGlvbnMpO1xuXG4gICAgdGhpcy5naXZlbkFyZ3MgPSBnaXZlbkFyZ3M7XG4gICAgdGhpcy5hcmdzID0gdGhpcy5idWlsZEFyZ3MoKTtcbiAgICB0aGlzLnVybCA9IHRoaXMuYnVpbGRVcmwoKTtcbiAgICB0aGlzLmNvbXB1dGVkUGF0aCA9IF91cmwyWydkZWZhdWx0J10ucGFyc2UodGhpcy51cmwpLnBhdGg7XG4gIH1cblxuICAvKlxuICAgICBUYWtlcyBhbiB1cmwsIGFuZCBhbiBvYmplY3Qgb2YgdXJsIHBhcmFtZXRlcnMgYW5kIHJlcGxhY2VzXG4gICAgIHRoZW0sIGUuZy5cbiAgXG4gICAgIGVuZHBvaW50VXJsOlxuICAgICAnaHR0cDovL2V4YW1wbGUuY29tLyRmb28vJGJhci90ZXN0Lmh0bWwnXG4gIFxuICAgICB0aGlzLmdpdmVuQXJnczogeyAkZm9vOiAnaGVsbG8nLCAkYmFyOiAnd29ybGQnIH1cbiAgXG4gICAgIHdvdWxkIG91dHB1dDpcbiAgXG4gICAgICdodHRwOi8vZXhhbXBsZS5jb20vaGVsbG8vd29ybGQvdGVzdC5odG1sJ1xuICAgKi9cblxuICBfY3JlYXRlQ2xhc3MoRW5kcG9pbnQsIFt7XG4gICAga2V5OiAnc2V0SGVhZGVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEhlYWRlcnMoaGVhZGVycykge1xuICAgICAgdGhpcy5oZWFkZXJzID0gaGVhZGVycztcbiAgICB9XG5cbiAgICAvKlxuICAgICAgIFJldHVybnMgYSBzZXQgb2Ygb3B0aW9ucyB0aGF0IGVmZmVjdCBob3cgZWFjaCBjYWxsIHRvIHJlZGRpdCBiZWhhdmVzLlxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiAnbm9ybWFsaXplQ29udGV4dE9wdGlvbnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBub3JtYWxpemVDb250ZXh0T3B0aW9ucyhnaXZlbkNvbnRleHRPcHRpb25zKSB7XG5cbiAgICAgIHZhciBjT3B0aW9ucyA9IGdpdmVuQ29udGV4dE9wdGlvbnMgfHwge307XG5cbiAgICAgIC8vIGJ5IGRlZmF1bHQgd2UgZG8gbm90IGJ5cGFzcyBhdXRoZW50aWNhdGlvblxuICAgICAgY09wdGlvbnMuYnlwYXNzQXV0aCA9IHUudGhpc09yVGhhdChjT3B0aW9ucy5ieXBhc3NBdXRoLCBmYWxzZSk7XG5cbiAgICAgIC8vIGRlY29kZSBodG1sIGVubnRpdGllcyBmb3IgdGhpcyBjYWxsP1xuICAgICAgY09wdGlvbnMuZGVjb2RlSHRtbEVudGl0aWVzID0gdS50aGlzT3JUaGF0KGNPcHRpb25zLmRlY29kZUh0bWxFbnRpdGllcywgdGhpcy5fdXNlckNvbmZpZy5kZWNvZGVIdG1sRW50aXRpZXMpO1xuXG4gICAgICAvLyBob3cgbWFueSBhdHRlbXB0cyBsZWZ0IGRvIHdlIGhhdmUgdG8gcmV0cnkgYW4gZW5kcG9pbnQ/XG5cbiAgICAgIC8vIHVzZSB0aGUgZ2l2ZW4gcmV0cnlBdHRlbXB0c0xlZnQsIG9yIHRoZSByZXRyeUF0dGVtcHRzIHBhc3NlZCBpbiB0aGVcbiAgICAgIC8vIGNvbnRleHQgb3B0aW9ucyBpZiBub3Qgc3BlY2lmaWVkXG4gICAgICBjT3B0aW9ucy5yZXRyeUF0dGVtcHRzTGVmdCA9IHUudGhpc09yVGhhdChjT3B0aW9ucy5yZXRyeUF0dGVtcHRzTGVmdCwgY09wdGlvbnMucmV0cnlBdHRlbXB0cyk7XG5cbiAgICAgIC8vIHVzZSB0aGUgZ2l2ZW4gcmV0cnlBdHRlbXB0c0xlZnQsIG9yIHRoZSByZXRyeUF0dGVtcHRzIHBhc3NlZCBpbiB0aGVcbiAgICAgIC8vIHVzZXIgY29uZmlndXJhdGlvblxuICAgICAgY09wdGlvbnMucmV0cnlBdHRlbXB0c0xlZnQgPSB1LnRoaXNPclRoYXQoY09wdGlvbnMucmV0cnlBdHRlbXB0c0xlZnQsIHRoaXMuX3VzZXJDb25maWcucmV0cnlBdHRlbXB0cyk7XG5cbiAgICAgIC8vIGRlbGF5IGJldHdlZW4gcmV0cnlpbmcgYW4gZW5kcG9pbnRcbiAgICAgIGNPcHRpb25zLnJldHJ5RGVsYXkgPSB1LnRoaXNPclRoYXQoY09wdGlvbnMucmV0cnlEZWxheSwgdGhpcy5fdXNlckNvbmZpZy5yZXRyeURlbGF5KTtcblxuICAgICAgLy8gbWlsbGlzZWNvbmRzIGJlZm9yZSBhIHJlcXVlc3QgdGltZXMgb3V0XG4gICAgICBjT3B0aW9ucy5yZXF1ZXN0VGltZW91dCA9IHUudGhpc09yVGhhdChjT3B0aW9ucy5yZXF1ZXN0VGltZW91dCwgdGhpcy5fdXNlckNvbmZpZy5yZXF1ZXN0VGltZW91dCk7XG5cbiAgICAgIC8vIGhvdyBtYW55IHJlYXV0aGVudGljYXRpb24gYXR0ZW1wdHMgZG8gd2UgaGF2ZSBsZWZ0P1xuICAgICAgY09wdGlvbnMucmVhdXRoQXR0ZW1wdHNMZWZ0ID0gdS50aGlzT3JUaGF0KGNPcHRpb25zLnJlYXV0aEF0dGVtcHRzTGVmdCwgY09wdGlvbnMucmV0cnlBdHRlbXB0c0xlZnQpO1xuXG4gICAgICByZXR1cm4gY09wdGlvbnM7XG4gICAgfVxuXG4gICAgLypcbiAgICAgICBCdWlsZCB0aGUgYXJndW1lbnRzIHRoYXQgd2Ugd2lsbCBzZW5kIHRvIHJlZGRpdCBpbiBvdXJcbiAgICAgICByZXF1ZXN0LiBUaGVzZSBjdXN0b21pemUgdGhlIHJlcXVlc3QgdGhhdCB3ZSBzZW5kIHRvIHJlZGRpdFxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiAnYnVpbGRBcmdzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYnVpbGRBcmdzKCkge1xuICAgICAgdmFyIGFyZ3MgPSB7fTtcblxuICAgICAgLy8gU2tpcCBhbnkgdXJsIHBhcmFtZXRlcnMgKGUuZy4gaXRlbXMgdGhhdCBiZWdpbiB3aXRoICQpXG4gICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5naXZlbkFyZ3MpIHtcbiAgICAgICAgaWYgKGtleS5zdWJzdHJpbmcoMCwgMSkgIT09ICckJykge1xuICAgICAgICAgIGFyZ3Nba2V5XSA9IHRoaXMuZ2l2ZW5BcmdzW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGFwaVR5cGUgPSB1LnRoaXNPclRoYXQodGhpcy5jb250ZXh0T3B0aW9ucy5hcGlfdHlwZSwgdGhpcy5fdXNlckNvbmZpZy5hcGlUeXBlKTtcblxuICAgICAgaWYgKGFwaVR5cGUpIHtcbiAgICAgICAgYXJncy5hcGlfdHlwZSA9IGFwaVR5cGU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhcmdzO1xuICAgIH1cblxuICAgIC8qXG4gICAgICAgQnVpbGRzIHRoZSBVUkwgdGhhdCB3ZSB3aWxsIHF1ZXJ5IHJlZGRpdCB3aXRoLlxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiAnYnVpbGRVcmwnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBidWlsZFVybCgpIHtcbiAgICAgIHZhciB1cmwgPSB0aGlzLmhvc3RuYW1lO1xuXG4gICAgICBpZiAodGhpcy5wb3J0ICE9PSA4MCkge1xuICAgICAgICB1cmwgKz0gJzonICsgdGhpcy5wb3J0O1xuICAgICAgfVxuXG4gICAgICB2YXIgcGF0aCA9IHRoaXMucGF0aDtcbiAgICAgIGlmIChwYXRoLnN1YnN0cmluZygwLCAxKSAhPT0gJy8nKSB7XG4gICAgICAgIHBhdGggPSAnLycgKyBwYXRoO1xuICAgICAgfVxuXG4gICAgICB1cmwgKz0gcGF0aDtcblxuICAgICAgdXJsID0gcmVwbGFjZVVybFBhcmFtcyh1cmwsIHRoaXMuZ2l2ZW5BcmdzKTtcbiAgICAgIHVybCA9IHVybC5yZXBsYWNlKCcvLycsICcvJyk7XG4gICAgICB1cmwgPSAnaHR0cHM6Ly8nICsgdXJsO1xuICAgICAgcmV0dXJuIHVybDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRW5kcG9pbnQ7XG59KSgpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBFbmRwb2ludDtcblxuZnVuY3Rpb24gcmVwbGFjZVVybFBhcmFtcyhlbmRwb2ludFVybCwgZ2l2ZW5BcmdzKSB7XG4gIC8vIG5vdGhpbmcgdG8gcmVwbGFjZSFcbiAgaWYgKGVuZHBvaW50VXJsLmluZGV4T2YoJyQnKSA9PT0gLTEpIHtcbiAgICByZXR1cm4gZW5kcG9pbnRVcmw7XG4gIH1cblxuICAvLyBwdWxsIG91dCB2YXJpYWJsZXMgZnJvbSB0aGUgdXJsXG4gIHZhciBwYXJhbXMgPSBlbmRwb2ludFVybC5tYXRjaCgvXFwkW1xcd1xcLl0rL2cpO1xuXG4gIC8vIHJlcGxhY2Ugd2l0aCB0aGUgYXJndW1lbnQgcHJvdmlkZWRcbiAgcGFyYW1zLmZvckVhY2goZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgaWYgKHR5cGVvZiBnaXZlbkFyZ3NbcGFyYW1dID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdtaXNzaW5nIHJlcXVpcmVkIHVybCBwYXJhbWV0ZXIgJyArIHBhcmFtKTtcbiAgICB9XG4gICAgZW5kcG9pbnRVcmwgPSBlbmRwb2ludFVybC5yZXBsYWNlKHBhcmFtLCBnaXZlbkFyZ3NbcGFyYW1dKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGVuZHBvaW50VXJsO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RW5kcG9pbnQuanMubWFwXG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgndmFsdWUnIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChfeCwgX3gyLCBfeDMpIHsgdmFyIF9hZ2FpbiA9IHRydWU7IF9mdW5jdGlvbjogd2hpbGUgKF9hZ2FpbikgeyB2YXIgb2JqZWN0ID0gX3gsIHByb3BlcnR5ID0gX3gyLCByZWNlaXZlciA9IF94MzsgX2FnYWluID0gZmFsc2U7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyBfeCA9IHBhcmVudDsgX3gyID0gcHJvcGVydHk7IF94MyA9IHJlY2VpdmVyOyBfYWdhaW4gPSB0cnVlOyBkZXNjID0gcGFyZW50ID0gdW5kZWZpbmVkOyBjb250aW51ZSBfZnVuY3Rpb247IH0gfSBlbHNlIGlmICgndmFsdWUnIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9IH07XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmpbJ2RlZmF1bHQnXSA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICdmdW5jdGlvbicgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICcgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBfZXZlbnRzID0gcmVxdWlyZSgnZXZlbnRzJyk7XG5cbnZhciBfZXZlbnRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V2ZW50cyk7XG5cbnZhciBfd2hlbiA9IHJlcXVpcmUoJ3doZW4nKTtcblxudmFyIF93aGVuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3doZW4pO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG52YXIgdSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF91dGlscyk7XG5cbnZhciBfRW5kcG9pbnQgPSByZXF1aXJlKCcuL0VuZHBvaW50Jyk7XG5cbnZhciBfRW5kcG9pbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRW5kcG9pbnQpO1xuXG52YXIgX1Jlc3BvbnNlRXJyb3IgPSByZXF1aXJlKCcuL1Jlc3BvbnNlRXJyb3InKTtcblxudmFyIF9SZXNwb25zZUVycm9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1Jlc3BvbnNlRXJyb3IpO1xuXG52YXIgTW9kaGFzaCA9IChmdW5jdGlvbiAoX2V2ZW50cyRFdmVudEVtaXR0ZXIpIHtcbiAgX2luaGVyaXRzKE1vZGhhc2gsIF9ldmVudHMkRXZlbnRFbWl0dGVyKTtcblxuICBmdW5jdGlvbiBNb2RoYXNoKHVzZXJDb25maWcsIHJlcXVlc3QpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTW9kaGFzaCk7XG5cbiAgICBfZ2V0KE9iamVjdC5nZXRQcm90b3R5cGVPZihNb2RoYXNoLnByb3RvdHlwZSksICdjb25zdHJ1Y3RvcicsIHRoaXMpLmNhbGwodGhpcyk7XG5cbiAgICB0aGlzLl91c2VyQ29uZmlnID0gdXNlckNvbmZpZztcblxuICAgIHRoaXMuX3JlcXVlc3QgPSByZXF1ZXN0O1xuXG4gICAgdGhpcy5tb2RoYXNoID0gJyc7XG4gICAgdGhpcy5tb2RoYXNoUmVmcmVzaGVkID0gMDtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhNb2RoYXNoLCBbe1xuICAgIGtleTogJ2lzTW9kaGFzaE9sZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzTW9kaGFzaE9sZCgpIHtcbiAgICAgIC8vIDEwIG1pbnV0ZXMgYnkgZGVmYXVsdFxuICAgICAgdmFyIHRpbWVvdXQgPSAxMCAqIDYwICogMTAwMDtcblxuICAgICAgcmV0dXJuIERhdGUubm93KCkgLSB0aGlzLm1vZGhhc2hSZWZyZXNoZWQgPiB0aW1lb3V0O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldE1vZGhhc2gnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRNb2RoYXNoKG1vZGhhc2gpIHtcbiAgICAgIHRoaXMubW9kaGFzaCA9IG1vZGhhc2g7XG4gICAgICB0aGlzLm1vZGhhc2hSZWZyZXNoZWQgPSBEYXRlLm5vdygpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2hhc01vZGhhc2gnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNNb2RoYXNoKCkge1xuICAgICAgcmV0dXJuICEhdGhpcy5tb2RoYXNoLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvKlxuICAgICAgIEdldCB0aGUgY3VycmVudCBjYWNoZWQgbW9kaGFzaC5cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogJ2dldEN1cnJlbnRNb2RoYXNoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q3VycmVudE1vZGhhc2goKSB7XG4gICAgICBpZiAoIXRoaXMuaGFzTW9kaGFzaCgpKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5tb2RoYXNoO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlZnJlc2hNb2RoYXNoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVmcmVzaE1vZGhhc2goKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB2YXIgZW5kcG9pbnQgPSBuZXcgX0VuZHBvaW50MlsnZGVmYXVsdCddKHRoaXMuX3VzZXJDb25maWcsIHRoaXMuX3VzZXJDb25maWcuc2VydmVyV1dXLCAnZ2V0JywgJy9hcGkvbWUuanNvbicsIHt9LCB7fSwge30sIHRoaXMuX3VzZXJDb25maWcuc2VydmVyV1dXUG9ydCk7XG5cbiAgICAgIHZhciByZXNwb25zZUVycm9ySGFuZGxlciA9IGZ1bmN0aW9uIHJlc3BvbnNlRXJyb3JIYW5kbGVyKHJlc3BvbnNlLCBlbmRwb2ludCkge1xuICAgICAgICBpZiAoU3RyaW5nKHJlc3BvbnNlLl9zdGF0dXMpLmluZGV4T2YoJzQnKSA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBfd2hlbjJbJ2RlZmF1bHQnXS5yZWplY3QobmV3IF9SZXNwb25zZUVycm9yMlsnZGVmYXVsdCddKCdJbnZhbGlkIHJlZnJlc2hNb2RoYXNoIHJlcXVlc3QnLCByZXNwb25zZSwgZW5kcG9pbnQpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBlbHNlIHJldHVybiB0aGUgZW5kcG9pbnQgdG8gdHJ5IGFnYWluXG4gICAgICAgIHJldHVybiBfd2hlbjJbJ2RlZmF1bHQnXS5yZXNvbHZlKGVuZHBvaW50KTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0Lmh0dHBzKGVuZHBvaW50LCByZXNwb25zZUVycm9ySGFuZGxlcikudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgIHZhciByZXNwb25zZSA9IEpTT04ucGFyc2UocmVzLl9ib2R5KTtcblxuICAgICAgICBpZiAoIXJlc3BvbnNlLmRhdGEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgX1Jlc3BvbnNlRXJyb3IyWydkZWZhdWx0J10oJ0ludmFsaWQgcmVmcmVzaE1vZGhhc2ggcmVzcG9uc2UuIEFyZSB5b3UgbG9nZ2VkIGluPycsIHJlc3BvbnNlLCBlbmRwb2ludCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMuc2V0TW9kaGFzaChyZXNwb25zZS5kYXRhLm1vZGhhc2gpO1xuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1vZGhhc2g6IHJlc3BvbnNlLmRhdGEubW9kaGFzaFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldE1vZGhhc2gnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRNb2RoYXNoKCkge1xuICAgICAgaWYgKCF0aGlzLmlzTW9kaGFzaE9sZCgpKSB7XG4gICAgICAgIHJldHVybiBfd2hlbjJbJ2RlZmF1bHQnXS5yZXNvbHZlKHtcbiAgICAgICAgICBtb2RoYXNoOiB0aGlzLm1vZGhhc2hcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWZyZXNoTW9kaGFzaCgpO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBNb2RoYXNoO1xufSkoX2V2ZW50czJbJ2RlZmF1bHQnXS5FdmVudEVtaXR0ZXIpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBNb2RoYXNoO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Nb2RoYXNoLmpzLm1hcFxuIiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxudmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQoX3gyLCBfeDMsIF94NCkgeyB2YXIgX2FnYWluID0gdHJ1ZTsgX2Z1bmN0aW9uOiB3aGlsZSAoX2FnYWluKSB7IHZhciBvYmplY3QgPSBfeDIsIHByb3BlcnR5ID0gX3gzLCByZWNlaXZlciA9IF94NDsgX2FnYWluID0gZmFsc2U7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyBfeDIgPSBwYXJlbnQ7IF94MyA9IHByb3BlcnR5OyBfeDQgPSByZWNlaXZlcjsgX2FnYWluID0gdHJ1ZTsgZGVzYyA9IHBhcmVudCA9IHVuZGVmaW5lZDsgY29udGludWUgX2Z1bmN0aW9uOyB9IH0gZWxzZSBpZiAoJ3ZhbHVlJyBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfSB9O1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqWydkZWZhdWx0J10gPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAnZnVuY3Rpb24nICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAnICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgX2V2ZW50cyA9IHJlcXVpcmUoJ2V2ZW50cycpO1xuXG52YXIgX2V2ZW50czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ldmVudHMpO1xuXG52YXIgX3F1ZXJ5c3RyaW5nID0gcmVxdWlyZSgncXVlcnlzdHJpbmcnKTtcblxudmFyIF9xdWVyeXN0cmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9xdWVyeXN0cmluZyk7XG5cbnZhciBfdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxudmFyIF91dGlsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3V0aWwpO1xuXG52YXIgX3VybCA9IHJlcXVpcmUoJ3VybCcpO1xuXG52YXIgX3VybDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91cmwpO1xuXG52YXIgX3doZW4gPSByZXF1aXJlKCd3aGVuJyk7XG5cbnZhciBfd2hlbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93aGVuKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxudmFyIHUgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfdXRpbHMpO1xuXG52YXIgX0VuZHBvaW50ID0gcmVxdWlyZSgnLi9FbmRwb2ludCcpO1xuXG52YXIgX0VuZHBvaW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0VuZHBvaW50KTtcblxudmFyIF9SZXNwb25zZUVycm9yID0gcmVxdWlyZSgnLi9SZXNwb25zZUVycm9yJyk7XG5cbnZhciBfUmVzcG9uc2VFcnJvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SZXNwb25zZUVycm9yKTtcblxuLypcbiAgIFZhcmlvdXMgT0F1dGggdHlwZXNcbiAqL1xudmFyIFRPS0VOID0ge1xuICBFWFBMSUNJVDogJ2V4cGxpY2l0JyxcbiAgSU1QTElDSVQ6ICdpbXBsaWNpdCcsXG4gIFNDUklQVDogJ3NjcmlwdCcsXG4gIEFQUF9PTkxZOiAnYXBwX29ubHknLFxuICBSRUZSRVNIOiAncmVmcmVzaCcsXG4gIElOVkFMSUQ6ICdpbnZhbGlkX3Rva2VuJyAvLyBSZXByZXNlbnRzIGFuIHVuc2V0L2ludmFsaWQgdG9rZW5cbn07XG5cbmV4cG9ydHMuVE9LRU4gPSBUT0tFTjtcbi8qXG4gICBSZXByZXNlbnRzIGEgc2luZ2xlIE9BdXRoIGluc3RhbmNlLiBVc2VkIHByaW1hcmlseSBmb3IgaW50ZXJuYWxcbiAgIHVzZSB3aXRoaW4gdGhlIFNub29jb3JlIGNsYXNzIHRvIG1hbmFnZSB0d28gT0F1dGggaW5zdGFuY2VzIC1cbiAgIEFwcGxpY2F0b24gT25seSBhbmQgYW4gQXV0aGVudGljYXRlZCBTZXNzaW9uLlxuXG4gKi9cblxudmFyIE9BdXRoID0gKGZ1bmN0aW9uIChfZXZlbnRzJEV2ZW50RW1pdHRlcikge1xuICBfaW5oZXJpdHMoT0F1dGgsIF9ldmVudHMkRXZlbnRFbWl0dGVyKTtcblxuICBmdW5jdGlvbiBPQXV0aCh1c2VyQ29uZmlnLCByZXF1ZXN0KSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE9BdXRoKTtcblxuICAgIF9nZXQoT2JqZWN0LmdldFByb3RvdHlwZU9mKE9BdXRoLnByb3RvdHlwZSksICdjb25zdHJ1Y3RvcicsIHRoaXMpLmNhbGwodGhpcyk7XG5cbiAgICB0aGlzLl91c2VyQ29uZmlnID0gdXNlckNvbmZpZztcblxuICAgIHRoaXMuX3JlcXVlc3QgPSByZXF1ZXN0O1xuXG4gICAgdGhpcy5hY2Nlc3NUb2tlbiA9IFRPS0VOLklOVkFMSUQ7XG4gICAgdGhpcy5yZWZyZXNoVG9rZW4gPSBUT0tFTi5JTlZBTElEO1xuICAgIHRoaXMudG9rZW5UeXBlID0gJ2JlYXJlcic7XG5cbiAgICB0aGlzLnNjb3BlID0gdGhpcy5ub3JtYWxpemVTY29wZSgpO1xuICB9XG5cbiAgLypcbiAgICAgVGFrZXMgYSBnaXZlbiBzY29wZSwgYW5kIG5vcm1hbGl6ZXMgaXQgdG8gYSBwcm9wZXIgc3RyaW5nLlxuICAgKi9cblxuICBfY3JlYXRlQ2xhc3MoT0F1dGgsIFt7XG4gICAga2V5OiAnbm9ybWFsaXplU2NvcGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBub3JtYWxpemVTY29wZSgpIHtcbiAgICAgIHZhciBzY29wZSA9IHVuZGVmaW5lZDtcbiAgICAgIC8vIFNldCB0byBlbXB0eSBzdHJpbmcgaWYgdGhlIHNjb3BlIGlmIG5vdCBzZXRcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5fdXNlckNvbmZpZy5vYXV0aC5zY29wZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc2NvcGUgPSAnJztcbiAgICAgIH1cbiAgICAgIC8vIGNvbnZlcnQgYW4gYXJyYXkgaW50byBhIHN0cmluZ1xuICAgICAgZWxzZSBpZiAoX3V0aWwyWydkZWZhdWx0J10uaXNBcnJheSh0aGlzLl91c2VyQ29uZmlnLm9hdXRoLnNjb3BlKSkge1xuICAgICAgICAgIHNjb3BlID0gdGhpcy5fdXNlckNvbmZpZy5vYXV0aC5zY29wZS5qb2luKCcsJyk7XG4gICAgICAgIH1cbiAgICAgIHJldHVybiBzY29wZTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAgIERvIHdlIGhhdmUgYSByZWZyZXNoIHRva2VuIGRlZmluZWQ/XG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6ICdoYXNSZWZyZXNoVG9rZW4nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNSZWZyZXNoVG9rZW4oKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZWZyZXNoVG9rZW4gIT09IFRPS0VOLklOVkFMSUQ7XG4gICAgfVxuXG4gICAgLypcbiAgICAgICBEbyB3ZSBoYXZlIGFuIGFjY2VzcyB0b2tlbiBkZWZpbmVkP1xuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiAnaGFzQWNjZXNzVG9rZW4nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNBY2Nlc3NUb2tlbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmFjY2Vzc1Rva2VuICE9PSBUT0tFTi5JTlZBTElEO1xuICAgIH1cblxuICAgIC8qXG4gICAgICAgR2V0IHRoZSBjdXJyZW50IHJlZnJlc2ggdG9rZW4gdXNlZCBmb3IgdGhpcyBpbnN0YW5jZS5cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogJ2dldFJlZnJlc2hUb2tlbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJlZnJlc2hUb2tlbigpIHtcbiAgICAgIGlmICh0aGlzLnJlZnJlc2hUb2tlbiA9PT0gVE9LRU4uSU5WQUxJRCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMucmVmcmVzaFRva2VuO1xuICAgIH1cblxuICAgIC8qXG4gICAgICAgR2V0IHRoZSBjdXJyZW50IGFjY2VzcyB0b2tlbiB1c2VkIGZvciB0aGlzIGluc3RhbmNlLlxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiAnZ2V0QWNjZXNzVG9rZW4nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBY2Nlc3NUb2tlbigpIHtcbiAgICAgIGlmICh0aGlzLmFjY2Vzc1Rva2VuID09PSBUT0tFTi5JTlZBTElEKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5hY2Nlc3NUb2tlbjtcbiAgICB9XG5cbiAgICAvKlxuICAgICAgIFNldCB0aGUgY3VycmVudCByZWZyZXNoIHRva2VuIHVzZWQgZm9yIHRoaXMgaW5zdGFuY2UuXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6ICdzZXRSZWZyZXNoVG9rZW4nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRSZWZyZXNoVG9rZW4ocmVmcmVzaFRva2VuKSB7XG4gICAgICB0aGlzLnJlZnJlc2hUb2tlbiA9IHJlZnJlc2hUb2tlbjtcbiAgICB9XG5cbiAgICAvKlxuICAgICAgIFNldCB0aGUgY3VycmVudCBhY2Nlc3MgdG9rZW4gdXNlZCBmb3IgdGhpcyBpbnN0YW5jZS5cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogJ3NldEFjY2Vzc1Rva2VuJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0QWNjZXNzVG9rZW4oYWNjZXNzVG9rZW4pIHtcbiAgICAgIHRoaXMuYWNjZXNzVG9rZW4gPSBhY2Nlc3NUb2tlbjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRBdXRob3JpemF0aW9uSGVhZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QXV0aG9yaXphdGlvbkhlYWRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRva2VuVHlwZSArICcgJyArIHRoaXMuYWNjZXNzVG9rZW47XG4gICAgfVxuXG4gICAgLypcbiAgICAgICBDYW4gd2UgcmVmcmVzaCBvdXIgYWNjZXNzIHRva2VuIHdpdGhvdXQgdXNlciBpbnRlcnZlbnRpb24/XG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6ICdjYW5SZWZyZXNoQWNjZXNzVG9rZW4nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjYW5SZWZyZXNoQWNjZXNzVG9rZW4oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdXNlckNvbmZpZy5vYXV0aC50eXBlID09PSAnc2NyaXB0JyB8fCB0aGlzLl91c2VyQ29uZmlnLm9hdXRoLnR5cGUgPT09ICdleHBsaWNpdCcgJiYgdGhpcy5fdXNlckNvbmZpZy5vYXV0aC5kdXJhdGlvbiA9PT0gJ3Blcm1hbmVudCcgJiYgdGhpcy5oYXNSZWZyZXNoVG9rZW4oKTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAgIEdldCB0aGUgRXhwbGljaXQgQXV0aCBVcmwuXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6ICdnZXRFeHBsaWNpdEF1dGhVcmwnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRFeHBsaWNpdEF1dGhVcmwoc3RhdGUpIHtcblxuICAgICAgdmFyIHF1ZXJ5ID0ge307XG5cbiAgICAgIHF1ZXJ5LmNsaWVudF9pZCA9IHRoaXMuX3VzZXJDb25maWcub2F1dGgua2V5O1xuICAgICAgcXVlcnkuc3RhdGUgPSB1LnRoaXNPclRoYXQoc3RhdGUsIE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTAwMCkpO1xuICAgICAgcXVlcnkucmVkaXJlY3RfdXJpID0gdGhpcy5fdXNlckNvbmZpZy5vYXV0aC5yZWRpcmVjdFVyaTtcbiAgICAgIHF1ZXJ5LmR1cmF0aW9uID0gdGhpcy5fdXNlckNvbmZpZy5vYXV0aC5kdXJhdGlvbjtcbiAgICAgIHF1ZXJ5LnJlc3BvbnNlX3R5cGUgPSAnY29kZSc7XG4gICAgICBxdWVyeS5zY29wZSA9IHRoaXMuc2NvcGU7XG5cbiAgICAgIHZhciBiYXNlVXJsID0gJ2h0dHBzOi8vJyArIHRoaXMuX3VzZXJDb25maWcuc2VydmVyV1dXICsgJy9hcGkvdjEvYXV0aG9yaXplJztcblxuICAgICAgaWYgKHRoaXMuX3VzZXJDb25maWcubW9iaWxlKSB7XG4gICAgICAgIGJhc2VVcmwgKz0gJy5jb21wYWN0JztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJhc2VVcmwgKyAnPycgKyBfcXVlcnlzdHJpbmcyWydkZWZhdWx0J10uc3RyaW5naWZ5KHF1ZXJ5KTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAgIEdldCB0aGUgSW1wbGljaXQgQXV0aCBVcmwuXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6ICdnZXRJbXBsaWNpdEF1dGhVcmwnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRJbXBsaWNpdEF1dGhVcmwoc3RhdGUpIHtcblxuICAgICAgdmFyIHF1ZXJ5ID0ge307XG5cbiAgICAgIHF1ZXJ5LmNsaWVudF9pZCA9IHRoaXMuX3VzZXJDb25maWcub2F1dGgua2V5O1xuICAgICAgcXVlcnkuc3RhdGUgPSB1LnRoaXNPclRoYXQoc3RhdGUsIE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTAwMCkpO1xuICAgICAgcXVlcnkucmVkaXJlY3RfdXJpID0gdGhpcy5fdXNlckNvbmZpZy5vYXV0aC5yZWRpcmVjdFVyaTtcbiAgICAgIHF1ZXJ5LnJlc3BvbnNlX3R5cGUgPSAndG9rZW4nO1xuICAgICAgcXVlcnkuc2NvcGUgPSB0aGlzLnNjb3BlO1xuXG4gICAgICB2YXIgYmFzZVVybCA9ICdodHRwczovLycgKyB0aGlzLl91c2VyQ29uZmlnLnNlcnZlcldXVyArICcvYXBpL3YxL2F1dGhvcml6ZSc7XG5cbiAgICAgIGlmICh0aGlzLl91c2VyQ29uZmlnLm1vYmlsZSkge1xuICAgICAgICBiYXNlVXJsICs9ICcuY29tcGFjdCc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBiYXNlVXJsICsgJz8nICsgX3F1ZXJ5c3RyaW5nMlsnZGVmYXVsdCddLnN0cmluZ2lmeShxdWVyeSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0QXV0aFVybCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEF1dGhVcmwoc3RhdGUpIHtcbiAgICAgIHN3aXRjaCAodGhpcy5fdXNlckNvbmZpZy5vYXV0aC50eXBlKSB7XG4gICAgICAgIGNhc2UgVE9LRU4uRVhQTElDSVQ6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RXhwbGljaXRBdXRoVXJsKHN0YXRlKTtcbiAgICAgICAgY2FzZSBUT0tFTi5JTVBMSUNJVDpcbiAgICAgICAgICByZXR1cm4gdGhpcy5nZXRJbXBsaWNpdEF1dGhVcmwoc3RhdGUpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIG9hdXRoIHR5cGUgb2YgJyArIG9hdXRoVHlwZSArICcgZG9lcyBub3QgcmVxdWlyZSBhbiB1cmwnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKlxuICAgICAgIFJldHVybnMgdGhlIGRhdGEgbmVlZGVkIHRvIHJlcXVlc3QgYW4gQXBwbGljYXRvbiBPbmx5XG4gICAgICAgT0F1dGggYWNjZXNzIHRva2VuLlxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiAnZ2V0QXBwT25seVRva2VuRGF0YScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEFwcE9ubHlUb2tlbkRhdGEoKSB7XG4gICAgICB2YXIgcGFyYW1zID0ge307XG5cbiAgICAgIHBhcmFtcy5zY29wZSA9IHRoaXMuc2NvcGU7XG5cbiAgICAgIC8vIEZyb20gdGhlIHJlZGRpdCBkb2N1bWVudGF0aW9uOlxuICAgICAgLy9cbiAgICAgIC8vIC0gLSAtXG4gICAgICAvLyBcImNsaWVudF9jcmVkZW50aWFsc1wiXG4gICAgICAvL1xuICAgICAgLy8gQ29uZmlkZW50aWFsIGNsaWVudHMgKHdlYiBhcHBzIC8gc2NyaXB0cykgbm90IGFjdGluZyBvblxuICAgICAgLy8gYmVoYWxmIG9mIG9uZSBvciBtb3JlIGxvZ2dlZCBvdXQgdXNlcnMuXG4gICAgICAvL1xuICAgICAgLy8gLSAtIC1cbiAgICAgIC8vIFwiaHR0cHM6Ly9vYXV0aC5yZWRkaXQuY29tL2dyYW50cy9pbnN0YWxsZWRfY2xpZW50XCJcbiAgICAgIC8vXG4gICAgICAvLyAqIEluc3RhbGxlZCBhcHAgdHlwZXMgKGFzIHRoZXNlIGFwcHMgYXJlIGNvbnNpZGVyZWRcbiAgICAgIC8vIFwibm9uLWNvbmZpZGVudGlhbFwiLCBoYXZlIG5vIHNlY3JldCwgYW5kIHRodXMsIGFyZVxuICAgICAgLy8gaW5lbGlnaWJsZSBmb3IgY2xpZW50X2NyZWRlbnRpYWxzIGdyYW50LlxuICAgICAgLy9cbiAgICAgIC8vICogT3RoZXIgYXBwcyBhY3Rpbmcgb24gYmVoYWxmIG9mIG9uZSBvciBtb3JlIFwibG9nZ2VkIG91dFwiIHVzZXJzLlxuICAgICAgLy9cbiAgICAgIHN3aXRjaCAodGhpcy5fdXNlckNvbmZpZy5vYXV0aC50eXBlKSB7XG4gICAgICAgIGNhc2UgVE9LRU4uU0NSSVBUOlxuICAgICAgICBjYXNlIFRPS0VOLkVYUExJQ0lUOlxuICAgICAgICAgIHBhcmFtcy5ncmFudF90eXBlID0gJ2NsaWVudF9jcmVkZW50aWFscyc7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIC8vIEFsc28gY292ZXJzIGNhc2UgVE9LRU4uSU1QTElDSVQ6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcGFyYW1zLmdyYW50X3R5cGUgPSAnaHR0cHM6Ly9vYXV0aC5yZWRkaXQuY29tL2dyYW50cy9pbnN0YWxsZWRfY2xpZW50JztcbiAgICAgICAgICBwYXJhbXMuZGV2aWNlX2lkID0gdGhpcy5fdXNlckNvbmZpZy5vYXV0aC5kZXZpY2VJZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBhcmFtcztcbiAgICB9XG5cbiAgICAvKlxuICAgICAgIFJldHVybnMgdGhlIGRhdGEgbmVlZGVkIHRvIHJlcXVlc3QgYW4gYXV0aGVudGljYXRlZCBPQXV0aFxuICAgICAgIGFjY2VzcyB0b2tlbi5cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogJ2dldEF1dGhlbnRpY2F0ZWRUb2tlbkRhdGEnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBdXRoZW50aWNhdGVkVG9rZW5EYXRhKGF1dGhvcml6YXRpb25Db2RlKSB7XG4gICAgICB2YXIgcGFyYW1zID0ge307XG5cbiAgICAgIHBhcmFtcy5zY29wZSA9IHRoaXMuc2NvcGU7XG5cbiAgICAgIHN3aXRjaCAodGhpcy5fdXNlckNvbmZpZy5vYXV0aC50eXBlKSB7XG4gICAgICAgIGNhc2UgVE9LRU4uU0NSSVBUOlxuICAgICAgICAgIHBhcmFtcy5ncmFudF90eXBlID0gJ3Bhc3N3b3JkJztcbiAgICAgICAgICBwYXJhbXMudXNlcm5hbWUgPSB0aGlzLl91c2VyQ29uZmlnLm9hdXRoLnVzZXJuYW1lO1xuICAgICAgICAgIHBhcmFtcy5wYXNzd29yZCA9IHRoaXMuX3VzZXJDb25maWcub2F1dGgucGFzc3dvcmQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgVE9LRU4uRVhQTElDSVQ6XG4gICAgICAgICAgcGFyYW1zLmdyYW50X3R5cGUgPSAnYXV0aG9yaXphdGlvbl9jb2RlJztcbiAgICAgICAgICBwYXJhbXMuY2xpZW50X2lkID0gdGhpcy5fdXNlckNvbmZpZy5vYXV0aC5rZXk7XG4gICAgICAgICAgcGFyYW1zLnJlZGlyZWN0X3VyaSA9IHRoaXMuX3VzZXJDb25maWcub2F1dGgucmVkaXJlY3RVcmk7XG4gICAgICAgICAgcGFyYW1zLmNvZGUgPSBhdXRob3JpemF0aW9uQ29kZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gX3doZW4yWydkZWZhdWx0J10ucmVqZWN0KG5ldyBFcnJvcignSW52YWxpZCBPQXV0aCB0eXBlIHNwZWNpZmllZCAoQXV0aGVudGljYXRlZCBPQXV0aCkuJykpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGFyYW1zO1xuICAgIH1cblxuICAgIC8qXG4gICAgICAgUmV0dXJucyB0aGUgZGF0YSBuZWVkZWQgdG8gcmVxdWVzdCBhIHJlZnJlc2ggdG9rZW4uXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6ICdnZXRSZWZyZXNoVG9rZW5EYXRhJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UmVmcmVzaFRva2VuRGF0YShyZWZyZXNoVG9rZW4pIHtcbiAgICAgIHZhciBwYXJhbXMgPSB7fTtcbiAgICAgIHBhcmFtcy5zY29wZSA9IHRoaXMuc2NvcGU7XG4gICAgICBwYXJhbXMuZ3JhbnRfdHlwZSA9ICdyZWZyZXNoX3Rva2VuJztcbiAgICAgIHBhcmFtcy5yZWZyZXNoX3Rva2VuID0gcmVmcmVzaFRva2VuO1xuICAgICAgcmV0dXJuIHBhcmFtcztcbiAgICB9XG5cbiAgICAvKlxuICAgICAgIEEgbWV0aG9kIHRoYXQgc2V0cyB1cCBhIGNhbGwgdG8gcmVjZWl2ZSBhbiBhY2Nlc3MvcmVmcmVzaCB0b2tlbi5cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogJ2dldFRva2VuJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VG9rZW4odG9rZW5FbnVtKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzFdO1xuXG4gICAgICB2YXIgcGFyYW1zID0gdW5kZWZpbmVkO1xuXG4gICAgICBzd2l0Y2ggKHRva2VuRW51bSkge1xuICAgICAgICBjYXNlIFRPS0VOLlJFRlJFU0g6XG4gICAgICAgICAgcGFyYW1zID0gdGhpcy5nZXRSZWZyZXNoVG9rZW5EYXRhKG9wdGlvbnMucmVmcmVzaFRva2VuKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBUT0tFTi5BUFBfT05MWTpcbiAgICAgICAgICBwYXJhbXMgPSB0aGlzLmdldEFwcE9ubHlUb2tlbkRhdGEoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBUT0tFTi5TQ1JJUFQ6XG4gICAgICAgIGNhc2UgVE9LRU4uRVhQTElDSVQ6XG4gICAgICAgICAgcGFyYW1zID0gdGhpcy5nZXRBdXRoZW50aWNhdGVkVG9rZW5EYXRhKG9wdGlvbnMuYXV0aG9yaXphdGlvbkNvZGUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICB2YXIgaGVhZGVycyA9IHt9O1xuICAgICAgdmFyIGJ1ZmYgPSBuZXcgQnVmZmVyKHRoaXMuX3VzZXJDb25maWcub2F1dGgua2V5ICsgJzonICsgdGhpcy5fdXNlckNvbmZpZy5vYXV0aC5zZWNyZXQpO1xuICAgICAgdmFyIGJhc2U2NCA9IGJ1ZmYudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICAgICAgdmFyIGF1dGggPSAnQmFzaWMgJyArIGJhc2U2NDtcblxuICAgICAgaGVhZGVyc1snQXV0aG9yaXphdGlvbiddID0gYXV0aDtcblxuICAgICAgdmFyIGVuZHBvaW50ID0gbmV3IF9FbmRwb2ludDJbJ2RlZmF1bHQnXSh0aGlzLl91c2VyQ29uZmlnLCB0aGlzLl91c2VyQ29uZmlnLnNlcnZlcldXVywgJ3Bvc3QnLCAnL2FwaS92MS9hY2Nlc3NfdG9rZW4nLCBoZWFkZXJzLCBwYXJhbXMsIHt9LCB0aGlzLl91c2VyQ29uZmlnLnNlcnZlcldXV1BvcnQpO1xuXG4gICAgICB2YXIgcmVzcG9uc2VFcnJvckhhbmRsZXIgPSBmdW5jdGlvbiByZXNwb25zZUVycm9ySGFuZGxlcihyZXNwb25zZSwgZW5kcG9pbnQpIHtcbiAgICAgICAgaWYgKFN0cmluZyhyZXNwb25zZS5fc3RhdHVzKS5pbmRleE9mKCc0JykgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gX3doZW4yWydkZWZhdWx0J10ucmVqZWN0KG5ldyBfUmVzcG9uc2VFcnJvcjJbJ2RlZmF1bHQnXSgnSW52YWxpZCBnZXRUb2tlbiByZXF1ZXN0JywgcmVzcG9uc2UsIGVuZHBvaW50KSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZWxzZSByZXR1cm4gdGhlIGVuZHBvaW50IHRvIHRyeSBhZ2FpblxuICAgICAgICByZXR1cm4gX3doZW4yWydkZWZhdWx0J10ucmVzb2x2ZShlbmRwb2ludCk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdC5odHRwcyhlbmRwb2ludCwgcmVzcG9uc2VFcnJvckhhbmRsZXIpLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShyZXMuX2JvZHkpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLypcbiAgICAgICBTZXRzIHRoZSBhdXRoIGRhdGEgZnJvbSB0aGUgb2F1dGggbW9kdWxlIHRvIGFsbG93IE9BdXRoIGNhbGxzLlxuICAgICAgICBUaGlzIG1ldGhvZCBjYW4gYXV0aGVudGljYXRlIHdpdGg6XG4gICAgICAgIC0gU2NyaXB0IGJhc2VkIE9BdXRoIChubyBwYXJhbWV0ZXIpXG4gICAgICAgLSBSYXcgYXV0aGVudGljYXRpb24gZGF0YVxuICAgICAgIC0gQXV0aG9yaXphdGlvbiBDb2RlIChyZXF1ZXN0X3R5cGUgPSBcImNvZGVcIilcbiAgICAgICAtIEFjY2VzcyBUb2tlbiAocmVxdWVzdF90eXBlID0gXCJ0b2tlblwiKSAvIEltcGxpY2l0IE9BdXRoXG4gICAgICAgLSBBcHBsaWNhdGlvbiBPbmx5LiAodm9pZCAwLCB0cnVlKTtcbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogJ2F1dGgnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhdXRoKGF1dGhDb2RlT3JBY2Nlc3NUb2tlbiwgaXNBcHBsaWNhdGlvbk9ubHkpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHZhciB0b2tlbkRhdGEgPSB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChpc0FwcGxpY2F0aW9uT25seSkge1xuICAgICAgICB0b2tlbkRhdGEgPSB0aGlzLmdldFRva2VuKFRPS0VOLkFQUF9PTkxZKTtcbiAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgdmFyIHRva2VuID0gdGhpcy5fdXNlckNvbmZpZy5vYXV0aC50eXBlO1xuXG4gICAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgICBjYXNlIFRPS0VOLlNDUklQVDpcbiAgICAgICAgICAgIHRva2VuRGF0YSA9IHRoaXMuZ2V0VG9rZW4odG9rZW4pO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIFRPS0VOLkVYUExJQ0lUOlxuICAgICAgICAgICAgLy8gYXV0aCBjb2RlIGluIHRoaXMgY2FzZVxuICAgICAgICAgICAgdG9rZW5EYXRhID0gdGhpcy5nZXRUb2tlbih0b2tlbiwge1xuICAgICAgICAgICAgICBhdXRob3JpemF0aW9uQ29kZTogYXV0aENvZGVPckFjY2Vzc1Rva2VuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBUT0tFTi5JTVBMSUNJVDpcbiAgICAgICAgICAgIC8vIGFjY2VzcyB0b2tlbiBpbiB0aGlzIGNhc2VcbiAgICAgICAgICAgIHRva2VuRGF0YSA9IHtcbiAgICAgICAgICAgICAgYWNjZXNzX3Rva2VuOiBhdXRoQ29kZU9yQWNjZXNzVG9rZW4sXG4gICAgICAgICAgICAgIHRva2VuX3R5cGU6ICdiZWFyZXInLFxuICAgICAgICAgICAgICBleHBpcmVzX2luOiAzNjAwLFxuICAgICAgICAgICAgICBzY29wZTogdGhpcy5fdXNlckNvbmZpZy5vYXV0aC5zY29wZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU2V0dGluZyB0aGUgYXV0aCBkYXRhIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuICgwLCBfd2hlbjJbJ2RlZmF1bHQnXSkodG9rZW5EYXRhKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgIHZhciBzdHIgPSBTdHJpbmcoZGF0YSk7XG4gICAgICAgICAgcmV0dXJuIF93aGVuMlsnZGVmYXVsdCddLnJlamVjdChuZXcgRXJyb3IoJ1RoZXJlIHdhcyBhIHByb2JsZW0gYXV0aGVudGljYXRpbmc6XFxuJyArIHN0cikpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMuYWNjZXNzVG9rZW4gPSBkYXRhLmFjY2Vzc190b2tlbjtcbiAgICAgICAgX3RoaXMudG9rZW5UeXBlID0gZGF0YS50b2tlbl90eXBlO1xuXG4gICAgICAgIC8vIElmIHRoZSBleHBsaWNpdCBhcHAgdXNlZCBhIHBlcm1pbmFudCBkdXJhdGlvbiwgc2VuZFxuICAgICAgICAvLyBiYWNrIHRoZSByZWZyZXNoIHRva2VuIHRoYXQgd2lsbCBiZSB1c2VkIHRvIHJlLWF1dGhlbnRpY2F0ZVxuICAgICAgICAvLyBsYXRlciB3aXRob3V0IHVzZXIgaW50ZXJhY3Rpb24uXG4gICAgICAgIGlmIChkYXRhLnJlZnJlc2hfdG9rZW4pIHtcbiAgICAgICAgICAvLyBzZXQgdGhlIGludGVybmFsIHJlZnJlc2ggdG9rZW4gZm9yIGF1dG9tYXRpYyBleHBpcmluZ1xuICAgICAgICAgIC8vIGFjY2Vzc190b2tlbiBtYW5hZ2VtZW50XG4gICAgICAgICAgX3RoaXMucmVmcmVzaFRva2VuID0gZGF0YS5yZWZyZXNoX3Rva2VuO1xuICAgICAgICAgIHJldHVybiBfdGhpcy5yZWZyZXNoVG9rZW47XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qXG4gICAgICAgT25seSBhdXRoZW50aWNhdGVzIHdpdGggQXBwbGljYXRpb24gT25seSBPQXV0aFxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiAnYXBwbGljYXRpb25Pbmx5QXV0aCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGxpY2F0aW9uT25seUF1dGgoKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdXRoKHZvaWQgMCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLypcbiAgICAgICBBdXRoZW50aWNhdGUgd2l0aCBhIHJlZnJlc2ggdG9rZW4uXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6ICdyZWZyZXNoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVmcmVzaChyZWZyZXNoVG9rZW4pIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAvLyB1c2UgdGhlIHByb3ZpZGVkIHJlZnJlc2ggdG9rZW4sIG9yIHRoZSBjdXJyZW50XG4gICAgICAvLyBvbmUgdGhhdCB3ZSBoYXZlIGZvciB0aGlzIGNsYXNzXG4gICAgICByZWZyZXNoVG9rZW4gPSB1LnRoaXNPclRoYXQocmVmcmVzaFRva2VuLCB0aGlzLnJlZnJlc2hUb2tlbik7XG5cbiAgICAgIHJldHVybiB0aGlzLmdldFRva2VuKFRPS0VOLlJFRlJFU0gsIHtcbiAgICAgICAgcmVmcmVzaFRva2VuOiByZWZyZXNoVG9rZW5cbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgLy8gb25seSBzZXQgdGhlIGludGVybmFsIHJlZnJlc2ggdG9rZW4gaWYgcmVkZGl0XG4gICAgICAgIC8vIGFncmVlcyB0aGF0IGl0IHdhcyBPSyBhbmQgc2VuZHMgYmFjayBhdXRoRGF0YVxuICAgICAgICBfdGhpczIucmVmcmVzaFRva2VuID0gcmVmcmVzaFRva2VuO1xuXG4gICAgICAgIF90aGlzMi5hY2Nlc3NUb2tlbiA9IGRhdGEuYWNjZXNzX3Rva2VuO1xuICAgICAgICBfdGhpczIudG9rZW5UeXBlID0gZGF0YS50b2tlbl90eXBlO1xuXG4gICAgICAgIF90aGlzMi5lbWl0KCdhY2Nlc3NfdG9rZW5fcmVmcmVzaGVkJywgX3RoaXMyLmFjY2Vzc1Rva2VuKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qXG4gICAgICAgQ2xlYXJzIGFueSBhdXRoZW50aWNhdGlvbiBkYXRhICYgcmVtb3ZlcyBPQXV0aCBhdXRoZW50aWNhdGlvblxuICAgICAgICBCeSBkZWZhdWx0IGl0IHdpbGwgb25seSByZW1vdmUgdGhlIFwiYWNjZXNzX3Rva2VuXCIuIFNwZWNpZnlcbiAgICAgICB0aGUgdXNlcnMgcmVmcmVzaCB0b2tlbiB0byByZXZva2UgdGhhdCB0b2tlbiBpbnN0ZWFkLlxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiAnZGVhdXRoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVhdXRoKHJlZnJlc2hUb2tlbikge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIC8vIG5vIG5lZWQgdG8gZGVhdXRoIGlmIG5vdCBhdXRoZW50aWNhdGVkXG4gICAgICBpZiAoIXRoaXMuaGFzQWNjZXNzVG9rZW4oKSkge1xuICAgICAgICByZXR1cm4gX3doZW4yWydkZWZhdWx0J10ucmVzb2x2ZSgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgaXNSZWZyZXNoVG9rZW4gPSB0eXBlb2YgcmVmcmVzaFRva2VuID09PSAnc3RyaW5nJztcblxuICAgICAgdmFyIHRva2VuID0gaXNSZWZyZXNoVG9rZW4gPyByZWZyZXNoVG9rZW4gOiB0aGlzLmFjY2Vzc1Rva2VuO1xuXG4gICAgICB2YXIgdG9rZW5UeXBlSGludCA9IGlzUmVmcmVzaFRva2VuID8gJ3JlZnJlc2hfdG9rZW4nIDogJ2FjY2Vzc190b2tlbic7XG5cbiAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgIHRva2VuOiB0b2tlbixcbiAgICAgICAgdG9rZW5fdHlwZV9oaW50OiB0b2tlblR5cGVIaW50XG4gICAgICB9O1xuXG4gICAgICB2YXIgYXV0aCA9ICdCYXNpYyAnICsgbmV3IEJ1ZmZlcih0aGlzLl91c2VyQ29uZmlnLm9hdXRoLmtleSArICc6JyArIHRoaXMuX3VzZXJDb25maWcub2F1dGguc2VjcmV0KS50b1N0cmluZygnYmFzZTY0Jyk7XG5cbiAgICAgIHZhciBoZWFkZXJzID0ge1xuICAgICAgICAnQXV0aG9yaXphdGlvbic6IGF1dGhcbiAgICAgIH07XG5cbiAgICAgIHZhciBlbmRwb2ludCA9IG5ldyBfRW5kcG9pbnQyWydkZWZhdWx0J10odGhpcy5fdXNlckNvbmZpZywgdGhpcy5fdXNlckNvbmZpZy5zZXJ2ZXJXV1csICdwb3N0JywgJy9hcGkvdjEvcmV2b2tlX3Rva2VuJywgaGVhZGVycywgcGFyYW1zLCB7fSwgdGhpcy5fdXNlckNvbmZpZy5zZXJ2ZXJXV1dQb3J0KTtcblxuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QuaHR0cHMoZW5kcG9pbnQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIC8vIElmIHdlIGRpZCBub3QgZ2V0IGJhY2sgYSAyMDQgdGhpcyB0aGVuIGl0IGRpZCBub3Qgc3VjZXNzZnVsbHlcbiAgICAgICAgLy8gcmV2b2tlIHRoZSB0b2tlblxuICAgICAgICBpZiAocmVzcG9uc2UuX3N0YXR1cyAhPT0gMjA0KSB7XG4gICAgICAgICAgcmV0dXJuIF93aGVuMlsnZGVmYXVsdCddLnJlamVjdChuZXcgRXJyb3IoJ1VuYWJsZSB0byByZXZva2UgdGhlIGdpdmVuIHRva2VuJykpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2xlYXIgdGhlIGRhdGEgZm9yIHRoaXMgT0F1dGggb2JqZWN0XG4gICAgICAgIF90aGlzMy5hY2Nlc3NUb2tlbiA9IFRPS0VOLklOVkFMSUQ7XG4gICAgICAgIF90aGlzMy50b2tlblR5cGUgPSBUT0tFTi5JTlZBTElEO1xuXG4gICAgICAgIC8vIG9ubHkgY2xlYXIgdGhlIHJlZnJlc2ggdG9rZW4gaWYgb25lIHdhcyBwcm92aWRlZFxuICAgICAgICBpZiAoaXNSZWZyZXNoVG9rZW4pIHtcbiAgICAgICAgICBfdGhpczMucmVmcmVzaFRva2VuID0gVE9LRU4uSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE9BdXRoO1xufSkoX2V2ZW50czJbJ2RlZmF1bHQnXS5FdmVudEVtaXR0ZXIpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBPQXV0aDtcblxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbUoxYVd4a0wzTnlZeTlQUVhWMGFDNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWlkMWMyVWdjM1J5YVdOMEp6dGNibHh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lDZGZYMlZ6VFc5a2RXeGxKeXdnZTF4dUlDQjJZV3gxWlRvZ2RISjFaVnh1ZlNrN1hHNWNiblpoY2lCZlkzSmxZWFJsUTJ4aGMzTWdQU0FvWm5WdVkzUnBiMjRnS0NrZ2V5Qm1kVzVqZEdsdmJpQmtaV1pwYm1WUWNtOXdaWEowYVdWektIUmhjbWRsZEN3Z2NISnZjSE1wSUhzZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQndjbTl3Y3k1c1pXNW5kR2c3SUdrckt5a2dleUIyWVhJZ1pHVnpZM0pwY0hSdmNpQTlJSEJ5YjNCelcybGRPeUJrWlhOamNtbHdkRzl5TG1WdWRXMWxjbUZpYkdVZ1BTQmtaWE5qY21sd2RHOXlMbVZ1ZFcxbGNtRmliR1VnZkh3Z1ptRnNjMlU3SUdSbGMyTnlhWEIwYjNJdVkyOXVabWxuZFhKaFlteGxJRDBnZEhKMVpUc2dhV1lnS0NkMllXeDFaU2NnYVc0Z1pHVnpZM0pwY0hSdmNpa2daR1Z6WTNKcGNIUnZjaTUzY21sMFlXSnNaU0E5SUhSeWRXVTdJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNoMFlYSm5aWFFzSUdSbGMyTnlhWEIwYjNJdWEyVjVMQ0JrWlhOamNtbHdkRzl5S1RzZ2ZTQjlJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQW9RMjl1YzNSeWRXTjBiM0lzSUhCeWIzUnZVSEp2Y0hNc0lITjBZWFJwWTFCeWIzQnpLU0I3SUdsbUlDaHdjbTkwYjFCeWIzQnpLU0JrWldacGJtVlFjbTl3WlhKMGFXVnpLRU52Ym5OMGNuVmpkRzl5TG5CeWIzUnZkSGx3WlN3Z2NISnZkRzlRY205d2N5azdJR2xtSUNoemRHRjBhV05RY205d2N5a2daR1ZtYVc1bFVISnZjR1Z5ZEdsbGN5aERiMjV6ZEhKMVkzUnZjaXdnYzNSaGRHbGpVSEp2Y0hNcE95QnlaWFIxY200Z1EyOXVjM1J5ZFdOMGIzSTdJSDA3SUgwcEtDazdYRzVjYm5aaGNpQmZaMlYwSUQwZ1puVnVZM1JwYjI0Z1oyVjBLRjk0TWl3Z1gzZ3pMQ0JmZURRcElIc2dkbUZ5SUY5aFoyRnBiaUE5SUhSeWRXVTdJRjltZFc1amRHbHZiam9nZDJocGJHVWdLRjloWjJGcGJpa2dleUIyWVhJZ2IySnFaV04wSUQwZ1gzZ3lMQ0J3Y205d1pYSjBlU0E5SUY5NE15d2djbVZqWldsMlpYSWdQU0JmZURRN0lGOWhaMkZwYmlBOUlHWmhiSE5sT3lCcFppQW9iMkpxWldOMElEMDlQU0J1ZFd4c0tTQnZZbXBsWTNRZ1BTQkdkVzVqZEdsdmJpNXdjbTkwYjNSNWNHVTdJSFpoY2lCa1pYTmpJRDBnVDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVJHVnpZM0pwY0hSdmNpaHZZbXBsWTNRc0lIQnliM0JsY25SNUtUc2dhV1lnS0dSbGMyTWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2V5QjJZWElnY0dGeVpXNTBJRDBnVDJKcVpXTjBMbWRsZEZCeWIzUnZkSGx3WlU5bUtHOWlhbVZqZENrN0lHbG1JQ2h3WVhKbGJuUWdQVDA5SUc1MWJHd3BJSHNnY21WMGRYSnVJSFZ1WkdWbWFXNWxaRHNnZlNCbGJITmxJSHNnWDNneUlEMGdjR0Z5Wlc1ME95QmZlRE1nUFNCd2NtOXdaWEowZVRzZ1gzZzBJRDBnY21WalpXbDJaWEk3SUY5aFoyRnBiaUE5SUhSeWRXVTdJR1JsYzJNZ1BTQndZWEpsYm5RZ1BTQjFibVJsWm1sdVpXUTdJR052Ym5ScGJuVmxJRjltZFc1amRHbHZianNnZlNCOUlHVnNjMlVnYVdZZ0tDZDJZV3gxWlNjZ2FXNGdaR1Z6WXlrZ2V5QnlaWFIxY200Z1pHVnpZeTUyWVd4MVpUc2dmU0JsYkhObElIc2dkbUZ5SUdkbGRIUmxjaUE5SUdSbGMyTXVaMlYwT3lCcFppQW9aMlYwZEdWeUlEMDlQU0IxYm1SbFptbHVaV1FwSUhzZ2NtVjBkWEp1SUhWdVpHVm1hVzVsWkRzZ2ZTQnlaWFIxY200Z1oyVjBkR1Z5TG1OaGJHd29jbVZqWldsMlpYSXBPeUI5SUgwZ2ZUdGNibHh1Wm5WdVkzUnBiMjRnWDJsdWRHVnliM0JTWlhGMWFYSmxWMmxzWkdOaGNtUW9iMkpxS1NCN0lHbG1JQ2h2WW1vZ0ppWWdiMkpxTGw5ZlpYTk5iMlIxYkdVcElIc2djbVYwZFhKdUlHOWlhanNnZlNCbGJITmxJSHNnZG1GeUlHNWxkMDlpYWlBOUlIdDlPeUJwWmlBb2IySnFJQ0U5SUc1MWJHd3BJSHNnWm05eUlDaDJZWElnYTJWNUlHbHVJRzlpYWlrZ2V5QnBaaUFvVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVvWVhOUGQyNVFjbTl3WlhKMGVTNWpZV3hzS0c5aWFpd2dhMlY1S1NrZ2JtVjNUMkpxVzJ0bGVWMGdQU0J2WW1wYmEyVjVYVHNnZlNCOUlHNWxkMDlpYWxzblpHVm1ZWFZzZENkZElEMGdiMkpxT3lCeVpYUjFjbTRnYm1WM1QySnFPeUI5SUgxY2JseHVablZ1WTNScGIyNGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENodlltb3BJSHNnY21WMGRYSnVJRzlpYWlBbUppQnZZbW91WDE5bGMwMXZaSFZzWlNBL0lHOWlhaUE2SUhzZ0oyUmxabUYxYkhRbk9pQnZZbW9nZlRzZ2ZWeHVYRzVtZFc1amRHbHZiaUJmWTJ4aGMzTkRZV3hzUTJobFkyc29hVzV6ZEdGdVkyVXNJRU52Ym5OMGNuVmpkRzl5S1NCN0lHbG1JQ2doS0dsdWMzUmhibU5sSUdsdWMzUmhibU5sYjJZZ1EyOXVjM1J5ZFdOMGIzSXBLU0I3SUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0owTmhibTV2ZENCallXeHNJR0VnWTJ4aGMzTWdZWE1nWVNCbWRXNWpkR2x2YmljcE95QjlJSDFjYmx4dVpuVnVZM1JwYjI0Z1gybHVhR1Z5YVhSektITjFZa05zWVhOekxDQnpkWEJsY2tOc1lYTnpLU0I3SUdsbUlDaDBlWEJsYjJZZ2MzVndaWEpEYkdGemN5QWhQVDBnSjJaMWJtTjBhVzl1SnlBbUppQnpkWEJsY2tOc1lYTnpJQ0U5UFNCdWRXeHNLU0I3SUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0oxTjFjR1Z5SUdWNGNISmxjM05wYjI0Z2JYVnpkQ0JsYVhSb1pYSWdZbVVnYm5Wc2JDQnZjaUJoSUdaMWJtTjBhVzl1TENCdWIzUWdKeUFySUhSNWNHVnZaaUJ6ZFhCbGNrTnNZWE56S1RzZ2ZTQnpkV0pEYkdGemN5NXdjbTkwYjNSNWNHVWdQU0JQWW1wbFkzUXVZM0psWVhSbEtITjFjR1Z5UTJ4aGMzTWdKaVlnYzNWd1pYSkRiR0Z6Y3k1d2NtOTBiM1I1Y0dVc0lIc2dZMjl1YzNSeWRXTjBiM0k2SUhzZ2RtRnNkV1U2SUhOMVlrTnNZWE56TENCbGJuVnRaWEpoWW14bE9pQm1ZV3h6WlN3Z2QzSnBkR0ZpYkdVNklIUnlkV1VzSUdOdmJtWnBaM1Z5WVdKc1pUb2dkSEoxWlNCOUlIMHBPeUJwWmlBb2MzVndaWEpEYkdGemN5a2dUMkpxWldOMExuTmxkRkJ5YjNSdmRIbHdaVTltSUQ4Z1QySnFaV04wTG5ObGRGQnliM1J2ZEhsd1pVOW1LSE4xWWtOc1lYTnpMQ0J6ZFhCbGNrTnNZWE56S1NBNklITjFZa05zWVhOekxsOWZjSEp2ZEc5Zlh5QTlJSE4xY0dWeVEyeGhjM003SUgxY2JseHVkbUZ5SUY5bGRtVnVkSE1nUFNCeVpYRjFhWEpsS0NkbGRtVnVkSE1uS1R0Y2JseHVkbUZ5SUY5bGRtVnVkSE15SUQwZ1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2hmWlhabGJuUnpLVHRjYmx4dWRtRnlJRjl4ZFdWeWVYTjBjbWx1WnlBOUlISmxjWFZwY21Vb0ozRjFaWEo1YzNSeWFXNW5KeWs3WEc1Y2JuWmhjaUJmY1hWbGNubHpkSEpwYm1jeUlEMGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENoZmNYVmxjbmx6ZEhKcGJtY3BPMXh1WEc1MllYSWdYM1YwYVd3Z1BTQnlaWEYxYVhKbEtDZDFkR2xzSnlrN1hHNWNiblpoY2lCZmRYUnBiRElnUFNCZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBLRjkxZEdsc0tUdGNibHh1ZG1GeUlGOTFjbXdnUFNCeVpYRjFhWEpsS0NkMWNtd25LVHRjYmx4dWRtRnlJRjkxY213eUlEMGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENoZmRYSnNLVHRjYmx4dWRtRnlJRjkzYUdWdUlEMGdjbVZ4ZFdseVpTZ25kMmhsYmljcE8xeHVYRzUyWVhJZ1gzZG9aVzR5SUQwZ1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2hmZDJobGJpazdYRzVjYm5aaGNpQmZkWFJwYkhNZ1BTQnlaWEYxYVhKbEtDY3VMM1YwYVd4ekp5azdYRzVjYm5aaGNpQjFJRDBnWDJsdWRHVnliM0JTWlhGMWFYSmxWMmxzWkdOaGNtUW9YM1YwYVd4ektUdGNibHh1ZG1GeUlGOUZibVJ3YjJsdWRDQTlJSEpsY1hWcGNtVW9KeTR2Ulc1a2NHOXBiblFuS1R0Y2JseHVkbUZ5SUY5RmJtUndiMmx1ZERJZ1BTQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwS0Y5RmJtUndiMmx1ZENrN1hHNWNiblpoY2lCZlVtVnpjRzl1YzJWRmNuSnZjaUE5SUhKbGNYVnBjbVVvSnk0dlVtVnpjRzl1YzJWRmNuSnZjaWNwTzF4dVhHNTJZWElnWDFKbGMzQnZibk5sUlhKeWIzSXlJRDBnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDaGZVbVZ6Y0c5dWMyVkZjbkp2Y2lrN1hHNWNiaThxWEc0Z0lDQldZWEpwYjNWeklFOUJkWFJvSUhSNWNHVnpYRzRnS2k5Y2JuWmhjaUJVVDB0RlRpQTlJSHRjYmlBZ1JWaFFURWxEU1ZRNklDZGxlSEJzYVdOcGRDY3NYRzRnSUVsTlVFeEpRMGxVT2lBbmFXMXdiR2xqYVhRbkxGeHVJQ0JUUTFKSlVGUTZJQ2R6WTNKcGNIUW5MRnh1SUNCQlVGQmZUMDVNV1RvZ0oyRndjRjl2Ym14NUp5eGNiaUFnVWtWR1VrVlRTRG9nSjNKbFpuSmxjMmduTEZ4dUlDQkpUbFpCVEVsRU9pQW5hVzUyWVd4cFpGOTBiMnRsYmljZ0x5OGdVbVZ3Y21WelpXNTBjeUJoYmlCMWJuTmxkQzlwYm5aaGJHbGtJSFJ2YTJWdVhHNTlPMXh1WEc1bGVIQnZjblJ6TGxSUFMwVk9JRDBnVkU5TFJVNDdYRzR2S2x4dUlDQWdVbVZ3Y21WelpXNTBjeUJoSUhOcGJtZHNaU0JQUVhWMGFDQnBibk4wWVc1alpTNGdWWE5sWkNCd2NtbHRZWEpwYkhrZ1ptOXlJR2x1ZEdWeWJtRnNYRzRnSUNCMWMyVWdkMmwwYUdsdUlIUm9aU0JUYm05dlkyOXlaU0JqYkdGemN5QjBieUJ0WVc1aFoyVWdkSGR2SUU5QmRYUm9JR2x1YzNSaGJtTmxjeUF0WEc0Z0lDQkJjSEJzYVdOaGRHOXVJRTl1YkhrZ1lXNWtJR0Z1SUVGMWRHaGxiblJwWTJGMFpXUWdVMlZ6YzJsdmJpNWNibHh1SUNvdlhHNWNiblpoY2lCUFFYVjBhQ0E5SUNobWRXNWpkR2x2YmlBb1gyVjJaVzUwY3lSRmRtVnVkRVZ0YVhSMFpYSXBJSHRjYmlBZ1gybHVhR1Z5YVhSektFOUJkWFJvTENCZlpYWmxiblJ6SkVWMlpXNTBSVzFwZEhSbGNpazdYRzVjYmlBZ1puVnVZM1JwYjI0Z1QwRjFkR2dvZFhObGNrTnZibVpwWnl3Z2NtVnhkV1Z6ZENrZ2UxeHVJQ0FnSUY5amJHRnpjME5oYkd4RGFHVmpheWgwYUdsekxDQlBRWFYwYUNrN1hHNWNiaUFnSUNCZloyVjBLRTlpYW1WamRDNW5aWFJRY205MGIzUjVjR1ZQWmloUFFYVjBhQzV3Y205MGIzUjVjR1VwTENBblkyOXVjM1J5ZFdOMGIzSW5MQ0IwYUdsektTNWpZV3hzS0hSb2FYTXBPMXh1WEc0Z0lDQWdkR2hwY3k1ZmRYTmxja052Ym1acFp5QTlJSFZ6WlhKRGIyNW1hV2M3WEc1Y2JpQWdJQ0IwYUdsekxsOXlaWEYxWlhOMElEMGdjbVZ4ZFdWemREdGNibHh1SUNBZ0lIUm9hWE11WVdOalpYTnpWRzlyWlc0Z1BTQlVUMHRGVGk1SlRsWkJURWxFTzF4dUlDQWdJSFJvYVhNdWNtVm1jbVZ6YUZSdmEyVnVJRDBnVkU5TFJVNHVTVTVXUVV4SlJEdGNiaUFnSUNCMGFHbHpMblJ2YTJWdVZIbHdaU0E5SUNkaVpXRnlaWEluTzF4dVhHNGdJQ0FnZEdocGN5NXpZMjl3WlNBOUlIUm9hWE11Ym05eWJXRnNhWHBsVTJOdmNHVW9LVHRjYmlBZ2ZWeHVYRzRnSUM4cVhHNGdJQ0FnSUZSaGEyVnpJR0VnWjJsMlpXNGdjMk52Y0dVc0lHRnVaQ0J1YjNKdFlXeHBlbVZ6SUdsMElIUnZJR0VnY0hKdmNHVnlJSE4wY21sdVp5NWNiaUFnSUNvdlhHNWNiaUFnWDJOeVpXRjBaVU5zWVhOektFOUJkWFJvTENCYmUxeHVJQ0FnSUd0bGVUb2dKMjV2Y20xaGJHbDZaVk5qYjNCbEp5eGNiaUFnSUNCMllXeDFaVG9nWm5WdVkzUnBiMjRnYm05eWJXRnNhWHBsVTJOdmNHVW9LU0I3WEc0Z0lDQWdJQ0IyWVhJZ2MyTnZjR1VnUFNCMWJtUmxabWx1WldRN1hHNGdJQ0FnSUNBdkx5QlRaWFFnZEc4Z1pXMXdkSGtnYzNSeWFXNW5JR2xtSUhSb1pTQnpZMjl3WlNCcFppQnViM1FnYzJWMFhHNGdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlIUm9hWE11WDNWelpYSkRiMjVtYVdjdWIyRjFkR2d1YzJOdmNHVWdQVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0lDQWdJSE5qYjNCbElEMGdKeWM3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0F2THlCamIyNTJaWEowSUdGdUlHRnljbUY1SUdsdWRHOGdZU0J6ZEhKcGJtZGNiaUFnSUNBZ0lHVnNjMlVnYVdZZ0tGOTFkR2xzTWxzblpHVm1ZWFZzZENkZExtbHpRWEp5WVhrb2RHaHBjeTVmZFhObGNrTnZibVpwWnk1dllYVjBhQzV6WTI5d1pTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNCelkyOXdaU0E5SUhSb2FYTXVYM1Z6WlhKRGIyNW1hV2N1YjJGMWRHZ3VjMk52Y0dVdWFtOXBiaWduTENjcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQnlaWFIxY200Z2MyTnZjR1U3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeXBjYmlBZ0lDQWdJQ0JFYnlCM1pTQm9ZWFpsSUdFZ2NtVm1jbVZ6YUNCMGIydGxiaUJrWldacGJtVmtQMXh1SUNBZ0lDQXFMMXh1SUNCOUxDQjdYRzRnSUNBZ2EyVjVPaUFuYUdGelVtVm1jbVZ6YUZSdmEyVnVKeXhjYmlBZ0lDQjJZV3gxWlRvZ1puVnVZM1JwYjI0Z2FHRnpVbVZtY21WemFGUnZhMlZ1S0NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjbVZtY21WemFGUnZhMlZ1SUNFOVBTQlVUMHRGVGk1SlRsWkJURWxFTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxWEc0Z0lDQWdJQ0FnUkc4Z2QyVWdhR0YyWlNCaGJpQmhZMk5sYzNNZ2RHOXJaVzRnWkdWbWFXNWxaRDljYmlBZ0lDQWdLaTljYmlBZ2ZTd2dlMXh1SUNBZ0lHdGxlVG9nSjJoaGMwRmpZMlZ6YzFSdmEyVnVKeXhjYmlBZ0lDQjJZV3gxWlRvZ1puVnVZM1JwYjI0Z2FHRnpRV05qWlhOelZHOXJaVzRvS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWhZMk5sYzNOVWIydGxiaUFoUFQwZ1ZFOUxSVTR1U1U1V1FVeEpSRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLbHh1SUNBZ0lDQWdJRWRsZENCMGFHVWdZM1Z5Y21WdWRDQnlaV1p5WlhOb0lIUnZhMlZ1SUhWelpXUWdabTl5SUhSb2FYTWdhVzV6ZEdGdVkyVXVYRzRnSUNBZ0lDb3ZYRzRnSUgwc0lIdGNiaUFnSUNCclpYazZJQ2RuWlhSU1pXWnlaWE5vVkc5clpXNG5MRnh1SUNBZ0lIWmhiSFZsT2lCbWRXNWpkR2x2YmlCblpYUlNaV1p5WlhOb1ZHOXJaVzRvS1NCN1hHNGdJQ0FnSUNCcFppQW9kR2hwY3k1eVpXWnlaWE5vVkc5clpXNGdQVDA5SUZSUFMwVk9Ma2xPVmtGTVNVUXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5KbFpuSmxjMmhVYjJ0bGJqdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktseHVJQ0FnSUNBZ0lFZGxkQ0IwYUdVZ1kzVnljbVZ1ZENCaFkyTmxjM01nZEc5clpXNGdkWE5sWkNCbWIzSWdkR2hwY3lCcGJuTjBZVzVqWlM1Y2JpQWdJQ0FnS2k5Y2JpQWdmU3dnZTF4dUlDQWdJR3RsZVRvZ0oyZGxkRUZqWTJWemMxUnZhMlZ1Snl4Y2JpQWdJQ0IyWVd4MVpUb2dablZ1WTNScGIyNGdaMlYwUVdOalpYTnpWRzlyWlc0b0tTQjdYRzRnSUNBZ0lDQnBaaUFvZEdocGN5NWhZMk5sYzNOVWIydGxiaUE5UFQwZ1ZFOUxSVTR1U1U1V1FVeEpSQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZFc1a1pXWnBibVZrTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVlXTmpaWE56Vkc5clpXNDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5cGNiaUFnSUNBZ0lDQlRaWFFnZEdobElHTjFjbkpsYm5RZ2NtVm1jbVZ6YUNCMGIydGxiaUIxYzJWa0lHWnZjaUIwYUdseklHbHVjM1JoYm1ObExseHVJQ0FnSUNBcUwxeHVJQ0I5TENCN1hHNGdJQ0FnYTJWNU9pQW5jMlYwVW1WbWNtVnphRlJ2YTJWdUp5eGNiaUFnSUNCMllXeDFaVG9nWm5WdVkzUnBiMjRnYzJWMFVtVm1jbVZ6YUZSdmEyVnVLSEpsWm5KbGMyaFViMnRsYmlrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTV5WldaeVpYTm9WRzlyWlc0Z1BTQnlaV1p5WlhOb1ZHOXJaVzQ3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeXBjYmlBZ0lDQWdJQ0JUWlhRZ2RHaGxJR04xY25KbGJuUWdZV05qWlhOeklIUnZhMlZ1SUhWelpXUWdabTl5SUhSb2FYTWdhVzV6ZEdGdVkyVXVYRzRnSUNBZ0lDb3ZYRzRnSUgwc0lIdGNiaUFnSUNCclpYazZJQ2R6WlhSQlkyTmxjM05VYjJ0bGJpY3NYRzRnSUNBZ2RtRnNkV1U2SUdaMWJtTjBhVzl1SUhObGRFRmpZMlZ6YzFSdmEyVnVLR0ZqWTJWemMxUnZhMlZ1S1NCN1hHNGdJQ0FnSUNCMGFHbHpMbUZqWTJWemMxUnZhMlZ1SUQwZ1lXTmpaWE56Vkc5clpXNDdYRzRnSUNBZ2ZWeHVJQ0I5TENCN1hHNGdJQ0FnYTJWNU9pQW5aMlYwUVhWMGFHOXlhWHBoZEdsdmJraGxZV1JsY2ljc1hHNGdJQ0FnZG1Gc2RXVTZJR1oxYm1OMGFXOXVJR2RsZEVGMWRHaHZjbWw2WVhScGIyNUlaV0ZrWlhJb0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTUwYjJ0bGJsUjVjR1VnS3lBbklDY2dLeUIwYUdsekxtRmpZMlZ6YzFSdmEyVnVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFYRzRnSUNBZ0lDQWdRMkZ1SUhkbElISmxabkpsYzJnZ2IzVnlJR0ZqWTJWemN5QjBiMnRsYmlCM2FYUm9iM1YwSUhWelpYSWdhVzUwWlhKMlpXNTBhVzl1UDF4dUlDQWdJQ0FxTDF4dUlDQjlMQ0I3WEc0Z0lDQWdhMlY1T2lBblkyRnVVbVZtY21WemFFRmpZMlZ6YzFSdmEyVnVKeXhjYmlBZ0lDQjJZV3gxWlRvZ1puVnVZM1JwYjI0Z1kyRnVVbVZtY21WemFFRmpZMlZ6YzFSdmEyVnVLQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzVnpaWEpEYjI1bWFXY3ViMkYxZEdndWRIbHdaU0E5UFQwZ0ozTmpjbWx3ZENjZ2ZId2dkR2hwY3k1ZmRYTmxja052Ym1acFp5NXZZWFYwYUM1MGVYQmxJRDA5UFNBblpYaHdiR2xqYVhRbklDWW1JSFJvYVhNdVgzVnpaWEpEYjI1bWFXY3ViMkYxZEdndVpIVnlZWFJwYjI0Z1BUMDlJQ2R3WlhKdFlXNWxiblFuSUNZbUlIUm9hWE11YUdGelVtVm1jbVZ6YUZSdmEyVnVLQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeXBjYmlBZ0lDQWdJQ0JIWlhRZ2RHaGxJRVY0Y0d4cFkybDBJRUYxZEdnZ1ZYSnNMbHh1SUNBZ0lDQXFMMXh1SUNCOUxDQjdYRzRnSUNBZ2EyVjVPaUFuWjJWMFJYaHdiR2xqYVhSQmRYUm9WWEpzSnl4Y2JpQWdJQ0IyWVd4MVpUb2dablZ1WTNScGIyNGdaMlYwUlhod2JHbGphWFJCZFhSb1ZYSnNLSE4wWVhSbEtTQjdYRzVjYmlBZ0lDQWdJSFpoY2lCeGRXVnllU0E5SUh0OU8xeHVYRzRnSUNBZ0lDQnhkV1Z5ZVM1amJHbGxiblJmYVdRZ1BTQjBhR2x6TGw5MWMyVnlRMjl1Wm1sbkxtOWhkWFJvTG10bGVUdGNiaUFnSUNBZ0lIRjFaWEo1TG5OMFlYUmxJRDBnZFM1MGFHbHpUM0pVYUdGMEtITjBZWFJsTENCTllYUm9MbU5sYVd3b1RXRjBhQzV5WVc1a2IyMG9LU0FxSURFd01EQXBLVHRjYmlBZ0lDQWdJSEYxWlhKNUxuSmxaR2x5WldOMFgzVnlhU0E5SUhSb2FYTXVYM1Z6WlhKRGIyNW1hV2N1YjJGMWRHZ3VjbVZrYVhKbFkzUlZjbWs3WEc0Z0lDQWdJQ0J4ZFdWeWVTNWtkWEpoZEdsdmJpQTlJSFJvYVhNdVgzVnpaWEpEYjI1bWFXY3ViMkYxZEdndVpIVnlZWFJwYjI0N1hHNGdJQ0FnSUNCeGRXVnllUzV5WlhOd2IyNXpaVjkwZVhCbElEMGdKMk52WkdVbk8xeHVJQ0FnSUNBZ2NYVmxjbmt1YzJOdmNHVWdQU0IwYUdsekxuTmpiM0JsTzF4dVhHNGdJQ0FnSUNCMllYSWdZbUZ6WlZWeWJDQTlJQ2RvZEhSd2N6b3ZMeWNnS3lCMGFHbHpMbDkxYzJWeVEyOXVabWxuTG5ObGNuWmxjbGRYVnlBcklDY3ZZWEJwTDNZeEwyRjFkR2h2Y21sNlpTYzdYRzVjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbDkxYzJWeVEyOXVabWxuTG0xdlltbHNaU2tnZTF4dUlDQWdJQ0FnSUNCaVlYTmxWWEpzSUNzOUlDY3VZMjl0Y0dGamRDYzdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQmlZWE5sVlhKc0lDc2dKejhuSUNzZ1gzRjFaWEo1YzNSeWFXNW5NbHNuWkdWbVlYVnNkQ2RkTG5OMGNtbHVaMmxtZVNoeGRXVnllU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeXBjYmlBZ0lDQWdJQ0JIWlhRZ2RHaGxJRWx0Y0d4cFkybDBJRUYxZEdnZ1ZYSnNMbHh1SUNBZ0lDQXFMMXh1SUNCOUxDQjdYRzRnSUNBZ2EyVjVPaUFuWjJWMFNXMXdiR2xqYVhSQmRYUm9WWEpzSnl4Y2JpQWdJQ0IyWVd4MVpUb2dablZ1WTNScGIyNGdaMlYwU1cxd2JHbGphWFJCZFhSb1ZYSnNLSE4wWVhSbEtTQjdYRzVjYmlBZ0lDQWdJSFpoY2lCeGRXVnllU0E5SUh0OU8xeHVYRzRnSUNBZ0lDQnhkV1Z5ZVM1amJHbGxiblJmYVdRZ1BTQjBhR2x6TGw5MWMyVnlRMjl1Wm1sbkxtOWhkWFJvTG10bGVUdGNiaUFnSUNBZ0lIRjFaWEo1TG5OMFlYUmxJRDBnZFM1MGFHbHpUM0pVYUdGMEtITjBZWFJsTENCTllYUm9MbU5sYVd3b1RXRjBhQzV5WVc1a2IyMG9LU0FxSURFd01EQXBLVHRjYmlBZ0lDQWdJSEYxWlhKNUxuSmxaR2x5WldOMFgzVnlhU0E5SUhSb2FYTXVYM1Z6WlhKRGIyNW1hV2N1YjJGMWRHZ3VjbVZrYVhKbFkzUlZjbWs3WEc0Z0lDQWdJQ0J4ZFdWeWVTNXlaWE53YjI1elpWOTBlWEJsSUQwZ0ozUnZhMlZ1Snp0Y2JpQWdJQ0FnSUhGMVpYSjVMbk5qYjNCbElEMGdkR2hwY3k1elkyOXdaVHRjYmx4dUlDQWdJQ0FnZG1GeUlHSmhjMlZWY213Z1BTQW5hSFIwY0hNNkx5OG5JQ3NnZEdocGN5NWZkWE5sY2tOdmJtWnBaeTV6WlhKMlpYSlhWMWNnS3lBbkwyRndhUzkyTVM5aGRYUm9iM0pwZW1Vbk8xeHVYRzRnSUNBZ0lDQnBaaUFvZEdocGN5NWZkWE5sY2tOdmJtWnBaeTV0YjJKcGJHVXBJSHRjYmlBZ0lDQWdJQ0FnWW1GelpWVnliQ0FyUFNBbkxtTnZiWEJoWTNRbk8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnlaWFIxY200Z1ltRnpaVlZ5YkNBcklDYy9KeUFySUY5eGRXVnllWE4wY21sdVp6SmJKMlJsWm1GMWJIUW5YUzV6ZEhKcGJtZHBabmtvY1hWbGNua3BPMXh1SUNBZ0lIMWNiaUFnZlN3Z2UxeHVJQ0FnSUd0bGVUb2dKMmRsZEVGMWRHaFZjbXduTEZ4dUlDQWdJSFpoYkhWbE9pQm1kVzVqZEdsdmJpQm5aWFJCZFhSb1ZYSnNLSE4wWVhSbEtTQjdYRzRnSUNBZ0lDQnpkMmwwWTJnZ0tIUm9hWE11WDNWelpYSkRiMjVtYVdjdWIyRjFkR2d1ZEhsd1pTa2dlMXh1SUNBZ0lDQWdJQ0JqWVhObElGUlBTMFZPTGtWWVVFeEpRMGxVT2x4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbWRsZEVWNGNHeHBZMmwwUVhWMGFGVnliQ2h6ZEdGMFpTazdYRzRnSUNBZ0lDQWdJR05oYzJVZ1ZFOUxSVTR1U1UxUVRFbERTVlE2WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVaMlYwU1cxd2JHbGphWFJCZFhSb1ZYSnNLSE4wWVhSbEtUdGNiaUFnSUNBZ0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMVJvWlNCdllYVjBhQ0IwZVhCbElHOW1JQ2NnS3lCdllYVjBhRlI1Y0dVZ0t5QW5JR1J2WlhNZ2JtOTBJSEpsY1hWcGNtVWdZVzRnZFhKc0p5azdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5cGNiaUFnSUNBZ0lDQlNaWFIxY201eklIUm9aU0JrWVhSaElHNWxaV1JsWkNCMGJ5QnlaWEYxWlhOMElHRnVJRUZ3Y0d4cFkyRjBiMjRnVDI1c2VWeHVJQ0FnSUNBZ0lFOUJkWFJvSUdGalkyVnpjeUIwYjJ0bGJpNWNiaUFnSUNBZ0tpOWNiaUFnZlN3Z2UxeHVJQ0FnSUd0bGVUb2dKMmRsZEVGd2NFOXViSGxVYjJ0bGJrUmhkR0VuTEZ4dUlDQWdJSFpoYkhWbE9pQm1kVzVqZEdsdmJpQm5aWFJCY0hCUGJteDVWRzlyWlc1RVlYUmhLQ2tnZTF4dUlDQWdJQ0FnZG1GeUlIQmhjbUZ0Y3lBOUlIdDlPMXh1WEc0Z0lDQWdJQ0J3WVhKaGJYTXVjMk52Y0dVZ1BTQjBhR2x6TG5OamIzQmxPMXh1WEc0Z0lDQWdJQ0F2THlCR2NtOXRJSFJvWlNCeVpXUmthWFFnWkc5amRXMWxiblJoZEdsdmJqcGNiaUFnSUNBZ0lDOHZYRzRnSUNBZ0lDQXZMeUF0SUMwZ0xWeHVJQ0FnSUNBZ0x5OGdYQ0pqYkdsbGJuUmZZM0psWkdWdWRHbGhiSE5jSWx4dUlDQWdJQ0FnTHk5Y2JpQWdJQ0FnSUM4dklFTnZibVpwWkdWdWRHbGhiQ0JqYkdsbGJuUnpJQ2gzWldJZ1lYQndjeUF2SUhOamNtbHdkSE1wSUc1dmRDQmhZM1JwYm1jZ2IyNWNiaUFnSUNBZ0lDOHZJR0psYUdGc1ppQnZaaUJ2Ym1VZ2IzSWdiVzl5WlNCc2IyZG5aV1FnYjNWMElIVnpaWEp6TGx4dUlDQWdJQ0FnTHk5Y2JpQWdJQ0FnSUM4dklDMGdMU0F0WEc0Z0lDQWdJQ0F2THlCY0ltaDBkSEJ6T2k4dmIyRjFkR2d1Y21Wa1pHbDBMbU52YlM5bmNtRnVkSE12YVc1emRHRnNiR1ZrWDJOc2FXVnVkRndpWEc0Z0lDQWdJQ0F2TDF4dUlDQWdJQ0FnTHk4Z0tpQkpibk4wWVd4c1pXUWdZWEJ3SUhSNWNHVnpJQ2hoY3lCMGFHVnpaU0JoY0hCeklHRnlaU0JqYjI1emFXUmxjbVZrWEc0Z0lDQWdJQ0F2THlCY0ltNXZiaTFqYjI1bWFXUmxiblJwWVd4Y0lpd2dhR0YyWlNCdWJ5QnpaV055WlhRc0lHRnVaQ0IwYUhWekxDQmhjbVZjYmlBZ0lDQWdJQzh2SUdsdVpXeHBaMmxpYkdVZ1ptOXlJR05zYVdWdWRGOWpjbVZrWlc1MGFXRnNjeUJuY21GdWRDNWNiaUFnSUNBZ0lDOHZYRzRnSUNBZ0lDQXZMeUFxSUU5MGFHVnlJR0Z3Y0hNZ1lXTjBhVzVuSUc5dUlHSmxhR0ZzWmlCdlppQnZibVVnYjNJZ2JXOXlaU0JjSW14dloyZGxaQ0J2ZFhSY0lpQjFjMlZ5Y3k1Y2JpQWdJQ0FnSUM4dlhHNGdJQ0FnSUNCemQybDBZMmdnS0hSb2FYTXVYM1Z6WlhKRGIyNW1hV2N1YjJGMWRHZ3VkSGx3WlNrZ2UxeHVJQ0FnSUNBZ0lDQmpZWE5sSUZSUFMwVk9MbE5EVWtsUVZEcGNiaUFnSUNBZ0lDQWdZMkZ6WlNCVVQwdEZUaTVGV0ZCTVNVTkpWRHBjYmlBZ0lDQWdJQ0FnSUNCd1lYSmhiWE11WjNKaGJuUmZkSGx3WlNBOUlDZGpiR2xsYm5SZlkzSmxaR1Z1ZEdsaGJITW5PMXh1SUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0F2THlCQmJITnZJR052ZG1WeWN5QmpZWE5sSUZSUFMwVk9Ma2xOVUV4SlEwbFVPbHh1SUNBZ0lDQWdJQ0JrWldaaGRXeDBPbHh1SUNBZ0lDQWdJQ0FnSUhCaGNtRnRjeTVuY21GdWRGOTBlWEJsSUQwZ0oyaDBkSEJ6T2k4dmIyRjFkR2d1Y21Wa1pHbDBMbU52YlM5bmNtRnVkSE12YVc1emRHRnNiR1ZrWDJOc2FXVnVkQ2M3WEc0Z0lDQWdJQ0FnSUNBZ2NHRnlZVzF6TG1SbGRtbGpaVjlwWkNBOUlIUm9hWE11WDNWelpYSkRiMjVtYVdjdWIyRjFkR2d1WkdWMmFXTmxTV1E3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUJ3WVhKaGJYTTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5cGNiaUFnSUNBZ0lDQlNaWFIxY201eklIUm9aU0JrWVhSaElHNWxaV1JsWkNCMGJ5QnlaWEYxWlhOMElHRnVJR0YxZEdobGJuUnBZMkYwWldRZ1QwRjFkR2hjYmlBZ0lDQWdJQ0JoWTJObGMzTWdkRzlyWlc0dVhHNGdJQ0FnSUNvdlhHNGdJSDBzSUh0Y2JpQWdJQ0JyWlhrNklDZG5aWFJCZFhSb1pXNTBhV05oZEdWa1ZHOXJaVzVFWVhSaEp5eGNiaUFnSUNCMllXeDFaVG9nWm5WdVkzUnBiMjRnWjJWMFFYVjBhR1Z1ZEdsallYUmxaRlJ2YTJWdVJHRjBZU2hoZFhSb2IzSnBlbUYwYVc5dVEyOWtaU2tnZTF4dUlDQWdJQ0FnZG1GeUlIQmhjbUZ0Y3lBOUlIdDlPMXh1WEc0Z0lDQWdJQ0J3WVhKaGJYTXVjMk52Y0dVZ1BTQjBhR2x6TG5OamIzQmxPMXh1WEc0Z0lDQWdJQ0J6ZDJsMFkyZ2dLSFJvYVhNdVgzVnpaWEpEYjI1bWFXY3ViMkYxZEdndWRIbHdaU2tnZTF4dUlDQWdJQ0FnSUNCallYTmxJRlJQUzBWT0xsTkRVa2xRVkRwY2JpQWdJQ0FnSUNBZ0lDQndZWEpoYlhNdVozSmhiblJmZEhsd1pTQTlJQ2R3WVhOemQyOXlaQ2M3WEc0Z0lDQWdJQ0FnSUNBZ2NHRnlZVzF6TG5WelpYSnVZVzFsSUQwZ2RHaHBjeTVmZFhObGNrTnZibVpwWnk1dllYVjBhQzUxYzJWeWJtRnRaVHRjYmlBZ0lDQWdJQ0FnSUNCd1lYSmhiWE11Y0dGemMzZHZjbVFnUFNCMGFHbHpMbDkxYzJWeVEyOXVabWxuTG05aGRYUm9MbkJoYzNOM2IzSmtPMXh1SUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0JqWVhObElGUlBTMFZPTGtWWVVFeEpRMGxVT2x4dUlDQWdJQ0FnSUNBZ0lIQmhjbUZ0Y3k1bmNtRnVkRjkwZVhCbElEMGdKMkYxZEdodmNtbDZZWFJwYjI1ZlkyOWtaU2M3WEc0Z0lDQWdJQ0FnSUNBZ2NHRnlZVzF6TG1Oc2FXVnVkRjlwWkNBOUlIUm9hWE11WDNWelpYSkRiMjVtYVdjdWIyRjFkR2d1YTJWNU8xeHVJQ0FnSUNBZ0lDQWdJSEJoY21GdGN5NXlaV1JwY21WamRGOTFjbWtnUFNCMGFHbHpMbDkxYzJWeVEyOXVabWxuTG05aGRYUm9MbkpsWkdseVpXTjBWWEpwTzF4dUlDQWdJQ0FnSUNBZ0lIQmhjbUZ0Y3k1amIyUmxJRDBnWVhWMGFHOXlhWHBoZEdsdmJrTnZaR1U3WEc0Z0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUdSbFptRjFiSFE2WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUY5M2FHVnVNbHNuWkdWbVlYVnNkQ2RkTG5KbGFtVmpkQ2h1WlhjZ1JYSnliM0lvSjBsdWRtRnNhV1FnVDBGMWRHZ2dkSGx3WlNCemNHVmphV1pwWldRZ0tFRjFkR2hsYm5ScFkyRjBaV1FnVDBGMWRHZ3BMaWNwS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2NtVjBkWEp1SUhCaGNtRnRjenRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLbHh1SUNBZ0lDQWdJRkpsZEhWeWJuTWdkR2hsSUdSaGRHRWdibVZsWkdWa0lIUnZJSEpsY1hWbGMzUWdZU0J5WldaeVpYTm9JSFJ2YTJWdUxseHVJQ0FnSUNBcUwxeHVJQ0I5TENCN1hHNGdJQ0FnYTJWNU9pQW5aMlYwVW1WbWNtVnphRlJ2YTJWdVJHRjBZU2NzWEc0Z0lDQWdkbUZzZFdVNklHWjFibU4wYVc5dUlHZGxkRkpsWm5KbGMyaFViMnRsYmtSaGRHRW9jbVZtY21WemFGUnZhMlZ1S1NCN1hHNGdJQ0FnSUNCMllYSWdjR0Z5WVcxeklEMGdlMzA3WEc0Z0lDQWdJQ0J3WVhKaGJYTXVjMk52Y0dVZ1BTQjBhR2x6TG5OamIzQmxPMXh1SUNBZ0lDQWdjR0Z5WVcxekxtZHlZVzUwWDNSNWNHVWdQU0FuY21WbWNtVnphRjkwYjJ0bGJpYzdYRzRnSUNBZ0lDQndZWEpoYlhNdWNtVm1jbVZ6YUY5MGIydGxiaUE5SUhKbFpuSmxjMmhVYjJ0bGJqdGNiaUFnSUNBZ0lISmxkSFZ5YmlCd1lYSmhiWE03WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeXBjYmlBZ0lDQWdJQ0JCSUcxbGRHaHZaQ0IwYUdGMElITmxkSE1nZFhBZ1lTQmpZV3hzSUhSdklISmxZMlZwZG1VZ1lXNGdZV05qWlhOekwzSmxabkpsYzJnZ2RHOXJaVzR1WEc0Z0lDQWdJQ292WEc0Z0lIMHNJSHRjYmlBZ0lDQnJaWGs2SUNkblpYUlViMnRsYmljc1hHNGdJQ0FnZG1Gc2RXVTZJR1oxYm1OMGFXOXVJR2RsZEZSdmEyVnVLSFJ2YTJWdVJXNTFiU2tnZTF4dUlDQWdJQ0FnZG1GeUlHOXdkR2x2Ym5NZ1BTQmhjbWQxYldWdWRITXViR1Z1WjNSb0lEdzlJREVnZkh3Z1lYSm5kVzFsYm5Seld6RmRJRDA5UFNCMWJtUmxabWx1WldRZ1B5QjdmU0E2SUdGeVozVnRaVzUwYzFzeFhUdGNibHh1SUNBZ0lDQWdkbUZ5SUhCaGNtRnRjeUE5SUhWdVpHVm1hVzVsWkR0Y2JseHVJQ0FnSUNBZ2MzZHBkR05vSUNoMGIydGxia1Z1ZFcwcElIdGNiaUFnSUNBZ0lDQWdZMkZ6WlNCVVQwdEZUaTVTUlVaU1JWTklPbHh1SUNBZ0lDQWdJQ0FnSUhCaGNtRnRjeUE5SUhSb2FYTXVaMlYwVW1WbWNtVnphRlJ2YTJWdVJHRjBZU2h2Y0hScGIyNXpMbkpsWm5KbGMyaFViMnRsYmlrN1hHNGdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lHTmhjMlVnVkU5TFJVNHVRVkJRWDA5T1RGazZYRzRnSUNBZ0lDQWdJQ0FnY0dGeVlXMXpJRDBnZEdocGN5NW5aWFJCY0hCUGJteDVWRzlyWlc1RVlYUmhLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUdOaGMyVWdWRTlMUlU0dVUwTlNTVkJVT2x4dUlDQWdJQ0FnSUNCallYTmxJRlJQUzBWT0xrVllVRXhKUTBsVU9seHVJQ0FnSUNBZ0lDQWdJSEJoY21GdGN5QTlJSFJvYVhNdVoyVjBRWFYwYUdWdWRHbGpZWFJsWkZSdmEyVnVSR0YwWVNodmNIUnBiMjV6TG1GMWRHaHZjbWw2WVhScGIyNURiMlJsS1R0Y2JpQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2RtRnlJR2hsWVdSbGNuTWdQU0I3ZlR0Y2JpQWdJQ0FnSUhaaGNpQmlkV1ptSUQwZ2JtVjNJRUoxWm1abGNpaDBhR2x6TGw5MWMyVnlRMjl1Wm1sbkxtOWhkWFJvTG10bGVTQXJJQ2M2SnlBcklIUm9hWE11WDNWelpYSkRiMjVtYVdjdWIyRjFkR2d1YzJWamNtVjBLVHRjYmlBZ0lDQWdJSFpoY2lCaVlYTmxOalFnUFNCaWRXWm1MblJ2VTNSeWFXNW5LQ2RpWVhObE5qUW5LVHRjYmlBZ0lDQWdJSFpoY2lCaGRYUm9JRDBnSjBKaGMybGpJQ2NnS3lCaVlYTmxOalE3WEc1Y2JpQWdJQ0FnSUdobFlXUmxjbk5iSjBGMWRHaHZjbWw2WVhScGIyNG5YU0E5SUdGMWRHZzdYRzVjYmlBZ0lDQWdJSFpoY2lCbGJtUndiMmx1ZENBOUlHNWxkeUJmUlc1a2NHOXBiblF5V3lka1pXWmhkV3gwSjEwb2RHaHBjeTVmZFhObGNrTnZibVpwWnl3Z2RHaHBjeTVmZFhObGNrTnZibVpwWnk1elpYSjJaWEpYVjFjc0lDZHdiM04wSnl3Z0p5OWhjR2t2ZGpFdllXTmpaWE56WDNSdmEyVnVKeXdnYUdWaFpHVnljeXdnY0dGeVlXMXpMQ0I3ZlN3Z2RHaHBjeTVmZFhObGNrTnZibVpwWnk1elpYSjJaWEpYVjFkUWIzSjBLVHRjYmx4dUlDQWdJQ0FnZG1GeUlISmxjM0J2Ym5ObFJYSnliM0pJWVc1a2JHVnlJRDBnWm5WdVkzUnBiMjRnY21WemNHOXVjMlZGY25KdmNraGhibVJzWlhJb2NtVnpjRzl1YzJVc0lHVnVaSEJ2YVc1MEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoVGRISnBibWNvY21WemNHOXVjMlV1WDNOMFlYUjFjeWt1YVc1a1pYaFBaaWduTkNjcElEMDlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGOTNhR1Z1TWxzblpHVm1ZWFZzZENkZExuSmxhbVZqZENodVpYY2dYMUpsYzNCdmJuTmxSWEp5YjNJeVd5ZGtaV1poZFd4MEoxMG9KMGx1ZG1Gc2FXUWdaMlYwVkc5clpXNGdjbVZ4ZFdWemRDY3NJSEpsYzNCdmJuTmxMQ0JsYm1Sd2IybHVkQ2twTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDOHZJR1ZzYzJVZ2NtVjBkWEp1SUhSb1pTQmxibVJ3YjJsdWRDQjBieUIwY25rZ1lXZGhhVzVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRjkzYUdWdU1sc25aR1ZtWVhWc2RDZGRMbkpsYzI5c2RtVW9aVzVrY0c5cGJuUXBPMXh1SUNBZ0lDQWdmVHRjYmx4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjWFZsYzNRdWFIUjBjSE1vWlc1a2NHOXBiblFzSUhKbGMzQnZibk5sUlhKeWIzSklZVzVrYkdWeUtTNTBhR1Z1S0daMWJtTjBhVzl1SUNoeVpYTXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRXBUVDA0dWNHRnljMlVvY21WekxsOWliMlI1S1R0Y2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cVhHNGdJQ0FnSUNBZ1UyVjBjeUIwYUdVZ1lYVjBhQ0JrWVhSaElHWnliMjBnZEdobElHOWhkWFJvSUcxdlpIVnNaU0IwYnlCaGJHeHZkeUJQUVhWMGFDQmpZV3hzY3k1Y2JpQWdJQ0FnSUNBZ1ZHaHBjeUJ0WlhSb2IyUWdZMkZ1SUdGMWRHaGxiblJwWTJGMFpTQjNhWFJvT2x4dUlDQWdJQ0FnSUNBdElGTmpjbWx3ZENCaVlYTmxaQ0JQUVhWMGFDQW9ibThnY0dGeVlXMWxkR1Z5S1Z4dUlDQWdJQ0FnSUMwZ1VtRjNJR0YxZEdobGJuUnBZMkYwYVc5dUlHUmhkR0ZjYmlBZ0lDQWdJQ0F0SUVGMWRHaHZjbWw2WVhScGIyNGdRMjlrWlNBb2NtVnhkV1Z6ZEY5MGVYQmxJRDBnWENKamIyUmxYQ0lwWEc0Z0lDQWdJQ0FnTFNCQlkyTmxjM01nVkc5clpXNGdLSEpsY1hWbGMzUmZkSGx3WlNBOUlGd2lkRzlyWlc1Y0lpa2dMeUJKYlhCc2FXTnBkQ0JQUVhWMGFGeHVJQ0FnSUNBZ0lDMGdRWEJ3YkdsallYUnBiMjRnVDI1c2VTNGdLSFp2YVdRZ01Dd2dkSEoxWlNrN1hHNGdJQ0FnSUNvdlhHNGdJSDBzSUh0Y2JpQWdJQ0JyWlhrNklDZGhkWFJvSnl4Y2JpQWdJQ0IyWVd4MVpUb2dablZ1WTNScGIyNGdZWFYwYUNoaGRYUm9RMjlrWlU5eVFXTmpaWE56Vkc5clpXNHNJR2x6UVhCd2JHbGpZWFJwYjI1UGJteDVLU0I3WEc0Z0lDQWdJQ0IyWVhJZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdJQ0IyWVhJZ2RHOXJaVzVFWVhSaElEMGdkVzVrWldacGJtVmtPMXh1WEc0Z0lDQWdJQ0JwWmlBb2FYTkJjSEJzYVdOaGRHbHZiazl1YkhrcElIdGNiaUFnSUNBZ0lDQWdkRzlyWlc1RVlYUmhJRDBnZEdocGN5NW5aWFJVYjJ0bGJpaFVUMHRGVGk1QlVGQmZUMDVNV1NrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dVhHNGdJQ0FnSUNBZ0lIWmhjaUIwYjJ0bGJpQTlJSFJvYVhNdVgzVnpaWEpEYjI1bWFXY3ViMkYxZEdndWRIbHdaVHRjYmx4dUlDQWdJQ0FnSUNCemQybDBZMmdnS0hSdmEyVnVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1kyRnpaU0JVVDB0RlRpNVRRMUpKVUZRNlhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYjJ0bGJrUmhkR0VnUFNCMGFHbHpMbWRsZEZSdmEyVnVLSFJ2YTJWdUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1WEc0Z0lDQWdJQ0FnSUNBZ1kyRnpaU0JVVDB0RlRpNUZXRkJNU1VOSlZEcGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHRjFkR2dnWTI5a1pTQnBiaUIwYUdseklHTmhjMlZjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnZhMlZ1UkdGMFlTQTlJSFJvYVhNdVoyVjBWRzlyWlc0b2RHOXJaVzRzSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWVhWMGFHOXlhWHBoZEdsdmJrTnZaR1U2SUdGMWRHaERiMlJsVDNKQlkyTmxjM05VYjJ0bGJseHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNibHh1SUNBZ0lDQWdJQ0FnSUdOaGMyVWdWRTlMUlU0dVNVMVFURWxEU1ZRNlhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCaFkyTmxjM01nZEc5clpXNGdhVzRnZEdocGN5QmpZWE5sWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBiMnRsYmtSaGRHRWdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR0ZqWTJWemMxOTBiMnRsYmpvZ1lYVjBhRU52WkdWUGNrRmpZMlZ6YzFSdmEyVnVMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjBiMnRsYmw5MGVYQmxPaUFuWW1WaGNtVnlKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdaWGh3YVhKbGMxOXBiam9nTXpZd01DeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2MyTnZjR1U2SUhSb2FYTXVYM1Z6WlhKRGIyNW1hV2N1YjJGMWRHZ3VjMk52Y0dWY2JpQWdJQ0FnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JseHVJQ0FnSUNBZ0lDQWdJR1JsWm1GMWJIUTZYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjFObGRIUnBibWNnZEdobElHRjFkR2dnWkdGMFlTQnBjeUJ1YnlCc2IyNW5aWElnYzNWd2NHOXlkR1ZrTGljcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQW9NQ3dnWDNkb1pXNHlXeWRrWldaaGRXeDBKMTBwS0hSdmEyVnVSR0YwWVNrdWRHaGxiaWhtZFc1amRHbHZiaUFvWkdGMFlTa2dlMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ1pHRjBZU0FoUFQwZ0oyOWlhbVZqZENjcElIdGNiaUFnSUNBZ0lDQWdJQ0IyWVhJZ2MzUnlJRDBnVTNSeWFXNW5LR1JoZEdFcE8xeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmZkMmhsYmpKYkoyUmxabUYxYkhRblhTNXlaV3BsWTNRb2JtVjNJRVZ5Y205eUtDZFVhR1Z5WlNCM1lYTWdZU0J3Y205aWJHVnRJR0YxZEdobGJuUnBZMkYwYVc1bk9seGNiaWNnS3lCemRISXBLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lGOTBhR2x6TG1GalkyVnpjMVJ2YTJWdUlEMGdaR0YwWVM1aFkyTmxjM05mZEc5clpXNDdYRzRnSUNBZ0lDQWdJRjkwYUdsekxuUnZhMlZ1Vkhsd1pTQTlJR1JoZEdFdWRHOXJaVzVmZEhsd1pUdGNibHh1SUNBZ0lDQWdJQ0F2THlCSlppQjBhR1VnWlhod2JHbGphWFFnWVhCd0lIVnpaV1FnWVNCd1pYSnRhVzVoYm5RZ1pIVnlZWFJwYjI0c0lITmxibVJjYmlBZ0lDQWdJQ0FnTHk4Z1ltRmpheUIwYUdVZ2NtVm1jbVZ6YUNCMGIydGxiaUIwYUdGMElIZHBiR3dnWW1VZ2RYTmxaQ0IwYnlCeVpTMWhkWFJvWlc1MGFXTmhkR1ZjYmlBZ0lDQWdJQ0FnTHk4Z2JHRjBaWElnZDJsMGFHOTFkQ0IxYzJWeUlHbHVkR1Z5WVdOMGFXOXVMbHh1SUNBZ0lDQWdJQ0JwWmlBb1pHRjBZUzV5WldaeVpYTm9YM1J2YTJWdUtTQjdYRzRnSUNBZ0lDQWdJQ0FnTHk4Z2MyVjBJSFJvWlNCcGJuUmxjbTVoYkNCeVpXWnlaWE5vSUhSdmEyVnVJR1p2Y2lCaGRYUnZiV0YwYVdNZ1pYaHdhWEpwYm1kY2JpQWdJQ0FnSUNBZ0lDQXZMeUJoWTJObGMzTmZkRzlyWlc0Z2JXRnVZV2RsYldWdWRGeHVJQ0FnSUNBZ0lDQWdJRjkwYUdsekxuSmxabkpsYzJoVWIydGxiaUE5SUdSaGRHRXVjbVZtY21WemFGOTBiMnRsYmp0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1gzUm9hWE11Y21WbWNtVnphRlJ2YTJWdU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLbHh1SUNBZ0lDQWdJRTl1YkhrZ1lYVjBhR1Z1ZEdsallYUmxjeUIzYVhSb0lFRndjR3hwWTJGMGFXOXVJRTl1YkhrZ1QwRjFkR2hjYmlBZ0lDQWdLaTljYmlBZ2ZTd2dlMXh1SUNBZ0lHdGxlVG9nSjJGd2NHeHBZMkYwYVc5dVQyNXNlVUYxZEdnbkxGeHVJQ0FnSUhaaGJIVmxPaUJtZFc1amRHbHZiaUJoY0hCc2FXTmhkR2x2Yms5dWJIbEJkWFJvS0NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZWFYwYUNoMmIybGtJREFzSUhSeWRXVXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFYRzRnSUNBZ0lDQWdRWFYwYUdWdWRHbGpZWFJsSUhkcGRHZ2dZU0J5WldaeVpYTm9JSFJ2YTJWdUxseHVJQ0FnSUNBcUwxeHVJQ0I5TENCN1hHNGdJQ0FnYTJWNU9pQW5jbVZtY21WemFDY3NYRzRnSUNBZ2RtRnNkV1U2SUdaMWJtTjBhVzl1SUhKbFpuSmxjMmdvY21WbWNtVnphRlJ2YTJWdUtTQjdYRzRnSUNBZ0lDQjJZWElnWDNSb2FYTXlJRDBnZEdocGN6dGNibHh1SUNBZ0lDQWdMeThnZFhObElIUm9aU0J3Y205MmFXUmxaQ0J5WldaeVpYTm9JSFJ2YTJWdUxDQnZjaUIwYUdVZ1kzVnljbVZ1ZEZ4dUlDQWdJQ0FnTHk4Z2IyNWxJSFJvWVhRZ2QyVWdhR0YyWlNCbWIzSWdkR2hwY3lCamJHRnpjMXh1SUNBZ0lDQWdjbVZtY21WemFGUnZhMlZ1SUQwZ2RTNTBhR2x6VDNKVWFHRjBLSEpsWm5KbGMyaFViMnRsYml3Z2RHaHBjeTV5WldaeVpYTm9WRzlyWlc0cE8xeHVYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVuWlhSVWIydGxiaWhVVDB0RlRpNVNSVVpTUlZOSUxDQjdYRzRnSUNBZ0lDQWdJSEpsWm5KbGMyaFViMnRsYmpvZ2NtVm1jbVZ6YUZSdmEyVnVYRzRnSUNBZ0lDQjlLUzUwYUdWdUtHWjFibU4wYVc5dUlDaGtZWFJoS1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRzl1YkhrZ2MyVjBJSFJvWlNCcGJuUmxjbTVoYkNCeVpXWnlaWE5vSUhSdmEyVnVJR2xtSUhKbFpHUnBkRnh1SUNBZ0lDQWdJQ0F2THlCaFozSmxaWE1nZEdoaGRDQnBkQ0IzWVhNZ1Qwc2dZVzVrSUhObGJtUnpJR0poWTJzZ1lYVjBhRVJoZEdGY2JpQWdJQ0FnSUNBZ1gzUm9hWE15TG5KbFpuSmxjMmhVYjJ0bGJpQTlJSEpsWm5KbGMyaFViMnRsYmp0Y2JseHVJQ0FnSUNBZ0lDQmZkR2hwY3pJdVlXTmpaWE56Vkc5clpXNGdQU0JrWVhSaExtRmpZMlZ6YzE5MGIydGxianRjYmlBZ0lDQWdJQ0FnWDNSb2FYTXlMblJ2YTJWdVZIbHdaU0E5SUdSaGRHRXVkRzlyWlc1ZmRIbHdaVHRjYmx4dUlDQWdJQ0FnSUNCZmRHaHBjekl1WlcxcGRDZ25ZV05qWlhOelgzUnZhMlZ1WDNKbFpuSmxjMmhsWkNjc0lGOTBhR2x6TWk1aFkyTmxjM05VYjJ0bGJpazdYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLbHh1SUNBZ0lDQWdJRU5zWldGeWN5QmhibmtnWVhWMGFHVnVkR2xqWVhScGIyNGdaR0YwWVNBbUlISmxiVzkyWlhNZ1QwRjFkR2dnWVhWMGFHVnVkR2xqWVhScGIyNWNiaUFnSUNBZ0lDQWdRbmtnWkdWbVlYVnNkQ0JwZENCM2FXeHNJRzl1YkhrZ2NtVnRiM1psSUhSb1pTQmNJbUZqWTJWemMxOTBiMnRsYmx3aUxpQlRjR1ZqYVdaNVhHNGdJQ0FnSUNBZ2RHaGxJSFZ6WlhKeklISmxabkpsYzJnZ2RHOXJaVzRnZEc4Z2NtVjJiMnRsSUhSb1lYUWdkRzlyWlc0Z2FXNXpkR1ZoWkM1Y2JpQWdJQ0FnS2k5Y2JpQWdmU3dnZTF4dUlDQWdJR3RsZVRvZ0oyUmxZWFYwYUNjc1hHNGdJQ0FnZG1Gc2RXVTZJR1oxYm1OMGFXOXVJR1JsWVhWMGFDaHlaV1p5WlhOb1ZHOXJaVzRwSUh0Y2JpQWdJQ0FnSUhaaGNpQmZkR2hwY3pNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnSUNBdkx5QnVieUJ1WldWa0lIUnZJR1JsWVhWMGFDQnBaaUJ1YjNRZ1lYVjBhR1Z1ZEdsallYUmxaRnh1SUNBZ0lDQWdhV1lnS0NGMGFHbHpMbWhoYzBGalkyVnpjMVJ2YTJWdUtDa3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRjkzYUdWdU1sc25aR1ZtWVhWc2RDZGRMbkpsYzI5c2RtVW9LVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnZG1GeUlHbHpVbVZtY21WemFGUnZhMlZ1SUQwZ2RIbHdaVzltSUhKbFpuSmxjMmhVYjJ0bGJpQTlQVDBnSjNOMGNtbHVaeWM3WEc1Y2JpQWdJQ0FnSUhaaGNpQjBiMnRsYmlBOUlHbHpVbVZtY21WemFGUnZhMlZ1SUQ4Z2NtVm1jbVZ6YUZSdmEyVnVJRG9nZEdocGN5NWhZMk5sYzNOVWIydGxianRjYmx4dUlDQWdJQ0FnZG1GeUlIUnZhMlZ1Vkhsd1pVaHBiblFnUFNCcGMxSmxabkpsYzJoVWIydGxiaUEvSUNkeVpXWnlaWE5vWDNSdmEyVnVKeUE2SUNkaFkyTmxjM05mZEc5clpXNG5PMXh1WEc0Z0lDQWdJQ0IyWVhJZ2NHRnlZVzF6SUQwZ2UxeHVJQ0FnSUNBZ0lDQjBiMnRsYmpvZ2RHOXJaVzRzWEc0Z0lDQWdJQ0FnSUhSdmEyVnVYM1I1Y0dWZmFHbHVkRG9nZEc5clpXNVVlWEJsU0dsdWRGeHVJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdkbUZ5SUdGMWRHZ2dQU0FuUW1GemFXTWdKeUFySUc1bGR5QkNkV1ptWlhJb2RHaHBjeTVmZFhObGNrTnZibVpwWnk1dllYVjBhQzVyWlhrZ0t5QW5PaWNnS3lCMGFHbHpMbDkxYzJWeVEyOXVabWxuTG05aGRYUm9Mbk5sWTNKbGRDa3VkRzlUZEhKcGJtY29KMkpoYzJVMk5DY3BPMXh1WEc0Z0lDQWdJQ0IyWVhJZ2FHVmhaR1Z5Y3lBOUlIdGNiaUFnSUNBZ0lDQWdKMEYxZEdodmNtbDZZWFJwYjI0bk9pQmhkWFJvWEc0Z0lDQWdJQ0I5TzF4dVhHNGdJQ0FnSUNCMllYSWdaVzVrY0c5cGJuUWdQU0J1WlhjZ1gwVnVaSEJ2YVc1ME1sc25aR1ZtWVhWc2RDZGRLSFJvYVhNdVgzVnpaWEpEYjI1bWFXY3NJSFJvYVhNdVgzVnpaWEpEYjI1bWFXY3VjMlZ5ZG1WeVYxZFhMQ0FuY0c5emRDY3NJQ2N2WVhCcEwzWXhMM0psZG05clpWOTBiMnRsYmljc0lHaGxZV1JsY25Nc0lIQmhjbUZ0Y3l3Z2UzMHNJSFJvYVhNdVgzVnpaWEpEYjI1bWFXY3VjMlZ5ZG1WeVYxZFhVRzl5ZENrN1hHNWNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WlhGMVpYTjBMbWgwZEhCektHVnVaSEJ2YVc1MEtTNTBhR1Z1S0daMWJtTjBhVzl1SUNoeVpYTndiMjV6WlNrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJKWmlCM1pTQmthV1FnYm05MElHZGxkQ0JpWVdOcklHRWdNakEwSUhSb2FYTWdkR2hsYmlCcGRDQmthV1FnYm05MElITjFZMlZ6YzJaMWJHeDVYRzRnSUNBZ0lDQWdJQzh2SUhKbGRtOXJaU0IwYUdVZ2RHOXJaVzVjYmlBZ0lDQWdJQ0FnYVdZZ0tISmxjM0J2Ym5ObExsOXpkR0YwZFhNZ0lUMDlJREl3TkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmZkMmhsYmpKYkoyUmxabUYxYkhRblhTNXlaV3BsWTNRb2JtVjNJRVZ5Y205eUtDZFZibUZpYkdVZ2RHOGdjbVYyYjJ0bElIUm9aU0JuYVhabGJpQjBiMnRsYmljcEtUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUM4dklHTnNaV0Z5SUhSb1pTQmtZWFJoSUdadmNpQjBhR2x6SUU5QmRYUm9JRzlpYW1WamRGeHVJQ0FnSUNBZ0lDQmZkR2hwY3pNdVlXTmpaWE56Vkc5clpXNGdQU0JVVDB0RlRpNUpUbFpCVEVsRU8xeHVJQ0FnSUNBZ0lDQmZkR2hwY3pNdWRHOXJaVzVVZVhCbElEMGdWRTlMUlU0dVNVNVdRVXhKUkR0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJ2Ym14NUlHTnNaV0Z5SUhSb1pTQnlaV1p5WlhOb0lIUnZhMlZ1SUdsbUlHOXVaU0IzWVhNZ2NISnZkbWxrWldSY2JpQWdJQ0FnSUNBZ2FXWWdLR2x6VW1WbWNtVnphRlJ2YTJWdUtTQjdYRzRnSUNBZ0lDQWdJQ0FnWDNSb2FYTXpMbkpsWm5KbGMyaFViMnRsYmlBOUlGUlBTMFZPTGtsT1ZrRk1TVVE3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JpQWdmVjBwTzF4dVhHNGdJSEpsZEhWeWJpQlBRWFYwYUR0Y2JuMHBLRjlsZG1WdWRITXlXeWRrWldaaGRXeDBKMTB1UlhabGJuUkZiV2wwZEdWeUtUdGNibHh1Wlhod2IzSjBjMXNuWkdWbVlYVnNkQ2RkSUQwZ1QwRjFkR2c3WEc0dkx5TWdjMjkxY21ObFRXRndjR2x1WjFWU1REMVBRWFYwYUM1cWN5NXRZWEJjYmlKZGZRPT0iLCJcbi8vIG5vZGUgbW9kdWxlc1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxudmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQoX3gzLCBfeDQsIF94NSkgeyB2YXIgX2FnYWluID0gdHJ1ZTsgX2Z1bmN0aW9uOiB3aGlsZSAoX2FnYWluKSB7IHZhciBvYmplY3QgPSBfeDMsIHByb3BlcnR5ID0gX3g0LCByZWNlaXZlciA9IF94NTsgX2FnYWluID0gZmFsc2U7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyBfeDMgPSBwYXJlbnQ7IF94NCA9IHByb3BlcnR5OyBfeDUgPSByZWNlaXZlcjsgX2FnYWluID0gdHJ1ZTsgZGVzYyA9IHBhcmVudCA9IHVuZGVmaW5lZDsgY29udGludWUgX2Z1bmN0aW9uOyB9IH0gZWxzZSBpZiAoJ3ZhbHVlJyBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfSB9O1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAnZnVuY3Rpb24nICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAnICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgX3V0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbnZhciBfdXRpbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91dGlsKTtcblxudmFyIF9ldmVudHMgPSByZXF1aXJlKCdldmVudHMnKTtcblxudmFyIF9ldmVudHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXZlbnRzKTtcblxudmFyIF91cmwgPSByZXF1aXJlKCd1cmwnKTtcblxudmFyIF91cmwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdXJsKTtcblxuLy8gbnBtIG1vZHVsZXNcblxudmFyIF93aGVuID0gcmVxdWlyZSgnd2hlbicpO1xuXG52YXIgX3doZW4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2hlbik7XG5cbnZhciBfd2hlbkRlbGF5ID0gcmVxdWlyZSgnd2hlbi9kZWxheScpO1xuXG52YXIgX3doZW5EZWxheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93aGVuRGVsYXkpO1xuXG52YXIgX2hlID0gcmVxdWlyZSgnaGUnKTtcblxudmFyIF9oZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oZSk7XG5cbi8vIG91ciBtb2R1bGVzXG5cbnZhciBfUmVxdWVzdCA9IHJlcXVpcmUoJy4vUmVxdWVzdCcpO1xuXG52YXIgX1JlcXVlc3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUmVxdWVzdCk7XG5cbnZhciBfRW5kcG9pbnQgPSByZXF1aXJlKCcuL0VuZHBvaW50Jyk7XG5cbnZhciBfRW5kcG9pbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRW5kcG9pbnQpO1xuXG52YXIgX1Jlc3BvbnNlRXJyb3IgPSByZXF1aXJlKCcuL1Jlc3BvbnNlRXJyb3InKTtcblxudmFyIF9SZXNwb25zZUVycm9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1Jlc3BvbnNlRXJyb3IpO1xuXG4vKlxuICAgQSBjb2xsZWN0aW9uIG9mIGZ1bmN0aW9ucyB0aGF0IGRlYWwgd2l0aCByZXF1ZXN0aW5nIGRhdGEgZnJvbSB0aGVcbiAgIHJlZGRpdCBBUEkuXG4gKi9cblxudmFyIFJlZGRpdFJlcXVlc3QgPSAoZnVuY3Rpb24gKF9ldmVudHMkRXZlbnRFbWl0dGVyKSB7XG4gIF9pbmhlcml0cyhSZWRkaXRSZXF1ZXN0LCBfZXZlbnRzJEV2ZW50RW1pdHRlcik7XG5cbiAgZnVuY3Rpb24gUmVkZGl0UmVxdWVzdCh1c2VyQ29uZmlnLCByZXF1ZXN0LCBvYXV0aCwgb2F1dGhBcHBPbmx5LCBtb2RoYXNoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlZGRpdFJlcXVlc3QpO1xuXG4gICAgX2dldChPYmplY3QuZ2V0UHJvdG90eXBlT2YoUmVkZGl0UmVxdWVzdC5wcm90b3R5cGUpLCAnY29uc3RydWN0b3InLCB0aGlzKS5jYWxsKHRoaXMpO1xuICAgIHRoaXMuX3JlcXVlc3QgPSByZXF1ZXN0O1xuICAgIHRoaXMuX3VzZXJDb25maWcgPSB1c2VyQ29uZmlnO1xuICAgIHRoaXMuX29hdXRoID0gb2F1dGg7XG4gICAgdGhpcy5fb2F1dGhBcHBPbmx5ID0gb2F1dGhBcHBPbmx5O1xuICAgIHRoaXMuX21vZGhhc2ggPSBtb2RoYXNoO1xuICB9XG5cbiAgLypcbiAgICAgQ3VycmVudGx5IGFwcGxpY2F0aW9uIG9ubHk/XG4gICAgICBJZiB3ZSBkbyBub3QgaGF2ZSBhbiBhY2Nlc3MgdG9rZW4gYW5kIHRoZXJlIGlzIG5vIHdheVxuICAgICB0byBnZXQgYSBuZXcgYWNjZXNzIHRva2VuIHRoZW4geWVzISBXZSBhcmUgYXBwbGljYXRpb25cbiAgICAgb25seSBvYXV0aC5cbiAgICovXG5cbiAgX2NyZWF0ZUNsYXNzKFJlZGRpdFJlcXVlc3QsIFt7XG4gICAga2V5OiAnaXNBcHBsaWNhdGlvbk9ubHknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc0FwcGxpY2F0aW9uT25seSgpIHtcbiAgICAgIHJldHVybiAhdGhpcy5fb2F1dGguaGFzQWNjZXNzVG9rZW4oKSAmJiAhdGhpcy5fb2F1dGguY2FuUmVmcmVzaEFjY2Vzc1Rva2VuKCk7XG4gICAgfVxuXG4gICAgLypcbiAgICAgICBBcmUgd2UgY3VycmVudGx5IGF1dGhlbnRpY2F0ZWQ/XG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6ICdpc0F1dGhlbnRpY2F0ZWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc0F1dGhlbnRpY2F0ZWQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc0FwcGxpY2F0aW9uT25seSgpID8gdGhpcy5fb2F1dGhBcHBPbmx5Lmhhc0FjY2Vzc1Rva2VuKCkgOiB0aGlzLl9vYXV0aC5oYXNBY2Nlc3NUb2tlbigpO1xuICAgIH1cblxuICAgIC8qXG4gICAgICAgQnVpbGRzIHVwIHRoZSBoZWFkZXJzIGZvciBhbiBlbmRwb2ludC5cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogJ2J1aWxkSGVhZGVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGJ1aWxkSGVhZGVycygpIHtcbiAgICAgIHZhciBjb250ZXh0T3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzBdO1xuXG4gICAgICB2YXIgaGVhZGVycyA9IHt9O1xuXG4gICAgICBpZiAodGhpcy5fdXNlckNvbmZpZy5pc05vZGUpIHtcbiAgICAgICAgLy8gQ2FuJ3Qgc2V0IFVzZXItQWdlbnQgaW4gYnJvd3NlclxuICAgICAgICBoZWFkZXJzWydVc2VyLUFnZW50J10gPSB0aGlzLl91c2VyQ29uZmlnLnVzZXJBZ2VudDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX3VzZXJDb25maWcudXNlQnJvd3NlckNvb2tpZXMpIHtcbiAgICAgICAgaGVhZGVyc1snWC1Vc2VyLUFnZW50J10gPSB0aGlzLl91c2VyQ29uZmlnLnVzZXJBZ2VudDtcblxuICAgICAgICBpZiAodGhpcy5fbW9kaGFzaC5oYXNNb2RoYXNoKCkgJiYgIXRoaXMuX21vZGhhc2guaXNNb2RoYXNoT2xkKCkpIHtcbiAgICAgICAgICBoZWFkZXJzWydYLU1vZGhhc2gnXSA9IHRoaXMuX21vZGhhc2guZ2V0Q3VycmVudE1vZGhhc2goKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuX3VzZXJDb25maWcudXNlQnJvd3NlckNvb2tpZXMpIHtcbiAgICAgICAgaWYgKGNvbnRleHRPcHRpb25zLmJ5cGFzc0F1dGggfHwgdGhpcy5pc0FwcGxpY2F0aW9uT25seSgpKSB7XG4gICAgICAgICAgaGVhZGVyc1snQXV0aG9yaXphdGlvbiddID0gdGhpcy5fb2F1dGhBcHBPbmx5LmdldEF1dGhvcml6YXRpb25IZWFkZXIoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoZWFkZXJzWydBdXRob3JpemF0aW9uJ10gPSB0aGlzLl9vYXV0aC5nZXRBdXRob3JpemF0aW9uSGVhZGVyKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGhlYWRlcnM7XG4gICAgfVxuXG4gICAgLypcbiAgICAgICBDYWxsIHRoZSByZWRkaXQgYXBpLlxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiAnY2FsbFJlZGRpdEFwaScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhbGxSZWRkaXRBcGkoZW5kcG9pbnQpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIC8vIEF1dGhlbnRpY2F0ZSBpZiBuZWVkZWQgYmVmb3JlIG1ha2luZyBhIGNhbGwuXG4gICAgICAvL1xuICAgICAgLy8gRWxpbWluYXRlcyB1bndhbnRlZCA0MDEgZXJyb3JzIHdoZW4gbWFraW5nIGluaXRpYWwgY2FsbHNcbiAgICAgIC8vIG9uIEFwcGxpY2F0aW9uIG9ubHkgT0F1dGggJiBTY3JpcHQgaW5zdGFuY2VzIHdoZXJlIGNhbGxpbmdcbiAgICAgIC8vIGAuYXV0aCgpYCBpc24ndCByZXF1aXJlZC5cbiAgICAgIHZhciBhdXRoID0gdGhpcy5pc0F1dGhlbnRpY2F0ZWQoKSA/IF93aGVuMlsnZGVmYXVsdCddLnJlc29sdmUoKSA6IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5hdXRoZW50aWNhdGUoZW5kcG9pbnQpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8vIHJlYnVpbGQgZW5kcG9pbnQgd2l0aCBuZXcgaGVhZGVyc1xuICAgICAgICAgIGVuZHBvaW50ID0gbmV3IF9FbmRwb2ludDJbJ2RlZmF1bHQnXShfdGhpcy5fdXNlckNvbmZpZywgZW5kcG9pbnQuaG9zdG5hbWUsIGVuZHBvaW50Lm1ldGhvZCwgZW5kcG9pbnQucGF0aCwgX3RoaXMuYnVpbGRIZWFkZXJzKGVuZHBvaW50LmNvbnRleHRPcHRpb25zKSwgZW5kcG9pbnQuZ2l2ZW5BcmdzLCBlbmRwb2ludC5jb250ZXh0T3B0aW9ucywgZW5kcG9pbnQucG9ydCk7XG4gICAgICAgIH0pO1xuICAgICAgfSkoKTtcblxuICAgICAgcmV0dXJuIGF1dGgudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByZXF1ZXN0UHJvbWlzZSA9IF90aGlzLl9yZXF1ZXN0Lmh0dHBzKGVuZHBvaW50LCBfdGhpcy5yZXNwb25zZUVycm9ySGFuZGxlci5iaW5kKF90aGlzKSk7XG5cbiAgICAgICAgcmV0dXJuIHJlcXVlc3RQcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLmhhbmRsZVN1Y2Nlc3NSZXNwb25zZShyZXNwb25zZSwgZW5kcG9pbnQpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qXG4gICAgICAgQXV0aGVudGljYXRlIHdpdGggdGhlIGFwcHJvcHJpYXRlIE9BdXRoIHR5cGUgZm9yIGEgZ2l2ZW5cbiAgICAgICBlbmRwb2ludFxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiAnYXV0aGVudGljYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYXV0aGVudGljYXRlKGVuZHBvaW50KSB7XG4gICAgICB2YXIgYXV0aFByb21pc2UgPSB1bmRlZmluZWQ7XG5cbiAgICAgIC8vIElmIHdlIGFyZSBhcHBsaWNhdGlvbiBvbmx5LCBvciBhcmUgYnlwYXNzaW5nIGF1dGhlbnRpY2F0aW9uXG4gICAgICAvLyB0aGVyZWZvcmUgd2UncmUgdXNpbmcgYXBwbGljYXRpb24gb25seSBPQXV0aFxuICAgICAgaWYgKHRoaXMuX3VzZXJDb25maWcudXNlQnJvd3NlckNvb2tpZXMpIHtcbiAgICAgICAgaWYgKGVuZHBvaW50Lm1ldGhvZCA9PT0gJ3Bvc3QnKSB7XG4gICAgICAgICAgYXV0aFByb21pc2UgPSB0aGlzLl9tb2RoYXNoLmdldE1vZGhhc2goKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhdXRoUHJvbWlzZSA9IF93aGVuMlsnZGVmYXVsdCddLnJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0aGlzLmlzQXBwbGljYXRpb25Pbmx5KCkgfHwgZW5kcG9pbnQuY29udGV4dE9wdGlvbnMuYnlwYXNzQXV0aCkge1xuICAgICAgICBhdXRoUHJvbWlzZSA9IHRoaXMuX29hdXRoQXBwT25seS5hcHBsaWNhdGlvbk9ubHlBdXRoKCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX29hdXRoLmNhblJlZnJlc2hBY2Nlc3NUb2tlbigpKSB7XG4gICAgICAgIC8vIElmIHdlIGhhdmUgYmVlbiBhdXRoZW50aWNhdGVkIHdpdGggYSBwZXJtYW5lbnQgcmVmcmVzaCB0b2tlbiB1c2UgaXRcbiAgICAgICAgaWYgKHRoaXMuX29hdXRoLmhhc1JlZnJlc2hUb2tlbigpKSB7XG4gICAgICAgICAgYXV0aFByb21pc2UgPSB0aGlzLl9vYXV0aC5yZWZyZXNoKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgd2UgYXJlIE9BdXRoIHR5cGUgc2NyaXB0IHdlIGNhbiBjYWxsIGAuYXV0aGAgYWdhaW5cbiAgICAgICAgZWxzZSBpZiAodGhpcy5fdXNlckNvbmZpZy5pc09BdXRoVHlwZSgnc2NyaXB0JykpIHtcbiAgICAgICAgICAgIGF1dGhQcm9taXNlID0gdGhpcy5fb2F1dGguYXV0aCgpO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIE5vIHdheSB0byBhdXRoZW50aWNhdGVcbiAgICAgIGVsc2Uge1xuICAgICAgICAgIHJldHVybiBfd2hlbjJbJ2RlZmF1bHQnXS5yZWplY3QobmV3IEVycm9yKCdVbmFibGUgdG8gYXV0aGVudGljYXRlJykpO1xuICAgICAgICB9XG5cbiAgICAgIHJldHVybiBhdXRoUHJvbWlzZTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAgIEhhbmRsZSBhIHJlcXVlc3QgZXJyb3JzIGZyb20gcmVkZGl0LiBUaGlzIGlzIHVzdWFsbHkgY2F1c2VkIHdoZW4gb3VyXG4gICAgICAgYWNjZXNzX3Rva2VuIGhhcyBleHBpcmVkLCBvciByZWRkaXQgc2VydmVycyBhcmUgdW5kZXIgaGVhdnkgbG9hZC5cbiAgICAgICAgSWYgd2UgY2FuJ3QgcmVuZXcgb3VyIGFjY2VzcyB0b2tlbiwgd2UgdGhyb3cgYW4gZXJyb3IgLyBlbWl0IHRoZVxuICAgICAgICdhY2Nlc3NfdG9rZW5fZXhwaXJlZCcgZXZlbnQgdGhhdCB1c2VycyBjYW4gdGhlbiBoYW5kbGUgdG9cbiAgICAgICByZS1hdXRoZW50aWNhdGV0IGNsaWVudHNcbiAgICAgICAgSWYgd2UgY2FuIHJlbmV3IG91ciBhY2Nlc3MgdG9rZW4sIHdlIHRyeSB0byByZWF1dGhlbnRpY2F0ZSwgYW5kIGNhbGwgdGhlXG4gICAgICAgcmVkZGl0IGVuZHBvaW50IGFnYWluLlxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiAncmVzcG9uc2VFcnJvckhhbmRsZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXNwb25zZUVycm9ySGFuZGxlcihyZXNwb25zZSwgZW5kcG9pbnQpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAvLyAtIC0gLVxuICAgICAgLy8gQ2hlY2sgaGVhZGVycyBmb3IgbW9yZSBzcGVjaWZpYyBlcnJvcnMuXG5cbiAgICAgIHZhciB3d3dBdXRoID0gcmVzcG9uc2UuX2hlYWRlcnNbJ3d3dy1hdXRoZW50aWNhdGUnXTtcblxuICAgICAgaWYgKHd3d0F1dGggJiYgd3d3QXV0aC5pbmRleE9mKCdpbnN1ZmZpY2llbnRfc2NvcGUnKSAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIF93aGVuMlsnZGVmYXVsdCddLnJlamVjdChuZXcgX1Jlc3BvbnNlRXJyb3IyWydkZWZhdWx0J10oJ0luc3VmZmljaWVudCBzY29wZXMgcHJvdmlkZWQgZm9yIHRoaXMgY2FsbCcsIHJlc3BvbnNlLCBlbmRwb2ludCkpO1xuICAgICAgfVxuXG4gICAgICAvLyAtIC0gLVxuICAgICAgLy8gNDA0IC0gUGFnZSBub3QgZm91bmRcbiAgICAgIGlmIChyZXNwb25zZS5fc3RhdHVzID09PSA0MDQpIHtcbiAgICAgICAgdmFyIG1zZyA9ICdQYWdlIG5vdCBmb3VuZC4gSXMgdGhpcyBhIHZhbGlkIGVuZHBvaW50Pyc7XG4gICAgICAgIHJldHVybiBfd2hlbjJbJ2RlZmF1bHQnXS5yZWplY3QobmV3IF9SZXNwb25zZUVycm9yMlsnZGVmYXVsdCddKG1zZywgcmVzcG9uc2UsIGVuZHBvaW50KSk7XG4gICAgICB9XG5cbiAgICAgIC8vIC0gLSAtXG4gICAgICAvLyBBY2Nlc3MgdG9rZW4gaGFzIGV4cGlyZWRcbiAgICAgIGlmIChyZXNwb25zZS5fc3RhdHVzID09PSA0MDEgJiYgIXRoaXMuX3VzZXJDb25maWcudXNlQnJvd3NlckNvb2tpZXMpIHtcblxuICAgICAgICAvLyBBdGVtcHQgdG8gZ2V0IGEgbmV3IGFjY2VzcyB0b2tlbiFcbiAgICAgICAgdmFyIHJlYXV0aFByb21pc2UgPSB0aGlzLmF1dGhlbnRpY2F0ZShlbmRwb2ludCk7XG5cbiAgICAgICAgcmV0dXJuIHJlYXV0aFByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy8gcmVmcmVzaCB0aGUgYXV0aGVudGljYXRpb24gaGVhZGVycyBmb3IgdGhpcyBlbmRwb2ludFxuICAgICAgICAgIGVuZHBvaW50LnNldEhlYWRlcnMoX3RoaXMyLmJ1aWxkSGVhZGVycyhlbmRwb2ludC5jb250ZXh0T3B0aW9ucykpO1xuXG4gICAgICAgICAgdmFyIG1vZGlmaWVkRW5kcG9pbnQgPSBuZXcgX0VuZHBvaW50MlsnZGVmYXVsdCddKF90aGlzMi5fdXNlckNvbmZpZywgZW5kcG9pbnQuaG9zdG5hbWUsIGVuZHBvaW50Lm1ldGhvZCwgZW5kcG9pbnQucGF0aCwgX3RoaXMyLmJ1aWxkSGVhZGVycyhlbmRwb2ludC5jb250ZXh0T3B0aW9ucyksIGVuZHBvaW50LmdpdmVuQXJncywgZW5kcG9pbnQuY29udGV4dE9wdGlvbnMsIGVuZHBvaW50LnBvcnQpO1xuXG4gICAgICAgICAgcmV0dXJuIF93aGVuMlsnZGVmYXVsdCddLnJlc29sdmUobW9kaWZpZWRFbmRwb2ludCk7XG4gICAgICAgIH0pWydjYXRjaCddKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgIF90aGlzMi5lbWl0KCdhY2Nlc3NfdG9rZW5fZXhwaXJlZCcpO1xuXG4gICAgICAgICAgdmFyIG1zZyA9ICdBY2Nlc3MgdG9rZW4gaGFzIGV4cGlyZWQuIExpc3RlbiBmb3IgJyArICd0aGUgXCJhY2Nlc3NfdG9rZW5fZXhwaXJlZFwiIGV2ZW50IHRvICcgKyAnaGFuZGxlIHRoaXMgZ3JhY2VmdWxseSBpbiB5b3VyIGFwcC4nO1xuICAgICAgICAgIHJldHVybiBfd2hlbjJbJ2RlZmF1bHQnXS5yZWplY3QobmV3IF9SZXNwb25zZUVycm9yMlsnZGVmYXVsdCddKG1zZywgcmVzcG9uc2UsIGVuZHBvaW50KSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyAtIC0gLVxuICAgICAgLy8gQWNjZXNzIHRva2VuIGhhcyBleHBpcmVkIGFuZCB3ZSdyZSB0cnlpbmcgdG8gYXV0aGVudGljYXRlIHdpdGhvdXQgT0F1dGhcbiAgICAgIGlmIChyZXNwb25zZS5fc3RhdHVzID09PSA0MDEgJiYgIXRoaXMuX3VzZXJDb25maWcudXNlQnJvd3NlckNvb2tpZXMpIHtcbiAgICAgICAgdmFyIG1zZyA9ICdBY2Nlc3MgdG9rZW4gcmVxdWlyZWQgdG8gYWNjZXNzIHRoaXMgZW5kcG9pbnQuJztcbiAgICAgICAgcmV0dXJuIF93aGVuMlsnZGVmYXVsdCddLnJlamVjdChuZXcgX1Jlc3BvbnNlRXJyb3IyWydkZWZhdWx0J10obXNnLCByZXNwb25zZSwgZW5kcG9pbnQpKTtcbiAgICAgIH1cblxuICAgICAgLy8gLSAtIC1cbiAgICAgIC8vIFJlZGRpdCBzZXJ2ZXJzIGFyZSBidXN5LiBDYW4ndCBkbyBtdWNoIGhlcmUuXG5cbiAgICAgIGlmIChTdHJpbmcocmVzcG9uc2UuX3N0YXR1cykuc3Vic3RyaW5nKDAsIDEpID09PSAnNScpIHtcbiAgICAgICAgdmFyIG1vZGlmaWVkRW5kcG9pbnQgPSBuZXcgX0VuZHBvaW50MlsnZGVmYXVsdCddKHRoaXMuX3VzZXJDb25maWcsIGVuZHBvaW50Lmhvc3RuYW1lLCBlbmRwb2ludC5tZXRob2QsIGVuZHBvaW50LnBhdGgsIHRoaXMuYnVpbGRIZWFkZXJzKGVuZHBvaW50LmNvbnRleHRPcHRpb25zKSwgZW5kcG9pbnQuZ2l2ZW5BcmdzLCBlbmRwb2ludC5jb250ZXh0T3B0aW9ucywgZW5kcG9pbnQucG9ydCk7XG5cbiAgICAgICAgcmV0dXJuIF93aGVuMlsnZGVmYXVsdCddLnJlc29sdmUobW9kaWZpZWRFbmRwb2ludCk7XG4gICAgICB9XG5cbiAgICAgIC8vIC0gLSAtXG4gICAgICAvLyBBdCB0aGUgZW5kIG9mIHRoZSBkYXksIHdlIGp1c3QgdGhyb3cgYW4gZXJyb3Igc3RhdGluZyB0aGF0IHRoZXJlXG4gICAgICAvLyBpcyBub3RoaW5nIHdlIGNhbiBkbyAmIGdpdmUgZ2VuZXJhbCBhZHZpY2VcbiAgICAgIHJldHVybiBfd2hlbjJbJ2RlZmF1bHQnXS5yZWplY3QobmV3IF9SZXNwb25zZUVycm9yMlsnZGVmYXVsdCddKCdUaGlzIGNhbGwgZmFpbGVkLiAnICsgJ0RvZXMgdGhpcyBjYWxsIHJlcXVpcmUgYSB1c2VyPyAnICsgJ0lzIHRoZSB1c2VyIG1pc3NpbmcgcmVkZGl0IGdvbGQ/ICcgKyAnVHJ5aW5nIHRvIGNoYW5nZSBhIHN1YnJlZGRpdCB0aGF0IHRoZSB1c2VyIGRvZXMgbm90IG1vZGVyYXRlPyAnICsgJ1RoaXMgaXMgYW4gdW5yZWNvdmVyYWJsZSBlcnJvci4gQ2hlY2sgdGhlIHJlc3Qgb2YgdGhlICcgKyAnZXJyb3IgbWVzc2FnZSBmb3IgbW9yZSBpbmZvcm1hdGlvbi4nLCByZXNwb25zZSwgZW5kcG9pbnQpKTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAgIEhhbmRsZSByZWRkaXQgcmVzcG9uc2Ugc3RhdHVzIG9mIDJ4eC5cbiAgICAgICAgRmluYWxseSByZXR1cm4gdGhlIGRhdGEgaWYgdGhlcmUgd2VyZSBubyBwcm9ibGVtcy5cbiAgICAgKi9cbiAgfSwge1xuICAgIGtleTogJ2hhbmRsZVN1Y2Nlc3NSZXNwb25zZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZVN1Y2Nlc3NSZXNwb25zZShyZXNwb25zZSwgZW5kcG9pbnQpIHtcblxuICAgICAgdmFyIGRhdGEgPSByZXNwb25zZS5fYm9keSB8fCAnJztcblxuICAgICAgaWYgKGVuZHBvaW50LmNvbnRleHRPcHRpb25zLmRlY29kZUh0bWxFbnRpdGllcykge1xuICAgICAgICBkYXRhID0gX2hlMlsnZGVmYXVsdCddLmRlY29kZShkYXRhKTtcbiAgICAgIH1cblxuICAgICAgLy8gQXR0ZW1wdCB0byBwYXJzZSBzb21lIEpTT04sIG90aGVyd2lzZSBjb250aW51ZSBvbiAobWF5IGJlIGVtcHR5LCBvciB0ZXh0KVxuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG5cbiAgICAgICAgLy8gUmVkZGl0IGlzbid0IGFsd2F5cyBob25lc3QgaW4gdGhlaXIgcmVzcG9uc2Ugc3RhdHVzLiBDaGVjayBmb3JcbiAgICAgICAgLy8gYW55IGVycm9ycyBpbiAyeHggaHR0cCBzdGF0dXNlc1xuXG4gICAgICAgIC8vIGRhdGEuanNvbi5lcnJvcnNcbiAgICAgICAgaWYgKGRhdGEuanNvbiAmJiBkYXRhLmpzb24uZXJyb3JzICYmIGRhdGEuanNvbi5lcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHJldHVybiBfd2hlbjJbJ2RlZmF1bHQnXS5yZWplY3QobmV3IF9SZXNwb25zZUVycm9yMlsnZGVmYXVsdCddKCcnLCByZXNwb25zZSwgZW5kcG9pbnQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGRhdGEuanNvbi5lcnJvclxuICAgICAgICBpZiAoZGF0YS5qc29uICYmIGRhdGEuanNvbi5lcnJvcikge1xuICAgICAgICAgIHJldHVybiBfd2hlbjJbJ2RlZmF1bHQnXS5yZWplY3QobmV3IF9SZXNwb25zZUVycm9yMlsnZGVmYXVsdCddKCcnLCByZXNwb25zZSwgZW5kcG9pbnQpKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge31cblxuICAgICAgdmFyIHJhdGVMaW1pdFJlbWFpbmluZyA9IHJlc3BvbnNlLl9oZWFkZXJzWyd4LXJhdGVsaW1pdC1yZW1haW5pbmcnXTtcbiAgICAgIHZhciByYXRlTGltaXRVc2VkID0gcmVzcG9uc2UuX2hlYWRlcnNbJ3gtcmF0ZWxpbWl0LXVzZWQnXTtcbiAgICAgIHZhciByYXRlTGltaXRSZXNldCA9IHJlc3BvbnNlLl9oZWFkZXJzWyd4LXJhdGVsaW1pdC1yZXNldCddO1xuXG4gICAgICB2YXIgcmF0ZUxpbWl0RGF0YSA9IHtcbiAgICAgICAgcmF0ZUxpbWl0UmVtYWluaW5nOiByYXRlTGltaXRSZW1haW5pbmcgPyBOdW1iZXIocmF0ZUxpbWl0UmVtYWluaW5nKSA6IHZvaWQgMCxcbiAgICAgICAgcmF0ZUxpbWl0VXNlZDogcmF0ZUxpbWl0VXNlZCA/IE51bWJlcihyYXRlTGltaXRVc2VkKSA6IHZvaWQgMCxcbiAgICAgICAgcmF0ZUxpbWl0UmVzZXQ6IHJhdGVMaW1pdFJlc2V0ID8gTnVtYmVyKHJhdGVMaW1pdFJlc2V0KSA6IHZvaWQgMFxuICAgICAgfTtcblxuICAgICAgaWYgKHR5cGVvZiByYXRlTGltaXREYXRhLnJhdGVMaW1pdFVzZWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRoaXMuZW1pdCgncmF0ZV9saW1pdCcsIHJhdGVMaW1pdERhdGEpO1xuICAgICAgfVxuXG4gICAgICAvLyBVc2luZyBhIHRlc3QgdmFyaWFibGVcbiAgICAgIC8vIHRoaXMuX3VzZXJDb25maWcuX190ZXN0LnJhdGVMaW1pdFJlbWFpbmluZ0N1dG9mZlxuICAgICAgLy8gaXQncyBkZWZhdWx0IHZhbHVlIGlzIFwiMFwiLCBob3dldmVyIGluIHRoZSB0ZXN0cyBjYXNlcyB0aGlzXG4gICAgICAvLyB3b3VsZCB0YWtlIHRvbyBsb25nLlxuICAgICAgdmFyIGN1dG9mZiA9IHRoaXMuX3VzZXJDb25maWcuX190ZXN0LnJhdGVMaW1pdFJlbWFpbmluZ0N1dG9mZjtcblxuICAgICAgaWYgKHR5cGVvZiByYXRlTGltaXREYXRhLnJhdGVMaW1pdFJlbWFpbmluZyAhPT0gJ3VuZGVmaW5lZCcgJiYgTnVtYmVyKHJhdGVMaW1pdFJlbWFpbmluZykgPD0gY3V0b2ZmKSB7XG4gICAgICAgIHRoaXMuZW1pdCgncmF0ZV9saW1pdF9yZWFjaGVkJywgcmF0ZUxpbWl0RGF0YSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl91c2VyQ29uZmlnLnVzZUJyb3dzZXJDb29raWVzICYmIGRhdGEuZGF0YSAmJiBkYXRhLmRhdGEubW9kaGFzaCAmJiBkYXRhLmRhdGEubW9kaGFzaC5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5fbW9kaGFzaC5zZXRNb2RoYXNoKGRhdGEuZGF0YS5tb2RoYXNoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF93aGVuMlsnZGVmYXVsdCddLnJlc29sdmUoZGF0YSk7XG4gICAgfVxuXG4gICAgLypcbiAgICAgICBMaXN0aW5nIHN1cHBvcnQuXG4gICAgICovXG4gIH0sIHtcbiAgICBrZXk6ICdnZXRMaXN0aW5nJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TGlzdGluZyhlbmRwb2ludCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIC8vIG51bWJlciBvZiByZXN1bHRzIHRoYXQgd2UgaGF2ZSBsb2FkZWQgc28gZmFyLiBJdCB3aWxsXG4gICAgICAvLyBpbmNyZWFzZSAvIGRlY3JlYXNlIHdoZW4gY2FsbGluZyBuZXh0IC8gcHJldmlvdXMuXG4gICAgICB2YXIgY291bnQgPSAwO1xuICAgICAgdmFyIGxpbWl0ID0gZW5kcG9pbnQuYXJncy5saW1pdCB8fCAyNTtcbiAgICAgIC8vIGtlZXAgYSByZWZlcmVuY2UgdG8gdGhlIHN0YXJ0IG9mIHRoaXMgbGlzdGluZ1xuICAgICAgdmFyIHN0YXJ0ID0gZW5kcG9pbnQuYXJncy5hZnRlciB8fCBudWxsO1xuXG4gICAgICB2YXIgZ2V0U2xpY2UgPSBmdW5jdGlvbiBnZXRTbGljZShlbmRwb2ludCkge1xuXG4gICAgICAgIHJldHVybiBfdGhpczMuY2FsbFJlZGRpdEFwaShlbmRwb2ludCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzBdO1xuXG4gICAgICAgICAgdmFyIHNsaWNlID0ge307XG4gICAgICAgICAgdmFyIGxpc3RpbmcgPSByZXN1bHQ7XG5cbiAgICAgICAgICBzbGljZS5nZXQgPSByZXN1bHQ7XG5cbiAgICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZW5kcG9pbnQuY29udGV4dE9wdGlvbnMubGlzdGluZ0luZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ011c3Qgc3BlY2lmeSBhIGBsaXN0aW5nSW5kZXhgIGZvciB0aGlzIGxpc3RpbmcuJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxpc3RpbmcgPSByZXN1bHRbZW5kcG9pbnQuY29udGV4dE9wdGlvbnMubGlzdGluZ0luZGV4XTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzbGljZS5jb3VudCA9IGNvdW50O1xuXG4gICAgICAgICAgc2xpY2UuYmVmb3JlID0gbGlzdGluZy5kYXRhLmJlZm9yZSB8fCBudWxsO1xuICAgICAgICAgIHNsaWNlLmFmdGVyID0gbGlzdGluZy5kYXRhLmFmdGVyIHx8IG51bGw7XG4gICAgICAgICAgc2xpY2UuYWxsQ2hpbGRyZW4gPSBsaXN0aW5nLmRhdGEuY2hpbGRyZW4gfHwgW107XG5cbiAgICAgICAgICBzbGljZS5lbXB0eSA9IHNsaWNlLmFsbENoaWxkcmVuLmxlbmd0aCA9PT0gMDtcblxuICAgICAgICAgIHNsaWNlLmNoaWxkcmVuID0gc2xpY2UuYWxsQ2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgY2hpbGQuZGF0YSA9IGNoaWxkLmRhdGEgfHwge307XG4gICAgICAgICAgICByZXR1cm4gIWNoaWxkLmRhdGEuc3RpY2tpZWQ7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBzbGljZS5zdGlja2llZCA9IHNsaWNlLmFsbENoaWxkcmVuLmZpbHRlcihmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgIGNoaWxkLmRhdGEgPSBjaGlsZC5kYXRhIHx8IHt9O1xuICAgICAgICAgICAgcmV0dXJuIGNoaWxkLmRhdGEuc3RpY2tpZWQ7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBzbGljZS5uZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY291bnQgKz0gbGltaXQ7XG5cbiAgICAgICAgICAgIHZhciBuZXdBcmdzID0gZW5kcG9pbnQuZ2l2ZW5BcmdzO1xuICAgICAgICAgICAgbmV3QXJncy5iZWZvcmUgPSBudWxsO1xuICAgICAgICAgICAgbmV3QXJncy5hZnRlciA9IHNsaWNlLmNoaWxkcmVuW3NsaWNlLmNoaWxkcmVuLmxlbmd0aCAtIDFdLmRhdGEubmFtZTtcbiAgICAgICAgICAgIG5ld0FyZ3MuY291bnQgPSBjb3VudDtcbiAgICAgICAgICAgIHJldHVybiBnZXRTbGljZShuZXcgX0VuZHBvaW50MlsnZGVmYXVsdCddKF90aGlzMy5fdXNlckNvbmZpZywgZW5kcG9pbnQuaG9zdG5hbWUsIGVuZHBvaW50Lm1ldGhvZCwgZW5kcG9pbnQucGF0aCwgX3RoaXMzLmJ1aWxkSGVhZGVycyhlbmRwb2ludC5jb250ZXh0T3B0aW9ucyksIG5ld0FyZ3MsIGVuZHBvaW50LmNvbnRleHRPcHRpb25zLCBlbmRwb2ludC5wb3J0KSk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHNsaWNlLnByZXZpb3VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY291bnQgLT0gbGltaXQ7XG5cbiAgICAgICAgICAgIHZhciBuZXdBcmdzID0gZW5kcG9pbnQuZ2l2ZW5BcmdzO1xuICAgICAgICAgICAgbmV3QXJncy5iZWZvcmUgPSBzbGljZS5jaGlsZHJlblswXS5kYXRhLm5hbWU7XG4gICAgICAgICAgICBuZXdBcmdzLmFmdGVyID0gbnVsbDtcbiAgICAgICAgICAgIG5ld0FyZ3MuY291bnQgPSBjb3VudDtcbiAgICAgICAgICAgIHJldHVybiBnZXRTbGljZShuZXcgX0VuZHBvaW50MlsnZGVmYXVsdCddKF90aGlzMy5fdXNlckNvbmZpZywgZW5kcG9pbnQuaG9zdG5hbWUsIGVuZHBvaW50Lm1ldGhvZCwgZW5kcG9pbnQucGF0aCwgX3RoaXMzLmJ1aWxkSGVhZGVycyhlbmRwb2ludC5jb250ZXh0T3B0aW9ucyksIG5ld0FyZ3MsIGVuZHBvaW50LmNvbnRleHRPcHRpb25zLCBlbmRwb2ludC5wb3J0KSk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHNsaWNlLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY291bnQgPSAwO1xuXG4gICAgICAgICAgICB2YXIgbmV3QXJncyA9IGVuZHBvaW50LmdpdmVuQXJncztcbiAgICAgICAgICAgIG5ld0FyZ3MuYmVmb3JlID0gbnVsbDtcbiAgICAgICAgICAgIG5ld0FyZ3MuYWZ0ZXIgPSBzdGFydDtcbiAgICAgICAgICAgIG5ld0FyZ3MuY291bnQgPSBjb3VudDtcbiAgICAgICAgICAgIHJldHVybiBnZXRTbGljZShuZXcgX0VuZHBvaW50MlsnZGVmYXVsdCddKF90aGlzMy5fdXNlckNvbmZpZywgZW5kcG9pbnQuaG9zdG5hbWUsIGVuZHBvaW50Lm1ldGhvZCwgZW5kcG9pbnQucGF0aCwgX3RoaXMzLmJ1aWxkSGVhZGVycyhlbmRwb2ludC5jb250ZXh0T3B0aW9ucyksIG5ld0FyZ3MsIGVuZHBvaW50LmNvbnRleHRPcHRpb25zLCBlbmRwb2ludC5wb3J0KSk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHNsaWNlLnJlcXVlcnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0U2xpY2UoZW5kcG9pbnQpO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICByZXR1cm4gc2xpY2U7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIGdldFNsaWNlKGVuZHBvaW50KTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAgIEVuYWJsZSBwYXRoIHN5bnRheCBzdXBwb3J0LCBlLmcuIHRoaXMucGF0aCgnL3BhdGgvdG8vJGVuZHBvaW50L2V0YycpXG4gICAgICAgIENhbiB0YWtlIGFuIHVybCBhcyB3ZWxsLCBidXQgdGhlIGZpcnN0IHBhcnQgb2YgdGhlIHVybCBpcyBjaG9wcGVkXG4gICAgICAgb2ZmIGJlY2F1c2UgaXQgaXMgbm90IG5lZWRlZC4gV2Ugd2lsbCBhbHdheXMgdXNlIHRoZSBzZXJ2ZXIgb2F1dGhcbiAgICAgICB0byBjYWxsIHRoZSBBUEkuLi5cbiAgICAgICAgZS5nLiBodHRwczovL3d3dy5leGFtcGxlLmNvbS9hcGkvdjEvbWVcbiAgICAgICAgd2lsbCBvbmx5IHVzZSB0aGUgcGF0aDogL2FwaS92MS9tZVxuICAgICAqL1xuICB9LCB7XG4gICAga2V5OiAncGF0aCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhdGgodXJsT3JQYXRoKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgdmFyIHBhcnNlZCA9IF91cmwyWydkZWZhdWx0J10ucGFyc2UodXJsT3JQYXRoKTtcbiAgICAgIHZhciBwYXRoID0gcGFyc2VkLnBhdGhuYW1lO1xuXG4gICAgICB2YXIgY2FsbHMgPSB7fTtcblxuICAgICAgWydnZXQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnZGVsZXRlJywgJ3VwZGF0ZSddLmZvckVhY2goZnVuY3Rpb24gKHZlcmIpIHtcbiAgICAgICAgY2FsbHNbdmVyYl0gPSBmdW5jdGlvbiAodXNlckdpdmVuQXJncywgdXNlckNvbnRleHRPcHRpb25zKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzNC5jYWxsUmVkZGl0QXBpKG5ldyBfRW5kcG9pbnQyWydkZWZhdWx0J10oX3RoaXM0Ll91c2VyQ29uZmlnLCBfdGhpczQuX3VzZXJDb25maWcuc2VydmVyT0F1dGgsIHZlcmIsIHBhdGgsIF90aGlzNC5idWlsZEhlYWRlcnModXNlckNvbnRleHRPcHRpb25zKSwgdXNlckdpdmVuQXJncywgdXNlckNvbnRleHRPcHRpb25zLCBfdGhpczQuX3VzZXJDb25maWcuc2VydmVyT0F1dGhQb3J0KSk7XG4gICAgICAgIH07XG4gICAgICB9KTtcblxuICAgICAgLy8gQWRkIGxpc3Rpbmcgc3VwcG9ydFxuICAgICAgY2FsbHMubGlzdGluZyA9IGZ1bmN0aW9uICh1c2VyR2l2ZW5BcmdzLCB1c2VyQ29udGV4dE9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzNC5nZXRMaXN0aW5nKG5ldyBfRW5kcG9pbnQyWydkZWZhdWx0J10oX3RoaXM0Ll91c2VyQ29uZmlnLCBfdGhpczQuX3VzZXJDb25maWcuc2VydmVyT0F1dGgsICdnZXQnLCBwYXRoLCBfdGhpczQuYnVpbGRIZWFkZXJzKHVzZXJDb250ZXh0T3B0aW9ucyksIHVzZXJHaXZlbkFyZ3MsIHVzZXJDb250ZXh0T3B0aW9ucywgX3RoaXM0Ll91c2VyQ29uZmlnLnNlcnZlck9BdXRoUG9ydCkpO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIGNhbGxzO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBSZWRkaXRSZXF1ZXN0O1xufSkoX2V2ZW50czJbJ2RlZmF1bHQnXS5FdmVudEVtaXR0ZXIpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBSZWRkaXRSZXF1ZXN0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZWRkaXRSZXF1ZXN0LmpzLm1hcFxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxudmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQoX3gsIF94MiwgX3gzKSB7IHZhciBfYWdhaW4gPSB0cnVlOyBfZnVuY3Rpb246IHdoaWxlIChfYWdhaW4pIHsgdmFyIG9iamVjdCA9IF94LCBwcm9wZXJ0eSA9IF94MiwgcmVjZWl2ZXIgPSBfeDM7IF9hZ2FpbiA9IGZhbHNlOyBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTsgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgeyB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChwYXJlbnQgPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBlbHNlIHsgX3ggPSBwYXJlbnQ7IF94MiA9IHByb3BlcnR5OyBfeDMgPSByZWNlaXZlcjsgX2FnYWluID0gdHJ1ZTsgZGVzYyA9IHBhcmVudCA9IHVuZGVmaW5lZDsgY29udGludWUgX2Z1bmN0aW9uOyB9IH0gZWxzZSBpZiAoJ3ZhbHVlJyBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfSB9O1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqWydkZWZhdWx0J10gPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAnZnVuY3Rpb24nICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAnICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgX3F1ZXJ5c3RyaW5nID0gcmVxdWlyZSgncXVlcnlzdHJpbmcnKTtcblxudmFyIF9xdWVyeXN0cmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9xdWVyeXN0cmluZyk7XG5cbnZhciBfZXZlbnRzID0gcmVxdWlyZSgnZXZlbnRzJyk7XG5cbnZhciBfZXZlbnRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V2ZW50cyk7XG5cbnZhciBfd2hlbiA9IHJlcXVpcmUoJ3doZW4nKTtcblxudmFyIF93aGVuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3doZW4pO1xuXG52YXIgX3doZW5EZWxheSA9IHJlcXVpcmUoJ3doZW4vZGVsYXknKTtcblxudmFyIF93aGVuRGVsYXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2hlbkRlbGF5KTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxudmFyIHUgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfdXRpbHMpO1xuXG52YXIgX1Jlc3BvbnNlRXJyb3IgPSByZXF1aXJlKCcuL1Jlc3BvbnNlRXJyb3InKTtcblxudmFyIF9SZXNwb25zZUVycm9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1Jlc3BvbnNlRXJyb3IpO1xuXG52YXIgX2h0dHBzSHR0cHNOb2RlID0gcmVxdWlyZSgnLi9odHRwcy9odHRwc05vZGUnKTtcblxudmFyIF9odHRwc0h0dHBzTm9kZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9odHRwc0h0dHBzTm9kZSk7XG5cbnZhciBfaHR0cHNIdHRwc0Jyb3dzZXIgPSByZXF1aXJlKCcuL2h0dHBzL2h0dHBzQnJvd3NlcicpO1xuXG52YXIgX2h0dHBzSHR0cHNCcm93c2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2h0dHBzSHR0cHNCcm93c2VyKTtcblxudmFyIHJhd0h0dHBzID0gdS5pc05vZGUoKSA/IF9odHRwc0h0dHBzTm9kZTJbJ2RlZmF1bHQnXSA6IF9odHRwc0h0dHBzQnJvd3NlcjJbJ2RlZmF1bHQnXTtcblxudmFyIFJlcXVlc3QgPSAoZnVuY3Rpb24gKF9ldmVudHMkRXZlbnRFbWl0dGVyKSB7XG4gIF9pbmhlcml0cyhSZXF1ZXN0LCBfZXZlbnRzJEV2ZW50RW1pdHRlcik7XG5cbiAgZnVuY3Rpb24gUmVxdWVzdCh0aHJvdHRsZSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZXF1ZXN0KTtcblxuICAgIF9nZXQoT2JqZWN0LmdldFByb3RvdHlwZU9mKFJlcXVlc3QucHJvdG90eXBlKSwgJ2NvbnN0cnVjdG9yJywgdGhpcykuY2FsbCh0aGlzKTtcbiAgICB0aGlzLl90aHJvdHRsZSA9IHRocm90dGxlO1xuICB9XG5cbiAgLypcbiAgICAgTWFrZXMgYW4gaHR0cHMgY2FsbCB3aXRoIGEgZ2l2ZW4gZW5kcG9pbnQuXG4gICAgICBJZiBhbiBlcnJvciBoYW5kbGVyIGlzIHByb3ZpZGVkLCBpdCB3aWxsIGNhbGwgaXQgaW5cbiAgICAgdGhlIGNhc2Ugb2YgYSByZXR1cm5lZCBzdGF0dXMgdGhhdCBpcyBub3QgMnh4IC8gc3VjY2Vzcy5cbiAgICAgIElmIHRoZSBlcnJvckhhbmRsZXIgcmVzdWx0cyBpbiBhIHJlamVjdGVkIHByb21pc2UsIHRoZW4gd2Ugd2lsbCBOT1RcbiAgICAgcmV0cnkgdGhlIGVuZHBvaW50IGFuZCByZWplY3Qgd2l0aCB0aGUgZ2l2ZW4gZXJyb3IuXG4gICAqL1xuXG4gIF9jcmVhdGVDbGFzcyhSZXF1ZXN0LCBbe1xuICAgIGtleTogJ2h0dHBzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaHR0cHMoZW5kcG9pbnQsIHJlc3BvbnNlRXJyb3JIYW5kbGVyKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gdGhpcy5fdGhyb3R0bGUud2FpdCgpLnRoZW4oZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciByZXFPcHRpb25zID0ge1xuICAgICAgICAgIG1ldGhvZDogZW5kcG9pbnQubWV0aG9kLnRvVXBwZXJDYXNlKCksXG4gICAgICAgICAgaG9zdG5hbWU6IGVuZHBvaW50Lmhvc3RuYW1lLFxuICAgICAgICAgIHBhdGg6IGVuZHBvaW50LmNvbXB1dGVkUGF0aCxcbiAgICAgICAgICBoZWFkZXJzOiBlbmRwb2ludC5oZWFkZXJzLFxuICAgICAgICAgIHVzZUJyb3dzZXJDb29raWVzOiBlbmRwb2ludC5fdXNlckNvbmZpZy51c2VCcm93c2VyQ29va2llc1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEBUT0RPIE5vZGUuanMgaGFzIGlzc3VlcyBpZiB5b3Ugc2V0IGl0IHRvIDgwP1xuICAgICAgICBpZiAoZW5kcG9pbnQucG9ydCAhPT0gODApIHtcbiAgICAgICAgICByZXFPcHRpb25zLnBvcnQgPSBlbmRwb2ludC5wb3J0O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGZvcm1EYXRhID0gZW5kcG9pbnQuYXJncztcblxuICAgICAgICBpZiAocmVxT3B0aW9ucy5tZXRob2QgPT09IFwiUFVUXCIgJiYgcmVxT3B0aW9ucy5wYXRoLnN1YnN0cmluZygwLCAxOCkgPT09ICcvYXBpL3YxL21lL2ZyaWVuZHMnKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJFbnRlcmVkXCIpO1xuICAgICAgICAgIGZvcm1EYXRhID0gJ3t9JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByYXdIdHRwcyhyZXFPcHRpb25zLCBmb3JtRGF0YSkudGltZW91dChlbmRwb2ludC5jb250ZXh0T3B0aW9ucy5yZXF1ZXN0VGltZW91dCwgbmV3IF9SZXNwb25zZUVycm9yMlsnZGVmYXVsdCddKCdUaGUgcmVxdWVzdCBoYXMgdGltZWQgb3V0Jywge30sIGVuZHBvaW50KSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcblxuICAgICAgICAgIHZhciBzdGF0dXNDaGFyID0gU3RyaW5nKHJlc3BvbnNlLl9zdGF0dXMpLnN1YnN0cmluZygwLCAxKTtcbiAgICAgICAgICB2YXIgc3VjY2VzcyA9IHN0YXR1c0NoYXIgPT09ICcyJztcblxuICAgICAgICAgIC8vIElmIHN1Y2Nlc3Mgd2UncmUgZG9uZSFcbiAgICAgICAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIEVsc2UsIHJldHJ5IHRoZSBlbmRwb2ludCBpZiB3ZSBjYW4uXG4gICAgICAgICAgZW5kcG9pbnQuY29udGV4dE9wdGlvbnMucmV0cnlBdHRlbXB0c0xlZnQtLTtcblxuICAgICAgICAgIHZhciByZXNwb25zZUVycm9yID0gdW5kZWZpbmVkO1xuICAgICAgICAgIHJlc3BvbnNlRXJyb3IgPSBuZXcgX1Jlc3BvbnNlRXJyb3IyWydkZWZhdWx0J10oJ1Jlc3BvbnNlIEVycm9yJywgcmVzcG9uc2UsIGVuZHBvaW50KTtcblxuICAgICAgICAgIF90aGlzLmVtaXQoJ3Jlc3BvbnNlX2Vycm9yJywgcmVzcG9uc2VFcnJvcik7XG5cbiAgICAgICAgICBpZiAoZW5kcG9pbnQuY29udGV4dE9wdGlvbnMucmV0cnlBdHRlbXB0c0xlZnQgPD0gMCkge1xuICAgICAgICAgICAgcmVzcG9uc2VFcnJvci5tZXNzYWdlID0gJ0FsbCByZXRyeSBhdHRlbXB0cyBleGhhdXN0ZWQuXFxuXFxuJyArIHJlc3BvbnNlRXJyb3IubWVzc2FnZTtcbiAgICAgICAgICAgIHJldHVybiBfd2hlbjJbJ2RlZmF1bHQnXS5yZWplY3QocmVzcG9uc2VFcnJvcik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gVXNlIHRoZSBnaXZlbiByZXNwb25zZSBlcnJvciBoYW5kbGVyLCBvciB1c2UgYSB0aGluIHdyYXBwZXIgdGhhdFxuICAgICAgICAgIC8vIHdpbGwgcmV0dXJuIHRoZSBlbmRwb2ludCB3aXRob3V0IGFueSBtb2RpZmljYXRpb25zXG4gICAgICAgICAgcmVzcG9uc2VFcnJvckhhbmRsZXIgPSByZXNwb25zZUVycm9ySGFuZGxlciB8fCBmdW5jdGlvbiAocmVzcG9uc2UsIGVuZHBvaW50KSB7XG4gICAgICAgICAgICByZXR1cm4gX3doZW4yWydkZWZhdWx0J10ucmVzb2x2ZShlbmRwb2ludCk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIC8vIENhbGwgdGhlIGVycm9yIGhhbmRsZXIuIElmIG5vdCByZWplY3RlZCwgcmV0cnkgdGhlIGVuZHBvaW50XG4gICAgICAgICAgLy8gd2l0aCBhbnkgbW9kaWZpY2F0aW9ucyBtYWRlIGJ5IHRoZSByZXNwb25zZUVycm9ySGFuZGxlclxuICAgICAgICAgIHJldHVybiByZXNwb25zZUVycm9ySGFuZGxlcihyZXNwb25zZSwgZW5kcG9pbnQpLnRoZW4oZnVuY3Rpb24gKG1vZGlmaWVkRW5kcG9pbnQpIHtcblxuICAgICAgICAgICAgLy8gT25seSBoYXZlIGEgcmV0cnkgZGVsYXkgaWYgdGhlIGVuZHBvaW50IGhhZCBhbiBIVFRQIDV4eCBzdGF0dXNcbiAgICAgICAgICAgIHZhciByZXRyeURlbGF5ID0gc3RhdHVzQ2hhciA9PT0gJzUnID8gbW9kaWZpZWRFbmRwb2ludC5jb250ZXh0T3B0aW9ucy5yZXRyeURlbGF5IDogMDtcblxuICAgICAgICAgICAgcmV0dXJuICgwLCBfd2hlbkRlbGF5MlsnZGVmYXVsdCddKShyZXRyeURlbGF5KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmh0dHBzKG1vZGlmaWVkRW5kcG9pbnQsIHJlc3BvbnNlRXJyb3JIYW5kbGVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBSZXF1ZXN0O1xufSkoX2V2ZW50czJbJ2RlZmF1bHQnXS5FdmVudEVtaXR0ZXIpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBSZXF1ZXN0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZXF1ZXN0LmpzLm1hcFxuIiwiLypcbiAgIEEgdW5pZm9ybSB3YXkgdG8gcmVwb3J0IHJlc3BvbnNlIGVycm9ycy5cbiovXG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2dldCA9IGZ1bmN0aW9uIGdldChfeCwgX3gyLCBfeDMpIHsgdmFyIF9hZ2FpbiA9IHRydWU7IF9mdW5jdGlvbjogd2hpbGUgKF9hZ2FpbikgeyB2YXIgb2JqZWN0ID0gX3gsIHByb3BlcnR5ID0gX3gyLCByZWNlaXZlciA9IF94MzsgX2FnYWluID0gZmFsc2U7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyBfeCA9IHBhcmVudDsgX3gyID0gcHJvcGVydHk7IF94MyA9IHJlY2VpdmVyOyBfYWdhaW4gPSB0cnVlOyBkZXNjID0gcGFyZW50ID0gdW5kZWZpbmVkOyBjb250aW51ZSBfZnVuY3Rpb247IH0gfSBlbHNlIGlmICgndmFsdWUnIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAnZnVuY3Rpb24nICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAnICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgUmVzcG9uc2VFcnJvciA9IChmdW5jdGlvbiAoX0Vycm9yKSB7XG4gIF9pbmhlcml0cyhSZXNwb25zZUVycm9yLCBfRXJyb3IpO1xuXG4gIGZ1bmN0aW9uIFJlc3BvbnNlRXJyb3IobWVzc2FnZSwgcmVzcG9uc2UsIGVuZHBvaW50KSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlc3BvbnNlRXJyb3IpO1xuXG4gICAgX2dldChPYmplY3QuZ2V0UHJvdG90eXBlT2YoUmVzcG9uc2VFcnJvci5wcm90b3R5cGUpLCAnY29uc3RydWN0b3InLCB0aGlzKS5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5tZXNzYWdlID0gW21lc3NhZ2UsICc+Pj4gUmVzcG9uc2UgU3RhdHVzOiAnICsgcmVzcG9uc2UuX3N0YXR1cywgJz4+PiBFbmRwb2ludCBVUkw6ICcgKyBlbmRwb2ludC51cmwsICc+Pj4gQXJndW1lbnRzOiAnICsgSlNPTi5zdHJpbmdpZnkoZW5kcG9pbnQuYXJncywgbnVsbCwgMiksICc+Pj4gUmVzcG9uc2UgQm9keTonLCByZXNwb25zZS5fYm9keV0uam9pbignXFxuXFxuJyk7XG5cbiAgICB0aGlzLnVybCA9IGVuZHBvaW50LnVybDtcbiAgICB0aGlzLmFyZ3MgPSBlbmRwb2ludC5hcmdzO1xuICAgIHRoaXMuc3RhdHVzID0gcmVzcG9uc2UuX3N0YXR1cztcbiAgICB0aGlzLmJvZHkgPSByZXNwb25zZS5fYm9keTtcbiAgICB0aGlzLnJldHJ5QXR0ZW1wdHNMZWZ0ID0gZW5kcG9pbnQuY29udGV4dE9wdGlvbnMucmV0cnlBdHRlbXB0c0xlZnQ7XG4gICAgdGhpcy5lbmRwb2ludCA9IGVuZHBvaW50O1xuICB9XG5cbiAgcmV0dXJuIFJlc3BvbnNlRXJyb3I7XG59KShFcnJvcik7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IFJlc3BvbnNlRXJyb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJlc3BvbnNlRXJyb3IuanMubWFwXG4iLCIvKlxuICAgQSBiYXNpYyB0aHJvdHRsZSBtYW5hZ2VyLiBFeHBvc2VzIDEgZnVuY3RvaW4gYHdhaXRgIHRoYXRcbiAgIHdpbGwgcmV0dXJuIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIG9uY2Ugd2UndmUgd2FpdGVkIHRoZSBwcm9wZXJcbiAgIGFtb3VudCBvZiB0aW1lLCBlLmcuXG5cbiAgIHZhciB0aHJvdHRsZSA9IG5ldyBUaHJvdHRsZSgpO1xuXG4gICB0aHJvdHRsZS53YWl0KCkgLy8gcmVzb2x2ZXMgYWZ0ZXIgMW1zXG4gICB0aHJvdHRsZS53YWl0KCkgLy8gcmVzb2x2ZXMgYWZ0ZXIgMTAwMDFtc1xuICAgdGhyb3R0bGUud2FpdCgpIC8vIHJlc29sdmVzIGFmdGVyIDIwMDFtc1xuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSkoKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbicpOyB9IH1cblxudmFyIF93aGVuID0gcmVxdWlyZSgnd2hlbicpO1xuXG52YXIgX3doZW4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2hlbik7XG5cbnZhciBfd2hlbkRlbGF5ID0gcmVxdWlyZSgnd2hlbi9kZWxheScpO1xuXG52YXIgX3doZW5EZWxheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93aGVuRGVsYXkpO1xuXG52YXIgVGhyb3R0bGUgPSAoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBUaHJvdHRsZSgpIHtcbiAgICB2YXIgdGhyb3R0bGVNcyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IDEwMDAgOiBhcmd1bWVudHNbMF07XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGhyb3R0bGUpO1xuXG4gICAgdGhpcy5fdGhyb3R0bGVNcyA9IHRocm90dGxlTXM7XG5cbiAgICAvKlxuICAgICAgIFRoZSBjdXJyZW50IHRocm90dGxlIGRlbGF5IGJlZm9yZSBhIHJlcXVlc3Qgd2lsbCBnbyB0aHJvdWdoXG4gICAgICAgaW5jcmVtZW50cyBldmVyeSB0aW1lIGEgY2FsbCBpcyBtYWRlLCBhbmQgaXMgcmVkdWNlZCB3aGVuIGFcbiAgICAgICBjYWxsIGZpbmlzaGVzLlxuICAgICAgICBUaW1lIGlzIGFkZGVkICYgcmVtb3ZlZCBiYXNlZCBvbiB0aGUgdGhyb3R0bGUgdmFyaWFibGUuXG4gICAgICovXG4gICAgdGhpcy5fdGhyb3R0bGVEZWxheSA9IDE7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVGhyb3R0bGUsIFt7XG4gICAga2V5OiAnd2FpdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHdhaXQoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAvLyByZXNvbHZlIHRoaXMgcHJvbWlzZSBhZnRlciB0aGUgY3VycmVudCB0aHJvdHRsZURlbGF5XG4gICAgICB2YXIgZGVsYXlQcm9taXNlID0gKDAsIF93aGVuRGVsYXkyWydkZWZhdWx0J10pKHRoaXMuX3Rocm90dGxlRGVsYXkpO1xuXG4gICAgICAvLyBhZGQgdGhyb3R0bGVNcyB0byB0aGUgdG90YWwgdGhyb3R0bGVEZWxheVxuICAgICAgdGhpcy5fdGhyb3R0bGVEZWxheSArPSB0aGlzLl90aHJvdHRsZU1zO1xuXG4gICAgICAvLyBhZnRlciB0aHJvdHRsZU1zIHRpbWUsIHN1YnRyYWN0IHRocm90dGxlTXMgZnJvbVxuICAgICAgLy8gdGhlIHRocm90dGxlRGVsYXlcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5fdGhyb3R0bGVEZWxheSAtPSBfdGhpcy5fdGhyb3R0bGVNcztcbiAgICAgIH0sIHRoaXMuX3Rocm90dGxlTXMpO1xuXG4gICAgICByZXR1cm4gZGVsYXlQcm9taXNlO1xuICAgIH1cblxuICAgIC8qXG4gICAgICAgVGltZSBpbiBtaWxsaXNlY29uZHMgdG8gYWRkIHRvIHRoZSB0aHJvdHRsZSBkZWxheVxuICAgICovXG4gIH0sIHtcbiAgICBrZXk6ICdhZGRUaW1lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkVGltZSh0aW1lTXMpIHtcbiAgICAgIHRoaXMuX3Rocm90dGxlRGVsYXkgKz0gdGltZU1zO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBUaHJvdHRsZTtcbn0pKCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IFRocm90dGxlO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG4vLyMgc291cmNlTWFwcGluZ1VSTD1UaHJvdHRsZS5qcy5tYXBcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmpbJ2RlZmF1bHQnXSA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG52YXIgdSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF91dGlscyk7XG5cbi8qXG4gICBBIGNsYXNzIG1hZGUgdXAgb2YgdGhlIHVzZXIgY29uZmlndXJhdGlvbi5cblxuICAgTm9ybWFsaXplcyB0aGUgY29uZmlndXJhaXRvbiAmIGNoZWNrcyBmb3Igc2ltcGxlIGVycm9ycy5cblxuICAgUHJvdmlkZXMgc29tZSBoZWxwZXIgZnVuY3RvbnMgZm9yIGdldHRpbmcgdXNlciBzZXQgdmFsdWVzLlxuICovXG5cbnZhciBVc2VyQ29uZmlnID0gKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gVXNlckNvbmZpZyh1c2VyQ29uZmlndXJhdGlvbikge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBVc2VyQ29uZmlnKTtcblxuICAgIC8vXG4gICAgLy8gLSAtIC0gQ09ORklHVVJBVElPTiBWQUxVRVMgLSAtIC1cbiAgICAvL1xuXG4gICAgdmFyIG1pc3NpbmdNc2cgPSAnTWlzc2luZyByZXF1aXJlZCB1c2VyQ29uZmlndXJhdGlvbiB2YWx1ZSAnO1xuXG4gICAgLy8gKiogSURFTkZJRklDQVRJT05cbiAgICB0aGlzLnVzZXJBZ2VudCA9IHUudGhpc09yVGhyb3codXNlckNvbmZpZ3VyYXRpb24udXNlckFnZW50LCAnTWlzc2luZyByZXF1aXJlZCB1c2VyQ29uZmlndXJhdGlvbiB2YWx1ZSBgdXNlckFnZW50YCcpO1xuXG4gICAgdGhpcy5pc05vZGUgPSB1LnRoaXNPclRoYXQodXNlckNvbmZpZ3VyYXRpb24uYnJvd3NlciwgdS5pc05vZGUoKSk7XG5cbiAgICB0aGlzLm1vYmlsZSA9IHUudGhpc09yVGhhdCh1c2VyQ29uZmlndXJhdGlvbi5tb2JpbGUsIGZhbHNlKTtcblxuICAgIHRoaXMudXNlQnJvd3NlckNvb2tpZXMgPSB1LnRoaXNPclRoYXQodXNlckNvbmZpZ3VyYXRpb24udXNlQnJvd3NlckNvb2tpZXMsIGZhbHNlKTtcblxuICAgIGlmICh1c2VyQ29uZmlndXJhdGlvbi5hcGlTZXJ2ZXJVcmkpIHtcbiAgICAgIHVzZXJDb25maWd1cmF0aW9uLnNlcnZlck9BdXRoID0gdXNlckNvbmZpZ3VyYXRpb24uYXBpU2VydmVyVXJpO1xuICAgIH1cblxuICAgIGlmICh1c2VyQ29uZmlndXJhdGlvbi5hdXRoU2VydmVyVXJpKSB7XG4gICAgICB1c2VyQ29uZmlndXJhdGlvbi5zZXJ2ZXJXV1cgPSB1c2VyQ29uZmlndXJhdGlvbi5hdXRoU2VydmVyVXJpO1xuICAgIH1cblxuICAgIC8vICoqIFNFUlZFUlNcbiAgICBpZiAodGhpcy51c2VCcm93c2VyQ29va2llcykge1xuICAgICAgdGhpcy5zZXJ2ZXJPQXV0aCA9IHUudGhpc09yVGhhdCh1c2VyQ29uZmlndXJhdGlvbi5zZXJ2ZXJPQXV0aCwgJ3d3dy5yZWRkaXQuY29tJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2VydmVyT0F1dGggPSB1LnRoaXNPclRoYXQodXNlckNvbmZpZ3VyYXRpb24uc2VydmVyT0F1dGgsICdvYXV0aC5yZWRkaXQuY29tJyk7XG4gICAgfVxuXG4gICAgdGhpcy5zZXJ2ZXJXV1cgPSB1LnRoaXNPclRoYXQodXNlckNvbmZpZ3VyYXRpb24uc2VydmVyV1dXLCAnd3d3LnJlZGRpdC5jb20nKTtcbiAgICB0aGlzLnNlcnZlck9BdXRoUG9ydCA9IHUudGhpc09yVGhhdCh1c2VyQ29uZmlndXJhdGlvbi5zZXJ2ZXJPQXV0aFBvcnQsIDgwKTtcbiAgICB0aGlzLnNlcnZlcldXV1BvcnQgPSB1LnRoaXNPclRoYXQodXNlckNvbmZpZ3VyYXRpb24uc2VydmVyV1dXUG9ydCwgODApO1xuXG4gICAgLy8gKiogQ0FMTCBNT0RJRklDQVRJT05TXG4gICAgdGhpcy50aHJvdHRsZSA9IHUudGhpc09yVGhhdCh1c2VyQ29uZmlndXJhdGlvbi50aHJvdHRsZSwgMTAwMCk7XG5cbiAgICB0aGlzLmRlY29kZUh0bWxFbnRpdGllcyA9IHUudGhpc09yVGhhdCh1c2VyQ29uZmlndXJhdGlvbi5kZWNvZGVIdG1sRW50aXRpZXMsIGZhbHNlKTtcblxuICAgIHRoaXMuYXBpVHlwZSA9IHUudGhpc09yVGhhdCh1c2VyQ29uZmlndXJhdGlvbi5hcGlUeXBlLCAnanNvbicpO1xuXG4gICAgLy8gKiogUkVUUlkgQVRURU1QVFNcbiAgICB0aGlzLnJldHJ5QXR0ZW1wdHMgPSB1LnRoaXNPclRoYXQodXNlckNvbmZpZ3VyYXRpb24ucmV0cnlBdHRlbXB0cywgNjApO1xuXG4gICAgdGhpcy5yZXRyeURlbGF5ID0gdS50aGlzT3JUaGF0KHVzZXJDb25maWd1cmF0aW9uLnJldHJ5RGVsYXksIDUwMDApO1xuXG4gICAgdGhpcy5yZXF1ZXN0VGltZW91dCA9IHUudGhpc09yVGhhdCh1c2VyQ29uZmlndXJhdGlvbi5yZXF1ZXN0VGltZW91dCwgMjAwMDApO1xuXG4gICAgLy8gKiogT0FVVEhcbiAgICB0aGlzLm9hdXRoID0gdS50aGlzT3JUaGF0KHVzZXJDb25maWd1cmF0aW9uLm9hdXRoLCB7fSk7XG5cbiAgICB0aGlzLm9hdXRoLnNjb3BlID0gdS50aGlzT3JUaGF0KHRoaXMub2F1dGguc2NvcGUsIFtdKTtcblxuICAgIHRoaXMub2F1dGguZGV2aWNlSWQgPSB1LnRoaXNPclRoYXQodGhpcy5vYXV0aC5kZXZpY2VJZCwgJ0RPX05PVF9UUkFDS19USElTX0RFVklDRScpO1xuICAgIHRoaXMub2F1dGguZHVyYXRpb24gPSB1LnRoaXNPclRoYXQodGhpcy5vYXV0aC5kdXJhdGlvbiwgJ3RlbXBvcmFyeScpO1xuXG4gICAgaWYgKHRoaXMudXNlQnJvd3NlckNvb2tpZXMpIHtcbiAgICAgIHRoaXMub2F1dGgudHlwZSA9IHUudGhpc09yVGhhdCh0aGlzLm9hdXRoLnR5cGUsICcnKTtcbiAgICAgIHRoaXMub2F1dGgua2V5ID0gdS50aGlzT3JUaGF0KHRoaXMub2F1dGgua2V5LCAnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub2F1dGgudHlwZSA9IHUudGhpc09yVGhyb3codGhpcy5vYXV0aC50eXBlLCBtaXNzaW5nTXNnICsgJ2BvYXV0aC50eXBlYCcpO1xuICAgICAgdGhpcy5vYXV0aC5rZXkgPSB1LnRoaXNPclRocm93KHRoaXMub2F1dGgua2V5LCBtaXNzaW5nTXNnICsgJ2BvYXV0aC5rZXlgJyk7XG4gICAgfVxuXG4gICAgLy9cbiAgICAvLyAtIC0gLSBWQUxJREFUSU9OXG4gICAgLy9cblxuICAgIGlmICh0aGlzLm9hdXRoLmR1cmF0aW9uICE9PSAndGVtcG9yYXJ5JyAmJiB0aGlzLm9hdXRoLmR1cmF0aW9uICE9PSAncGVybWFuZW50Jykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGBvYXV0aC5kdXJhdGlvbmAuIE11c3QgYmUgb25lIG9mOiBwZXJtYW5lbnQsIHRlbXBvcmFyeScpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9hdXRoLmRldmljZUlkICE9PSAnRE9fTk9UX1RSQUNLX1RISVNfREVWSUNFJyAmJiAodGhpcy5vYXV0aC5kZXZpY2VJZC5sZW5ndGggPCAyMCB8fCB0aGlzLm9hdXRoLmRldmljZUlkLmxlbmd0aCA+IDMwKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGRldmljZV9pZCBsZW5ndGguIE11c3QgYmUgMjAtMzAgY2hhcmFjdGVycycpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5pc09BdXRoVHlwZSgnZXhwbGljaXQnKSAmJiAhdGhpcy5pc09BdXRoVHlwZSgnaW1wbGljaXQnKSAmJiAhdGhpcy5pc09BdXRoVHlwZSgnc2NyaXB0JykgJiYgIXRoaXMudXNlQnJvd3NlckNvb2tpZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBgb2F1dGgudHlwZWAuIE11c3QgYmUgb25lIG9mOiBleHBsaWNpdCwgaW1wbGljaXQsIG9yIHNjcmlwdCcpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy51c2VCcm93c2VyQ29va2llcykge1xuICAgICAgaWYgKHRoaXMuaXNPQXV0aFR5cGUoJ2V4cGxpY2l0JykgfHwgdGhpcy5pc09BdXRoVHlwZSgnc2NyaXB0JykpIHtcbiAgICAgICAgdGhpcy5vYXV0aC5zZWNyZXQgPSB1LnRoaXNPclRocm93KHRoaXMub2F1dGguc2VjcmV0LCBtaXNzaW5nTXNnICsgJ2BvYXV0aC5zZWNyZXRgIGZvciB0eXBlIGV4cGxpY2l0L3NjcmlwdCcpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5pc09BdXRoVHlwZSgnc2NyaXB0JykpIHtcbiAgICAgICAgdGhpcy5vYXV0aC51c2VybmFtZSA9IHUudGhpc09yVGhyb3codGhpcy5vYXV0aC51c2VybmFtZSwgbWlzc2luZ01zZyArICdgb2F1dGgudXNlcm5hbWVgIGZvciB0eXBlIHNjcmlwdCcpO1xuICAgICAgICB0aGlzLm9hdXRoLnBhc3N3b3JkID0gdS50aGlzT3JUaHJvdyh0aGlzLm9hdXRoLnBhc3N3b3JkLCBtaXNzaW5nTXNnICsgJ2BvYXV0aC5wYXNzd29yZGAgZm9yIHR5cGUgc2NyaXB0Jyk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmlzT0F1dGhUeXBlKCdpbXBsaWNpdCcpIHx8IHRoaXMuaXNPQXV0aFR5cGUoJ2V4cGxpY2l0JykpIHtcbiAgICAgICAgdGhpcy5vYXV0aC5yZWRpcmVjdFVyaSA9IHUudGhpc09yVGhyb3codGhpcy5vYXV0aC5yZWRpcmVjdFVyaSwgbWlzc2luZ01zZyArICdgb2F1dGgucmVkaXJlY3RVcmlgIGZvciB0eXBlIGltcGxpY2l0L2V4cGxpY2l0Jyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy9cbiAgICAvLyBURVNUSU5HIENPTkZJR1VSQVRJT05cbiAgICAvL1xuICAgIC8vIFNvbWUgdGVzdCBjYXNlcyByZXF1aXJlIHNvbWUgZGVlcCBtZXNzaW5nIGFyb3VuZCB3aXRoIHRoZSBsaWJyYXJ5XG4gICAgLy8gaW4gb3JkZXIgdG8gYmUgbmljZSB0byB0aGUgQVBJIHNlcnZlciB3aGVuIHRlc3RpbmcuXG4gICAgLy9cbiAgICAvLyBUaGVzZSBzaG91bGQgbmV2ZXIgYmUgdXNlZCBieSBhbnl0aGluZyBvdGhlciB0aGFuIHRoZSB0ZXN0IGNhc2VzIHRvXG4gICAgLy8gbW9kaWZ5IGludGVybmFsIHZhcmlhYmxlcy4gVGhleSBhcmUgb25seSB1c2VkIGlmIG5lZWRlZCFcblxuICAgIC8qXG4gICAgICAgVXNlZCB0byBkZXRlcm1pbmUgd2hlbiB3ZSBoYXZlIGdvbmUgb3ZlciB0aGUgcmF0ZSBsaW1pdC4gVGhlIGRlZmF1bHRcbiAgICAgICB3b3VsZCBiZSBcIjBcIiwgZS5nLiB3aGVuIHRoZXJlIGFyZSBub3QgbW9yZSByZXF1ZXN0cyByZW1haW5pbmcgaW4gdGhlXG4gICAgICAgY3VycmVudCB0aW1lIHNsb3RcbiAgICAgKi9cbiAgICB0aGlzLl9fdGVzdCA9IHt9O1xuICAgIHVzZXJDb25maWd1cmF0aW9uLl9fdGVzdCA9IHVzZXJDb25maWd1cmF0aW9uLl9fdGVzdCB8fCB7fTtcblxuICAgIHRoaXMuX190ZXN0LnJhdGVMaW1pdFJlbWFpbmluZ0N1dG9mZiA9IHUudGhpc09yVGhhdCh1c2VyQ29uZmlndXJhdGlvbi5fX3Rlc3QucmF0ZUxpbWl0UmVtYWluaW5nQ3V0b2ZmLCAwKTtcbiAgfVxuXG4gIC8qXG4gICAgIENoZWNrcyBpZiB0aGUgb2F1dGggaXMgb2YgYSBzcGVjaWZpYyB0eXBlLCBlLmcuXG4gICAgICBpc09BdXRoVHlwZSgnc2NyaXB0JylcbiAgICovXG5cbiAgX2NyZWF0ZUNsYXNzKFVzZXJDb25maWcsIFt7XG4gICAga2V5OiAnaXNPQXV0aFR5cGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc09BdXRoVHlwZSh0eXBlKSB7XG4gICAgICByZXR1cm4gdGhpcy5vYXV0aC50eXBlID09PSB0eXBlO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBVc2VyQ29uZmlnO1xufSkoKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gVXNlckNvbmZpZztcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VXNlckNvbmZpZy5qcy5tYXBcbiIsIihmdW5jdGlvbiAoQnVmZmVyKXtcbi8qXG5SZXByZXNlbnRzIGEgZmlsZSB0aGF0IHdlIHdpc2ggdG8gdXBsb2FkIHRvIHJlZGRpdC5cblxuQWxsIGZpbGVzIGhhdmUgYSBuYW1lLCBtaW1lVHlwZSwgYW5kIGRhdGEuIFxuXG5JbiB0aGUgYnJvd3NlciBkYXRhIGNhbiBiZSBhIGBGaWxlYCBvYmplY3QgZGlyZWN0bHkgZnJvbVxuYSBmaWxlIGlucHV0LCBvciBhIGBCbG9iYCBvYmplY3QuXG5cbkluIG5vZGUsIGRhdGEgY2FuIGJlIGEgYHV0ZjhgIHN0cmluZywgb3IgYSBidWZmZXJcbmNvbnRhaW5pbmcgdGhlIGNvbnRlbnQgb2YgdGhlIGZpbGUuXG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBmdW5jdGlvbiAobmFtZSwgbWltZVR5cGUsIGRhdGEpIHtcbiAgdmFyIHNlbGYgPSB7fTtcblxuICBzZWxmLm5hbWUgPSBuYW1lO1xuICBzZWxmLm1pbWVUeXBlID0gbWltZVR5cGU7XG5cbiAgaWYgKHR5cGVvZiBGaWxlICE9PSAndW5kZWZpbmVkJyAmJiBkYXRhIGluc3RhbmNlb2YgRmlsZSB8fCB0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgJiYgZGF0YSBpbnN0YW5jZW9mIEJsb2IpIHtcbiAgICBzZWxmLmRhdGEgPSBkYXRhO1xuICB9IGVsc2Uge1xuICAgIHNlbGYuZGF0YSA9IHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJyA/IG5ldyBCdWZmZXIoZGF0YSkgOiBkYXRhO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuXG59KS5jYWxsKHRoaXMscmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXIpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbUoxYVd4a0wzTnlZeTlvZEhSd2N5OW1hV3hsTG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxWEc1U1pYQnlaWE5sYm5SeklHRWdabWxzWlNCMGFHRjBJSGRsSUhkcGMyZ2dkRzhnZFhCc2IyRmtJSFJ2SUhKbFpHUnBkQzVjYmx4dVFXeHNJR1pwYkdWeklHaGhkbVVnWVNCdVlXMWxMQ0J0YVcxbFZIbHdaU3dnWVc1a0lHUmhkR0V1SUZ4dVhHNUpiaUIwYUdVZ1luSnZkM05sY2lCa1lYUmhJR05oYmlCaVpTQmhJR0JHYVd4bFlDQnZZbXBsWTNRZ1pHbHlaV04wYkhrZ1puSnZiVnh1WVNCbWFXeGxJR2x1Y0hWMExDQnZjaUJoSUdCQ2JHOWlZQ0J2WW1wbFkzUXVYRzVjYmtsdUlHNXZaR1VzSUdSaGRHRWdZMkZ1SUdKbElHRWdZSFYwWmpoZ0lITjBjbWx1Wnl3Z2IzSWdZU0JpZFdabVpYSmNibU52Ym5SaGFXNXBibWNnZEdobElHTnZiblJsYm5RZ2IyWWdkR2hsSUdacGJHVXVYRzRxTDF4dVhHNG5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0FuWDE5bGMwMXZaSFZzWlNjc0lIdGNiaUFnZG1Gc2RXVTZJSFJ5ZFdWY2JuMHBPMXh1WEc1bGVIQnZjblJ6V3lka1pXWmhkV3gwSjEwZ1BTQm1kVzVqZEdsdmJpQW9ibUZ0WlN3Z2JXbHRaVlI1Y0dVc0lHUmhkR0VwSUh0Y2JpQWdkbUZ5SUhObGJHWWdQU0I3ZlR0Y2JseHVJQ0J6Wld4bUxtNWhiV1VnUFNCdVlXMWxPMXh1SUNCelpXeG1MbTFwYldWVWVYQmxJRDBnYldsdFpWUjVjR1U3WEc1Y2JpQWdhV1lnS0hSNWNHVnZaaUJHYVd4bElDRTlQU0FuZFc1a1pXWnBibVZrSnlBbUppQmtZWFJoSUdsdWMzUmhibU5sYjJZZ1JtbHNaU0I4ZkNCMGVYQmxiMllnUW14dllpQWhQVDBnSjNWdVpHVm1hVzVsWkNjZ0ppWWdaR0YwWVNCcGJuTjBZVzVqWlc5bUlFSnNiMklwSUh0Y2JpQWdJQ0J6Wld4bUxtUmhkR0VnUFNCa1lYUmhPMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJSE5sYkdZdVpHRjBZU0E5SUhSNWNHVnZaaUJrWVhSaElEMDlQU0FuYzNSeWFXNW5KeUEvSUc1bGR5QkNkV1ptWlhJb1pHRjBZU2tnT2lCa1lYUmhPMXh1SUNCOVhHNWNiaUFnY21WMGRYSnVJSE5sYkdZN1hHNTlPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdWNGNHOXlkSE5iSjJSbFptRjFiSFFuWFR0Y2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QV1pwYkdVdWFuTXViV0Z3WEc0aVhYMD0iLCIoZnVuY3Rpb24gKEJ1ZmZlcil7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5nZXRTZWN0aW9uQm91bmRhcnkgPSBnZXRTZWN0aW9uQm91bmRhcnk7XG5leHBvcnRzLmdldEVuZEJvdW5kYXJ5ID0gZ2V0RW5kQm91bmRhcnk7XG5leHBvcnRzLmVuY29kZUZpZWxkUGFydCA9IGVuY29kZUZpZWxkUGFydDtcbmV4cG9ydHMuZW5jb2RlRmlsZVBhcnQgPSBlbmNvZGVGaWxlUGFydDtcbmV4cG9ydHMuZ2V0TXVsdGlwYXJ0Rm9ybURhdGEgPSBnZXRNdWx0aXBhcnRGb3JtRGF0YTtcbmV4cG9ydHMuZ2V0RGF0YSA9IGdldERhdGE7XG5leHBvcnRzLmdldEZvcm1EYXRhID0gZ2V0Rm9ybURhdGE7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF9xdWVyeXN0cmluZyA9IHJlcXVpcmUoJ3F1ZXJ5c3RyaW5nJyk7XG5cbnZhciBfcXVlcnlzdHJpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXVlcnlzdHJpbmcpO1xuXG52YXIgX3doZW4gPSByZXF1aXJlKCd3aGVuJyk7XG5cbnZhciBfd2hlbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93aGVuKTtcblxuZnVuY3Rpb24gZ2V0U2VjdGlvbkJvdW5kYXJ5KGJvdW5kYXJ5KSB7XG4gIHJldHVybiAnLS0nICsgYm91bmRhcnk7XG59XG5cbmZ1bmN0aW9uIGdldEVuZEJvdW5kYXJ5KGJvdW5kYXJ5KSB7XG4gIHJldHVybiAnLS0nICsgYm91bmRhcnkgKyAnLS0nO1xufVxuXG5mdW5jdGlvbiBlbmNvZGVGaWVsZFBhcnQoYm91bmRhcnksIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIG5ldyBCdWZmZXIoW2dldFNlY3Rpb25Cb3VuZGFyeShib3VuZGFyeSksICdcXHJcXG4nLCAnQ29udGVudC1EaXNwb3NpdGlvbjogZm9ybS1kYXRhOyBuYW1lPVwiJyArIGtleSArICdcIicsICdcXHJcXG5cXHJcXG4nLCB2YWx1ZSwgJ1xcclxcbiddLmpvaW4oJycpKTtcbn1cblxuZnVuY3Rpb24gZW5jb2RlRmlsZVBhcnQoYm91bmRhcnksIGtleSwgbmFtZSwgbWltZVR5cGUsIGRhdGEpIHtcbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoW25ldyBCdWZmZXIoW2dldFNlY3Rpb25Cb3VuZGFyeShib3VuZGFyeSksICdcXHJcXG4nLCAnQ29udGVudC1EaXNwb3NpdGlvbjogZm9ybS1kYXRhOyAnICsgJ25hbWU9XCInICsga2V5ICsgJ1wiOyAnICsgJ2ZpbGVuYW1lPVwiJyArIG5hbWUgKyAnXCInLCAnXFxyXFxuJywgJ0NvbnRlbnQtVHlwZTogJyArIG1pbWVUeXBlLCAnXFxyXFxuXFxyXFxuJ10uam9pbignJykpLCBkYXRhLCAvLyBhbHJlYWR5IGEgYnVmZmVyXG4gIG5ldyBCdWZmZXIoJ1xcclxcbicpXSk7XG59XG5cbi8qXG4gICBDb252ZXJ0cyBhIGxpc3Qgb2YgcGFyYW1ldGVycyB0byBmb3JtIGRhdGFcblxuICAgLSBgZmllbGRzYCAtIGEgcHJvcGVydHkgbWFwIG9mIGtleSB2YWx1ZSBwYWlyc1xuICAgLSBgZmlsZXNgIC0gYSBsaXN0IG9mIHByb3BlcnR5IG1hcHMgb2YgY29udGVudFxuICAgLS0+IGB0eXBlYCAtIHRoZSB0eXBlIG9mIGZpbGUgZGF0YVxuICAgLS0+IGBrZXluYW1lYCAtIHRoZSBuYW1lIG9mIHRoZSBrZXkgY29ycmVzcG9uZGluZyB0byB0aGUgZmlsZVxuICAgLS0+IGB2YWx1ZW5hbWVgIC0gdGhlIG5hbWUgb2YgdGhlIHZhbHVlIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGZpbGVcbiAgIC0tPiBgZGF0YUJ1ZmZlcmAgLSBBIGJ1ZmZlciBjb250YWluaW5nIHRoZSBmaWxlcyBkYXRhXG4gKi9cblxuZnVuY3Rpb24gZ2V0TXVsdGlwYXJ0Rm9ybURhdGEoYm91bmRhcnksIGZpZWxkcywgZmlsZXMpIHtcblxuICB2YXIgZGF0YUJ1ZmZlciA9IG5ldyBCdWZmZXIoMCk7XG4gIHZhciBrZXk7XG5cbiAgaWYgKGZpZWxkcykge1xuICAgIGZvciAoa2V5IGluIGZpZWxkcykge1xuICAgICAgLy8gc2tpcCBvdmVyIGFueSBmaWxlIGZpZWxkc1xuICAgICAgaWYgKGtleSA9PT0gJ2ZpbGUnKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBmaWVsZHNba2V5XTtcblxuICAgICAgZGF0YUJ1ZmZlciA9IEJ1ZmZlci5jb25jYXQoW2RhdGFCdWZmZXIsIGVuY29kZUZpZWxkUGFydChib3VuZGFyeSwga2V5LCB2YWx1ZSldKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZmlsZXMpIHtcbiAgICBmb3IgKGtleSBpbiBmaWxlcykge1xuICAgICAgdmFyIGZpbGUgPSBmaWxlc1trZXldO1xuXG4gICAgICBkYXRhQnVmZmVyID0gQnVmZmVyLmNvbmNhdChbZGF0YUJ1ZmZlciwgZW5jb2RlRmlsZVBhcnQoYm91bmRhcnksIGZpbGUua2V5LCBmaWxlLm5hbWUsIGZpbGUubWltZVR5cGUsIGZpbGUuZGF0YSldKTtcbiAgICB9XG4gIH1cblxuICAvLyBjbG9zZSB3aXRoIGEgZmluYWwgYm91bmRhcnkgY2xvc2VkIHdpdGggJy0tJyBhdCB0aGUgZW5kXG4gIGRhdGFCdWZmZXIgPSBCdWZmZXIuY29uY2F0KFtkYXRhQnVmZmVyLCBuZXcgQnVmZmVyKGdldEVuZEJvdW5kYXJ5KGJvdW5kYXJ5KSldKTtcblxuICByZXR1cm4gZGF0YUJ1ZmZlcjtcbn1cblxuLypcbiAgIFRha2VzIGFuIGV4aXN0aW5nIHN0cmluZyBvciBrZXktdmFsdWUgcGFpciB0aGF0IHJlcHJlc2VudHMgZm9ybSBkYXRhXG4gICBhbmQgcmV0dXJucyBmb3JtIGRhdGEgaW4gdGhlIGZvcm0gb2YgYW4gQXJyYXkuXG5cbiAgIElmIHRoZSBmb3JtRGF0YSBpcyBhbiBvYmplY3QsIGFuZCB0aGF0IG9iamVjdCBoYXMgYSAnZmlsZScga2V5LFxuICAgd2Ugd2lsbCBhc3N1bWUgdGhhdCBpdCBpcyBnb2luZyB0byBiZSBhIG11bHRpcGFydCByZXF1ZXN0IGFuZCB3ZVxuICAgd2lsbCBhbHNvIGFzc3VtZSB0aGF0IHRoZSBmaWxlIGlzIGFjdHVhbGx5IGEgZmlsZSBwYXRoIG9uIHRoZSBzeXN0ZW1cbiAgIHRoYXQgd2Ugd2lzaCB0byB1c2UgaW4gdGhlIG11bHRpcGFydCBkYXRhLlxuICovXG5cbmZ1bmN0aW9uIGdldERhdGEoZm9ybURhdGEpIHtcblxuICB2YXIgZGF0YSA9IHtcbiAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsXG4gICAgY29udGVudExlbmd0aDogMCxcbiAgICBidWZmZXI6IG5ldyBCdWZmZXIoMClcbiAgfTtcblxuICAvLyBUaGUgZGF0YSBpcyBhbHJlYWR5IGluIGEgc3RyaW5nIGZvcm1hdC4gVGhlcmUgaXMgbm90aGluZ1xuICAvLyB0byBkbyByZWFsbHlcbiAgaWYgKHR5cGVvZiBmb3JtRGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBkYXRhLmJ1ZmZlciA9IG5ldyBCdWZmZXIoZm9ybURhdGEpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBmb3JtRGF0YSA9PT0gJ29iamVjdCcpIHtcbiAgICAvLyBUaGUgZGF0YSBpcyBhbiBvYmplY3QgKndpdGhvdXQqIGEgZmlsZSBrZXkuIFdlIHdpbGwgYXNzdW1lXG4gICAgLy8gdGhhdCB3ZSB3YW50IHRoaXMgZGF0YSBpbiBhbiB1cmwgZW5jb2RlZCBmb3JtYXRcbiAgICBpZiAoIWZvcm1EYXRhLmZpbGUpIHtcbiAgICAgIGRhdGEuYnVmZmVyID0gbmV3IEJ1ZmZlcihfcXVlcnlzdHJpbmcyWydkZWZhdWx0J10uc3RyaW5naWZ5KGZvcm1EYXRhKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGZvciBub3cgd2Ugb25seSBoYXZlIHRvIGhhbmRsZSBvbmUgZmlsZSwgd2l0aCBvbmUga2V5IG5hbWUgb2YgJ2ZpbGUnXG4gICAgICB2YXIgc2luZ2xlRmlsZSA9IGZvcm1EYXRhLmZpbGU7XG4gICAgICBzaW5nbGVGaWxlLmtleSA9ICdmaWxlJztcblxuICAgICAgdmFyIGZpbGVzID0gW2Zvcm1EYXRhLmZpbGVdO1xuXG4gICAgICB2YXIgYm91bmRhcnkgPSAnLS0tLS0tLS0tU25vb2NvcmUnICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDApO1xuICAgICAgZGF0YS5jb250ZW50VHlwZSA9ICdtdWx0aXBhcnQvZm9ybS1kYXRhOyBib3VuZGFyeT0nICsgYm91bmRhcnk7XG4gICAgICBkYXRhLmJ1ZmZlciA9IGdldE11bHRpcGFydEZvcm1EYXRhKGJvdW5kYXJ5LCBmb3JtRGF0YSwgZmlsZXMpO1xuICAgIH1cbiAgfVxuXG4gIGRhdGEuY29udGVudExlbmd0aCA9IGRhdGEuYnVmZmVyLmxlbmd0aDtcbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qXG4gICBUYWtlcyBhbiBrZXktdmFsdWUgcGFpciBhbmQgdHVybnMgdGhlbSBpbnRvIGEgRm9ybURhdGEgb2JqZWN0LiBUaGlzIGlzIGZvciB3aGVuXG4gICB3ZSB3YW50IHRvIHVwbG9hZCBhIGZpbGUgdXNpbmcgWE1MSHR0cFJlcXVlc3QuXG4qL1xuXG5mdW5jdGlvbiBnZXRGb3JtRGF0YShmb3JtRGF0YSkge1xuICB2YXIgZGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuXG4gIGZvciAodmFyIGtleSBpbiBmb3JtRGF0YSkge1xuICAgIGlmIChrZXkgPT09ICdmaWxlJykge1xuICAgICAgZGF0YS5hcHBlbmQoa2V5LCBmb3JtRGF0YVtrZXldLmRhdGEsIGZvcm1EYXRhW2tleV0ubmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEuYXBwZW5kKGtleSwgZm9ybURhdGFba2V5XSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJidWZmZXJcIikuQnVmZmVyKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1KMWFXeGtMM055WXk5b2RIUndjeTltYjNKdExtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2labWxzWlNJNkltZGxibVZ5WVhSbFpDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUluZFhObElITjBjbWxqZENjN1hHNWNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENBblgxOWxjMDF2WkhWc1pTY3NJSHRjYmlBZ2RtRnNkV1U2SUhSeWRXVmNibjBwTzF4dVpYaHdiM0owY3k1blpYUlRaV04wYVc5dVFtOTFibVJoY25rZ1BTQm5aWFJUWldOMGFXOXVRbTkxYm1SaGNuazdYRzVsZUhCdmNuUnpMbWRsZEVWdVpFSnZkVzVrWVhKNUlEMGdaMlYwUlc1a1FtOTFibVJoY25rN1hHNWxlSEJ2Y25SekxtVnVZMjlrWlVacFpXeGtVR0Z5ZENBOUlHVnVZMjlrWlVacFpXeGtVR0Z5ZER0Y2JtVjRjRzl5ZEhNdVpXNWpiMlJsUm1sc1pWQmhjblFnUFNCbGJtTnZaR1ZHYVd4bFVHRnlkRHRjYm1WNGNHOXlkSE11WjJWMFRYVnNkR2x3WVhKMFJtOXliVVJoZEdFZ1BTQm5aWFJOZFd4MGFYQmhjblJHYjNKdFJHRjBZVHRjYm1WNGNHOXlkSE11WjJWMFJHRjBZU0E5SUdkbGRFUmhkR0U3WEc1bGVIQnZjblJ6TG1kbGRFWnZjbTFFWVhSaElEMGdaMlYwUm05eWJVUmhkR0U3WEc1Y2JtWjFibU4wYVc5dUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFvYjJKcUtTQjdJSEpsZEhWeWJpQnZZbW9nSmlZZ2IySnFMbDlmWlhOTmIyUjFiR1VnUHlCdlltb2dPaUI3SUNka1pXWmhkV3gwSnpvZ2IySnFJSDA3SUgxY2JseHVkbUZ5SUY5eGRXVnllWE4wY21sdVp5QTlJSEpsY1hWcGNtVW9KM0YxWlhKNWMzUnlhVzVuSnlrN1hHNWNiblpoY2lCZmNYVmxjbmx6ZEhKcGJtY3lJRDBnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDaGZjWFZsY25semRISnBibWNwTzF4dVhHNTJZWElnWDNkb1pXNGdQU0J5WlhGMWFYSmxLQ2QzYUdWdUp5azdYRzVjYm5aaGNpQmZkMmhsYmpJZ1BTQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwS0Y5M2FHVnVLVHRjYmx4dVpuVnVZM1JwYjI0Z1oyVjBVMlZqZEdsdmJrSnZkVzVrWVhKNUtHSnZkVzVrWVhKNUtTQjdYRzRnSUhKbGRIVnliaUFuTFMwbklDc2dZbTkxYm1SaGNuazdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHZGxkRVZ1WkVKdmRXNWtZWEo1S0dKdmRXNWtZWEo1S1NCN1hHNGdJSEpsZEhWeWJpQW5MUzBuSUNzZ1ltOTFibVJoY25rZ0t5QW5MUzBuTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJsYm1OdlpHVkdhV1ZzWkZCaGNuUW9ZbTkxYm1SaGNua3NJR3RsZVN3Z2RtRnNkV1VwSUh0Y2JpQWdjbVYwZFhKdUlHNWxkeUJDZFdabVpYSW9XMmRsZEZObFkzUnBiMjVDYjNWdVpHRnllU2hpYjNWdVpHRnllU2tzSUNkY1hISmNYRzRuTENBblEyOXVkR1Z1ZEMxRWFYTndiM05wZEdsdmJqb2dabTl5YlMxa1lYUmhPeUJ1WVcxbFBWd2lKeUFySUd0bGVTQXJJQ2RjSWljc0lDZGNYSEpjWEc1Y1hISmNYRzRuTENCMllXeDFaU3dnSjF4Y2NseGNiaWRkTG1wdmFXNG9KeWNwS1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWlc1amIyUmxSbWxzWlZCaGNuUW9ZbTkxYm1SaGNua3NJR3RsZVN3Z2JtRnRaU3dnYldsdFpWUjVjR1VzSUdSaGRHRXBJSHRjYmlBZ2NtVjBkWEp1SUVKMVptWmxjaTVqYjI1allYUW9XMjVsZHlCQ2RXWm1aWElvVzJkbGRGTmxZM1JwYjI1Q2IzVnVaR0Z5ZVNoaWIzVnVaR0Z5ZVNrc0lDZGNYSEpjWEc0bkxDQW5RMjl1ZEdWdWRDMUVhWE53YjNOcGRHbHZiam9nWm05eWJTMWtZWFJoT3lBbklDc2dKMjVoYldVOVhDSW5JQ3NnYTJWNUlDc2dKMXdpT3lBbklDc2dKMlpwYkdWdVlXMWxQVndpSnlBcklHNWhiV1VnS3lBblhDSW5MQ0FuWEZ4eVhGeHVKeXdnSjBOdmJuUmxiblF0Vkhsd1pUb2dKeUFySUcxcGJXVlVlWEJsTENBblhGeHlYRnh1WEZ4eVhGeHVKMTB1YW05cGJpZ25KeWtwTENCa1lYUmhMQ0F2THlCaGJISmxZV1I1SUdFZ1luVm1abVZ5WEc0Z0lHNWxkeUJDZFdabVpYSW9KMXhjY2x4Y2JpY3BYU2s3WEc1OVhHNWNiaThxWEc0Z0lDQkRiMjUyWlhKMGN5QmhJR3hwYzNRZ2IyWWdjR0Z5WVcxbGRHVnljeUIwYnlCbWIzSnRJR1JoZEdGY2JseHVJQ0FnTFNCZ1ptbGxiR1J6WUNBdElHRWdjSEp2Y0dWeWRIa2diV0Z3SUc5bUlHdGxlU0IyWVd4MVpTQndZV2x5YzF4dUlDQWdMU0JnWm1sc1pYTmdJQzBnWVNCc2FYTjBJRzltSUhCeWIzQmxjblI1SUcxaGNITWdiMllnWTI5dWRHVnVkRnh1SUNBZ0xTMCtJR0IwZVhCbFlDQXRJSFJvWlNCMGVYQmxJRzltSUdacGJHVWdaR0YwWVZ4dUlDQWdMUzArSUdCclpYbHVZVzFsWUNBdElIUm9aU0J1WVcxbElHOW1JSFJvWlNCclpYa2dZMjl5Y21WemNHOXVaR2x1WnlCMGJ5QjBhR1VnWm1sc1pWeHVJQ0FnTFMwK0lHQjJZV3gxWlc1aGJXVmdJQzBnZEdobElHNWhiV1VnYjJZZ2RHaGxJSFpoYkhWbElHTnZjbkpsYzNCdmJtUnBibWNnZEc4Z2RHaGxJR1pwYkdWY2JpQWdJQzB0UGlCZ1pHRjBZVUoxWm1abGNtQWdMU0JCSUdKMVptWmxjaUJqYjI1MFlXbHVhVzVuSUhSb1pTQm1hV3hsY3lCa1lYUmhYRzRnS2k5Y2JseHVablZ1WTNScGIyNGdaMlYwVFhWc2RHbHdZWEowUm05eWJVUmhkR0VvWW05MWJtUmhjbmtzSUdacFpXeGtjeXdnWm1sc1pYTXBJSHRjYmx4dUlDQjJZWElnWkdGMFlVSjFabVpsY2lBOUlHNWxkeUJDZFdabVpYSW9NQ2s3WEc0Z0lIWmhjaUJyWlhrN1hHNWNiaUFnYVdZZ0tHWnBaV3hrY3lrZ2UxeHVJQ0FnSUdadmNpQW9hMlY1SUdsdUlHWnBaV3hrY3lrZ2UxeHVJQ0FnSUNBZ0x5OGdjMnRwY0NCdmRtVnlJR0Z1ZVNCbWFXeGxJR1pwWld4a2MxeHVJQ0FnSUNBZ2FXWWdLR3RsZVNBOVBUMGdKMlpwYkdVbktTQjdYRzRnSUNBZ0lDQWdJR052Ym5ScGJuVmxPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0IyWVhJZ2RtRnNkV1VnUFNCbWFXVnNaSE5iYTJWNVhUdGNibHh1SUNBZ0lDQWdaR0YwWVVKMVptWmxjaUE5SUVKMVptWmxjaTVqYjI1allYUW9XMlJoZEdGQ2RXWm1aWElzSUdWdVkyOWtaVVpwWld4a1VHRnlkQ2hpYjNWdVpHRnllU3dnYTJWNUxDQjJZV3gxWlNsZEtUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQnBaaUFvWm1sc1pYTXBJSHRjYmlBZ0lDQm1iM0lnS0d0bGVTQnBiaUJtYVd4bGN5a2dlMXh1SUNBZ0lDQWdkbUZ5SUdacGJHVWdQU0JtYVd4bGMxdHJaWGxkTzF4dVhHNGdJQ0FnSUNCa1lYUmhRblZtWm1WeUlEMGdRblZtWm1WeUxtTnZibU5oZENoYlpHRjBZVUoxWm1abGNpd2daVzVqYjJSbFJtbHNaVkJoY25Rb1ltOTFibVJoY25rc0lHWnBiR1V1YTJWNUxDQm1hV3hsTG01aGJXVXNJR1pwYkdVdWJXbHRaVlI1Y0dVc0lHWnBiR1V1WkdGMFlTbGRLVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0F2THlCamJHOXpaU0IzYVhSb0lHRWdabWx1WVd3Z1ltOTFibVJoY25rZ1kyeHZjMlZrSUhkcGRHZ2dKeTB0SnlCaGRDQjBhR1VnWlc1a1hHNGdJR1JoZEdGQ2RXWm1aWElnUFNCQ2RXWm1aWEl1WTI5dVkyRjBLRnRrWVhSaFFuVm1abVZ5TENCdVpYY2dRblZtWm1WeUtHZGxkRVZ1WkVKdmRXNWtZWEo1S0dKdmRXNWtZWEo1S1NsZEtUdGNibHh1SUNCeVpYUjFjbTRnWkdGMFlVSjFabVpsY2p0Y2JuMWNibHh1THlwY2JpQWdJRlJoYTJWeklHRnVJR1Y0YVhOMGFXNW5JSE4wY21sdVp5QnZjaUJyWlhrdGRtRnNkV1VnY0dGcGNpQjBhR0YwSUhKbGNISmxjMlZ1ZEhNZ1ptOXliU0JrWVhSaFhHNGdJQ0JoYm1RZ2NtVjBkWEp1Y3lCbWIzSnRJR1JoZEdFZ2FXNGdkR2hsSUdadmNtMGdiMllnWVc0Z1FYSnlZWGt1WEc1Y2JpQWdJRWxtSUhSb1pTQm1iM0p0UkdGMFlTQnBjeUJoYmlCdlltcGxZM1FzSUdGdVpDQjBhR0YwSUc5aWFtVmpkQ0JvWVhNZ1lTQW5abWxzWlNjZ2EyVjVMRnh1SUNBZ2QyVWdkMmxzYkNCaGMzTjFiV1VnZEdoaGRDQnBkQ0JwY3lCbmIybHVaeUIwYnlCaVpTQmhJRzExYkhScGNHRnlkQ0J5WlhGMVpYTjBJR0Z1WkNCM1pWeHVJQ0FnZDJsc2JDQmhiSE52SUdGemMzVnRaU0IwYUdGMElIUm9aU0JtYVd4bElHbHpJR0ZqZEhWaGJHeDVJR0VnWm1sc1pTQndZWFJvSUc5dUlIUm9aU0J6ZVhOMFpXMWNiaUFnSUhSb1lYUWdkMlVnZDJsemFDQjBieUIxYzJVZ2FXNGdkR2hsSUcxMWJIUnBjR0Z5ZENCa1lYUmhMbHh1SUNvdlhHNWNibVoxYm1OMGFXOXVJR2RsZEVSaGRHRW9abTl5YlVSaGRHRXBJSHRjYmx4dUlDQjJZWElnWkdGMFlTQTlJSHRjYmlBZ0lDQmpiMjUwWlc1MFZIbHdaVG9nSjJGd2NHeHBZMkYwYVc5dUwzZ3RkM2QzTFdadmNtMHRkWEpzWlc1amIyUmxaQ2NzWEc0Z0lDQWdZMjl1ZEdWdWRFeGxibWQwYURvZ01DeGNiaUFnSUNCaWRXWm1aWEk2SUc1bGR5QkNkV1ptWlhJb01DbGNiaUFnZlR0Y2JseHVJQ0F2THlCVWFHVWdaR0YwWVNCcGN5QmhiSEpsWVdSNUlHbHVJR0VnYzNSeWFXNW5JR1p2Y20xaGRDNGdWR2hsY21VZ2FYTWdibTkwYUdsdVoxeHVJQ0F2THlCMGJ5QmtieUJ5WldGc2JIbGNiaUFnYVdZZ0tIUjVjR1Z2WmlCbWIzSnRSR0YwWVNBOVBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQmtZWFJoTG1KMVptWmxjaUE5SUc1bGR5QkNkV1ptWlhJb1ptOXliVVJoZEdFcE8xeHVJQ0I5WEc1Y2JpQWdhV1lnS0hSNWNHVnZaaUJtYjNKdFJHRjBZU0E5UFQwZ0oyOWlhbVZqZENjcElIdGNiaUFnSUNBdkx5QlVhR1VnWkdGMFlTQnBjeUJoYmlCdlltcGxZM1FnS25kcGRHaHZkWFFxSUdFZ1ptbHNaU0JyWlhrdUlGZGxJSGRwYkd3Z1lYTnpkVzFsWEc0Z0lDQWdMeThnZEdoaGRDQjNaU0IzWVc1MElIUm9hWE1nWkdGMFlTQnBiaUJoYmlCMWNtd2daVzVqYjJSbFpDQm1iM0p0WVhSY2JpQWdJQ0JwWmlBb0lXWnZjbTFFWVhSaExtWnBiR1VwSUh0Y2JpQWdJQ0FnSUdSaGRHRXVZblZtWm1WeUlEMGdibVYzSUVKMVptWmxjaWhmY1hWbGNubHpkSEpwYm1jeVd5ZGtaV1poZFd4MEoxMHVjM1J5YVc1bmFXWjVLR1p2Y20xRVlYUmhLU2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDOHZJR1p2Y2lCdWIzY2dkMlVnYjI1c2VTQm9ZWFpsSUhSdklHaGhibVJzWlNCdmJtVWdabWxzWlN3Z2QybDBhQ0J2Ym1VZ2EyVjVJRzVoYldVZ2IyWWdKMlpwYkdVblhHNGdJQ0FnSUNCMllYSWdjMmx1WjJ4bFJtbHNaU0E5SUdadmNtMUVZWFJoTG1acGJHVTdYRzRnSUNBZ0lDQnphVzVuYkdWR2FXeGxMbXRsZVNBOUlDZG1hV3hsSnp0Y2JseHVJQ0FnSUNBZ2RtRnlJR1pwYkdWeklEMGdXMlp2Y20xRVlYUmhMbVpwYkdWZE8xeHVYRzRnSUNBZ0lDQjJZWElnWW05MWJtUmhjbmtnUFNBbkxTMHRMUzB0TFMwdFUyNXZiMk52Y21VbklDc2dUV0YwYUM1bWJHOXZjaWhOWVhSb0xuSmhibVJ2YlNncElDb2dNVEF3TURBcE8xeHVJQ0FnSUNBZ1pHRjBZUzVqYjI1MFpXNTBWSGx3WlNBOUlDZHRkV3gwYVhCaGNuUXZabTl5YlMxa1lYUmhPeUJpYjNWdVpHRnllVDBuSUNzZ1ltOTFibVJoY25rN1hHNGdJQ0FnSUNCa1lYUmhMbUoxWm1abGNpQTlJR2RsZEUxMWJIUnBjR0Z5ZEVadmNtMUVZWFJoS0dKdmRXNWtZWEo1TENCbWIzSnRSR0YwWVN3Z1ptbHNaWE1wTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUdSaGRHRXVZMjl1ZEdWdWRFeGxibWQwYUNBOUlHUmhkR0V1WW5WbVptVnlMbXhsYm1kMGFEdGNiaUFnY21WMGRYSnVJR1JoZEdFN1hHNTlYRzVjYmk4cVhHNGdJQ0JVWVd0bGN5QmhiaUJyWlhrdGRtRnNkV1VnY0dGcGNpQmhibVFnZEhWeWJuTWdkR2hsYlNCcGJuUnZJR0VnUm05eWJVUmhkR0VnYjJKcVpXTjBMaUJVYUdseklHbHpJR1p2Y2lCM2FHVnVYRzRnSUNCM1pTQjNZVzUwSUhSdklIVndiRzloWkNCaElHWnBiR1VnZFhOcGJtY2dXRTFNU0hSMGNGSmxjWFZsYzNRdVhHNHFMMXh1WEc1bWRXNWpkR2x2YmlCblpYUkdiM0p0UkdGMFlTaG1iM0p0UkdGMFlTa2dlMXh1SUNCMllYSWdaR0YwWVNBOUlHNWxkeUJHYjNKdFJHRjBZU2dwTzF4dVhHNGdJR1p2Y2lBb2RtRnlJR3RsZVNCcGJpQm1iM0p0UkdGMFlTa2dlMXh1SUNBZ0lHbG1JQ2hyWlhrZ1BUMDlJQ2RtYVd4bEp5a2dlMXh1SUNBZ0lDQWdaR0YwWVM1aGNIQmxibVFvYTJWNUxDQm1iM0p0UkdGMFlWdHJaWGxkTG1SaGRHRXNJR1p2Y20xRVlYUmhXMnRsZVYwdWJtRnRaU2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHUmhkR0V1WVhCd1pXNWtLR3RsZVN3Z1ptOXliVVJoZEdGYmEyVjVYU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnY21WMGRYSnVJR1JoZEdFN1hHNTlYRzR2THlNZ2MyOTFjbU5sVFdGd2NHbHVaMVZTVEQxbWIzSnRMbXB6TG0xaGNGeHVJbDE5IiwiLy9cbi8vIEJyb3dzZXIgcmVxdWVzdHMsIG1pcnJvcnMgdGhlIHN5bnRheCBvZiB0aGUgbm9kZSByZXF1ZXN0c1xuLy9cblxuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGh0dHBzO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqWydkZWZhdWx0J10gPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBfdXJsID0gcmVxdWlyZSgndXJsJyk7XG5cbnZhciBfdXJsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3VybCk7XG5cbnZhciBfd2hlbiA9IHJlcXVpcmUoJ3doZW4nKTtcblxudmFyIF93aGVuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3doZW4pO1xuXG52YXIgX2Zvcm0gPSByZXF1aXJlKCcuL2Zvcm0nKTtcblxudmFyIGZvcm0gPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfZm9ybSk7XG5cbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9YTUxIdHRwUmVxdWVzdCNnZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuXG4vLyBTZXQgdG8gdHJ1ZSB0byBwcmludCB1c2VmdWwgaHR0cCBkZWJ1ZyBpbmZvcm1hdGlvbiBvbiBhIGxvd2VyIGxldmVsXG52YXIgREVCVUdfTE9HID0gZmFsc2UgPyBjb25zb2xlLmVycm9yIDogZnVuY3Rpb24gKCkge307XG5cbi8qKlxuICogTW9kaWZpZWQgZnJvbSBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9tb25zdXIvNzA2ODM5XG4gKlxuICogWG1sSHR0cFJlcXVlc3QncyBnZXRBbGxSZXNwb25zZUhlYWRlcnMoKSBtZXRob2QgcmV0dXJucyBhIHN0cmluZyBvZiByZXNwb25zZVxuICogaGVhZGVycyBhY2NvcmRpbmcgdG8gdGhlIGZvcm1hdCBkZXNjcmliZWQgaGVyZTpcbiAqIGh0dHA6Ly93d3cudzMub3JnL1RSL1hNTEh0dHBSZXF1ZXN0LyN0aGUtZ2V0YWxscmVzcG9uc2VoZWFkZXJzLW1ldGhvZFxuICogVGhpcyBtZXRob2QgcGFyc2VzIHRoYXQgc3RyaW5nIGludG8gYSB1c2VyLWZyaWVuZGx5IGtleS92YWx1ZSBwYWlyIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gcGFyc2VSZXNwb25zZUhlYWRlcnMoaGVhZGVyU3RyKSB7XG4gIHZhciBoZWFkZXJzID0ge307XG4gIGlmICghaGVhZGVyU3RyKSB7XG4gICAgcmV0dXJuIGhlYWRlcnM7XG4gIH1cbiAgdmFyIGhlYWRlclBhaXJzID0gaGVhZGVyU3RyLnNwbGl0KCdcXHJcXG4nKTtcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGhlYWRlclBhaXJzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgdmFyIGhlYWRlclBhaXIgPSBoZWFkZXJQYWlyc1tpXTtcbiAgICAvLyBDYW4ndCB1c2Ugc3BsaXQoKSBoZXJlIGJlY2F1c2UgaXQgZG9lcyB0aGUgd3JvbmcgdGhpbmdcbiAgICAvLyBpZiB0aGUgaGVhZGVyIHZhbHVlIGhhcyB0aGUgc3RyaW5nIFwiOiBcIiBpbiBpdC5cbiAgICB2YXIgaW5kZXggPSBoZWFkZXJQYWlyLmluZGV4T2YoJzogJyk7XG4gICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgLy8gbWFrZSBhbGwga2V5cyBsb3dlcmNhc2VcbiAgICAgIHZhciBrZXkgPSBoZWFkZXJQYWlyLnN1YnN0cmluZygwLCBpbmRleCkudG9Mb3dlckNhc2UoKTtcbiAgICAgIHZhciB2YWwgPSBoZWFkZXJQYWlyLnN1YnN0cmluZyhpbmRleCArIDIpO1xuICAgICAgaGVhZGVyc1trZXldID0gdmFsO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaGVhZGVycztcbn1cblxuZnVuY3Rpb24gaHR0cHMob3B0aW9ucywgZm9ybURhdGEpIHtcblxuICBERUJVR19MT0coJz4+IGJyb3dzZXIgaHR0cHMgY2FsbCcpO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBvcHRpb25zLmhlYWRlcnMgPSBvcHRpb25zLmhlYWRlcnMgfHwge307XG5cbiAgdmFyIGRhdGE7XG5cbiAgaWYgKGZvcm1EYXRhLmZpbGUpIHtcbiAgICBkYXRhID0gZm9ybS5nZXRGb3JtRGF0YShmb3JtRGF0YSk7XG4gIH0gZWxzZSB7XG4gICAgZGF0YSA9IGZvcm0uZ2V0RGF0YShmb3JtRGF0YSk7XG4gICAgb3B0aW9ucy5oZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IGRhdGEuY29udGVudFR5cGU7XG4gIH1cblxuICBpZiAob3B0aW9ucy5tZXRob2QgPT09ICdQVVQnICYmIG9wdGlvbnMucGF0aC5zdWJzdHIoMCwgMTgpID09PSAnL2FwaS92MS9tZS9mcmllbmRzJykge1xuICAgIG9wdGlvbnMuaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSAnYXBwbGljYXRpb24vanNvbic7XG4gIH1cblxuICByZXR1cm4gX3doZW4yWydkZWZhdWx0J10ucHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICB0cnkge1xuICAgICAgaWYgKG9wdGlvbnMubWV0aG9kID09PSAnR0VUJyAmJiBkYXRhIGluc3RhbmNlb2YgRm9ybURhdGEpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoJ0Nhbm5vdCBtYWtlIGEgR0VUIHJlcXVlc3Qgd2hpbGUgaGFuZGxpbmcgYSBmaWxlIScpKTtcbiAgICAgIH1cblxuICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1hNTEh0dHBSZXF1ZXN0XG4gICAgICB2YXIgeCA9IG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgICAgdmFyIHVybCA9ICdodHRwczovLycgKyBvcHRpb25zLmhvc3RuYW1lICsgb3B0aW9ucy5wYXRoO1xuXG4gICAgICBERUJVR19MT0coJz4+IHVybDogJywgdXJsKTtcblxuICAgICAgLy8gYXBwZW5kIHRoZSBmb3JtIGRhdGEgdG8gdGhlIGVuZCBvZiB0aGUgdXJsXG4gICAgICBpZiAob3B0aW9ucy5tZXRob2QgPT09ICdHRVQnKSB7XG4gICAgICAgIHVybCArPSAnPycgKyBkYXRhLmJ1ZmZlci50b1N0cmluZygpO1xuICAgICAgfVxuXG4gICAgICB4Lm9wZW4ob3B0aW9ucy5tZXRob2QsIHVybCwgdHJ1ZSk7XG5cbiAgICAgIGlmIChvcHRpb25zLnVzZUJyb3dzZXJDb29raWVzKSB7XG4gICAgICAgIHgud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgT2JqZWN0LmtleXMob3B0aW9ucy5oZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChoZWFkZXJLZXkpIHtcbiAgICAgICAgeC5zZXRSZXF1ZXN0SGVhZGVyKGhlYWRlcktleSwgb3B0aW9ucy5oZWFkZXJzW2hlYWRlcktleV0pO1xuICAgICAgfSk7XG5cbiAgICAgIHgub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoeC5yZWFkeVN0YXRlID4gMykge1xuICAgICAgICAgIC8vIE5vcm1hbGl6ZSB0aGUgcmVzdWx0IHRvIG1hdGNoIGhvdyByZXF1ZXN0Tm9kZS5qcyB3b3Jrc1xuXG4gICAgICAgICAgREVCVUdfTE9HKCdmaW5pc2hlZC4uLicsIHguc3RhdHVzKTtcblxuICAgICAgICAgIHJldHVybiByZXNvbHZlKHtcbiAgICAgICAgICAgIF9ib2R5OiB4LnJlc3BvbnNlVGV4dCxcbiAgICAgICAgICAgIF9zdGF0dXM6IHguc3RhdHVzLFxuICAgICAgICAgICAgX2hlYWRlcnM6IHBhcnNlUmVzcG9uc2VIZWFkZXJzKHguZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgRm9ybURhdGEpIHtcbiAgICAgICAgeC5zZW5kKGRhdGEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeC5zZW5kKG9wdGlvbnMubWV0aG9kID09PSAnR0VUJyA/IG51bGwgOiBkYXRhLmJ1ZmZlci50b1N0cmluZygpKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gcmVqZWN0KGUpO1xuICAgIH1cbiAgfSkudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgdmFyIGNhblJlZGlyZWN0ID0gU3RyaW5nKHJlcy5fc3RhdHVzKS5zdWJzdHJpbmcoMCwgMSkgPT09ICczJyAmJiB0eXBlb2YgcmVzLl9oZWFkZXJzLmxvY2F0aW9uICE9PSAndW5kZWZpbmVkJztcblxuICAgIGlmIChjYW5SZWRpcmVjdCkge1xuICAgICAgLy8gTWFrZSB0aGUgY2FsbCBhZ2FpbiB3aXRoIHRoZSBuZXcgaG9zdG5hbWUsIHBhdGgsIGFuZCBmb3JtIGRhdGFcbiAgICAgIHZhciBwYXJzZWQgPSBfdXJsMlsnZGVmYXVsdCddLnBhcnNlKHJlcy5faGVhZGVycy5sb2NhdGlvbik7XG4gICAgICBvcHRpb25zLmhvc3RuYW1lID0gcGFyc2VkLmhvc3RuYW1lO1xuICAgICAgb3B0aW9ucy5wYXRoID0gcGFyc2VkLnBhdGhuYW1lO1xuICAgICAgcmV0dXJuIGh0dHBzKG9wdGlvbnMsIHBhcnNlZC5xdWVyeSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aHR0cHNCcm93c2VyLmpzLm1hcFxuIiwiLy9cbi8vIE5vZGUgcmVxdWVzdHNcbi8vXG5cbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzWydkZWZhdWx0J10gPSBodHRwcztcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09ialsnZGVmYXVsdCddID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX2h0dHBzID0gcmVxdWlyZSgnaHR0cHMnKTtcblxudmFyIF9odHRwczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9odHRwcyk7XG5cbnZhciBfdXJsID0gcmVxdWlyZSgndXJsJyk7XG5cbnZhciBfdXJsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3VybCk7XG5cbnZhciBfd2hlbiA9IHJlcXVpcmUoJ3doZW4nKTtcblxudmFyIF93aGVuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3doZW4pO1xuXG52YXIgX2Zvcm0gPSByZXF1aXJlKCcuL2Zvcm0nKTtcblxudmFyIGZvcm0gPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfZm9ybSk7XG5cbi8vIFNldCB0byB0cnVlIHRvIHByaW50IHVzZWZ1bCBodHRwIGRlYnVnIGluZm9ybWF0aW9uIG9uIGEgbG93ZXIgbGV2ZWxcbnZhciBERUJVR19MT0cgPSBmYWxzZSA/IGNvbnNvbGUuZXJyb3IgOiBmdW5jdGlvbiAoKSB7fTtcblxuLypcbiAgIEZvcm0gZGF0YSBjYW4gYmUgYSByYXcgc3RyaW5nLCBvciBhbiBvYmplY3QgY29udGFpbmluZyBrZXkvdmFsdWUgcGFpcnNcbiAqL1xuXG5mdW5jdGlvbiBodHRwcyhvcHRpb25zLCBmb3JtRGF0YSkge1xuICBERUJVR19MT0coJ1xcblxcblxcblxcbicpO1xuICBERUJVR19MT0coJz4+PiByZXF1ZXN0OlxcbicgKyBvcHRpb25zLm1ldGhvZCArICc6ICcgKyBvcHRpb25zLmhvc3RuYW1lICsgb3B0aW9ucy5wYXRoKTtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5oZWFkZXJzID0gb3B0aW9ucy5oZWFkZXJzIHx8IHt9O1xuXG4gIGZvcm1EYXRhID0gZm9ybURhdGEgfHwgW107XG5cbiAgdmFyIGRhdGEgPSBmb3JtLmdldERhdGEoZm9ybURhdGEpO1xuXG4gIG9wdGlvbnMuaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSBkYXRhLmNvbnRlbnRUeXBlO1xuXG4gIGlmIChvcHRpb25zLm1ldGhvZCA9PT0gJ1BVVCcgJiYgb3B0aW9ucy5wYXRoLnN1YnN0cigwLCAxOCkgPT09ICcvYXBpL3YxL21lL2ZyaWVuZHMnKSB7XG4gICAgb3B0aW9ucy5oZWFkZXJzWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi9qc29uJztcbiAgfVxuXG4gIGlmIChvcHRpb25zLm1ldGhvZCAhPT0gJ0dFVCcpIHtcbiAgICBvcHRpb25zLmhlYWRlcnNbJ0NvbnRlbnQtTGVuZ3RoJ10gPSBkYXRhLmNvbnRlbnRMZW5ndGg7XG4gIH1cblxuICBERUJVR19MT0coJ1xcbj4+PiByZXF1ZXN0IGhlYWRlcnNcXG4nLCBvcHRpb25zLmhlYWRlcnMpO1xuXG4gIC8vIHN0aWNrIHRoZSBkYXRhIGF0IHRoZSBlbmQgb2YgdGhlIHVybCBmb3IgR0VUIHJlcXVlc3RzXG4gIGlmIChvcHRpb25zLm1ldGhvZCA9PT0gJ0dFVCcgJiYgZGF0YS5idWZmZXIudG9TdHJpbmcoKSAhPT0gJycpIHtcbiAgICBERUJVR19MT0coJ1xcbj4+PiBxdWVyeSBzdHJpbmc6XFxuJywgZGF0YS5idWZmZXIudG9TdHJpbmcoKSk7XG4gICAgb3B0aW9ucy5wYXRoICs9ICc/JyArIGRhdGEuYnVmZmVyLnRvU3RyaW5nKCk7XG4gIH1cblxuICByZXR1cm4gX3doZW4yWydkZWZhdWx0J10ucHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICB2YXIgcmVxID0gX2h0dHBzMlsnZGVmYXVsdCddLnJlcXVlc3Qob3B0aW9ucywgZnVuY3Rpb24gKHJlcykge1xuXG4gICAgICByZXMuX3JlcSA9IHJlcTsgLy8gYXR0YWNoIGEgcmVmZXJlbmNlIGJhY2sgdG8gdGhlIHJlcXVlc3RcblxuICAgICAgcmVzLnNldEVuY29kaW5nKCd1dGY4Jyk7XG4gICAgICB2YXIgYm9keSA9ICcnO1xuICAgICAgcmVzLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICByZXR1cm4gcmVqZWN0KGVycm9yKTtcbiAgICAgIH0pO1xuICAgICAgcmVzLm9uKCdkYXRhJywgZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgICAgIGJvZHkgKz0gY2h1bms7XG4gICAgICB9KTtcbiAgICAgIHJlcy5vbignZW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXMuX2JvZHkgPSBib2R5OyAvLyBhdHRhY2ggdGhlIHJlc3BvbnNlIGJvZHkgdG8gdGhlIG9iamVjdFxuICAgICAgICByZXMuX3N0YXR1cyA9IHJlcy5zdGF0dXNDb2RlO1xuICAgICAgICByZXMuX2hlYWRlcnMgPSByZXMuaGVhZGVycztcbiAgICAgICAgREVCVUdfTE9HKCdcXG4+Pj4gcmVzcG9uc2UgaGVhZGVyczpcXG4nLCByZXMuX2hlYWRlcnMpO1xuICAgICAgICBERUJVR19MT0coJ1xcbj4+PiByZXNwb25zZSBib2R5OlxcbicsIFN0cmluZyhib2R5KS5zdWJzdHJpbmcoMCwgMTAwMCkpO1xuICAgICAgICBERUJVR19MT0coJ1xcbj4+PiBzdGF0dXM6XFxuJywgcmVzLnN0YXR1c0NvZGUpO1xuICAgICAgICByZXR1cm4gcmVzb2x2ZShyZXMpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICByZXEub24oJ2Vycm9yJywgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICByZXR1cm4gcmVqZWN0KGVycm9yKTtcbiAgICB9KTtcblxuICAgIGlmIChvcHRpb25zLm1ldGhvZCAhPT0gJ0dFVCcpIHtcbiAgICAgIERFQlVHX0xPRygnXFxuPj4+IHJlcXVlc3QgYm9keTpcXG4nLCBkYXRhLmJ1ZmZlci50b1N0cmluZygpKTtcbiAgICAgIHJlcS53cml0ZShkYXRhLmJ1ZmZlcik7XG4gICAgfVxuXG4gICAgcmVxLmVuZCgpO1xuICB9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICB2YXIgY2FuUmVkaXJlY3QgPSBTdHJpbmcocmVzLl9zdGF0dXMpLnN1YnN0cmluZygwLCAxKSA9PT0gJzMnICYmIHR5cGVvZiByZXMuX2hlYWRlcnMubG9jYXRpb24gIT09ICd1bmRlZmluZWQnO1xuXG4gICAgaWYgKGNhblJlZGlyZWN0KSB7XG4gICAgICAvLyBNYWtlIHRoZSBjYWxsIGFnYWluIHdpdGggdGhlIG5ldyBob3N0bmFtZSwgcGF0aCwgYW5kIGZvcm0gZGF0YVxuICAgICAgdmFyIHBhcnNlZCA9IF91cmwyWydkZWZhdWx0J10ucGFyc2UocmVzLl9oZWFkZXJzLmxvY2F0aW9uKTtcbiAgICAgIG9wdGlvbnMuaG9zdG5hbWUgPSBwYXJzZWQuaG9zdG5hbWU7XG4gICAgICBvcHRpb25zLnBhdGggPSBwYXJzZWQucGF0aG5hbWU7XG4gICAgICByZXR1cm4gaHR0cHMob3B0aW9ucywgcGFyc2VkLnF1ZXJ5KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG4vLyMgc291cmNlTWFwcGluZ1VSTD1odHRwc05vZGUuanMubWFwXG4iLCJcbi8vIGNoZWNrcyBiYXNpYyBnbG9iYWxzIHRvIGhlbHAgZGV0ZXJtaW5lIHdoaWNoIGVudmlyb25tZW50IHdlIGFyZSBpblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmlzTm9kZSA9IGlzTm9kZTtcbmV4cG9ydHMudGhpc09yVGhhdCA9IHRoaXNPclRoYXQ7XG5leHBvcnRzLnRoaXNPclRocm93ID0gdGhpc09yVGhyb3c7XG5cbmZ1bmN0aW9uIGlzTm9kZSgpIHtcbiAgcmV0dXJuIHR5cGVvZiByZXF1aXJlID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiO1xufVxuXG4vKlxuICAgUmV0dXJuIHRoZSB2YWx1ZSBvZiBgdHJ5VGhpc2AgdW5sZXNzIGl0J3MgdW5kZWZpbmVkLCB0aGVuIHJldHVybiBgdGhhdGBcbiAqL1xuXG5mdW5jdGlvbiB0aGlzT3JUaGF0KHRyeVRoaXMsIHRoYXQpIHtcbiAgcmV0dXJuIHR5cGVvZiB0cnlUaGlzICE9PSAndW5kZWZpbmVkJyA/IHRyeVRoaXMgOiB0aGF0O1xufVxuXG4vKlxuICAgUmV0dXJuIHRoZSB2YWx1ZSBvZiBgdHJ5VGhpcmAgb3IgdGhyb3cgYW4gZXJyb3IgKHdpdGggcHJvdmlkZWQgbWVzc2FnZSk7XG4gKi9cblxuZnVuY3Rpb24gdGhpc09yVGhyb3codHJ5VGhpcywgb3JUaHJvd01lc3NhZ2UpIHtcbiAgaWYgKHR5cGVvZiB0cnlUaGlzICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiB0cnlUaGlzO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihvclRocm93TWVzc2FnZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXBcbiIsbnVsbCwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbnZhciBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzLWFycmF5JylcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IEJ1ZmZlclxuZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUyA9IDUwXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblxudmFyIGtNYXhMZW5ndGggPSAweDNmZmZmZmZmXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFVzZSBPYmplY3QgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpXG4gKlxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuICogT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICpcbiAqIE5vdGU6XG4gKlxuICogLSBJbXBsZW1lbnRhdGlvbiBtdXN0IHN1cHBvcnQgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YCBpbnN0YW5jZXMuXG4gKiAgIEZpcmVmb3ggNC0yOSBsYWNrZWQgc3VwcG9ydCwgZml4ZWQgaW4gRmlyZWZveCAzMCsuXG4gKiAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LlxuICpcbiAqICAtIENocm9tZSA5LTEwIGlzIG1pc3NpbmcgdGhlIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24uXG4gKlxuICogIC0gSUUxMCBoYXMgYSBicm9rZW4gYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFycmF5cyBvZlxuICogICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuXG4gKlxuICogV2UgZGV0ZWN0IHRoZXNlIGJ1Z2d5IGJyb3dzZXJzIGFuZCBzZXQgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYCB0byBgZmFsc2VgIHNvIHRoZXkgd2lsbFxuICogZ2V0IHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24sIHdoaWNoIGlzIHNsb3dlciBidXQgd2lsbCB3b3JrIGNvcnJlY3RseS5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSAoZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIHZhciBidWYgPSBuZXcgQXJyYXlCdWZmZXIoMClcbiAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoYnVmKVxuICAgIGFyci5mb28gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9XG4gICAgcmV0dXJuIDQyID09PSBhcnIuZm9vKCkgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWRcbiAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBjaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgICAgICAgbmV3IFVpbnQ4QXJyYXkoMSkuc3ViYXJyYXkoMSwgMSkuYnl0ZUxlbmd0aCA9PT0gMCAvLyBpZTEwIGhhcyBicm9rZW4gYHN1YmFycmF5YFxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn0pKClcblxuLyoqXG4gKiBDbGFzczogQnVmZmVyXG4gKiA9PT09PT09PT09PT09XG4gKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBhcmUgYXVnbWVudGVkXG4gKiB3aXRoIGZ1bmN0aW9uIHByb3BlcnRpZXMgZm9yIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBBUEkgZnVuY3Rpb25zLiBXZSB1c2VcbiAqIGBVaW50OEFycmF5YCBzbyB0aGF0IHNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0IHJldHVybnNcbiAqIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIEJ5IGF1Z21lbnRpbmcgdGhlIGluc3RhbmNlcywgd2UgY2FuIGF2b2lkIG1vZGlmeWluZyB0aGUgYFVpbnQ4QXJyYXlgXG4gKiBwcm90b3R5cGUuXG4gKi9cbmZ1bmN0aW9uIEJ1ZmZlciAoc3ViamVjdCwgZW5jb2RpbmcsIG5vWmVybykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgQnVmZmVyKSlcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihzdWJqZWN0LCBlbmNvZGluZywgbm9aZXJvKVxuXG4gIHZhciB0eXBlID0gdHlwZW9mIHN1YmplY3RcblxuICAvLyBGaW5kIHRoZSBsZW5ndGhcbiAgdmFyIGxlbmd0aFxuICBpZiAodHlwZSA9PT0gJ251bWJlcicpXG4gICAgbGVuZ3RoID0gc3ViamVjdCA+IDAgPyBzdWJqZWN0ID4+PiAwIDogMFxuICBlbHNlIGlmICh0eXBlID09PSAnc3RyaW5nJykge1xuICAgIGlmIChlbmNvZGluZyA9PT0gJ2Jhc2U2NCcpXG4gICAgICBzdWJqZWN0ID0gYmFzZTY0Y2xlYW4oc3ViamVjdClcbiAgICBsZW5ndGggPSBCdWZmZXIuYnl0ZUxlbmd0aChzdWJqZWN0LCBlbmNvZGluZylcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnb2JqZWN0JyAmJiBzdWJqZWN0ICE9PSBudWxsKSB7IC8vIGFzc3VtZSBvYmplY3QgaXMgYXJyYXktbGlrZVxuICAgIGlmIChzdWJqZWN0LnR5cGUgPT09ICdCdWZmZXInICYmIGlzQXJyYXkoc3ViamVjdC5kYXRhKSlcbiAgICAgIHN1YmplY3QgPSBzdWJqZWN0LmRhdGFcbiAgICBsZW5ndGggPSArc3ViamVjdC5sZW5ndGggPiAwID8gTWF0aC5mbG9vcigrc3ViamVjdC5sZW5ndGgpIDogMFxuICB9IGVsc2VcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtdXN0IHN0YXJ0IHdpdGggbnVtYmVyLCBidWZmZXIsIGFycmF5IG9yIHN0cmluZycpXG5cbiAgaWYgKHRoaXMubGVuZ3RoID4ga01heExlbmd0aClcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcbiAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoLnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKVxuXG4gIHZhciBidWZcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUHJlZmVycmVkOiBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIGJ1ZiA9IEJ1ZmZlci5fYXVnbWVudChuZXcgVWludDhBcnJheShsZW5ndGgpKVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gVEhJUyBpbnN0YW5jZSBvZiBCdWZmZXIgKGNyZWF0ZWQgYnkgYG5ld2ApXG4gICAgYnVmID0gdGhpc1xuICAgIGJ1Zi5sZW5ndGggPSBsZW5ndGhcbiAgICBidWYuX2lzQnVmZmVyID0gdHJ1ZVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmIHR5cGVvZiBzdWJqZWN0LmJ5dGVMZW5ndGggPT09ICdudW1iZXInKSB7XG4gICAgLy8gU3BlZWQgb3B0aW1pemF0aW9uIC0tIHVzZSBzZXQgaWYgd2UncmUgY29weWluZyBmcm9tIGEgdHlwZWQgYXJyYXlcbiAgICBidWYuX3NldChzdWJqZWN0KVxuICB9IGVsc2UgaWYgKGlzQXJyYXlpc2goc3ViamVjdCkpIHtcbiAgICAvLyBUcmVhdCBhcnJheS1pc2ggb2JqZWN0cyBhcyBhIGJ5dGUgYXJyYXlcbiAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN1YmplY3QpKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspXG4gICAgICAgIGJ1ZltpXSA9IHN1YmplY3QucmVhZFVJbnQ4KGkpXG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcbiAgICAgICAgYnVmW2ldID0gKChzdWJqZWN0W2ldICUgMjU2KSArIDI1NikgJSAyNTZcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICBidWYud3JpdGUoc3ViamVjdCwgMCwgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICFub1plcm8pIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGJ1ZltpXSA9IDBcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnVmXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSlcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgbXVzdCBiZSBCdWZmZXJzJylcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuICYmIGFbaV0gPT09IGJbaV07IGkrKykge31cbiAgaWYgKGkgIT09IGxlbikge1xuICAgIHggPSBhW2ldXG4gICAgeSA9IGJbaV1cbiAgfVxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICdyYXcnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gKGxpc3QsIHRvdGFsTGVuZ3RoKSB7XG4gIGlmICghaXNBcnJheShsaXN0KSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVXNhZ2U6IEJ1ZmZlci5jb25jYXQobGlzdFssIGxlbmd0aF0pJylcblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcigwKVxuICB9IGVsc2UgaWYgKGxpc3QubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGxpc3RbMF1cbiAgfVxuXG4gIHZhciBpXG4gIGlmICh0b3RhbExlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdG90YWxMZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRvdGFsTGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZiA9IG5ldyBCdWZmZXIodG90YWxMZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldXG4gICAgaXRlbS5jb3B5KGJ1ZiwgcG9zKVxuICAgIHBvcyArPSBpdGVtLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZcbn1cblxuQnVmZmVyLmJ5dGVMZW5ndGggPSBmdW5jdGlvbiAoc3RyLCBlbmNvZGluZykge1xuICB2YXIgcmV0XG4gIHN0ciA9IHN0ciArICcnXG4gIHN3aXRjaCAoZW5jb2RpbmcgfHwgJ3V0ZjgnKSB7XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAncmF3JzpcbiAgICAgIHJldCA9IHN0ci5sZW5ndGhcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldCA9IHN0ci5sZW5ndGggKiAyXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2hleCc6XG4gICAgICByZXQgPSBzdHIubGVuZ3RoID4+PiAxXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIHJldCA9IHV0ZjhUb0J5dGVzKHN0cikubGVuZ3RoXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICByZXQgPSBiYXNlNjRUb0J5dGVzKHN0cikubGVuZ3RoXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXQgPSBzdHIubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG4vLyBwcmUtc2V0IGZvciB2YWx1ZXMgdGhhdCBtYXkgZXhpc3QgaW4gdGhlIGZ1dHVyZVxuQnVmZmVyLnByb3RvdHlwZS5sZW5ndGggPSB1bmRlZmluZWRcbkJ1ZmZlci5wcm90b3R5cGUucGFyZW50ID0gdW5kZWZpbmVkXG5cbi8vIHRvU3RyaW5nKGVuY29kaW5nLCBzdGFydD0wLCBlbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA9PT0gSW5maW5pdHkgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG4gIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmIChlbmQgPD0gc3RhcnQpIHJldHVybiAnJ1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGJpbmFyeVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSlcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gKGIpIHtcbiAgaWYoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcbiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpXG4gICAgICBzdHIgKz0gJyAuLi4gJ1xuICB9XG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpXG59XG5cbi8vIGBnZXRgIHdpbGwgYmUgcmVtb3ZlZCBpbiBOb2RlIDAuMTMrXG5CdWZmZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChvZmZzZXQpIHtcbiAgY29uc29sZS5sb2coJy5nZXQoKSBpcyBkZXByZWNhdGVkLiBBY2Nlc3MgdXNpbmcgYXJyYXkgaW5kZXhlcyBpbnN0ZWFkLicpXG4gIHJldHVybiB0aGlzLnJlYWRVSW50OChvZmZzZXQpXG59XG5cbi8vIGBzZXRgIHdpbGwgYmUgcmVtb3ZlZCBpbiBOb2RlIDAuMTMrXG5CdWZmZXIucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uICh2LCBvZmZzZXQpIHtcbiAgY29uc29sZS5sb2coJy5zZXQoKSBpcyBkZXByZWNhdGVkLiBBY2Nlc3MgdXNpbmcgYXJyYXkgaW5kZXhlcyBpbnN0ZWFkLicpXG4gIHJldHVybiB0aGlzLndyaXRlVUludDgodiwgb2Zmc2V0KVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaGV4IHN0cmluZycpXG5cbiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHtcbiAgICBsZW5ndGggPSBzdHJMZW4gLyAyXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIHZhciBieXRlID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChpc05hTihieXRlKSkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IGJ5dGVcbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICB2YXIgY2hhcnNXcml0dGVuID0gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxuICByZXR1cm4gY2hhcnNXcml0dGVuXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICB2YXIgY2hhcnNXcml0dGVuID0gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbiAgcmV0dXJuIGNoYXJzV3JpdHRlblxufVxuXG5mdW5jdGlvbiBiaW5hcnlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBhc2NpaVdyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICB2YXIgY2hhcnNXcml0dGVuID0gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG4gIHJldHVybiBjaGFyc1dyaXR0ZW5cbn1cblxuZnVuY3Rpb24gdXRmMTZsZVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgdmFyIGNoYXJzV3JpdHRlbiA9IGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aCwgMilcbiAgcmV0dXJuIGNoYXJzV3JpdHRlblxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIFN1cHBvcnQgYm90aCAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpXG4gIC8vIGFuZCB0aGUgbGVnYWN5IChzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXQsIGxlbmd0aClcbiAgaWYgKGlzRmluaXRlKG9mZnNldCkpIHtcbiAgICBpZiAoIWlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGVuY29kaW5nID0gbGVuZ3RoXG4gICAgICBsZW5ndGggPSB1bmRlZmluZWRcbiAgICB9XG4gIH0gZWxzZSB7ICAvLyBsZWdhY3lcbiAgICB2YXIgc3dhcCA9IGVuY29kaW5nXG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBvZmZzZXQgPSBsZW5ndGhcbiAgICBsZW5ndGggPSBzd2FwXG4gIH1cblxuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG4gIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nIHx8ICd1dGY4JykudG9Mb3dlckNhc2UoKVxuXG4gIHZhciByZXRcbiAgc3dpdGNoIChlbmNvZGluZykge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgICByZXQgPSBoZXhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgICByZXQgPSB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnYXNjaWknOlxuICAgICAgcmV0ID0gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuICAgICAgYnJlYWtcbiAgICBjYXNlICdiaW5hcnknOlxuICAgICAgcmV0ID0gYmluYXJ5V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgIHJldCA9IGJhc2U2NFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXQgPSB1dGYxNmxlV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbiAgICAgIGJyZWFrXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmVzID0gJydcbiAgdmFyIHRtcCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgIGlmIChidWZbaV0gPD0gMHg3Rikge1xuICAgICAgcmVzICs9IGRlY29kZVV0ZjhDaGFyKHRtcCkgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgICAgIHRtcCA9ICcnXG4gICAgfSBlbHNlIHtcbiAgICAgIHRtcCArPSAnJScgKyBidWZbaV0udG9TdHJpbmcoMTYpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlcyArIGRlY29kZVV0ZjhDaGFyKHRtcClcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBiaW5hcnlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHJldHVybiBhc2NpaVNsaWNlKGJ1Ziwgc3RhcnQsIGVuZClcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlblxuXG4gIHZhciBvdXQgPSAnJ1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgIG91dCArPSB0b0hleChidWZbaV0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgdmFyIHJlcyA9ICcnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIGJ5dGVzW2kgKyAxXSAqIDI1NilcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuO1xuICAgIGlmIChzdGFydCA8IDApXG4gICAgICBzdGFydCA9IDBcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgIHN0YXJ0ID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5cbiAgICBpZiAoZW5kIDwgMClcbiAgICAgIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydClcbiAgICBlbmQgPSBzdGFydFxuXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHJldHVybiBCdWZmZXIuX2F1Z21lbnQodGhpcy5zdWJhcnJheShzdGFydCwgZW5kKSlcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIHZhciBuZXdCdWYgPSBuZXcgQnVmZmVyKHNsaWNlTGVuLCB1bmRlZmluZWQsIHRydWUpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGljZUxlbjsgaSsrKSB7XG4gICAgICBuZXdCdWZbaV0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gICAgcmV0dXJuIG5ld0J1ZlxuICB9XG59XG5cbi8qXG4gKiBOZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGJ1ZmZlciBpc24ndCB0cnlpbmcgdG8gd3JpdGUgb3V0IG9mIGJvdW5kcy5cbiAqL1xuZnVuY3Rpb24gY2hlY2tPZmZzZXQgKG9mZnNldCwgZXh0LCBsZW5ndGgpIHtcbiAgaWYgKChvZmZzZXQgJSAxKSAhPT0gMCB8fCBvZmZzZXQgPCAwKVxuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKVxuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpXG4gICAgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdidWZmZXIgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpXG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsdWUgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICB0aGlzW29mZnNldF0gPSB2YWx1ZVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7IGkrKykge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSB2YWx1ZVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9IHZhbHVlXG4gIH0gZWxzZSBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MzIgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDQpOyBpIDwgajsgaSsrKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlID4+PiAobGl0dGxlRW5kaWFuID8gaSA6IDMgLSBpKSAqIDgpICYgMHhmZlxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0XSA9IHZhbHVlXG4gIH0gZWxzZSBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSB2YWx1ZVxuICB9IGVsc2Ugb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4N2YsIC0weDgwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSB2YWx1ZVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9IHZhbHVlXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSB2YWx1ZVxuICB9IGVsc2Ugb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSB2YWx1ZVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIH0gZWxzZSBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydClcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gdmFsdWVcbiAgfSBlbHNlIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbHVlIGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFR5cGVFcnJvcignaW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpXG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAodGFyZ2V0LCB0YXJnZXRfc3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHNvdXJjZSA9IHRoaXNcblxuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAoIXRhcmdldF9zdGFydCkgdGFyZ2V0X3N0YXJ0ID0gMFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHNvdXJjZS5sZW5ndGggPT09IDApIHJldHVyblxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKGVuZCA8IHN0YXJ0KSB0aHJvdyBuZXcgVHlwZUVycm9yKCdzb3VyY2VFbmQgPCBzb3VyY2VTdGFydCcpXG4gIGlmICh0YXJnZXRfc3RhcnQgPCAwIHx8IHRhcmdldF9zdGFydCA+PSB0YXJnZXQubGVuZ3RoKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHNvdXJjZS5sZW5ndGgpIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NvdXJjZVN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBpZiAoZW5kIDwgMCB8fCBlbmQgPiBzb3VyY2UubGVuZ3RoKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKVxuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0X3N0YXJ0IDwgZW5kIC0gc3RhcnQpXG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldF9zdGFydCArIHN0YXJ0XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG5cbiAgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRfc3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRhcmdldC5fc2V0KHRoaXMuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ICsgbGVuKSwgdGFyZ2V0X3N0YXJ0KVxuICB9XG59XG5cbi8vIGZpbGwodmFsdWUsIHN0YXJ0PTAsIGVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gKHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gIGlmICghdmFsdWUpIHZhbHVlID0gMFxuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQpIGVuZCA9IHRoaXMubGVuZ3RoXG5cbiAgaWYgKGVuZCA8IHN0YXJ0KSB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmQgPCBzdGFydCcpXG5cbiAgLy8gRmlsbCAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm5cbiAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm5cblxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdzdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDAgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuZCBvdXQgb2YgYm91bmRzJylcblxuICB2YXIgaVxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgIHRoaXNbaV0gPSB2YWx1ZVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSB1dGY4VG9CeXRlcyh2YWx1ZS50b1N0cmluZygpKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICB0aGlzW2ldID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgYEFycmF5QnVmZmVyYCB3aXRoIHRoZSAqY29waWVkKiBtZW1vcnkgb2YgdGhlIGJ1ZmZlciBpbnN0YW5jZS5cbiAqIEFkZGVkIGluIE5vZGUgMC4xMi4gT25seSBhdmFpbGFibGUgaW4gYnJvd3NlcnMgdGhhdCBzdXBwb3J0IEFycmF5QnVmZmVyLlxuICovXG5CdWZmZXIucHJvdG90eXBlLnRvQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAgIHJldHVybiAobmV3IEJ1ZmZlcih0aGlzKSkuYnVmZmVyXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBidWYgPSBuZXcgVWludDhBcnJheSh0aGlzLmxlbmd0aClcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBidWYubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgYnVmW2ldID0gdGhpc1tpXVxuICAgICAgfVxuICAgICAgcmV0dXJuIGJ1Zi5idWZmZXJcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQnVmZmVyLnRvQXJyYXlCdWZmZXIgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXInKVxuICB9XG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxudmFyIEJQID0gQnVmZmVyLnByb3RvdHlwZVxuXG4vKipcbiAqIEF1Z21lbnQgYSBVaW50OEFycmF5ICppbnN0YW5jZSogKG5vdCB0aGUgVWludDhBcnJheSBjbGFzcyEpIHdpdGggQnVmZmVyIG1ldGhvZHNcbiAqL1xuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuY29uc3RydWN0b3IgPSBCdWZmZXJcbiAgYXJyLl9pc0J1ZmZlciA9IHRydWVcblxuICAvLyBzYXZlIHJlZmVyZW5jZSB0byBvcmlnaW5hbCBVaW50OEFycmF5IGdldC9zZXQgbWV0aG9kcyBiZWZvcmUgb3ZlcndyaXRpbmdcbiAgYXJyLl9nZXQgPSBhcnIuZ2V0XG4gIGFyci5fc2V0ID0gYXJyLnNldFxuXG4gIC8vIGRlcHJlY2F0ZWQsIHdpbGwgYmUgcmVtb3ZlZCBpbiBub2RlIDAuMTMrXG4gIGFyci5nZXQgPSBCUC5nZXRcbiAgYXJyLnNldCA9IEJQLnNldFxuXG4gIGFyci53cml0ZSA9IEJQLndyaXRlXG4gIGFyci50b1N0cmluZyA9IEJQLnRvU3RyaW5nXG4gIGFyci50b0xvY2FsZVN0cmluZyA9IEJQLnRvU3RyaW5nXG4gIGFyci50b0pTT04gPSBCUC50b0pTT05cbiAgYXJyLmVxdWFscyA9IEJQLmVxdWFsc1xuICBhcnIuY29tcGFyZSA9IEJQLmNvbXBhcmVcbiAgYXJyLmNvcHkgPSBCUC5jb3B5XG4gIGFyci5zbGljZSA9IEJQLnNsaWNlXG4gIGFyci5yZWFkVUludDggPSBCUC5yZWFkVUludDhcbiAgYXJyLnJlYWRVSW50MTZMRSA9IEJQLnJlYWRVSW50MTZMRVxuICBhcnIucmVhZFVJbnQxNkJFID0gQlAucmVhZFVJbnQxNkJFXG4gIGFyci5yZWFkVUludDMyTEUgPSBCUC5yZWFkVUludDMyTEVcbiAgYXJyLnJlYWRVSW50MzJCRSA9IEJQLnJlYWRVSW50MzJCRVxuICBhcnIucmVhZEludDggPSBCUC5yZWFkSW50OFxuICBhcnIucmVhZEludDE2TEUgPSBCUC5yZWFkSW50MTZMRVxuICBhcnIucmVhZEludDE2QkUgPSBCUC5yZWFkSW50MTZCRVxuICBhcnIucmVhZEludDMyTEUgPSBCUC5yZWFkSW50MzJMRVxuICBhcnIucmVhZEludDMyQkUgPSBCUC5yZWFkSW50MzJCRVxuICBhcnIucmVhZEZsb2F0TEUgPSBCUC5yZWFkRmxvYXRMRVxuICBhcnIucmVhZEZsb2F0QkUgPSBCUC5yZWFkRmxvYXRCRVxuICBhcnIucmVhZERvdWJsZUxFID0gQlAucmVhZERvdWJsZUxFXG4gIGFyci5yZWFkRG91YmxlQkUgPSBCUC5yZWFkRG91YmxlQkVcbiAgYXJyLndyaXRlVUludDggPSBCUC53cml0ZVVJbnQ4XG4gIGFyci53cml0ZVVJbnQxNkxFID0gQlAud3JpdGVVSW50MTZMRVxuICBhcnIud3JpdGVVSW50MTZCRSA9IEJQLndyaXRlVUludDE2QkVcbiAgYXJyLndyaXRlVUludDMyTEUgPSBCUC53cml0ZVVJbnQzMkxFXG4gIGFyci53cml0ZVVJbnQzMkJFID0gQlAud3JpdGVVSW50MzJCRVxuICBhcnIud3JpdGVJbnQ4ID0gQlAud3JpdGVJbnQ4XG4gIGFyci53cml0ZUludDE2TEUgPSBCUC53cml0ZUludDE2TEVcbiAgYXJyLndyaXRlSW50MTZCRSA9IEJQLndyaXRlSW50MTZCRVxuICBhcnIud3JpdGVJbnQzMkxFID0gQlAud3JpdGVJbnQzMkxFXG4gIGFyci53cml0ZUludDMyQkUgPSBCUC53cml0ZUludDMyQkVcbiAgYXJyLndyaXRlRmxvYXRMRSA9IEJQLndyaXRlRmxvYXRMRVxuICBhcnIud3JpdGVGbG9hdEJFID0gQlAud3JpdGVGbG9hdEJFXG4gIGFyci53cml0ZURvdWJsZUxFID0gQlAud3JpdGVEb3VibGVMRVxuICBhcnIud3JpdGVEb3VibGVCRSA9IEJQLndyaXRlRG91YmxlQkVcbiAgYXJyLmZpbGwgPSBCUC5maWxsXG4gIGFyci5pbnNwZWN0ID0gQlAuaW5zcGVjdFxuICBhcnIudG9BcnJheUJ1ZmZlciA9IEJQLnRvQXJyYXlCdWZmZXJcblxuICByZXR1cm4gYXJyXG59XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLXpdL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHN0cmlwcyBvdXQgaW52YWxpZCBjaGFyYWN0ZXJzIGxpa2UgXFxuIGFuZCBcXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgc3RyID0gc3RyaW5ndHJpbShzdHIpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgd2hpbGUgKHN0ci5sZW5ndGggJSA0ICE9PSAwKSB7XG4gICAgc3RyID0gc3RyICsgJz0nXG4gIH1cbiAgcmV0dXJuIHN0clxufVxuXG5mdW5jdGlvbiBzdHJpbmd0cmltIChzdHIpIHtcbiAgaWYgKHN0ci50cmltKSByZXR1cm4gc3RyLnRyaW0oKVxuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKVxufVxuXG5mdW5jdGlvbiBpc0FycmF5aXNoIChzdWJqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5KHN1YmplY3QpIHx8IEJ1ZmZlci5pc0J1ZmZlcihzdWJqZWN0KSB8fFxuICAgICAgc3ViamVjdCAmJiB0eXBlb2Ygc3ViamVjdCA9PT0gJ29iamVjdCcgJiZcbiAgICAgIHR5cGVvZiBzdWJqZWN0Lmxlbmd0aCA9PT0gJ251bWJlcidcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIHZhciBiID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBpZiAoYiA8PSAweDdGKSB7XG4gICAgICBieXRlQXJyYXkucHVzaChiKVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc3RhcnQgPSBpXG4gICAgICBpZiAoYiA+PSAweEQ4MDAgJiYgYiA8PSAweERGRkYpIGkrK1xuICAgICAgdmFyIGggPSBlbmNvZGVVUklDb21wb25lbnQoc3RyLnNsaWNlKHN0YXJ0LCBpKzEpKS5zdWJzdHIoMSkuc3BsaXQoJyUnKVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBoLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGJ5dGVBcnJheS5wdXNoKHBhcnNlSW50KGhbal0sIDE2KSlcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cbiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpXG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoc3RyKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgsIHVuaXRTaXplKSB7XG4gIGlmICh1bml0U2l6ZSkgbGVuZ3RoIC09IGxlbmd0aCAlIHVuaXRTaXplO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKVxuICAgICAgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBkZWNvZGVVdGY4Q2hhciAoc3RyKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChzdHIpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4RkZGRCkgLy8gVVRGIDggaW52YWxpZCBjaGFyXG4gIH1cbn1cbiIsInZhciBsb29rdXAgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLyc7XG5cbjsoZnVuY3Rpb24gKGV4cG9ydHMpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG4gIHZhciBBcnIgPSAodHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnKVxuICAgID8gVWludDhBcnJheVxuICAgIDogQXJyYXlcblxuXHR2YXIgUExVUyAgID0gJysnLmNoYXJDb2RlQXQoMClcblx0dmFyIFNMQVNIICA9ICcvJy5jaGFyQ29kZUF0KDApXG5cdHZhciBOVU1CRVIgPSAnMCcuY2hhckNvZGVBdCgwKVxuXHR2YXIgTE9XRVIgID0gJ2EnLmNoYXJDb2RlQXQoMClcblx0dmFyIFVQUEVSICA9ICdBJy5jaGFyQ29kZUF0KDApXG5cblx0ZnVuY3Rpb24gZGVjb2RlIChlbHQpIHtcblx0XHR2YXIgY29kZSA9IGVsdC5jaGFyQ29kZUF0KDApXG5cdFx0aWYgKGNvZGUgPT09IFBMVVMpXG5cdFx0XHRyZXR1cm4gNjIgLy8gJysnXG5cdFx0aWYgKGNvZGUgPT09IFNMQVNIKVxuXHRcdFx0cmV0dXJuIDYzIC8vICcvJ1xuXHRcdGlmIChjb2RlIDwgTlVNQkVSKVxuXHRcdFx0cmV0dXJuIC0xIC8vbm8gbWF0Y2hcblx0XHRpZiAoY29kZSA8IE5VTUJFUiArIDEwKVxuXHRcdFx0cmV0dXJuIGNvZGUgLSBOVU1CRVIgKyAyNiArIDI2XG5cdFx0aWYgKGNvZGUgPCBVUFBFUiArIDI2KVxuXHRcdFx0cmV0dXJuIGNvZGUgLSBVUFBFUlxuXHRcdGlmIChjb2RlIDwgTE9XRVIgKyAyNilcblx0XHRcdHJldHVybiBjb2RlIC0gTE9XRVIgKyAyNlxuXHR9XG5cblx0ZnVuY3Rpb24gYjY0VG9CeXRlQXJyYXkgKGI2NCkge1xuXHRcdHZhciBpLCBqLCBsLCB0bXAsIHBsYWNlSG9sZGVycywgYXJyXG5cblx0XHRpZiAoYjY0Lmxlbmd0aCAlIDQgPiAwKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuXHRcdH1cblxuXHRcdC8vIHRoZSBudW1iZXIgb2YgZXF1YWwgc2lnbnMgKHBsYWNlIGhvbGRlcnMpXG5cdFx0Ly8gaWYgdGhlcmUgYXJlIHR3byBwbGFjZWhvbGRlcnMsIHRoYW4gdGhlIHR3byBjaGFyYWN0ZXJzIGJlZm9yZSBpdFxuXHRcdC8vIHJlcHJlc2VudCBvbmUgYnl0ZVxuXHRcdC8vIGlmIHRoZXJlIGlzIG9ubHkgb25lLCB0aGVuIHRoZSB0aHJlZSBjaGFyYWN0ZXJzIGJlZm9yZSBpdCByZXByZXNlbnQgMiBieXRlc1xuXHRcdC8vIHRoaXMgaXMganVzdCBhIGNoZWFwIGhhY2sgdG8gbm90IGRvIGluZGV4T2YgdHdpY2Vcblx0XHR2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXHRcdHBsYWNlSG9sZGVycyA9ICc9JyA9PT0gYjY0LmNoYXJBdChsZW4gLSAyKSA/IDIgOiAnPScgPT09IGI2NC5jaGFyQXQobGVuIC0gMSkgPyAxIDogMFxuXG5cdFx0Ly8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5cdFx0YXJyID0gbmV3IEFycihiNjQubGVuZ3RoICogMyAvIDQgLSBwbGFjZUhvbGRlcnMpXG5cblx0XHQvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG5cdFx0bCA9IHBsYWNlSG9sZGVycyA+IDAgPyBiNjQubGVuZ3RoIC0gNCA6IGI2NC5sZW5ndGhcblxuXHRcdHZhciBMID0gMFxuXG5cdFx0ZnVuY3Rpb24gcHVzaCAodikge1xuXHRcdFx0YXJyW0wrK10gPSB2XG5cdFx0fVxuXG5cdFx0Zm9yIChpID0gMCwgaiA9IDA7IGkgPCBsOyBpICs9IDQsIGogKz0gMykge1xuXHRcdFx0dG1wID0gKGRlY29kZShiNjQuY2hhckF0KGkpKSA8PCAxOCkgfCAoZGVjb2RlKGI2NC5jaGFyQXQoaSArIDEpKSA8PCAxMikgfCAoZGVjb2RlKGI2NC5jaGFyQXQoaSArIDIpKSA8PCA2KSB8IGRlY29kZShiNjQuY2hhckF0KGkgKyAzKSlcblx0XHRcdHB1c2goKHRtcCAmIDB4RkYwMDAwKSA+PiAxNilcblx0XHRcdHB1c2goKHRtcCAmIDB4RkYwMCkgPj4gOClcblx0XHRcdHB1c2godG1wICYgMHhGRilcblx0XHR9XG5cblx0XHRpZiAocGxhY2VIb2xkZXJzID09PSAyKSB7XG5cdFx0XHR0bXAgPSAoZGVjb2RlKGI2NC5jaGFyQXQoaSkpIDw8IDIpIHwgKGRlY29kZShiNjQuY2hhckF0KGkgKyAxKSkgPj4gNClcblx0XHRcdHB1c2godG1wICYgMHhGRilcblx0XHR9IGVsc2UgaWYgKHBsYWNlSG9sZGVycyA9PT0gMSkge1xuXHRcdFx0dG1wID0gKGRlY29kZShiNjQuY2hhckF0KGkpKSA8PCAxMCkgfCAoZGVjb2RlKGI2NC5jaGFyQXQoaSArIDEpKSA8PCA0KSB8IChkZWNvZGUoYjY0LmNoYXJBdChpICsgMikpID4+IDIpXG5cdFx0XHRwdXNoKCh0bXAgPj4gOCkgJiAweEZGKVxuXHRcdFx0cHVzaCh0bXAgJiAweEZGKVxuXHRcdH1cblxuXHRcdHJldHVybiBhcnJcblx0fVxuXG5cdGZ1bmN0aW9uIHVpbnQ4VG9CYXNlNjQgKHVpbnQ4KSB7XG5cdFx0dmFyIGksXG5cdFx0XHRleHRyYUJ5dGVzID0gdWludDgubGVuZ3RoICUgMywgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcblx0XHRcdG91dHB1dCA9IFwiXCIsXG5cdFx0XHR0ZW1wLCBsZW5ndGhcblxuXHRcdGZ1bmN0aW9uIGVuY29kZSAobnVtKSB7XG5cdFx0XHRyZXR1cm4gbG9va3VwLmNoYXJBdChudW0pXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcblx0XHRcdHJldHVybiBlbmNvZGUobnVtID4+IDE4ICYgMHgzRikgKyBlbmNvZGUobnVtID4+IDEyICYgMHgzRikgKyBlbmNvZGUobnVtID4+IDYgJiAweDNGKSArIGVuY29kZShudW0gJiAweDNGKVxuXHRcdH1cblxuXHRcdC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcblx0XHRmb3IgKGkgPSAwLCBsZW5ndGggPSB1aW50OC5sZW5ndGggLSBleHRyYUJ5dGVzOyBpIDwgbGVuZ3RoOyBpICs9IDMpIHtcblx0XHRcdHRlbXAgPSAodWludDhbaV0gPDwgMTYpICsgKHVpbnQ4W2kgKyAxXSA8PCA4KSArICh1aW50OFtpICsgMl0pXG5cdFx0XHRvdXRwdXQgKz0gdHJpcGxldFRvQmFzZTY0KHRlbXApXG5cdFx0fVxuXG5cdFx0Ly8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuXHRcdHN3aXRjaCAoZXh0cmFCeXRlcykge1xuXHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHR0ZW1wID0gdWludDhbdWludDgubGVuZ3RoIC0gMV1cblx0XHRcdFx0b3V0cHV0ICs9IGVuY29kZSh0ZW1wID4+IDIpXG5cdFx0XHRcdG91dHB1dCArPSBlbmNvZGUoKHRlbXAgPDwgNCkgJiAweDNGKVxuXHRcdFx0XHRvdXRwdXQgKz0gJz09J1xuXHRcdFx0XHRicmVha1xuXHRcdFx0Y2FzZSAyOlxuXHRcdFx0XHR0ZW1wID0gKHVpbnQ4W3VpbnQ4Lmxlbmd0aCAtIDJdIDw8IDgpICsgKHVpbnQ4W3VpbnQ4Lmxlbmd0aCAtIDFdKVxuXHRcdFx0XHRvdXRwdXQgKz0gZW5jb2RlKHRlbXAgPj4gMTApXG5cdFx0XHRcdG91dHB1dCArPSBlbmNvZGUoKHRlbXAgPj4gNCkgJiAweDNGKVxuXHRcdFx0XHRvdXRwdXQgKz0gZW5jb2RlKCh0ZW1wIDw8IDIpICYgMHgzRilcblx0XHRcdFx0b3V0cHV0ICs9ICc9J1xuXHRcdFx0XHRicmVha1xuXHRcdH1cblxuXHRcdHJldHVybiBvdXRwdXRcblx0fVxuXG5cdGV4cG9ydHMudG9CeXRlQXJyYXkgPSBiNjRUb0J5dGVBcnJheVxuXHRleHBvcnRzLmZyb21CeXRlQXJyYXkgPSB1aW50OFRvQmFzZTY0XG59KHR5cGVvZiBleHBvcnRzID09PSAndW5kZWZpbmVkJyA/ICh0aGlzLmJhc2U2NGpzID0ge30pIDogZXhwb3J0cykpXG4iLCJleHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gbSAqIDI1NiArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cbiIsIlxuLyoqXG4gKiBpc0FycmF5XG4gKi9cblxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG4vKipcbiAqIHRvU3RyaW5nXG4gKi9cblxudmFyIHN0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogV2hldGhlciBvciBub3QgdGhlIGdpdmVuIGB2YWxgXG4gKiBpcyBhbiBhcnJheS5cbiAqXG4gKiBleGFtcGxlOlxuICpcbiAqICAgICAgICBpc0FycmF5KFtdKTtcbiAqICAgICAgICAvLyA+IHRydWVcbiAqICAgICAgICBpc0FycmF5KGFyZ3VtZW50cyk7XG4gKiAgICAgICAgLy8gPiBmYWxzZVxuICogICAgICAgIGlzQXJyYXkoJycpO1xuICogICAgICAgIC8vID4gZmFsc2VcbiAqXG4gKiBAcGFyYW0ge21peGVkfSB2YWxcbiAqIEByZXR1cm4ge2Jvb2x9XG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5IHx8IGZ1bmN0aW9uICh2YWwpIHtcbiAgcmV0dXJuICEhIHZhbCAmJiAnW29iamVjdCBBcnJheV0nID09IHN0ci5jYWxsKHZhbCk7XG59O1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgdGhpcy5fZXZlbnRzID0gdGhpcy5fZXZlbnRzIHx8IHt9O1xuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufVxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG5FdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbihuKSB7XG4gIGlmICghaXNOdW1iZXIobikgfHwgbiA8IDAgfHwgaXNOYU4obikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCduIG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXInKTtcbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciBlciwgaGFuZGxlciwgbGVuLCBhcmdzLCBpLCBsaXN0ZW5lcnM7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpXG4gICAgdGhpcy5fZXZlbnRzID0ge307XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICBpZiAodHlwZSA9PT0gJ2Vycm9yJykge1xuICAgIGlmICghdGhpcy5fZXZlbnRzLmVycm9yIHx8XG4gICAgICAgIChpc09iamVjdCh0aGlzLl9ldmVudHMuZXJyb3IpICYmICF0aGlzLl9ldmVudHMuZXJyb3IubGVuZ3RoKSkge1xuICAgICAgZXIgPSBhcmd1bWVudHNbMV07XG4gICAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICAgIH1cbiAgICAgIHRocm93IFR5cGVFcnJvcignVW5jYXVnaHQsIHVuc3BlY2lmaWVkIFwiZXJyb3JcIiBldmVudC4nKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVyID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIGlmIChpc1VuZGVmaW5lZChoYW5kbGVyKSlcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKGlzRnVuY3Rpb24oaGFuZGxlcikpIHtcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIC8vIGZhc3QgY2FzZXNcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcywgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0pO1xuICAgICAgICBicmVhaztcbiAgICAgIC8vIHNsb3dlclxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgYXJncyA9IG5ldyBBcnJheShsZW4gLSAxKTtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IGxlbjsgaSsrKVxuICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICBoYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdChoYW5kbGVyKSkge1xuICAgIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gLSAxKTtcbiAgICBmb3IgKGkgPSAxOyBpIDwgbGVuOyBpKyspXG4gICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcblxuICAgIGxpc3RlbmVycyA9IGhhbmRsZXIuc2xpY2UoKTtcbiAgICBsZW4gPSBsaXN0ZW5lcnMubGVuZ3RoO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKylcbiAgICAgIGxpc3RlbmVyc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBtO1xuXG4gIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcblxuICAvLyBUbyBhdm9pZCByZWN1cnNpb24gaW4gdGhlIGNhc2UgdGhhdCB0eXBlID09PSBcIm5ld0xpc3RlbmVyXCIhIEJlZm9yZVxuICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gIGlmICh0aGlzLl9ldmVudHMubmV3TGlzdGVuZXIpXG4gICAgdGhpcy5lbWl0KCduZXdMaXN0ZW5lcicsIHR5cGUsXG4gICAgICAgICAgICAgIGlzRnVuY3Rpb24obGlzdGVuZXIubGlzdGVuZXIpID9cbiAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdID0gbGlzdGVuZXI7XG4gIGVsc2UgaWYgKGlzT2JqZWN0KHRoaXMuX2V2ZW50c1t0eXBlXSkpXG4gICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXS5wdXNoKGxpc3RlbmVyKTtcbiAgZWxzZVxuICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXSA9IFt0aGlzLl9ldmVudHNbdHlwZV0sIGxpc3RlbmVyXTtcblxuICAvLyBDaGVjayBmb3IgbGlzdGVuZXIgbGVha1xuICBpZiAoaXNPYmplY3QodGhpcy5fZXZlbnRzW3R5cGVdKSAmJiAhdGhpcy5fZXZlbnRzW3R5cGVdLndhcm5lZCkge1xuICAgIHZhciBtO1xuICAgIGlmICghaXNVbmRlZmluZWQodGhpcy5fbWF4TGlzdGVuZXJzKSkge1xuICAgICAgbSA9IHRoaXMuX21heExpc3RlbmVycztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IEV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzO1xuICAgIH1cblxuICAgIGlmIChtICYmIG0gPiAwICYmIHRoaXMuX2V2ZW50c1t0eXBlXS5sZW5ndGggPiBtKSB7XG4gICAgICB0aGlzLl9ldmVudHNbdHlwZV0ud2FybmVkID0gdHJ1ZTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJyhub2RlKSB3YXJuaW5nOiBwb3NzaWJsZSBFdmVudEVtaXR0ZXIgbWVtb3J5ICcgK1xuICAgICAgICAgICAgICAgICAgICAnbGVhayBkZXRlY3RlZC4gJWQgbGlzdGVuZXJzIGFkZGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgJ1VzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvIGluY3JlYXNlIGxpbWl0LicsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXS5sZW5ndGgpO1xuICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLnRyYWNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIG5vdCBzdXBwb3J0ZWQgaW4gSUUgMTBcbiAgICAgICAgY29uc29sZS50cmFjZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICB2YXIgZmlyZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBnKCkge1xuICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgZyk7XG5cbiAgICBpZiAoIWZpcmVkKSB7XG4gICAgICBmaXJlZCA9IHRydWU7XG4gICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxuXG4gIGcubGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgdGhpcy5vbih0eXBlLCBnKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIGVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZmYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIGxpc3QsIHBvc2l0aW9uLCBsZW5ndGgsIGk7XG5cbiAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgbGlzdCA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gIHBvc2l0aW9uID0gLTE7XG5cbiAgaWYgKGxpc3QgPT09IGxpc3RlbmVyIHx8XG4gICAgICAoaXNGdW5jdGlvbihsaXN0Lmxpc3RlbmVyKSAmJiBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikpIHtcbiAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIGlmICh0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdGVuZXIpO1xuXG4gIH0gZWxzZSBpZiAoaXNPYmplY3QobGlzdCkpIHtcbiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSA+IDA7KSB7XG4gICAgICBpZiAobGlzdFtpXSA9PT0gbGlzdGVuZXIgfHxcbiAgICAgICAgICAobGlzdFtpXS5saXN0ZW5lciAmJiBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikpIHtcbiAgICAgICAgcG9zaXRpb24gPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpIHtcbiAgICAgIGxpc3QubGVuZ3RoID0gMDtcbiAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpc3Quc3BsaWNlKHBvc2l0aW9uLCAxKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3RlbmVyKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciBrZXksIGxpc3RlbmVycztcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gIGlmICghdGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXG4gICAgICB0aGlzLl9ldmVudHMgPSB7fTtcbiAgICBlbHNlIGlmICh0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gZW1pdCByZW1vdmVMaXN0ZW5lciBmb3IgYWxsIGxpc3RlbmVycyBvbiBhbGwgZXZlbnRzXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgZm9yIChrZXkgaW4gdGhpcy5fZXZlbnRzKSB7XG4gICAgICBpZiAoa2V5ID09PSAncmVtb3ZlTGlzdGVuZXInKSBjb250aW51ZTtcbiAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgfVxuICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZW1vdmVMaXN0ZW5lcicpO1xuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIGlmIChpc0Z1bmN0aW9uKGxpc3RlbmVycykpIHtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gIH0gZWxzZSB7XG4gICAgLy8gTElGTyBvcmRlclxuICAgIHdoaWxlIChsaXN0ZW5lcnMubGVuZ3RoKVxuICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbbGlzdGVuZXJzLmxlbmd0aCAtIDFdKTtcbiAgfVxuICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciByZXQ7XG4gIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgcmV0ID0gW107XG4gIGVsc2UgaWYgKGlzRnVuY3Rpb24odGhpcy5fZXZlbnRzW3R5cGVdKSlcbiAgICByZXQgPSBbdGhpcy5fZXZlbnRzW3R5cGVdXTtcbiAgZWxzZVxuICAgIHJldCA9IHRoaXMuX2V2ZW50c1t0eXBlXS5zbGljZSgpO1xuICByZXR1cm4gcmV0O1xufTtcblxuRXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbihlbWl0dGVyLCB0eXBlKSB7XG4gIHZhciByZXQ7XG4gIGlmICghZW1pdHRlci5fZXZlbnRzIHx8ICFlbWl0dGVyLl9ldmVudHNbdHlwZV0pXG4gICAgcmV0ID0gMDtcbiAgZWxzZSBpZiAoaXNGdW5jdGlvbihlbWl0dGVyLl9ldmVudHNbdHlwZV0pKVxuICAgIHJldCA9IDE7XG4gIGVsc2VcbiAgICByZXQgPSBlbWl0dGVyLl9ldmVudHNbdHlwZV0ubGVuZ3RoO1xuICByZXR1cm4gcmV0O1xufTtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuIiwidmFyIGh0dHAgPSBtb2R1bGUuZXhwb3J0cztcbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG52YXIgUmVxdWVzdCA9IHJlcXVpcmUoJy4vbGliL3JlcXVlc3QnKTtcbnZhciB1cmwgPSByZXF1aXJlKCd1cmwnKVxuXG5odHRwLnJlcXVlc3QgPSBmdW5jdGlvbiAocGFyYW1zLCBjYikge1xuICAgIGlmICh0eXBlb2YgcGFyYW1zID09PSAnc3RyaW5nJykge1xuICAgICAgICBwYXJhbXMgPSB1cmwucGFyc2UocGFyYW1zKVxuICAgIH1cbiAgICBpZiAoIXBhcmFtcykgcGFyYW1zID0ge307XG4gICAgaWYgKCFwYXJhbXMuaG9zdCAmJiAhcGFyYW1zLnBvcnQpIHtcbiAgICAgICAgcGFyYW1zLnBvcnQgPSBwYXJzZUludCh3aW5kb3cubG9jYXRpb24ucG9ydCwgMTApO1xuICAgIH1cbiAgICBpZiAoIXBhcmFtcy5ob3N0ICYmIHBhcmFtcy5ob3N0bmFtZSkge1xuICAgICAgICBwYXJhbXMuaG9zdCA9IHBhcmFtcy5ob3N0bmFtZTtcbiAgICB9XG5cbiAgICBpZiAoIXBhcmFtcy5wcm90b2NvbCkge1xuICAgICAgICBpZiAocGFyYW1zLnNjaGVtZSkge1xuICAgICAgICAgICAgcGFyYW1zLnByb3RvY29sID0gcGFyYW1zLnNjaGVtZSArICc6JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcmFtcy5wcm90b2NvbCA9IHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICghcGFyYW1zLmhvc3QpIHtcbiAgICAgICAgcGFyYW1zLmhvc3QgPSB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgfHwgd2luZG93LmxvY2F0aW9uLmhvc3Q7XG4gICAgfVxuICAgIGlmICgvOi8udGVzdChwYXJhbXMuaG9zdCkpIHtcbiAgICAgICAgaWYgKCFwYXJhbXMucG9ydCkge1xuICAgICAgICAgICAgcGFyYW1zLnBvcnQgPSBwYXJhbXMuaG9zdC5zcGxpdCgnOicpWzFdO1xuICAgICAgICB9XG4gICAgICAgIHBhcmFtcy5ob3N0ID0gcGFyYW1zLmhvc3Quc3BsaXQoJzonKVswXTtcbiAgICB9XG4gICAgaWYgKCFwYXJhbXMucG9ydCkgcGFyYW1zLnBvcnQgPSBwYXJhbXMucHJvdG9jb2wgPT0gJ2h0dHBzOicgPyA0NDMgOiA4MDtcbiAgICBcbiAgICB2YXIgcmVxID0gbmV3IFJlcXVlc3QobmV3IHhockh0dHAsIHBhcmFtcyk7XG4gICAgaWYgKGNiKSByZXEub24oJ3Jlc3BvbnNlJywgY2IpO1xuICAgIHJldHVybiByZXE7XG59O1xuXG5odHRwLmdldCA9IGZ1bmN0aW9uIChwYXJhbXMsIGNiKSB7XG4gICAgcGFyYW1zLm1ldGhvZCA9ICdHRVQnO1xuICAgIHZhciByZXEgPSBodHRwLnJlcXVlc3QocGFyYW1zLCBjYik7XG4gICAgcmVxLmVuZCgpO1xuICAgIHJldHVybiByZXE7XG59O1xuXG5odHRwLkFnZW50ID0gZnVuY3Rpb24gKCkge307XG5odHRwLkFnZW50LmRlZmF1bHRNYXhTb2NrZXRzID0gNDtcblxudmFyIHhockh0dHAgPSAoZnVuY3Rpb24gKCkge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vIHdpbmRvdyBvYmplY3QgcHJlc2VudCcpO1xuICAgIH1cbiAgICBlbHNlIGlmICh3aW5kb3cuWE1MSHR0cFJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5YTUxIdHRwUmVxdWVzdDtcbiAgICB9XG4gICAgZWxzZSBpZiAod2luZG93LkFjdGl2ZVhPYmplY3QpIHtcbiAgICAgICAgdmFyIGF4cyA9IFtcbiAgICAgICAgICAgICdNc3htbDIuWE1MSFRUUC42LjAnLFxuICAgICAgICAgICAgJ01zeG1sMi5YTUxIVFRQLjMuMCcsXG4gICAgICAgICAgICAnTWljcm9zb2Z0LlhNTEhUVFAnXG4gICAgICAgIF07XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciBheCA9IG5ldyh3aW5kb3cuQWN0aXZlWE9iamVjdCkoYXhzW2ldKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBheF8gPSBheDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF4ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBheF87XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3KHdpbmRvdy5BY3RpdmVYT2JqZWN0KShheHNbaV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7fVxuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYWpheCBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlcicpXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FqYXggbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXInKTtcbiAgICB9XG59KSgpO1xuXG5odHRwLlNUQVRVU19DT0RFUyA9IHtcbiAgICAxMDAgOiAnQ29udGludWUnLFxuICAgIDEwMSA6ICdTd2l0Y2hpbmcgUHJvdG9jb2xzJyxcbiAgICAxMDIgOiAnUHJvY2Vzc2luZycsICAgICAgICAgICAgICAgICAvLyBSRkMgMjUxOCwgb2Jzb2xldGVkIGJ5IFJGQyA0OTE4XG4gICAgMjAwIDogJ09LJyxcbiAgICAyMDEgOiAnQ3JlYXRlZCcsXG4gICAgMjAyIDogJ0FjY2VwdGVkJyxcbiAgICAyMDMgOiAnTm9uLUF1dGhvcml0YXRpdmUgSW5mb3JtYXRpb24nLFxuICAgIDIwNCA6ICdObyBDb250ZW50JyxcbiAgICAyMDUgOiAnUmVzZXQgQ29udGVudCcsXG4gICAgMjA2IDogJ1BhcnRpYWwgQ29udGVudCcsXG4gICAgMjA3IDogJ011bHRpLVN0YXR1cycsICAgICAgICAgICAgICAgLy8gUkZDIDQ5MThcbiAgICAzMDAgOiAnTXVsdGlwbGUgQ2hvaWNlcycsXG4gICAgMzAxIDogJ01vdmVkIFBlcm1hbmVudGx5JyxcbiAgICAzMDIgOiAnTW92ZWQgVGVtcG9yYXJpbHknLFxuICAgIDMwMyA6ICdTZWUgT3RoZXInLFxuICAgIDMwNCA6ICdOb3QgTW9kaWZpZWQnLFxuICAgIDMwNSA6ICdVc2UgUHJveHknLFxuICAgIDMwNyA6ICdUZW1wb3JhcnkgUmVkaXJlY3QnLFxuICAgIDQwMCA6ICdCYWQgUmVxdWVzdCcsXG4gICAgNDAxIDogJ1VuYXV0aG9yaXplZCcsXG4gICAgNDAyIDogJ1BheW1lbnQgUmVxdWlyZWQnLFxuICAgIDQwMyA6ICdGb3JiaWRkZW4nLFxuICAgIDQwNCA6ICdOb3QgRm91bmQnLFxuICAgIDQwNSA6ICdNZXRob2QgTm90IEFsbG93ZWQnLFxuICAgIDQwNiA6ICdOb3QgQWNjZXB0YWJsZScsXG4gICAgNDA3IDogJ1Byb3h5IEF1dGhlbnRpY2F0aW9uIFJlcXVpcmVkJyxcbiAgICA0MDggOiAnUmVxdWVzdCBUaW1lLW91dCcsXG4gICAgNDA5IDogJ0NvbmZsaWN0JyxcbiAgICA0MTAgOiAnR29uZScsXG4gICAgNDExIDogJ0xlbmd0aCBSZXF1aXJlZCcsXG4gICAgNDEyIDogJ1ByZWNvbmRpdGlvbiBGYWlsZWQnLFxuICAgIDQxMyA6ICdSZXF1ZXN0IEVudGl0eSBUb28gTGFyZ2UnLFxuICAgIDQxNCA6ICdSZXF1ZXN0LVVSSSBUb28gTGFyZ2UnLFxuICAgIDQxNSA6ICdVbnN1cHBvcnRlZCBNZWRpYSBUeXBlJyxcbiAgICA0MTYgOiAnUmVxdWVzdGVkIFJhbmdlIE5vdCBTYXRpc2ZpYWJsZScsXG4gICAgNDE3IDogJ0V4cGVjdGF0aW9uIEZhaWxlZCcsXG4gICAgNDE4IDogJ0lcXCdtIGEgdGVhcG90JywgICAgICAgICAgICAgIC8vIFJGQyAyMzI0XG4gICAgNDIyIDogJ1VucHJvY2Vzc2FibGUgRW50aXR5JywgICAgICAgLy8gUkZDIDQ5MThcbiAgICA0MjMgOiAnTG9ja2VkJywgICAgICAgICAgICAgICAgICAgICAvLyBSRkMgNDkxOFxuICAgIDQyNCA6ICdGYWlsZWQgRGVwZW5kZW5jeScsICAgICAgICAgIC8vIFJGQyA0OTE4XG4gICAgNDI1IDogJ1Vub3JkZXJlZCBDb2xsZWN0aW9uJywgICAgICAgLy8gUkZDIDQ5MThcbiAgICA0MjYgOiAnVXBncmFkZSBSZXF1aXJlZCcsICAgICAgICAgICAvLyBSRkMgMjgxN1xuICAgIDQyOCA6ICdQcmVjb25kaXRpb24gUmVxdWlyZWQnLCAgICAgIC8vIFJGQyA2NTg1XG4gICAgNDI5IDogJ1RvbyBNYW55IFJlcXVlc3RzJywgICAgICAgICAgLy8gUkZDIDY1ODVcbiAgICA0MzEgOiAnUmVxdWVzdCBIZWFkZXIgRmllbGRzIFRvbyBMYXJnZScsLy8gUkZDIDY1ODVcbiAgICA1MDAgOiAnSW50ZXJuYWwgU2VydmVyIEVycm9yJyxcbiAgICA1MDEgOiAnTm90IEltcGxlbWVudGVkJyxcbiAgICA1MDIgOiAnQmFkIEdhdGV3YXknLFxuICAgIDUwMyA6ICdTZXJ2aWNlIFVuYXZhaWxhYmxlJyxcbiAgICA1MDQgOiAnR2F0ZXdheSBUaW1lLW91dCcsXG4gICAgNTA1IDogJ0hUVFAgVmVyc2lvbiBOb3QgU3VwcG9ydGVkJyxcbiAgICA1MDYgOiAnVmFyaWFudCBBbHNvIE5lZ290aWF0ZXMnLCAgICAvLyBSRkMgMjI5NVxuICAgIDUwNyA6ICdJbnN1ZmZpY2llbnQgU3RvcmFnZScsICAgICAgIC8vIFJGQyA0OTE4XG4gICAgNTA5IDogJ0JhbmR3aWR0aCBMaW1pdCBFeGNlZWRlZCcsXG4gICAgNTEwIDogJ05vdCBFeHRlbmRlZCcsICAgICAgICAgICAgICAgLy8gUkZDIDI3NzRcbiAgICA1MTEgOiAnTmV0d29yayBBdXRoZW50aWNhdGlvbiBSZXF1aXJlZCcgLy8gUkZDIDY1ODVcbn07IiwidmFyIFN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpO1xudmFyIFJlc3BvbnNlID0gcmVxdWlyZSgnLi9yZXNwb25zZScpO1xudmFyIEJhc2U2NCA9IHJlcXVpcmUoJ0Jhc2U2NCcpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxudmFyIFJlcXVlc3QgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh4aHIsIHBhcmFtcykge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBzZWxmLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBzZWxmLnhociA9IHhocjtcbiAgICBzZWxmLmJvZHkgPSBbXTtcbiAgICBcbiAgICBzZWxmLnVyaSA9IChwYXJhbXMucHJvdG9jb2wgfHwgJ2h0dHA6JykgKyAnLy8nXG4gICAgICAgICsgcGFyYW1zLmhvc3RcbiAgICAgICAgKyAocGFyYW1zLnBvcnQgPyAnOicgKyBwYXJhbXMucG9ydCA6ICcnKVxuICAgICAgICArIChwYXJhbXMucGF0aCB8fCAnLycpXG4gICAgO1xuICAgIFxuICAgIGlmICh0eXBlb2YgcGFyYW1zLndpdGhDcmVkZW50aWFscyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcGFyYW1zLndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgfVxuXG4gICAgdHJ5IHsgeGhyLndpdGhDcmVkZW50aWFscyA9IHBhcmFtcy53aXRoQ3JlZGVudGlhbHMgfVxuICAgIGNhdGNoIChlKSB7fVxuICAgIFxuICAgIGlmIChwYXJhbXMucmVzcG9uc2VUeXBlKSB0cnkgeyB4aHIucmVzcG9uc2VUeXBlID0gcGFyYW1zLnJlc3BvbnNlVHlwZSB9XG4gICAgY2F0Y2ggKGUpIHt9XG4gICAgXG4gICAgeGhyLm9wZW4oXG4gICAgICAgIHBhcmFtcy5tZXRob2QgfHwgJ0dFVCcsXG4gICAgICAgIHNlbGYudXJpLFxuICAgICAgICB0cnVlXG4gICAgKTtcblxuICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgc2VsZi5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignTmV0d29yayBlcnJvcicpKTtcbiAgICB9O1xuXG4gICAgc2VsZi5faGVhZGVycyA9IHt9O1xuICAgIFxuICAgIGlmIChwYXJhbXMuaGVhZGVycykge1xuICAgICAgICB2YXIga2V5cyA9IG9iamVjdEtleXMocGFyYW1zLmhlYWRlcnMpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgaWYgKCFzZWxmLmlzU2FmZVJlcXVlc3RIZWFkZXIoa2V5KSkgY29udGludWU7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBwYXJhbXMuaGVhZGVyc1trZXldO1xuICAgICAgICAgICAgc2VsZi5zZXRIZWFkZXIoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgaWYgKHBhcmFtcy5hdXRoKSB7XG4gICAgICAgIC8vYmFzaWMgYXV0aFxuICAgICAgICB0aGlzLnNldEhlYWRlcignQXV0aG9yaXphdGlvbicsICdCYXNpYyAnICsgQmFzZTY0LmJ0b2EocGFyYW1zLmF1dGgpKTtcbiAgICB9XG5cbiAgICB2YXIgcmVzID0gbmV3IFJlc3BvbnNlO1xuICAgIHJlcy5vbignY2xvc2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYuZW1pdCgnY2xvc2UnKTtcbiAgICB9KTtcbiAgICBcbiAgICByZXMub24oJ3JlYWR5JywgZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLmVtaXQoJ3Jlc3BvbnNlJywgcmVzKTtcbiAgICB9KTtcblxuICAgIHJlcy5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgIH0pO1xuICAgIFxuICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIEZpeCBmb3IgSUU5IGJ1Z1xuICAgICAgICAvLyBTQ1JJUFQ1NzU6IENvdWxkIG5vdCBjb21wbGV0ZSB0aGUgb3BlcmF0aW9uIGR1ZSB0byBlcnJvciBjMDBjMDIzZlxuICAgICAgICAvLyBJdCBoYXBwZW5zIHdoZW4gYSByZXF1ZXN0IGlzIGFib3J0ZWQsIGNhbGxpbmcgdGhlIHN1Y2Nlc3MgY2FsbGJhY2sgYW55d2F5IHdpdGggcmVhZHlTdGF0ZSA9PT0gNFxuICAgICAgICBpZiAoeGhyLl9fYWJvcnRlZCkgcmV0dXJuO1xuICAgICAgICByZXMuaGFuZGxlKHhocik7XG4gICAgfTtcbn07XG5cbmluaGVyaXRzKFJlcXVlc3QsIFN0cmVhbSk7XG5cblJlcXVlc3QucHJvdG90eXBlLnNldEhlYWRlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgdGhpcy5faGVhZGVyc1trZXkudG9Mb3dlckNhc2UoKV0gPSB2YWx1ZVxufTtcblxuUmVxdWVzdC5wcm90b3R5cGUuZ2V0SGVhZGVyID0gZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiB0aGlzLl9oZWFkZXJzW2tleS50b0xvd2VyQ2FzZSgpXVxufTtcblxuUmVxdWVzdC5wcm90b3R5cGUucmVtb3ZlSGVhZGVyID0gZnVuY3Rpb24gKGtleSkge1xuICAgIGRlbGV0ZSB0aGlzLl9oZWFkZXJzW2tleS50b0xvd2VyQ2FzZSgpXVxufTtcblxuUmVxdWVzdC5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAocykge1xuICAgIHRoaXMuYm9keS5wdXNoKHMpO1xufTtcblxuUmVxdWVzdC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIChzKSB7XG4gICAgdGhpcy54aHIuX19hYm9ydGVkID0gdHJ1ZTtcbiAgICB0aGlzLnhoci5hYm9ydCgpO1xuICAgIHRoaXMuZW1pdCgnY2xvc2UnKTtcbn07XG5cblJlcXVlc3QucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIChzKSB7XG4gICAgaWYgKHMgIT09IHVuZGVmaW5lZCkgdGhpcy5ib2R5LnB1c2gocyk7XG5cbiAgICB2YXIga2V5cyA9IG9iamVjdEtleXModGhpcy5faGVhZGVycyk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLl9oZWFkZXJzW2tleV07XG4gICAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHRoaXMueGhyLnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWx1ZVtqXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB0aGlzLnhoci5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsdWUpXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYm9keS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy54aHIuc2VuZCgnJyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB0aGlzLmJvZHlbMF0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMueGhyLnNlbmQodGhpcy5ib2R5LmpvaW4oJycpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNBcnJheSh0aGlzLmJvZHlbMF0pKSB7XG4gICAgICAgIHZhciBib2R5ID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ib2R5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBib2R5LnB1c2guYXBwbHkoYm9keSwgdGhpcy5ib2R5W2ldKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnhoci5zZW5kKGJvZHkpO1xuICAgIH1cbiAgICBlbHNlIGlmICgvQXJyYXkvLnRlc3QoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHRoaXMuYm9keVswXSkpKSB7XG4gICAgICAgIHZhciBsZW4gPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYm9keS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGVuICs9IHRoaXMuYm9keVtpXS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJvZHkgPSBuZXcodGhpcy5ib2R5WzBdLmNvbnN0cnVjdG9yKShsZW4pO1xuICAgICAgICB2YXIgayA9IDA7XG4gICAgICAgIFxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYm9keS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGIgPSB0aGlzLmJvZHlbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGIubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBib2R5W2srK10gPSBiW2pdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMueGhyLnNlbmQoYm9keSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzWEhSMkNvbXBhdGlibGUodGhpcy5ib2R5WzBdKSkge1xuICAgICAgICB0aGlzLnhoci5zZW5kKHRoaXMuYm9keVswXSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgYm9keSA9ICcnO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYm9keS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYm9keSArPSB0aGlzLmJvZHlbaV0udG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnhoci5zZW5kKGJvZHkpO1xuICAgIH1cbn07XG5cbi8vIFRha2VuIGZyb20gaHR0cDovL2R4ci5tb3ppbGxhLm9yZy9tb3ppbGxhL21vemlsbGEtY2VudHJhbC9jb250ZW50L2Jhc2Uvc3JjL25zWE1MSHR0cFJlcXVlc3QuY3BwLmh0bWxcblJlcXVlc3QudW5zYWZlSGVhZGVycyA9IFtcbiAgICBcImFjY2VwdC1jaGFyc2V0XCIsXG4gICAgXCJhY2NlcHQtZW5jb2RpbmdcIixcbiAgICBcImFjY2Vzcy1jb250cm9sLXJlcXVlc3QtaGVhZGVyc1wiLFxuICAgIFwiYWNjZXNzLWNvbnRyb2wtcmVxdWVzdC1tZXRob2RcIixcbiAgICBcImNvbm5lY3Rpb25cIixcbiAgICBcImNvbnRlbnQtbGVuZ3RoXCIsXG4gICAgXCJjb29raWVcIixcbiAgICBcImNvb2tpZTJcIixcbiAgICBcImNvbnRlbnQtdHJhbnNmZXItZW5jb2RpbmdcIixcbiAgICBcImRhdGVcIixcbiAgICBcImV4cGVjdFwiLFxuICAgIFwiaG9zdFwiLFxuICAgIFwia2VlcC1hbGl2ZVwiLFxuICAgIFwib3JpZ2luXCIsXG4gICAgXCJyZWZlcmVyXCIsXG4gICAgXCJ0ZVwiLFxuICAgIFwidHJhaWxlclwiLFxuICAgIFwidHJhbnNmZXItZW5jb2RpbmdcIixcbiAgICBcInVwZ3JhZGVcIixcbiAgICBcInVzZXItYWdlbnRcIixcbiAgICBcInZpYVwiXG5dO1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5pc1NhZmVSZXF1ZXN0SGVhZGVyID0gZnVuY3Rpb24gKGhlYWRlck5hbWUpIHtcbiAgICBpZiAoIWhlYWRlck5hbWUpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gaW5kZXhPZihSZXF1ZXN0LnVuc2FmZUhlYWRlcnMsIGhlYWRlck5hbWUudG9Mb3dlckNhc2UoKSkgPT09IC0xO1xufTtcblxudmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiAob2JqKSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSBrZXlzLnB1c2goa2V5KTtcbiAgICByZXR1cm4ga2V5cztcbn07XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoeHMpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHhzKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG5cbnZhciBpbmRleE9mID0gZnVuY3Rpb24gKHhzLCB4KSB7XG4gICAgaWYgKHhzLmluZGV4T2YpIHJldHVybiB4cy5pbmRleE9mKHgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHhzW2ldID09PSB4KSByZXR1cm4gaTtcbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufTtcblxudmFyIGlzWEhSMkNvbXBhdGlibGUgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgaWYgKHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyAmJiBvYmogaW5zdGFuY2VvZiBCbG9iKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiBvYmogaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgcmV0dXJuIHRydWU7XG4gICAgaWYgKHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcgJiYgb2JqIGluc3RhbmNlb2YgRm9ybURhdGEpIHJldHVybiB0cnVlO1xufTtcbiIsInZhciBTdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKTtcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG52YXIgUmVzcG9uc2UgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyZXMpIHtcbiAgICB0aGlzLm9mZnNldCA9IDA7XG4gICAgdGhpcy5yZWFkYWJsZSA9IHRydWU7XG59O1xuXG51dGlsLmluaGVyaXRzKFJlc3BvbnNlLCBTdHJlYW0pO1xuXG52YXIgY2FwYWJsZSA9IHtcbiAgICBzdHJlYW1pbmcgOiB0cnVlLFxuICAgIHN0YXR1czIgOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBwYXJzZUhlYWRlcnMgKHJlcykge1xuICAgIHZhciBsaW5lcyA9IHJlcy5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKS5zcGxpdCgvXFxyP1xcbi8pO1xuICAgIHZhciBoZWFkZXJzID0ge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbGluZSA9IGxpbmVzW2ldO1xuICAgICAgICBpZiAobGluZSA9PT0gJycpIGNvbnRpbnVlO1xuICAgICAgICBcbiAgICAgICAgdmFyIG0gPSBsaW5lLm1hdGNoKC9eKFteOl0rKTpcXHMqKC4qKS8pO1xuICAgICAgICBpZiAobSkge1xuICAgICAgICAgICAgdmFyIGtleSA9IG1bMV0udG9Mb3dlckNhc2UoKSwgdmFsdWUgPSBtWzJdO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoaGVhZGVyc1trZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChpc0FycmF5KGhlYWRlcnNba2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyc1trZXldLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyc1trZXldID0gWyBoZWFkZXJzW2tleV0sIHZhbHVlIF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaGVhZGVyc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBoZWFkZXJzW2xpbmVdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaGVhZGVycztcbn1cblxuUmVzcG9uc2UucHJvdG90eXBlLmdldFJlc3BvbnNlID0gZnVuY3Rpb24gKHhocikge1xuICAgIHZhciByZXNwVHlwZSA9IFN0cmluZyh4aHIucmVzcG9uc2VUeXBlKS50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChyZXNwVHlwZSA9PT0gJ2Jsb2InKSByZXR1cm4geGhyLnJlc3BvbnNlQmxvYiB8fCB4aHIucmVzcG9uc2U7XG4gICAgaWYgKHJlc3BUeXBlID09PSAnYXJyYXlidWZmZXInKSByZXR1cm4geGhyLnJlc3BvbnNlO1xuICAgIHJldHVybiB4aHIucmVzcG9uc2VUZXh0O1xufVxuXG5SZXNwb25zZS5wcm90b3R5cGUuZ2V0SGVhZGVyID0gZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiB0aGlzLmhlYWRlcnNba2V5LnRvTG93ZXJDYXNlKCldO1xufTtcblxuUmVzcG9uc2UucHJvdG90eXBlLmhhbmRsZSA9IGZ1bmN0aW9uIChyZXMpIHtcbiAgICBpZiAocmVzLnJlYWR5U3RhdGUgPT09IDIgJiYgY2FwYWJsZS5zdGF0dXMyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLnN0YXR1c0NvZGUgPSByZXMuc3RhdHVzO1xuICAgICAgICAgICAgdGhpcy5oZWFkZXJzID0gcGFyc2VIZWFkZXJzKHJlcyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgY2FwYWJsZS5zdGF0dXMyID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChjYXBhYmxlLnN0YXR1czIpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgncmVhZHknKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChjYXBhYmxlLnN0cmVhbWluZyAmJiByZXMucmVhZHlTdGF0ZSA9PT0gMykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnN0YXR1c0NvZGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXR1c0NvZGUgPSByZXMuc3RhdHVzO1xuICAgICAgICAgICAgICAgIHRoaXMuaGVhZGVycyA9IHBhcnNlSGVhZGVycyhyZXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgncmVhZHknKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7fVxuICAgICAgICBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuX2VtaXREYXRhKHJlcyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgY2FwYWJsZS5zdHJlYW1pbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChyZXMucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICBpZiAoIXRoaXMuc3RhdHVzQ29kZSkge1xuICAgICAgICAgICAgdGhpcy5zdGF0dXNDb2RlID0gcmVzLnN0YXR1cztcbiAgICAgICAgICAgIHRoaXMuZW1pdCgncmVhZHknKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9lbWl0RGF0YShyZXMpO1xuICAgICAgICBcbiAgICAgICAgaWYgKHJlcy5lcnJvcikge1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIHRoaXMuZ2V0UmVzcG9uc2UocmVzKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB0aGlzLmVtaXQoJ2VuZCcpO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5lbWl0KCdjbG9zZScpO1xuICAgIH1cbn07XG5cblJlc3BvbnNlLnByb3RvdHlwZS5fZW1pdERhdGEgPSBmdW5jdGlvbiAocmVzKSB7XG4gICAgdmFyIHJlc3BCb2R5ID0gdGhpcy5nZXRSZXNwb25zZShyZXMpO1xuICAgIGlmIChyZXNwQm9keS50b1N0cmluZygpLm1hdGNoKC9BcnJheUJ1ZmZlci8pKSB7XG4gICAgICAgIHRoaXMuZW1pdCgnZGF0YScsIG5ldyBVaW50OEFycmF5KHJlc3BCb2R5LCB0aGlzLm9mZnNldCkpO1xuICAgICAgICB0aGlzLm9mZnNldCA9IHJlc3BCb2R5LmJ5dGVMZW5ndGg7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHJlc3BCb2R5Lmxlbmd0aCA+IHRoaXMub2Zmc2V0KSB7XG4gICAgICAgIHRoaXMuZW1pdCgnZGF0YScsIHJlc3BCb2R5LnNsaWNlKHRoaXMub2Zmc2V0KSk7XG4gICAgICAgIHRoaXMub2Zmc2V0ID0gcmVzcEJvZHkubGVuZ3RoO1xuICAgIH1cbn07XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoeHMpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHhzKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCI7KGZ1bmN0aW9uICgpIHtcblxuICB2YXIgb2JqZWN0ID0gdHlwZW9mIGV4cG9ydHMgIT0gJ3VuZGVmaW5lZCcgPyBleHBvcnRzIDogdGhpczsgLy8gIzg6IHdlYiB3b3JrZXJzXG4gIHZhciBjaGFycyA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPSc7XG5cbiAgZnVuY3Rpb24gSW52YWxpZENoYXJhY3RlckVycm9yKG1lc3NhZ2UpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICB9XG4gIEludmFsaWRDaGFyYWN0ZXJFcnJvci5wcm90b3R5cGUgPSBuZXcgRXJyb3I7XG4gIEludmFsaWRDaGFyYWN0ZXJFcnJvci5wcm90b3R5cGUubmFtZSA9ICdJbnZhbGlkQ2hhcmFjdGVyRXJyb3InO1xuXG4gIC8vIGVuY29kZXJcbiAgLy8gW2h0dHBzOi8vZ2lzdC5naXRodWIuY29tLzk5OTE2Nl0gYnkgW2h0dHBzOi8vZ2l0aHViLmNvbS9uaWduYWddXG4gIG9iamVjdC5idG9hIHx8IChcbiAgb2JqZWN0LmJ0b2EgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICBmb3IgKFxuICAgICAgLy8gaW5pdGlhbGl6ZSByZXN1bHQgYW5kIGNvdW50ZXJcbiAgICAgIHZhciBibG9jaywgY2hhckNvZGUsIGlkeCA9IDAsIG1hcCA9IGNoYXJzLCBvdXRwdXQgPSAnJztcbiAgICAgIC8vIGlmIHRoZSBuZXh0IGlucHV0IGluZGV4IGRvZXMgbm90IGV4aXN0OlxuICAgICAgLy8gICBjaGFuZ2UgdGhlIG1hcHBpbmcgdGFibGUgdG8gXCI9XCJcbiAgICAgIC8vICAgY2hlY2sgaWYgZCBoYXMgbm8gZnJhY3Rpb25hbCBkaWdpdHNcbiAgICAgIGlucHV0LmNoYXJBdChpZHggfCAwKSB8fCAobWFwID0gJz0nLCBpZHggJSAxKTtcbiAgICAgIC8vIFwiOCAtIGlkeCAlIDEgKiA4XCIgZ2VuZXJhdGVzIHRoZSBzZXF1ZW5jZSAyLCA0LCA2LCA4XG4gICAgICBvdXRwdXQgKz0gbWFwLmNoYXJBdCg2MyAmIGJsb2NrID4+IDggLSBpZHggJSAxICogOClcbiAgICApIHtcbiAgICAgIGNoYXJDb2RlID0gaW5wdXQuY2hhckNvZGVBdChpZHggKz0gMy80KTtcbiAgICAgIGlmIChjaGFyQ29kZSA+IDB4RkYpIHtcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDaGFyYWN0ZXJFcnJvcihcIididG9hJyBmYWlsZWQ6IFRoZSBzdHJpbmcgdG8gYmUgZW5jb2RlZCBjb250YWlucyBjaGFyYWN0ZXJzIG91dHNpZGUgb2YgdGhlIExhdGluMSByYW5nZS5cIik7XG4gICAgICB9XG4gICAgICBibG9jayA9IGJsb2NrIDw8IDggfCBjaGFyQ29kZTtcbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfSk7XG5cbiAgLy8gZGVjb2RlclxuICAvLyBbaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vMTAyMDM5Nl0gYnkgW2h0dHBzOi8vZ2l0aHViLmNvbS9hdGtdXG4gIG9iamVjdC5hdG9iIHx8IChcbiAgb2JqZWN0LmF0b2IgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoLz0rJC8sICcnKTtcbiAgICBpZiAoaW5wdXQubGVuZ3RoICUgNCA9PSAxKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZENoYXJhY3RlckVycm9yKFwiJ2F0b2InIGZhaWxlZDogVGhlIHN0cmluZyB0byBiZSBkZWNvZGVkIGlzIG5vdCBjb3JyZWN0bHkgZW5jb2RlZC5cIik7XG4gICAgfVxuICAgIGZvciAoXG4gICAgICAvLyBpbml0aWFsaXplIHJlc3VsdCBhbmQgY291bnRlcnNcbiAgICAgIHZhciBiYyA9IDAsIGJzLCBidWZmZXIsIGlkeCA9IDAsIG91dHB1dCA9ICcnO1xuICAgICAgLy8gZ2V0IG5leHQgY2hhcmFjdGVyXG4gICAgICBidWZmZXIgPSBpbnB1dC5jaGFyQXQoaWR4KyspO1xuICAgICAgLy8gY2hhcmFjdGVyIGZvdW5kIGluIHRhYmxlPyBpbml0aWFsaXplIGJpdCBzdG9yYWdlIGFuZCBhZGQgaXRzIGFzY2lpIHZhbHVlO1xuICAgICAgfmJ1ZmZlciAmJiAoYnMgPSBiYyAlIDQgPyBicyAqIDY0ICsgYnVmZmVyIDogYnVmZmVyLFxuICAgICAgICAvLyBhbmQgaWYgbm90IGZpcnN0IG9mIGVhY2ggNCBjaGFyYWN0ZXJzLFxuICAgICAgICAvLyBjb252ZXJ0IHRoZSBmaXJzdCA4IGJpdHMgdG8gb25lIGFzY2lpIGNoYXJhY3RlclxuICAgICAgICBiYysrICUgNCkgPyBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgyNTUgJiBicyA+PiAoLTIgKiBiYyAmIDYpKSA6IDBcbiAgICApIHtcbiAgICAgIC8vIHRyeSB0byBmaW5kIGNoYXJhY3RlciBpbiB0YWJsZSAoMC02Mywgbm90IGZvdW5kID0+IC0xKVxuICAgICAgYnVmZmVyID0gY2hhcnMuaW5kZXhPZihidWZmZXIpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9KTtcblxufSgpKTtcbiIsInZhciBodHRwID0gcmVxdWlyZSgnaHR0cCcpO1xuXG52YXIgaHR0cHMgPSBtb2R1bGUuZXhwb3J0cztcblxuZm9yICh2YXIga2V5IGluIGh0dHApIHtcbiAgICBpZiAoaHR0cC5oYXNPd25Qcm9wZXJ0eShrZXkpKSBodHRwc1trZXldID0gaHR0cFtrZXldO1xufTtcblxuaHR0cHMucmVxdWVzdCA9IGZ1bmN0aW9uIChwYXJhbXMsIGNiKSB7XG4gICAgaWYgKCFwYXJhbXMpIHBhcmFtcyA9IHt9O1xuICAgIHBhcmFtcy5zY2hlbWUgPSAnaHR0cHMnO1xuICAgIHBhcmFtcy5wcm90b2NvbCA9ICdodHRwczonO1xuICAgIHJldHVybiBodHRwLnJlcXVlc3QuY2FsbCh0aGlzLCBwYXJhbXMsIGNiKTtcbn1cbiIsImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxuICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgfVxufVxuIiwiLyohXG4gKiBEZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgQnVmZmVyXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cblxuLy8gVGhlIF9pc0J1ZmZlciBjaGVjayBpcyBmb3IgU2FmYXJpIDUtNyBzdXBwb3J0LCBiZWNhdXNlIGl0J3MgbWlzc2luZ1xuLy8gT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiAoaXNCdWZmZXIob2JqKSB8fCBpc1Nsb3dCdWZmZXIob2JqKSB8fCAhIW9iai5faXNCdWZmZXIpXG59XG5cbmZ1bmN0aW9uIGlzQnVmZmVyIChvYmopIHtcbiAgcmV0dXJuICEhb2JqLmNvbnN0cnVjdG9yICYmIHR5cGVvZiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iailcbn1cblxuLy8gRm9yIE5vZGUgdjAuMTAgc3VwcG9ydC4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseS5cbmZ1bmN0aW9uIGlzU2xvd0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqLnJlYWRGbG9hdExFID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmouc2xpY2UgPT09ICdmdW5jdGlvbicgJiYgaXNCdWZmZXIob2JqLnNsaWNlKDAsIDApKVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG5cbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxucHJvY2Vzcy5uZXh0VGljayA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNhblNldEltbWVkaWF0ZSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgJiYgd2luZG93LnNldEltbWVkaWF0ZTtcbiAgICB2YXIgY2FuTXV0YXRpb25PYnNlcnZlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgJiYgd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXI7XG4gICAgdmFyIGNhblBvc3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuICAgICYmIHdpbmRvdy5wb3N0TWVzc2FnZSAmJiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lclxuICAgIDtcblxuICAgIGlmIChjYW5TZXRJbW1lZGlhdGUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChmKSB7IHJldHVybiB3aW5kb3cuc2V0SW1tZWRpYXRlKGYpIH07XG4gICAgfVxuXG4gICAgdmFyIHF1ZXVlID0gW107XG5cbiAgICBpZiAoY2FuTXV0YXRpb25PYnNlcnZlcikge1xuICAgICAgICB2YXIgaGlkZGVuRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdmFyIG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHF1ZXVlTGlzdCA9IHF1ZXVlLnNsaWNlKCk7XG4gICAgICAgICAgICBxdWV1ZS5sZW5ndGggPSAwO1xuICAgICAgICAgICAgcXVldWVMaXN0LmZvckVhY2goZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgICAgICAgICAgZm4oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBvYnNlcnZlci5vYnNlcnZlKGhpZGRlbkRpdiwgeyBhdHRyaWJ1dGVzOiB0cnVlIH0pO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBuZXh0VGljayhmbikge1xuICAgICAgICAgICAgaWYgKCFxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBoaWRkZW5EaXYuc2V0QXR0cmlidXRlKCd5ZXMnLCAnbm8nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHF1ZXVlLnB1c2goZm4pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGlmIChjYW5Qb3N0KSB7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gZXYuc291cmNlO1xuICAgICAgICAgICAgaWYgKChzb3VyY2UgPT09IHdpbmRvdyB8fCBzb3VyY2UgPT09IG51bGwpICYmIGV2LmRhdGEgPT09ICdwcm9jZXNzLXRpY2snKSB7XG4gICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgaWYgKHF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZuID0gcXVldWUuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgZm4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHRydWUpO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBuZXh0VGljayhmbikge1xuICAgICAgICAgICAgcXVldWUucHVzaChmbik7XG4gICAgICAgICAgICB3aW5kb3cucG9zdE1lc3NhZ2UoJ3Byb2Nlc3MtdGljaycsICcqJyk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHRUaWNrKGZuKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZm4sIDApO1xuICAgIH07XG59KSgpO1xuXG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbi8vIFRPRE8oc2h0eWxtYW4pXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbiIsIihmdW5jdGlvbiAoZ2xvYmFsKXtcbi8qISBodHRwOi8vbXRocy5iZS9wdW55Y29kZSB2MS4yLjQgYnkgQG1hdGhpYXMgKi9cbjsoZnVuY3Rpb24ocm9vdCkge1xuXG5cdC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZXMgKi9cblx0dmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cztcblx0dmFyIGZyZWVNb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJlxuXHRcdG1vZHVsZS5leHBvcnRzID09IGZyZWVFeHBvcnRzICYmIG1vZHVsZTtcblx0dmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbDtcblx0aWYgKGZyZWVHbG9iYWwuZ2xvYmFsID09PSBmcmVlR2xvYmFsIHx8IGZyZWVHbG9iYWwud2luZG93ID09PSBmcmVlR2xvYmFsKSB7XG5cdFx0cm9vdCA9IGZyZWVHbG9iYWw7XG5cdH1cblxuXHQvKipcblx0ICogVGhlIGBwdW55Y29kZWAgb2JqZWN0LlxuXHQgKiBAbmFtZSBwdW55Y29kZVxuXHQgKiBAdHlwZSBPYmplY3Rcblx0ICovXG5cdHZhciBwdW55Y29kZSxcblxuXHQvKiogSGlnaGVzdCBwb3NpdGl2ZSBzaWduZWQgMzItYml0IGZsb2F0IHZhbHVlICovXG5cdG1heEludCA9IDIxNDc0ODM2NDcsIC8vIGFrYS4gMHg3RkZGRkZGRiBvciAyXjMxLTFcblxuXHQvKiogQm9vdHN0cmluZyBwYXJhbWV0ZXJzICovXG5cdGJhc2UgPSAzNixcblx0dE1pbiA9IDEsXG5cdHRNYXggPSAyNixcblx0c2tldyA9IDM4LFxuXHRkYW1wID0gNzAwLFxuXHRpbml0aWFsQmlhcyA9IDcyLFxuXHRpbml0aWFsTiA9IDEyOCwgLy8gMHg4MFxuXHRkZWxpbWl0ZXIgPSAnLScsIC8vICdcXHgyRCdcblxuXHQvKiogUmVndWxhciBleHByZXNzaW9ucyAqL1xuXHRyZWdleFB1bnljb2RlID0gL154bi0tLyxcblx0cmVnZXhOb25BU0NJSSA9IC9bXiAtfl0vLCAvLyB1bnByaW50YWJsZSBBU0NJSSBjaGFycyArIG5vbi1BU0NJSSBjaGFyc1xuXHRyZWdleFNlcGFyYXRvcnMgPSAvXFx4MkV8XFx1MzAwMnxcXHVGRjBFfFxcdUZGNjEvZywgLy8gUkZDIDM0OTAgc2VwYXJhdG9yc1xuXG5cdC8qKiBFcnJvciBtZXNzYWdlcyAqL1xuXHRlcnJvcnMgPSB7XG5cdFx0J292ZXJmbG93JzogJ092ZXJmbG93OiBpbnB1dCBuZWVkcyB3aWRlciBpbnRlZ2VycyB0byBwcm9jZXNzJyxcblx0XHQnbm90LWJhc2ljJzogJ0lsbGVnYWwgaW5wdXQgPj0gMHg4MCAobm90IGEgYmFzaWMgY29kZSBwb2ludCknLFxuXHRcdCdpbnZhbGlkLWlucHV0JzogJ0ludmFsaWQgaW5wdXQnXG5cdH0sXG5cblx0LyoqIENvbnZlbmllbmNlIHNob3J0Y3V0cyAqL1xuXHRiYXNlTWludXNUTWluID0gYmFzZSAtIHRNaW4sXG5cdGZsb29yID0gTWF0aC5mbG9vcixcblx0c3RyaW5nRnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZSxcblxuXHQvKiogVGVtcG9yYXJ5IHZhcmlhYmxlICovXG5cdGtleTtcblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHQvKipcblx0ICogQSBnZW5lcmljIGVycm9yIHV0aWxpdHkgZnVuY3Rpb24uXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSBlcnJvciB0eXBlLlxuXHQgKiBAcmV0dXJucyB7RXJyb3J9IFRocm93cyBhIGBSYW5nZUVycm9yYCB3aXRoIHRoZSBhcHBsaWNhYmxlIGVycm9yIG1lc3NhZ2UuXG5cdCAqL1xuXHRmdW5jdGlvbiBlcnJvcih0eXBlKSB7XG5cdFx0dGhyb3cgUmFuZ2VFcnJvcihlcnJvcnNbdHlwZV0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIEEgZ2VuZXJpYyBgQXJyYXkjbWFwYCB1dGlsaXR5IGZ1bmN0aW9uLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCBmb3IgZXZlcnkgYXJyYXlcblx0ICogaXRlbS5cblx0ICogQHJldHVybnMge0FycmF5fSBBIG5ldyBhcnJheSBvZiB2YWx1ZXMgcmV0dXJuZWQgYnkgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuXHQgKi9cblx0ZnVuY3Rpb24gbWFwKGFycmF5LCBmbikge1xuXHRcdHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cdFx0d2hpbGUgKGxlbmd0aC0tKSB7XG5cdFx0XHRhcnJheVtsZW5ndGhdID0gZm4oYXJyYXlbbGVuZ3RoXSk7XG5cdFx0fVxuXHRcdHJldHVybiBhcnJheTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBIHNpbXBsZSBgQXJyYXkjbWFwYC1saWtlIHdyYXBwZXIgdG8gd29yayB3aXRoIGRvbWFpbiBuYW1lIHN0cmluZ3MuXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBkb21haW4gVGhlIGRvbWFpbiBuYW1lLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCBmb3IgZXZlcnlcblx0ICogY2hhcmFjdGVyLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IEEgbmV3IHN0cmluZyBvZiBjaGFyYWN0ZXJzIHJldHVybmVkIGJ5IHRoZSBjYWxsYmFja1xuXHQgKiBmdW5jdGlvbi5cblx0ICovXG5cdGZ1bmN0aW9uIG1hcERvbWFpbihzdHJpbmcsIGZuKSB7XG5cdFx0cmV0dXJuIG1hcChzdHJpbmcuc3BsaXQocmVnZXhTZXBhcmF0b3JzKSwgZm4pLmpvaW4oJy4nKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIG51bWVyaWMgY29kZSBwb2ludHMgb2YgZWFjaCBVbmljb2RlXG5cdCAqIGNoYXJhY3RlciBpbiB0aGUgc3RyaW5nLiBXaGlsZSBKYXZhU2NyaXB0IHVzZXMgVUNTLTIgaW50ZXJuYWxseSxcblx0ICogdGhpcyBmdW5jdGlvbiB3aWxsIGNvbnZlcnQgYSBwYWlyIG9mIHN1cnJvZ2F0ZSBoYWx2ZXMgKGVhY2ggb2Ygd2hpY2hcblx0ICogVUNTLTIgZXhwb3NlcyBhcyBzZXBhcmF0ZSBjaGFyYWN0ZXJzKSBpbnRvIGEgc2luZ2xlIGNvZGUgcG9pbnQsXG5cdCAqIG1hdGNoaW5nIFVURi0xNi5cblx0ICogQHNlZSBgcHVueWNvZGUudWNzMi5lbmNvZGVgXG5cdCAqIEBzZWUgPGh0dHA6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtZW5jb2Rpbmc+XG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZS51Y3MyXG5cdCAqIEBuYW1lIGRlY29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gc3RyaW5nIFRoZSBVbmljb2RlIGlucHV0IHN0cmluZyAoVUNTLTIpLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBuZXcgYXJyYXkgb2YgY29kZSBwb2ludHMuXG5cdCAqL1xuXHRmdW5jdGlvbiB1Y3MyZGVjb2RlKHN0cmluZykge1xuXHRcdHZhciBvdXRwdXQgPSBbXSxcblx0XHQgICAgY291bnRlciA9IDAsXG5cdFx0ICAgIGxlbmd0aCA9IHN0cmluZy5sZW5ndGgsXG5cdFx0ICAgIHZhbHVlLFxuXHRcdCAgICBleHRyYTtcblx0XHR3aGlsZSAoY291bnRlciA8IGxlbmd0aCkge1xuXHRcdFx0dmFsdWUgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO1xuXHRcdFx0aWYgKHZhbHVlID49IDB4RDgwMCAmJiB2YWx1ZSA8PSAweERCRkYgJiYgY291bnRlciA8IGxlbmd0aCkge1xuXHRcdFx0XHQvLyBoaWdoIHN1cnJvZ2F0ZSwgYW5kIHRoZXJlIGlzIGEgbmV4dCBjaGFyYWN0ZXJcblx0XHRcdFx0ZXh0cmEgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO1xuXHRcdFx0XHRpZiAoKGV4dHJhICYgMHhGQzAwKSA9PSAweERDMDApIHsgLy8gbG93IHN1cnJvZ2F0ZVxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKCgodmFsdWUgJiAweDNGRikgPDwgMTApICsgKGV4dHJhICYgMHgzRkYpICsgMHgxMDAwMCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gdW5tYXRjaGVkIHN1cnJvZ2F0ZTsgb25seSBhcHBlbmQgdGhpcyBjb2RlIHVuaXQsIGluIGNhc2UgdGhlIG5leHRcblx0XHRcdFx0XHQvLyBjb2RlIHVuaXQgaXMgdGhlIGhpZ2ggc3Vycm9nYXRlIG9mIGEgc3Vycm9nYXRlIHBhaXJcblx0XHRcdFx0XHRvdXRwdXQucHVzaCh2YWx1ZSk7XG5cdFx0XHRcdFx0Y291bnRlci0tO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvdXRwdXQucHVzaCh2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIHN0cmluZyBiYXNlZCBvbiBhbiBhcnJheSBvZiBudW1lcmljIGNvZGUgcG9pbnRzLlxuXHQgKiBAc2VlIGBwdW55Y29kZS51Y3MyLmRlY29kZWBcblx0ICogQG1lbWJlck9mIHB1bnljb2RlLnVjczJcblx0ICogQG5hbWUgZW5jb2RlXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGNvZGVQb2ludHMgVGhlIGFycmF5IG9mIG51bWVyaWMgY29kZSBwb2ludHMuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBuZXcgVW5pY29kZSBzdHJpbmcgKFVDUy0yKS5cblx0ICovXG5cdGZ1bmN0aW9uIHVjczJlbmNvZGUoYXJyYXkpIHtcblx0XHRyZXR1cm4gbWFwKGFycmF5LCBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0dmFyIG91dHB1dCA9ICcnO1xuXHRcdFx0aWYgKHZhbHVlID4gMHhGRkZGKSB7XG5cdFx0XHRcdHZhbHVlIC09IDB4MTAwMDA7XG5cdFx0XHRcdG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApO1xuXHRcdFx0XHR2YWx1ZSA9IDB4REMwMCB8IHZhbHVlICYgMHgzRkY7XG5cdFx0XHR9XG5cdFx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlKTtcblx0XHRcdHJldHVybiBvdXRwdXQ7XG5cdFx0fSkuam9pbignJyk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBiYXNpYyBjb2RlIHBvaW50IGludG8gYSBkaWdpdC9pbnRlZ2VyLlxuXHQgKiBAc2VlIGBkaWdpdFRvQmFzaWMoKWBcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtOdW1iZXJ9IGNvZGVQb2ludCBUaGUgYmFzaWMgbnVtZXJpYyBjb2RlIHBvaW50IHZhbHVlLlxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgbnVtZXJpYyB2YWx1ZSBvZiBhIGJhc2ljIGNvZGUgcG9pbnQgKGZvciB1c2UgaW5cblx0ICogcmVwcmVzZW50aW5nIGludGVnZXJzKSBpbiB0aGUgcmFuZ2UgYDBgIHRvIGBiYXNlIC0gMWAsIG9yIGBiYXNlYCBpZlxuXHQgKiB0aGUgY29kZSBwb2ludCBkb2VzIG5vdCByZXByZXNlbnQgYSB2YWx1ZS5cblx0ICovXG5cdGZ1bmN0aW9uIGJhc2ljVG9EaWdpdChjb2RlUG9pbnQpIHtcblx0XHRpZiAoY29kZVBvaW50IC0gNDggPCAxMCkge1xuXHRcdFx0cmV0dXJuIGNvZGVQb2ludCAtIDIyO1xuXHRcdH1cblx0XHRpZiAoY29kZVBvaW50IC0gNjUgPCAyNikge1xuXHRcdFx0cmV0dXJuIGNvZGVQb2ludCAtIDY1O1xuXHRcdH1cblx0XHRpZiAoY29kZVBvaW50IC0gOTcgPCAyNikge1xuXHRcdFx0cmV0dXJuIGNvZGVQb2ludCAtIDk3O1xuXHRcdH1cblx0XHRyZXR1cm4gYmFzZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIGRpZ2l0L2ludGVnZXIgaW50byBhIGJhc2ljIGNvZGUgcG9pbnQuXG5cdCAqIEBzZWUgYGJhc2ljVG9EaWdpdCgpYFxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge051bWJlcn0gZGlnaXQgVGhlIG51bWVyaWMgdmFsdWUgb2YgYSBiYXNpYyBjb2RlIHBvaW50LlxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgYmFzaWMgY29kZSBwb2ludCB3aG9zZSB2YWx1ZSAod2hlbiB1c2VkIGZvclxuXHQgKiByZXByZXNlbnRpbmcgaW50ZWdlcnMpIGlzIGBkaWdpdGAsIHdoaWNoIG5lZWRzIHRvIGJlIGluIHRoZSByYW5nZVxuXHQgKiBgMGAgdG8gYGJhc2UgLSAxYC4gSWYgYGZsYWdgIGlzIG5vbi16ZXJvLCB0aGUgdXBwZXJjYXNlIGZvcm0gaXNcblx0ICogdXNlZDsgZWxzZSwgdGhlIGxvd2VyY2FzZSBmb3JtIGlzIHVzZWQuIFRoZSBiZWhhdmlvciBpcyB1bmRlZmluZWRcblx0ICogaWYgYGZsYWdgIGlzIG5vbi16ZXJvIGFuZCBgZGlnaXRgIGhhcyBubyB1cHBlcmNhc2UgZm9ybS5cblx0ICovXG5cdGZ1bmN0aW9uIGRpZ2l0VG9CYXNpYyhkaWdpdCwgZmxhZykge1xuXHRcdC8vICAwLi4yNSBtYXAgdG8gQVNDSUkgYS4ueiBvciBBLi5aXG5cdFx0Ly8gMjYuLjM1IG1hcCB0byBBU0NJSSAwLi45XG5cdFx0cmV0dXJuIGRpZ2l0ICsgMjIgKyA3NSAqIChkaWdpdCA8IDI2KSAtICgoZmxhZyAhPSAwKSA8PCA1KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBCaWFzIGFkYXB0YXRpb24gZnVuY3Rpb24gYXMgcGVyIHNlY3Rpb24gMy40IG9mIFJGQyAzNDkyLlxuXHQgKiBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzNDkyI3NlY3Rpb24tMy40XG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRmdW5jdGlvbiBhZGFwdChkZWx0YSwgbnVtUG9pbnRzLCBmaXJzdFRpbWUpIHtcblx0XHR2YXIgayA9IDA7XG5cdFx0ZGVsdGEgPSBmaXJzdFRpbWUgPyBmbG9vcihkZWx0YSAvIGRhbXApIDogZGVsdGEgPj4gMTtcblx0XHRkZWx0YSArPSBmbG9vcihkZWx0YSAvIG51bVBvaW50cyk7XG5cdFx0Zm9yICgvKiBubyBpbml0aWFsaXphdGlvbiAqLzsgZGVsdGEgPiBiYXNlTWludXNUTWluICogdE1heCA+PiAxOyBrICs9IGJhc2UpIHtcblx0XHRcdGRlbHRhID0gZmxvb3IoZGVsdGEgLyBiYXNlTWludXNUTWluKTtcblx0XHR9XG5cdFx0cmV0dXJuIGZsb29yKGsgKyAoYmFzZU1pbnVzVE1pbiArIDEpICogZGVsdGEgLyAoZGVsdGEgKyBza2V3KSk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzIHRvIGEgc3RyaW5nIG9mIFVuaWNvZGVcblx0ICogc3ltYm9scy5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIHJlc3VsdGluZyBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzLlxuXHQgKi9cblx0ZnVuY3Rpb24gZGVjb2RlKGlucHV0KSB7XG5cdFx0Ly8gRG9uJ3QgdXNlIFVDUy0yXG5cdFx0dmFyIG91dHB1dCA9IFtdLFxuXHRcdCAgICBpbnB1dExlbmd0aCA9IGlucHV0Lmxlbmd0aCxcblx0XHQgICAgb3V0LFxuXHRcdCAgICBpID0gMCxcblx0XHQgICAgbiA9IGluaXRpYWxOLFxuXHRcdCAgICBiaWFzID0gaW5pdGlhbEJpYXMsXG5cdFx0ICAgIGJhc2ljLFxuXHRcdCAgICBqLFxuXHRcdCAgICBpbmRleCxcblx0XHQgICAgb2xkaSxcblx0XHQgICAgdyxcblx0XHQgICAgayxcblx0XHQgICAgZGlnaXQsXG5cdFx0ICAgIHQsXG5cdFx0ICAgIC8qKiBDYWNoZWQgY2FsY3VsYXRpb24gcmVzdWx0cyAqL1xuXHRcdCAgICBiYXNlTWludXNUO1xuXG5cdFx0Ly8gSGFuZGxlIHRoZSBiYXNpYyBjb2RlIHBvaW50czogbGV0IGBiYXNpY2AgYmUgdGhlIG51bWJlciBvZiBpbnB1dCBjb2RlXG5cdFx0Ly8gcG9pbnRzIGJlZm9yZSB0aGUgbGFzdCBkZWxpbWl0ZXIsIG9yIGAwYCBpZiB0aGVyZSBpcyBub25lLCB0aGVuIGNvcHlcblx0XHQvLyB0aGUgZmlyc3QgYmFzaWMgY29kZSBwb2ludHMgdG8gdGhlIG91dHB1dC5cblxuXHRcdGJhc2ljID0gaW5wdXQubGFzdEluZGV4T2YoZGVsaW1pdGVyKTtcblx0XHRpZiAoYmFzaWMgPCAwKSB7XG5cdFx0XHRiYXNpYyA9IDA7XG5cdFx0fVxuXG5cdFx0Zm9yIChqID0gMDsgaiA8IGJhc2ljOyArK2opIHtcblx0XHRcdC8vIGlmIGl0J3Mgbm90IGEgYmFzaWMgY29kZSBwb2ludFxuXHRcdFx0aWYgKGlucHV0LmNoYXJDb2RlQXQoaikgPj0gMHg4MCkge1xuXHRcdFx0XHRlcnJvcignbm90LWJhc2ljJyk7XG5cdFx0XHR9XG5cdFx0XHRvdXRwdXQucHVzaChpbnB1dC5jaGFyQ29kZUF0KGopKTtcblx0XHR9XG5cblx0XHQvLyBNYWluIGRlY29kaW5nIGxvb3A6IHN0YXJ0IGp1c3QgYWZ0ZXIgdGhlIGxhc3QgZGVsaW1pdGVyIGlmIGFueSBiYXNpYyBjb2RlXG5cdFx0Ly8gcG9pbnRzIHdlcmUgY29waWVkOyBzdGFydCBhdCB0aGUgYmVnaW5uaW5nIG90aGVyd2lzZS5cblxuXHRcdGZvciAoaW5kZXggPSBiYXNpYyA+IDAgPyBiYXNpYyArIDEgOiAwOyBpbmRleCA8IGlucHV0TGVuZ3RoOyAvKiBubyBmaW5hbCBleHByZXNzaW9uICovKSB7XG5cblx0XHRcdC8vIGBpbmRleGAgaXMgdGhlIGluZGV4IG9mIHRoZSBuZXh0IGNoYXJhY3RlciB0byBiZSBjb25zdW1lZC5cblx0XHRcdC8vIERlY29kZSBhIGdlbmVyYWxpemVkIHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyIGludG8gYGRlbHRhYCxcblx0XHRcdC8vIHdoaWNoIGdldHMgYWRkZWQgdG8gYGlgLiBUaGUgb3ZlcmZsb3cgY2hlY2tpbmcgaXMgZWFzaWVyXG5cdFx0XHQvLyBpZiB3ZSBpbmNyZWFzZSBgaWAgYXMgd2UgZ28sIHRoZW4gc3VidHJhY3Qgb2ZmIGl0cyBzdGFydGluZ1xuXHRcdFx0Ly8gdmFsdWUgYXQgdGhlIGVuZCB0byBvYnRhaW4gYGRlbHRhYC5cblx0XHRcdGZvciAob2xkaSA9IGksIHcgPSAxLCBrID0gYmFzZTsgLyogbm8gY29uZGl0aW9uICovOyBrICs9IGJhc2UpIHtcblxuXHRcdFx0XHRpZiAoaW5kZXggPj0gaW5wdXRMZW5ndGgpIHtcblx0XHRcdFx0XHRlcnJvcignaW52YWxpZC1pbnB1dCcpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGlnaXQgPSBiYXNpY1RvRGlnaXQoaW5wdXQuY2hhckNvZGVBdChpbmRleCsrKSk7XG5cblx0XHRcdFx0aWYgKGRpZ2l0ID49IGJhc2UgfHwgZGlnaXQgPiBmbG9vcigobWF4SW50IC0gaSkgLyB3KSkge1xuXHRcdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aSArPSBkaWdpdCAqIHc7XG5cdFx0XHRcdHQgPSBrIDw9IGJpYXMgPyB0TWluIDogKGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXMpO1xuXG5cdFx0XHRcdGlmIChkaWdpdCA8IHQpIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJhc2VNaW51c1QgPSBiYXNlIC0gdDtcblx0XHRcdFx0aWYgKHcgPiBmbG9vcihtYXhJbnQgLyBiYXNlTWludXNUKSkge1xuXHRcdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dyAqPSBiYXNlTWludXNUO1xuXG5cdFx0XHR9XG5cblx0XHRcdG91dCA9IG91dHB1dC5sZW5ndGggKyAxO1xuXHRcdFx0YmlhcyA9IGFkYXB0KGkgLSBvbGRpLCBvdXQsIG9sZGkgPT0gMCk7XG5cblx0XHRcdC8vIGBpYCB3YXMgc3VwcG9zZWQgdG8gd3JhcCBhcm91bmQgZnJvbSBgb3V0YCB0byBgMGAsXG5cdFx0XHQvLyBpbmNyZW1lbnRpbmcgYG5gIGVhY2ggdGltZSwgc28gd2UnbGwgZml4IHRoYXQgbm93OlxuXHRcdFx0aWYgKGZsb29yKGkgLyBvdXQpID4gbWF4SW50IC0gbikge1xuXHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdH1cblxuXHRcdFx0biArPSBmbG9vcihpIC8gb3V0KTtcblx0XHRcdGkgJT0gb3V0O1xuXG5cdFx0XHQvLyBJbnNlcnQgYG5gIGF0IHBvc2l0aW9uIGBpYCBvZiB0aGUgb3V0cHV0XG5cdFx0XHRvdXRwdXQuc3BsaWNlKGkrKywgMCwgbik7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdWNzMmVuY29kZShvdXRwdXQpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scyB0byBhIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5XG5cdCAqIHN5bWJvbHMuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSByZXN1bHRpbmcgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cblx0ICovXG5cdGZ1bmN0aW9uIGVuY29kZShpbnB1dCkge1xuXHRcdHZhciBuLFxuXHRcdCAgICBkZWx0YSxcblx0XHQgICAgaGFuZGxlZENQQ291bnQsXG5cdFx0ICAgIGJhc2ljTGVuZ3RoLFxuXHRcdCAgICBiaWFzLFxuXHRcdCAgICBqLFxuXHRcdCAgICBtLFxuXHRcdCAgICBxLFxuXHRcdCAgICBrLFxuXHRcdCAgICB0LFxuXHRcdCAgICBjdXJyZW50VmFsdWUsXG5cdFx0ICAgIG91dHB1dCA9IFtdLFxuXHRcdCAgICAvKiogYGlucHV0TGVuZ3RoYCB3aWxsIGhvbGQgdGhlIG51bWJlciBvZiBjb2RlIHBvaW50cyBpbiBgaW5wdXRgLiAqL1xuXHRcdCAgICBpbnB1dExlbmd0aCxcblx0XHQgICAgLyoqIENhY2hlZCBjYWxjdWxhdGlvbiByZXN1bHRzICovXG5cdFx0ICAgIGhhbmRsZWRDUENvdW50UGx1c09uZSxcblx0XHQgICAgYmFzZU1pbnVzVCxcblx0XHQgICAgcU1pbnVzVDtcblxuXHRcdC8vIENvbnZlcnQgdGhlIGlucHV0IGluIFVDUy0yIHRvIFVuaWNvZGVcblx0XHRpbnB1dCA9IHVjczJkZWNvZGUoaW5wdXQpO1xuXG5cdFx0Ly8gQ2FjaGUgdGhlIGxlbmd0aFxuXHRcdGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuXG5cdFx0Ly8gSW5pdGlhbGl6ZSB0aGUgc3RhdGVcblx0XHRuID0gaW5pdGlhbE47XG5cdFx0ZGVsdGEgPSAwO1xuXHRcdGJpYXMgPSBpbml0aWFsQmlhcztcblxuXHRcdC8vIEhhbmRsZSB0aGUgYmFzaWMgY29kZSBwb2ludHNcblx0XHRmb3IgKGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikge1xuXHRcdFx0Y3VycmVudFZhbHVlID0gaW5wdXRbal07XG5cdFx0XHRpZiAoY3VycmVudFZhbHVlIDwgMHg4MCkge1xuXHRcdFx0XHRvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoY3VycmVudFZhbHVlKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aGFuZGxlZENQQ291bnQgPSBiYXNpY0xlbmd0aCA9IG91dHB1dC5sZW5ndGg7XG5cblx0XHQvLyBgaGFuZGxlZENQQ291bnRgIGlzIHRoZSBudW1iZXIgb2YgY29kZSBwb2ludHMgdGhhdCBoYXZlIGJlZW4gaGFuZGxlZDtcblx0XHQvLyBgYmFzaWNMZW5ndGhgIGlzIHRoZSBudW1iZXIgb2YgYmFzaWMgY29kZSBwb2ludHMuXG5cblx0XHQvLyBGaW5pc2ggdGhlIGJhc2ljIHN0cmluZyAtIGlmIGl0IGlzIG5vdCBlbXB0eSAtIHdpdGggYSBkZWxpbWl0ZXJcblx0XHRpZiAoYmFzaWNMZW5ndGgpIHtcblx0XHRcdG91dHB1dC5wdXNoKGRlbGltaXRlcik7XG5cdFx0fVxuXG5cdFx0Ly8gTWFpbiBlbmNvZGluZyBsb29wOlxuXHRcdHdoaWxlIChoYW5kbGVkQ1BDb3VudCA8IGlucHV0TGVuZ3RoKSB7XG5cblx0XHRcdC8vIEFsbCBub24tYmFzaWMgY29kZSBwb2ludHMgPCBuIGhhdmUgYmVlbiBoYW5kbGVkIGFscmVhZHkuIEZpbmQgdGhlIG5leHRcblx0XHRcdC8vIGxhcmdlciBvbmU6XG5cdFx0XHRmb3IgKG0gPSBtYXhJbnQsIGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikge1xuXHRcdFx0XHRjdXJyZW50VmFsdWUgPSBpbnB1dFtqXTtcblx0XHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA+PSBuICYmIGN1cnJlbnRWYWx1ZSA8IG0pIHtcblx0XHRcdFx0XHRtID0gY3VycmVudFZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEluY3JlYXNlIGBkZWx0YWAgZW5vdWdoIHRvIGFkdmFuY2UgdGhlIGRlY29kZXIncyA8bixpPiBzdGF0ZSB0byA8bSwwPixcblx0XHRcdC8vIGJ1dCBndWFyZCBhZ2FpbnN0IG92ZXJmbG93XG5cdFx0XHRoYW5kbGVkQ1BDb3VudFBsdXNPbmUgPSBoYW5kbGVkQ1BDb3VudCArIDE7XG5cdFx0XHRpZiAobSAtIG4gPiBmbG9vcigobWF4SW50IC0gZGVsdGEpIC8gaGFuZGxlZENQQ291bnRQbHVzT25lKSkge1xuXHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVsdGEgKz0gKG0gLSBuKSAqIGhhbmRsZWRDUENvdW50UGx1c09uZTtcblx0XHRcdG4gPSBtO1xuXG5cdFx0XHRmb3IgKGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikge1xuXHRcdFx0XHRjdXJyZW50VmFsdWUgPSBpbnB1dFtqXTtcblxuXHRcdFx0XHRpZiAoY3VycmVudFZhbHVlIDwgbiAmJiArK2RlbHRhID4gbWF4SW50KSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoY3VycmVudFZhbHVlID09IG4pIHtcblx0XHRcdFx0XHQvLyBSZXByZXNlbnQgZGVsdGEgYXMgYSBnZW5lcmFsaXplZCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlclxuXHRcdFx0XHRcdGZvciAocSA9IGRlbHRhLCBrID0gYmFzZTsgLyogbm8gY29uZGl0aW9uICovOyBrICs9IGJhc2UpIHtcblx0XHRcdFx0XHRcdHQgPSBrIDw9IGJpYXMgPyB0TWluIDogKGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXMpO1xuXHRcdFx0XHRcdFx0aWYgKHEgPCB0KSB7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cU1pbnVzVCA9IHEgLSB0O1xuXHRcdFx0XHRcdFx0YmFzZU1pbnVzVCA9IGJhc2UgLSB0O1xuXHRcdFx0XHRcdFx0b3V0cHV0LnB1c2goXG5cdFx0XHRcdFx0XHRcdHN0cmluZ0Zyb21DaGFyQ29kZShkaWdpdFRvQmFzaWModCArIHFNaW51c1QgJSBiYXNlTWludXNULCAwKSlcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRxID0gZmxvb3IocU1pbnVzVCAvIGJhc2VNaW51c1QpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZShkaWdpdFRvQmFzaWMocSwgMCkpKTtcblx0XHRcdFx0XHRiaWFzID0gYWRhcHQoZGVsdGEsIGhhbmRsZWRDUENvdW50UGx1c09uZSwgaGFuZGxlZENQQ291bnQgPT0gYmFzaWNMZW5ndGgpO1xuXHRcdFx0XHRcdGRlbHRhID0gMDtcblx0XHRcdFx0XHQrK2hhbmRsZWRDUENvdW50O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdCsrZGVsdGE7XG5cdFx0XHQrK247XG5cblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dC5qb2luKCcnKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIFB1bnljb2RlIHN0cmluZyByZXByZXNlbnRpbmcgYSBkb21haW4gbmFtZSB0byBVbmljb2RlLiBPbmx5IHRoZVxuXHQgKiBQdW55Y29kZWQgcGFydHMgb2YgdGhlIGRvbWFpbiBuYW1lIHdpbGwgYmUgY29udmVydGVkLCBpLmUuIGl0IGRvZXNuJ3Rcblx0ICogbWF0dGVyIGlmIHlvdSBjYWxsIGl0IG9uIGEgc3RyaW5nIHRoYXQgaGFzIGFscmVhZHkgYmVlbiBjb252ZXJ0ZWQgdG9cblx0ICogVW5pY29kZS5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBkb21haW4gVGhlIFB1bnljb2RlIGRvbWFpbiBuYW1lIHRvIGNvbnZlcnQgdG8gVW5pY29kZS5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIFVuaWNvZGUgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIFB1bnljb2RlXG5cdCAqIHN0cmluZy5cblx0ICovXG5cdGZ1bmN0aW9uIHRvVW5pY29kZShkb21haW4pIHtcblx0XHRyZXR1cm4gbWFwRG9tYWluKGRvbWFpbiwgZnVuY3Rpb24oc3RyaW5nKSB7XG5cdFx0XHRyZXR1cm4gcmVnZXhQdW55Y29kZS50ZXN0KHN0cmluZylcblx0XHRcdFx0PyBkZWNvZGUoc3RyaW5nLnNsaWNlKDQpLnRvTG93ZXJDYXNlKCkpXG5cdFx0XHRcdDogc3RyaW5nO1xuXHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgVW5pY29kZSBzdHJpbmcgcmVwcmVzZW50aW5nIGEgZG9tYWluIG5hbWUgdG8gUHVueWNvZGUuIE9ubHkgdGhlXG5cdCAqIG5vbi1BU0NJSSBwYXJ0cyBvZiB0aGUgZG9tYWluIG5hbWUgd2lsbCBiZSBjb252ZXJ0ZWQsIGkuZS4gaXQgZG9lc24ndFxuXHQgKiBtYXR0ZXIgaWYgeW91IGNhbGwgaXQgd2l0aCBhIGRvbWFpbiB0aGF0J3MgYWxyZWFkeSBpbiBBU0NJSS5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBkb21haW4gVGhlIGRvbWFpbiBuYW1lIHRvIGNvbnZlcnQsIGFzIGEgVW5pY29kZSBzdHJpbmcuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBQdW55Y29kZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gZG9tYWluIG5hbWUuXG5cdCAqL1xuXHRmdW5jdGlvbiB0b0FTQ0lJKGRvbWFpbikge1xuXHRcdHJldHVybiBtYXBEb21haW4oZG9tYWluLCBmdW5jdGlvbihzdHJpbmcpIHtcblx0XHRcdHJldHVybiByZWdleE5vbkFTQ0lJLnRlc3Qoc3RyaW5nKVxuXHRcdFx0XHQ/ICd4bi0tJyArIGVuY29kZShzdHJpbmcpXG5cdFx0XHRcdDogc3RyaW5nO1xuXHRcdH0pO1xuXHR9XG5cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0LyoqIERlZmluZSB0aGUgcHVibGljIEFQSSAqL1xuXHRwdW55Y29kZSA9IHtcblx0XHQvKipcblx0XHQgKiBBIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGN1cnJlbnQgUHVueWNvZGUuanMgdmVyc2lvbiBudW1iZXIuXG5cdFx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdFx0ICogQHR5cGUgU3RyaW5nXG5cdFx0ICovXG5cdFx0J3ZlcnNpb24nOiAnMS4yLjQnLFxuXHRcdC8qKlxuXHRcdCAqIEFuIG9iamVjdCBvZiBtZXRob2RzIHRvIGNvbnZlcnQgZnJvbSBKYXZhU2NyaXB0J3MgaW50ZXJuYWwgY2hhcmFjdGVyXG5cdFx0ICogcmVwcmVzZW50YXRpb24gKFVDUy0yKSB0byBVbmljb2RlIGNvZGUgcG9pbnRzLCBhbmQgYmFjay5cblx0XHQgKiBAc2VlIDxodHRwOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nPlxuXHRcdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHRcdCAqIEB0eXBlIE9iamVjdFxuXHRcdCAqL1xuXHRcdCd1Y3MyJzoge1xuXHRcdFx0J2RlY29kZSc6IHVjczJkZWNvZGUsXG5cdFx0XHQnZW5jb2RlJzogdWNzMmVuY29kZVxuXHRcdH0sXG5cdFx0J2RlY29kZSc6IGRlY29kZSxcblx0XHQnZW5jb2RlJzogZW5jb2RlLFxuXHRcdCd0b0FTQ0lJJzogdG9BU0NJSSxcblx0XHQndG9Vbmljb2RlJzogdG9Vbmljb2RlXG5cdH07XG5cblx0LyoqIEV4cG9zZSBgcHVueWNvZGVgICovXG5cdC8vIFNvbWUgQU1EIGJ1aWxkIG9wdGltaXplcnMsIGxpa2Ugci5qcywgY2hlY2sgZm9yIHNwZWNpZmljIGNvbmRpdGlvbiBwYXR0ZXJuc1xuXHQvLyBsaWtlIHRoZSBmb2xsb3dpbmc6XG5cdGlmIChcblx0XHR0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiZcblx0XHR0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJlxuXHRcdGRlZmluZS5hbWRcblx0KSB7XG5cdFx0ZGVmaW5lKCdwdW55Y29kZScsIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHB1bnljb2RlO1xuXHRcdH0pO1xuXHR9IGVsc2UgaWYgKGZyZWVFeHBvcnRzICYmICFmcmVlRXhwb3J0cy5ub2RlVHlwZSkge1xuXHRcdGlmIChmcmVlTW9kdWxlKSB7IC8vIGluIE5vZGUuanMgb3IgUmluZ29KUyB2MC44LjArXG5cdFx0XHRmcmVlTW9kdWxlLmV4cG9ydHMgPSBwdW55Y29kZTtcblx0XHR9IGVsc2UgeyAvLyBpbiBOYXJ3aGFsIG9yIFJpbmdvSlMgdjAuNy4wLVxuXHRcdFx0Zm9yIChrZXkgaW4gcHVueWNvZGUpIHtcblx0XHRcdFx0cHVueWNvZGUuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAoZnJlZUV4cG9ydHNba2V5XSA9IHB1bnljb2RlW2tleV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIHsgLy8gaW4gUmhpbm8gb3IgYSB3ZWIgYnJvd3NlclxuXHRcdHJvb3QucHVueWNvZGUgPSBwdW55Y29kZTtcblx0fVxuXG59KHRoaXMpKTtcblxufSkuY2FsbCh0aGlzLHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTl3ZFc1NVkyOWtaUzl3ZFc1NVkyOWtaUzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxSVNCb2RIUndPaTh2YlhSb2N5NWlaUzl3ZFc1NVkyOWtaU0IyTVM0eUxqUWdZbmtnUUcxaGRHaHBZWE1nS2k5Y2Jqc29ablZ1WTNScGIyNG9jbTl2ZENrZ2UxeHVYRzVjZEM4cUtpQkVaWFJsWTNRZ1puSmxaU0IyWVhKcFlXSnNaWE1nS2k5Y2JseDBkbUZ5SUdaeVpXVkZlSEJ2Y25SeklEMGdkSGx3Wlc5bUlHVjRjRzl5ZEhNZ1BUMGdKMjlpYW1WamRDY2dKaVlnWlhod2IzSjBjenRjYmx4MGRtRnlJR1p5WldWTmIyUjFiR1VnUFNCMGVYQmxiMllnYlc5a2RXeGxJRDA5SUNkdlltcGxZM1FuSUNZbUlHMXZaSFZzWlNBbUpseHVYSFJjZEcxdlpIVnNaUzVsZUhCdmNuUnpJRDA5SUdaeVpXVkZlSEJ2Y25SeklDWW1JRzF2WkhWc1pUdGNibHgwZG1GeUlHWnlaV1ZIYkc5aVlXd2dQU0IwZVhCbGIyWWdaMnh2WW1Gc0lEMDlJQ2R2WW1wbFkzUW5JQ1ltSUdkc2IySmhiRHRjYmx4MGFXWWdLR1p5WldWSGJHOWlZV3d1WjJ4dlltRnNJRDA5UFNCbWNtVmxSMnh2WW1Gc0lIeDhJR1p5WldWSGJHOWlZV3d1ZDJsdVpHOTNJRDA5UFNCbWNtVmxSMnh2WW1Gc0tTQjdYRzVjZEZ4MGNtOXZkQ0E5SUdaeVpXVkhiRzlpWVd3N1hHNWNkSDFjYmx4dVhIUXZLaXBjYmx4MElDb2dWR2hsSUdCd2RXNTVZMjlrWldBZ2IySnFaV04wTGx4dVhIUWdLaUJBYm1GdFpTQndkVzU1WTI5a1pWeHVYSFFnS2lCQWRIbHdaU0JQWW1wbFkzUmNibHgwSUNvdlhHNWNkSFpoY2lCd2RXNTVZMjlrWlN4Y2JseHVYSFF2S2lvZ1NHbG5hR1Z6ZENCd2IzTnBkR2wyWlNCemFXZHVaV1FnTXpJdFltbDBJR1pzYjJGMElIWmhiSFZsSUNvdlhHNWNkRzFoZUVsdWRDQTlJREl4TkRjME9ETTJORGNzSUM4dklHRnJZUzRnTUhnM1JrWkdSa1pHUmlCdmNpQXlYak14TFRGY2JseHVYSFF2S2lvZ1FtOXZkSE4wY21sdVp5QndZWEpoYldWMFpYSnpJQ292WEc1Y2RHSmhjMlVnUFNBek5peGNibHgwZEUxcGJpQTlJREVzWEc1Y2RIUk5ZWGdnUFNBeU5peGNibHgwYzJ0bGR5QTlJRE00TEZ4dVhIUmtZVzF3SUQwZ056QXdMRnh1WEhScGJtbDBhV0ZzUW1saGN5QTlJRGN5TEZ4dVhIUnBibWwwYVdGc1RpQTlJREV5T0N3Z0x5OGdNSGc0TUZ4dVhIUmtaV3hwYldsMFpYSWdQU0FuTFNjc0lDOHZJQ2RjWEhneVJDZGNibHh1WEhRdktpb2dVbVZuZFd4aGNpQmxlSEJ5WlhOemFXOXVjeUFxTDF4dVhIUnlaV2RsZUZCMWJubGpiMlJsSUQwZ0wxNTRiaTB0THl4Y2JseDBjbVZuWlhoT2IyNUJVME5KU1NBOUlDOWJYaUF0ZmwwdkxDQXZMeUIxYm5CeWFXNTBZV0pzWlNCQlUwTkpTU0JqYUdGeWN5QXJJRzV2YmkxQlUwTkpTU0JqYUdGeWMxeHVYSFJ5WldkbGVGTmxjR0Z5WVhSdmNuTWdQU0F2WEZ4NE1rVjhYRngxTXpBd01ueGNYSFZHUmpCRmZGeGNkVVpHTmpFdlp5d2dMeThnVWtaRElETTBPVEFnYzJWd1lYSmhkRzl5YzF4dVhHNWNkQzhxS2lCRmNuSnZjaUJ0WlhOellXZGxjeUFxTDF4dVhIUmxjbkp2Y25NZ1BTQjdYRzVjZEZ4MEoyOTJaWEptYkc5M0p6b2dKMDkyWlhKbWJHOTNPaUJwYm5CMWRDQnVaV1ZrY3lCM2FXUmxjaUJwYm5SbFoyVnljeUIwYnlCd2NtOWpaWE56Snl4Y2JseDBYSFFuYm05MExXSmhjMmxqSnpvZ0owbHNiR1ZuWVd3Z2FXNXdkWFFnUGowZ01IZzRNQ0FvYm05MElHRWdZbUZ6YVdNZ1kyOWtaU0J3YjJsdWRDa25MRnh1WEhSY2RDZHBiblpoYkdsa0xXbHVjSFYwSnpvZ0owbHVkbUZzYVdRZ2FXNXdkWFFuWEc1Y2RIMHNYRzVjYmx4MEx5b3FJRU52Ym5abGJtbGxibU5sSUhOb2IzSjBZM1YwY3lBcUwxeHVYSFJpWVhObFRXbHVkWE5VVFdsdUlEMGdZbUZ6WlNBdElIUk5hVzRzWEc1Y2RHWnNiMjl5SUQwZ1RXRjBhQzVtYkc5dmNpeGNibHgwYzNSeWFXNW5Sbkp2YlVOb1lYSkRiMlJsSUQwZ1UzUnlhVzVuTG1aeWIyMURhR0Z5UTI5a1pTeGNibHh1WEhRdktpb2dWR1Z0Y0c5eVlYSjVJSFpoY21saFlteGxJQ292WEc1Y2RHdGxlVHRjYmx4dVhIUXZLaTB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0S2k5Y2JseHVYSFF2S2lwY2JseDBJQ29nUVNCblpXNWxjbWxqSUdWeWNtOXlJSFYwYVd4cGRIa2dablZ1WTNScGIyNHVYRzVjZENBcUlFQndjbWwyWVhSbFhHNWNkQ0FxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0IwZVhCbElGUm9aU0JsY25KdmNpQjBlWEJsTGx4dVhIUWdLaUJBY21WMGRYSnVjeUI3UlhKeWIzSjlJRlJvY205M2N5QmhJR0JTWVc1blpVVnljbTl5WUNCM2FYUm9JSFJvWlNCaGNIQnNhV05oWW14bElHVnljbTl5SUcxbGMzTmhaMlV1WEc1Y2RDQXFMMXh1WEhSbWRXNWpkR2x2YmlCbGNuSnZjaWgwZVhCbEtTQjdYRzVjZEZ4MGRHaHliM2NnVW1GdVoyVkZjbkp2Y2lobGNuSnZjbk5iZEhsd1pWMHBPMXh1WEhSOVhHNWNibHgwTHlvcVhHNWNkQ0FxSUVFZ1oyVnVaWEpwWXlCZ1FYSnlZWGtqYldGd1lDQjFkR2xzYVhSNUlHWjFibU4wYVc5dUxseHVYSFFnS2lCQWNISnBkbUYwWlZ4dVhIUWdLaUJBY0dGeVlXMGdlMEZ5Y21GNWZTQmhjbkpoZVNCVWFHVWdZWEp5WVhrZ2RHOGdhWFJsY21GMFpTQnZkbVZ5TGx4dVhIUWdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVmU0JqWVd4c1ltRmpheUJVYUdVZ1puVnVZM1JwYjI0Z2RHaGhkQ0JuWlhSeklHTmhiR3hsWkNCbWIzSWdaWFpsY25rZ1lYSnlZWGxjYmx4MElDb2dhWFJsYlM1Y2JseDBJQ29nUUhKbGRIVnlibk1nZTBGeWNtRjVmU0JCSUc1bGR5QmhjbkpoZVNCdlppQjJZV3gxWlhNZ2NtVjBkWEp1WldRZ1lua2dkR2hsSUdOaGJHeGlZV05ySUdaMWJtTjBhVzl1TGx4dVhIUWdLaTljYmx4MFpuVnVZM1JwYjI0Z2JXRndLR0Z5Y21GNUxDQm1iaWtnZTF4dVhIUmNkSFpoY2lCc1pXNW5kR2dnUFNCaGNuSmhlUzVzWlc1bmRHZzdYRzVjZEZ4MGQyaHBiR1VnS0d4bGJtZDBhQzB0S1NCN1hHNWNkRngwWEhSaGNuSmhlVnRzWlc1bmRHaGRJRDBnWm00b1lYSnlZWGxiYkdWdVozUm9YU2s3WEc1Y2RGeDBmVnh1WEhSY2RISmxkSFZ5YmlCaGNuSmhlVHRjYmx4MGZWeHVYRzVjZEM4cUtseHVYSFFnS2lCQklITnBiWEJzWlNCZ1FYSnlZWGtqYldGd1lDMXNhV3RsSUhkeVlYQndaWElnZEc4Z2QyOXlheUIzYVhSb0lHUnZiV0ZwYmlCdVlXMWxJSE4wY21sdVozTXVYRzVjZENBcUlFQndjbWwyWVhSbFhHNWNkQ0FxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0JrYjIxaGFXNGdWR2hsSUdSdmJXRnBiaUJ1WVcxbExseHVYSFFnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZlNCallXeHNZbUZqYXlCVWFHVWdablZ1WTNScGIyNGdkR2hoZENCblpYUnpJR05oYkd4bFpDQm1iM0lnWlhabGNubGNibHgwSUNvZ1kyaGhjbUZqZEdWeUxseHVYSFFnS2lCQWNtVjBkWEp1Y3lCN1FYSnlZWGw5SUVFZ2JtVjNJSE4wY21sdVp5QnZaaUJqYUdGeVlXTjBaWEp6SUhKbGRIVnlibVZrSUdKNUlIUm9aU0JqWVd4c1ltRmphMXh1WEhRZ0tpQm1kVzVqZEdsdmJpNWNibHgwSUNvdlhHNWNkR1oxYm1OMGFXOXVJRzFoY0VSdmJXRnBiaWh6ZEhKcGJtY3NJR1p1S1NCN1hHNWNkRngwY21WMGRYSnVJRzFoY0NoemRISnBibWN1YzNCc2FYUW9jbVZuWlhoVFpYQmhjbUYwYjNKektTd2dabTRwTG1wdmFXNG9KeTRuS1R0Y2JseDBmVnh1WEc1Y2RDOHFLbHh1WEhRZ0tpQkRjbVZoZEdWeklHRnVJR0Z5Y21GNUlHTnZiblJoYVc1cGJtY2dkR2hsSUc1MWJXVnlhV01nWTI5a1pTQndiMmx1ZEhNZ2IyWWdaV0ZqYUNCVmJtbGpiMlJsWEc1Y2RDQXFJR05vWVhKaFkzUmxjaUJwYmlCMGFHVWdjM1J5YVc1bkxpQlhhR2xzWlNCS1lYWmhVMk55YVhCMElIVnpaWE1nVlVOVExUSWdhVzUwWlhKdVlXeHNlU3hjYmx4MElDb2dkR2hwY3lCbWRXNWpkR2x2YmlCM2FXeHNJR052Ym5abGNuUWdZU0J3WVdseUlHOW1JSE4xY25KdloyRjBaU0JvWVd4MlpYTWdLR1ZoWTJnZ2IyWWdkMmhwWTJoY2JseDBJQ29nVlVOVExUSWdaWGh3YjNObGN5QmhjeUJ6WlhCaGNtRjBaU0JqYUdGeVlXTjBaWEp6S1NCcGJuUnZJR0VnYzJsdVoyeGxJR052WkdVZ2NHOXBiblFzWEc1Y2RDQXFJRzFoZEdOb2FXNW5JRlZVUmkweE5pNWNibHgwSUNvZ1FITmxaU0JnY0hWdWVXTnZaR1V1ZFdOek1pNWxibU52WkdWZ1hHNWNkQ0FxSUVCelpXVWdQR2gwZEhBNkx5OXRZWFJvYVdGellubHVaVzV6TG1KbEwyNXZkR1Z6TDJwaGRtRnpZM0pwY0hRdFpXNWpiMlJwYm1jK1hHNWNkQ0FxSUVCdFpXMWlaWEpQWmlCd2RXNTVZMjlrWlM1MVkzTXlYRzVjZENBcUlFQnVZVzFsSUdSbFkyOWtaVnh1WEhRZ0tpQkFjR0Z5WVcwZ2UxTjBjbWx1WjMwZ2MzUnlhVzVuSUZSb1pTQlZibWxqYjJSbElHbHVjSFYwSUhOMGNtbHVaeUFvVlVOVExUSXBMbHh1WEhRZ0tpQkFjbVYwZFhKdWN5QjdRWEp5WVhsOUlGUm9aU0J1WlhjZ1lYSnlZWGtnYjJZZ1kyOWtaU0J3YjJsdWRITXVYRzVjZENBcUwxeHVYSFJtZFc1amRHbHZiaUIxWTNNeVpHVmpiMlJsS0hOMGNtbHVaeWtnZTF4dVhIUmNkSFpoY2lCdmRYUndkWFFnUFNCYlhTeGNibHgwWEhRZ0lDQWdZMjkxYm5SbGNpQTlJREFzWEc1Y2RGeDBJQ0FnSUd4bGJtZDBhQ0E5SUhOMGNtbHVaeTVzWlc1bmRHZ3NYRzVjZEZ4MElDQWdJSFpoYkhWbExGeHVYSFJjZENBZ0lDQmxlSFJ5WVR0Y2JseDBYSFIzYUdsc1pTQW9ZMjkxYm5SbGNpQThJR3hsYm1kMGFDa2dlMXh1WEhSY2RGeDBkbUZzZFdVZ1BTQnpkSEpwYm1jdVkyaGhja052WkdWQmRDaGpiM1Z1ZEdWeUt5c3BPMXh1WEhSY2RGeDBhV1lnS0haaGJIVmxJRDQ5SURCNFJEZ3dNQ0FtSmlCMllXeDFaU0E4UFNBd2VFUkNSa1lnSmlZZ1kyOTFiblJsY2lBOElHeGxibWQwYUNrZ2UxeHVYSFJjZEZ4MFhIUXZMeUJvYVdkb0lITjFjbkp2WjJGMFpTd2dZVzVrSUhSb1pYSmxJR2x6SUdFZ2JtVjRkQ0JqYUdGeVlXTjBaWEpjYmx4MFhIUmNkRngwWlhoMGNtRWdQU0J6ZEhKcGJtY3VZMmhoY2tOdlpHVkJkQ2hqYjNWdWRHVnlLeXNwTzF4dVhIUmNkRngwWEhScFppQW9LR1Y0ZEhKaElDWWdNSGhHUXpBd0tTQTlQU0F3ZUVSRE1EQXBJSHNnTHk4Z2JHOTNJSE4xY25KdloyRjBaVnh1WEhSY2RGeDBYSFJjZEc5MWRIQjFkQzV3ZFhOb0tDZ29kbUZzZFdVZ0ppQXdlRE5HUmlrZ1BEd2dNVEFwSUNzZ0tHVjRkSEpoSUNZZ01IZ3pSa1lwSUNzZ01IZ3hNREF3TUNrN1hHNWNkRngwWEhSY2RIMGdaV3h6WlNCN1hHNWNkRngwWEhSY2RGeDBMeThnZFc1dFlYUmphR1ZrSUhOMWNuSnZaMkYwWlRzZ2IyNXNlU0JoY0hCbGJtUWdkR2hwY3lCamIyUmxJSFZ1YVhRc0lHbHVJR05oYzJVZ2RHaGxJRzVsZUhSY2JseDBYSFJjZEZ4MFhIUXZMeUJqYjJSbElIVnVhWFFnYVhNZ2RHaGxJR2hwWjJnZ2MzVnljbTluWVhSbElHOW1JR0VnYzNWeWNtOW5ZWFJsSUhCaGFYSmNibHgwWEhSY2RGeDBYSFJ2ZFhSd2RYUXVjSFZ6YUNoMllXeDFaU2s3WEc1Y2RGeDBYSFJjZEZ4MFkyOTFiblJsY2kwdE8xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlJR1ZzYzJVZ2UxeHVYSFJjZEZ4MFhIUnZkWFJ3ZFhRdWNIVnphQ2gyWVd4MVpTazdYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZWeHVYSFJjZEhKbGRIVnliaUJ2ZFhSd2RYUTdYRzVjZEgxY2JseHVYSFF2S2lwY2JseDBJQ29nUTNKbFlYUmxjeUJoSUhOMGNtbHVaeUJpWVhObFpDQnZiaUJoYmlCaGNuSmhlU0J2WmlCdWRXMWxjbWxqSUdOdlpHVWdjRzlwYm5SekxseHVYSFFnS2lCQWMyVmxJR0J3ZFc1NVkyOWtaUzUxWTNNeUxtUmxZMjlrWldCY2JseDBJQ29nUUcxbGJXSmxjazltSUhCMWJubGpiMlJsTG5WamN6SmNibHgwSUNvZ1FHNWhiV1VnWlc1amIyUmxYRzVjZENBcUlFQndZWEpoYlNCN1FYSnlZWGw5SUdOdlpHVlFiMmx1ZEhNZ1ZHaGxJR0Z5Y21GNUlHOW1JRzUxYldWeWFXTWdZMjlrWlNCd2IybHVkSE11WEc1Y2RDQXFJRUJ5WlhSMWNtNXpJSHRUZEhKcGJtZDlJRlJvWlNCdVpYY2dWVzVwWTI5a1pTQnpkSEpwYm1jZ0tGVkRVeTB5S1M1Y2JseDBJQ292WEc1Y2RHWjFibU4wYVc5dUlIVmpjekpsYm1OdlpHVW9ZWEp5WVhrcElIdGNibHgwWEhSeVpYUjFjbTRnYldGd0tHRnljbUY1TENCbWRXNWpkR2x2YmloMllXeDFaU2tnZTF4dVhIUmNkRngwZG1GeUlHOTFkSEIxZENBOUlDY25PMXh1WEhSY2RGeDBhV1lnS0haaGJIVmxJRDRnTUhoR1JrWkdLU0I3WEc1Y2RGeDBYSFJjZEhaaGJIVmxJQzA5SURCNE1UQXdNREE3WEc1Y2RGeDBYSFJjZEc5MWRIQjFkQ0FyUFNCemRISnBibWRHY205dFEyaGhja052WkdVb2RtRnNkV1VnUGo0K0lERXdJQ1lnTUhnelJrWWdmQ0F3ZUVRNE1EQXBPMXh1WEhSY2RGeDBYSFIyWVd4MVpTQTlJREI0UkVNd01DQjhJSFpoYkhWbElDWWdNSGd6UmtZN1hHNWNkRngwWEhSOVhHNWNkRngwWEhSdmRYUndkWFFnS3owZ2MzUnlhVzVuUm5KdmJVTm9ZWEpEYjJSbEtIWmhiSFZsS1R0Y2JseDBYSFJjZEhKbGRIVnliaUJ2ZFhSd2RYUTdYRzVjZEZ4MGZTa3VhbTlwYmlnbkp5azdYRzVjZEgxY2JseHVYSFF2S2lwY2JseDBJQ29nUTI5dWRtVnlkSE1nWVNCaVlYTnBZeUJqYjJSbElIQnZhVzUwSUdsdWRHOGdZU0JrYVdkcGRDOXBiblJsWjJWeUxseHVYSFFnS2lCQWMyVmxJR0JrYVdkcGRGUnZRbUZ6YVdNb0tXQmNibHgwSUNvZ1FIQnlhWFpoZEdWY2JseDBJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJR052WkdWUWIybHVkQ0JVYUdVZ1ltRnphV01nYm5WdFpYSnBZeUJqYjJSbElIQnZhVzUwSUhaaGJIVmxMbHh1WEhRZ0tpQkFjbVYwZFhKdWN5QjdUblZ0WW1WeWZTQlVhR1VnYm5WdFpYSnBZeUIyWVd4MVpTQnZaaUJoSUdKaGMybGpJR052WkdVZ2NHOXBiblFnS0dadmNpQjFjMlVnYVc1Y2JseDBJQ29nY21Wd2NtVnpaVzUwYVc1bklHbHVkR1ZuWlhKektTQnBiaUIwYUdVZ2NtRnVaMlVnWURCZ0lIUnZJR0JpWVhObElDMGdNV0FzSUc5eUlHQmlZWE5sWUNCcFpseHVYSFFnS2lCMGFHVWdZMjlrWlNCd2IybHVkQ0JrYjJWeklHNXZkQ0J5WlhCeVpYTmxiblFnWVNCMllXeDFaUzVjYmx4MElDb3ZYRzVjZEdaMWJtTjBhVzl1SUdKaGMybGpWRzlFYVdkcGRDaGpiMlJsVUc5cGJuUXBJSHRjYmx4MFhIUnBaaUFvWTI5a1pWQnZhVzUwSUMwZ05EZ2dQQ0F4TUNrZ2UxeHVYSFJjZEZ4MGNtVjBkWEp1SUdOdlpHVlFiMmx1ZENBdElESXlPMXh1WEhSY2RIMWNibHgwWEhScFppQW9ZMjlrWlZCdmFXNTBJQzBnTmpVZ1BDQXlOaWtnZTF4dVhIUmNkRngwY21WMGRYSnVJR052WkdWUWIybHVkQ0F0SURZMU8xeHVYSFJjZEgxY2JseDBYSFJwWmlBb1kyOWtaVkJ2YVc1MElDMGdPVGNnUENBeU5pa2dlMXh1WEhSY2RGeDBjbVYwZFhKdUlHTnZaR1ZRYjJsdWRDQXRJRGszTzF4dVhIUmNkSDFjYmx4MFhIUnlaWFIxY200Z1ltRnpaVHRjYmx4MGZWeHVYRzVjZEM4cUtseHVYSFFnS2lCRGIyNTJaWEowY3lCaElHUnBaMmwwTDJsdWRHVm5aWElnYVc1MGJ5QmhJR0poYzJsaklHTnZaR1VnY0c5cGJuUXVYRzVjZENBcUlFQnpaV1VnWUdKaGMybGpWRzlFYVdkcGRDZ3BZRnh1WEhRZ0tpQkFjSEpwZG1GMFpWeHVYSFFnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnWkdsbmFYUWdWR2hsSUc1MWJXVnlhV01nZG1Gc2RXVWdiMllnWVNCaVlYTnBZeUJqYjJSbElIQnZhVzUwTGx4dVhIUWdLaUJBY21WMGRYSnVjeUI3VG5WdFltVnlmU0JVYUdVZ1ltRnphV01nWTI5a1pTQndiMmx1ZENCM2FHOXpaU0IyWVd4MVpTQW9kMmhsYmlCMWMyVmtJR1p2Y2x4dVhIUWdLaUJ5WlhCeVpYTmxiblJwYm1jZ2FXNTBaV2RsY25NcElHbHpJR0JrYVdkcGRHQXNJSGRvYVdOb0lHNWxaV1J6SUhSdklHSmxJR2x1SUhSb1pTQnlZVzVuWlZ4dVhIUWdLaUJnTUdBZ2RHOGdZR0poYzJVZ0xTQXhZQzRnU1dZZ1lHWnNZV2RnSUdseklHNXZiaTE2WlhKdkxDQjBhR1VnZFhCd1pYSmpZWE5sSUdadmNtMGdhWE5jYmx4MElDb2dkWE5sWkRzZ1pXeHpaU3dnZEdobElHeHZkMlZ5WTJGelpTQm1iM0p0SUdseklIVnpaV1F1SUZSb1pTQmlaV2hoZG1sdmNpQnBjeUIxYm1SbFptbHVaV1JjYmx4MElDb2dhV1lnWUdac1lXZGdJR2x6SUc1dmJpMTZaWEp2SUdGdVpDQmdaR2xuYVhSZ0lHaGhjeUJ1YnlCMWNIQmxjbU5oYzJVZ1ptOXliUzVjYmx4MElDb3ZYRzVjZEdaMWJtTjBhVzl1SUdScFoybDBWRzlDWVhOcFl5aGthV2RwZEN3Z1pteGhaeWtnZTF4dVhIUmNkQzh2SUNBd0xpNHlOU0J0WVhBZ2RHOGdRVk5EU1VrZ1lTNHVlaUJ2Y2lCQkxpNWFYRzVjZEZ4MEx5OGdNall1TGpNMUlHMWhjQ0IwYnlCQlUwTkpTU0F3TGk0NVhHNWNkRngwY21WMGRYSnVJR1JwWjJsMElDc2dNaklnS3lBM05TQXFJQ2hrYVdkcGRDQThJREkyS1NBdElDZ29abXhoWnlBaFBTQXdLU0E4UENBMUtUdGNibHgwZlZ4dVhHNWNkQzhxS2x4dVhIUWdLaUJDYVdGeklHRmtZWEIwWVhScGIyNGdablZ1WTNScGIyNGdZWE1nY0dWeUlITmxZM1JwYjI0Z015NDBJRzltSUZKR1F5QXpORGt5TGx4dVhIUWdLaUJvZEhSd09pOHZkRzl2YkhNdWFXVjBaaTV2Y21jdmFIUnRiQzl5Wm1Nek5Ea3lJM05sWTNScGIyNHRNeTQwWEc1Y2RDQXFJRUJ3Y21sMllYUmxYRzVjZENBcUwxeHVYSFJtZFc1amRHbHZiaUJoWkdGd2RDaGtaV3gwWVN3Z2JuVnRVRzlwYm5SekxDQm1hWEp6ZEZScGJXVXBJSHRjYmx4MFhIUjJZWElnYXlBOUlEQTdYRzVjZEZ4MFpHVnNkR0VnUFNCbWFYSnpkRlJwYldVZ1B5Qm1iRzl2Y2loa1pXeDBZU0F2SUdSaGJYQXBJRG9nWkdWc2RHRWdQajRnTVR0Y2JseDBYSFJrWld4MFlTQXJQU0JtYkc5dmNpaGtaV3gwWVNBdklHNTFiVkJ2YVc1MGN5azdYRzVjZEZ4MFptOXlJQ2d2S2lCdWJ5QnBibWwwYVdGc2FYcGhkR2x2YmlBcUx6c2daR1ZzZEdFZ1BpQmlZWE5sVFdsdWRYTlVUV2x1SUNvZ2RFMWhlQ0ErUGlBeE95QnJJQ3M5SUdKaGMyVXBJSHRjYmx4MFhIUmNkR1JsYkhSaElEMGdabXh2YjNJb1pHVnNkR0VnTHlCaVlYTmxUV2x1ZFhOVVRXbHVLVHRjYmx4MFhIUjlYRzVjZEZ4MGNtVjBkWEp1SUdac2IyOXlLR3NnS3lBb1ltRnpaVTFwYm5WelZFMXBiaUFySURFcElDb2daR1ZzZEdFZ0x5QW9aR1ZzZEdFZ0t5QnphMlYzS1NrN1hHNWNkSDFjYmx4dVhIUXZLaXBjYmx4MElDb2dRMjl1ZG1WeWRITWdZU0JRZFc1NVkyOWtaU0J6ZEhKcGJtY2diMllnUVZORFNVa3RiMjVzZVNCemVXMWliMnh6SUhSdklHRWdjM1J5YVc1bklHOW1JRlZ1YVdOdlpHVmNibHgwSUNvZ2MzbHRZbTlzY3k1Y2JseDBJQ29nUUcxbGJXSmxjazltSUhCMWJubGpiMlJsWEc1Y2RDQXFJRUJ3WVhKaGJTQjdVM1J5YVc1bmZTQnBibkIxZENCVWFHVWdVSFZ1ZVdOdlpHVWdjM1J5YVc1bklHOW1JRUZUUTBsSkxXOXViSGtnYzNsdFltOXNjeTVjYmx4MElDb2dRSEpsZEhWeWJuTWdlMU4wY21sdVozMGdWR2hsSUhKbGMzVnNkR2x1WnlCemRISnBibWNnYjJZZ1ZXNXBZMjlrWlNCemVXMWliMnh6TGx4dVhIUWdLaTljYmx4MFpuVnVZM1JwYjI0Z1pHVmpiMlJsS0dsdWNIVjBLU0I3WEc1Y2RGeDBMeThnUkc5dUozUWdkWE5sSUZWRFV5MHlYRzVjZEZ4MGRtRnlJRzkxZEhCMWRDQTlJRnRkTEZ4dVhIUmNkQ0FnSUNCcGJuQjFkRXhsYm1kMGFDQTlJR2x1Y0hWMExteGxibWQwYUN4Y2JseDBYSFFnSUNBZ2IzVjBMRnh1WEhSY2RDQWdJQ0JwSUQwZ01DeGNibHgwWEhRZ0lDQWdiaUE5SUdsdWFYUnBZV3hPTEZ4dVhIUmNkQ0FnSUNCaWFXRnpJRDBnYVc1cGRHbGhiRUpwWVhNc1hHNWNkRngwSUNBZ0lHSmhjMmxqTEZ4dVhIUmNkQ0FnSUNCcUxGeHVYSFJjZENBZ0lDQnBibVJsZUN4Y2JseDBYSFFnSUNBZ2IyeGthU3hjYmx4MFhIUWdJQ0FnZHl4Y2JseDBYSFFnSUNBZ2F5eGNibHgwWEhRZ0lDQWdaR2xuYVhRc1hHNWNkRngwSUNBZ0lIUXNYRzVjZEZ4MElDQWdJQzhxS2lCRFlXTm9aV1FnWTJGc1kzVnNZWFJwYjI0Z2NtVnpkV3gwY3lBcUwxeHVYSFJjZENBZ0lDQmlZWE5sVFdsdWRYTlVPMXh1WEc1Y2RGeDBMeThnU0dGdVpHeGxJSFJvWlNCaVlYTnBZeUJqYjJSbElIQnZhVzUwY3pvZ2JHVjBJR0JpWVhOcFkyQWdZbVVnZEdobElHNTFiV0psY2lCdlppQnBibkIxZENCamIyUmxYRzVjZEZ4MEx5OGdjRzlwYm5SeklHSmxabTl5WlNCMGFHVWdiR0Z6ZENCa1pXeHBiV2wwWlhJc0lHOXlJR0F3WUNCcFppQjBhR1Z5WlNCcGN5QnViMjVsTENCMGFHVnVJR052Y0hsY2JseDBYSFF2THlCMGFHVWdabWx5YzNRZ1ltRnphV01nWTI5a1pTQndiMmx1ZEhNZ2RHOGdkR2hsSUc5MWRIQjFkQzVjYmx4dVhIUmNkR0poYzJsaklEMGdhVzV3ZFhRdWJHRnpkRWx1WkdWNFQyWW9aR1ZzYVcxcGRHVnlLVHRjYmx4MFhIUnBaaUFvWW1GemFXTWdQQ0F3S1NCN1hHNWNkRngwWEhSaVlYTnBZeUE5SURBN1hHNWNkRngwZlZ4dVhHNWNkRngwWm05eUlDaHFJRDBnTURzZ2FpQThJR0poYzJsak95QXJLMm9wSUh0Y2JseDBYSFJjZEM4dklHbG1JR2wwSjNNZ2JtOTBJR0VnWW1GemFXTWdZMjlrWlNCd2IybHVkRnh1WEhSY2RGeDBhV1lnS0dsdWNIVjBMbU5vWVhKRGIyUmxRWFFvYWlrZ1BqMGdNSGc0TUNrZ2UxeHVYSFJjZEZ4MFhIUmxjbkp2Y2lnbmJtOTBMV0poYzJsakp5azdYRzVjZEZ4MFhIUjlYRzVjZEZ4MFhIUnZkWFJ3ZFhRdWNIVnphQ2hwYm5CMWRDNWphR0Z5UTI5a1pVRjBLR29wS1R0Y2JseDBYSFI5WEc1Y2JseDBYSFF2THlCTllXbHVJR1JsWTI5a2FXNW5JR3h2YjNBNklITjBZWEowSUdwMWMzUWdZV1owWlhJZ2RHaGxJR3hoYzNRZ1pHVnNhVzFwZEdWeUlHbG1JR0Z1ZVNCaVlYTnBZeUJqYjJSbFhHNWNkRngwTHk4Z2NHOXBiblJ6SUhkbGNtVWdZMjl3YVdWa095QnpkR0Z5ZENCaGRDQjBhR1VnWW1WbmFXNXVhVzVuSUc5MGFHVnlkMmx6WlM1Y2JseHVYSFJjZEdadmNpQW9hVzVrWlhnZ1BTQmlZWE5wWXlBK0lEQWdQeUJpWVhOcFl5QXJJREVnT2lBd095QnBibVJsZUNBOElHbHVjSFYwVEdWdVozUm9PeUF2S2lCdWJ5Qm1hVzVoYkNCbGVIQnlaWE56YVc5dUlDb3ZLU0I3WEc1Y2JseDBYSFJjZEM4dklHQnBibVJsZUdBZ2FYTWdkR2hsSUdsdVpHVjRJRzltSUhSb1pTQnVaWGgwSUdOb1lYSmhZM1JsY2lCMGJ5QmlaU0JqYjI1emRXMWxaQzVjYmx4MFhIUmNkQzh2SUVSbFkyOWtaU0JoSUdkbGJtVnlZV3hwZW1Wa0lIWmhjbWxoWW14bExXeGxibWQwYUNCcGJuUmxaMlZ5SUdsdWRHOGdZR1JsYkhSaFlDeGNibHgwWEhSY2RDOHZJSGRvYVdOb0lHZGxkSE1nWVdSa1pXUWdkRzhnWUdsZ0xpQlVhR1VnYjNabGNtWnNiM2NnWTJobFkydHBibWNnYVhNZ1pXRnphV1Z5WEc1Y2RGeDBYSFF2THlCcFppQjNaU0JwYm1OeVpXRnpaU0JnYVdBZ1lYTWdkMlVnWjI4c0lIUm9aVzRnYzNWaWRISmhZM1FnYjJabUlHbDBjeUJ6ZEdGeWRHbHVaMXh1WEhSY2RGeDBMeThnZG1Gc2RXVWdZWFFnZEdobElHVnVaQ0IwYnlCdlluUmhhVzRnWUdSbGJIUmhZQzVjYmx4MFhIUmNkR1p2Y2lBb2IyeGthU0E5SUdrc0lIY2dQU0F4TENCcklEMGdZbUZ6WlRzZ0x5b2dibThnWTI5dVpHbDBhVzl1SUNvdk95QnJJQ3M5SUdKaGMyVXBJSHRjYmx4dVhIUmNkRngwWEhScFppQW9hVzVrWlhnZ1BqMGdhVzV3ZFhSTVpXNW5kR2dwSUh0Y2JseDBYSFJjZEZ4MFhIUmxjbkp2Y2lnbmFXNTJZV3hwWkMxcGJuQjFkQ2NwTzF4dVhIUmNkRngwWEhSOVhHNWNibHgwWEhSY2RGeDBaR2xuYVhRZ1BTQmlZWE5wWTFSdlJHbG5hWFFvYVc1d2RYUXVZMmhoY2tOdlpHVkJkQ2hwYm1SbGVDc3JLU2s3WEc1Y2JseDBYSFJjZEZ4MGFXWWdLR1JwWjJsMElENDlJR0poYzJVZ2ZId2daR2xuYVhRZ1BpQm1iRzl2Y2lnb2JXRjRTVzUwSUMwZ2FTa2dMeUIzS1NrZ2UxeHVYSFJjZEZ4MFhIUmNkR1Z5Y205eUtDZHZkbVZ5Wm14dmR5Y3BPMXh1WEhSY2RGeDBYSFI5WEc1Y2JseDBYSFJjZEZ4MGFTQXJQU0JrYVdkcGRDQXFJSGM3WEc1Y2RGeDBYSFJjZEhRZ1BTQnJJRHc5SUdKcFlYTWdQeUIwVFdsdUlEb2dLR3NnUGowZ1ltbGhjeUFySUhSTllYZ2dQeUIwVFdGNElEb2dheUF0SUdKcFlYTXBPMXh1WEc1Y2RGeDBYSFJjZEdsbUlDaGthV2RwZENBOElIUXBJSHRjYmx4MFhIUmNkRngwWEhSaWNtVmhhenRjYmx4MFhIUmNkRngwZlZ4dVhHNWNkRngwWEhSY2RHSmhjMlZOYVc1MWMxUWdQU0JpWVhObElDMGdkRHRjYmx4MFhIUmNkRngwYVdZZ0tIY2dQaUJtYkc5dmNpaHRZWGhKYm5RZ0x5QmlZWE5sVFdsdWRYTlVLU2tnZTF4dVhIUmNkRngwWEhSY2RHVnljbTl5S0NkdmRtVnlabXh2ZHljcE8xeHVYSFJjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkRngwZHlBcVBTQmlZWE5sVFdsdWRYTlVPMXh1WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEc5MWRDQTlJRzkxZEhCMWRDNXNaVzVuZEdnZ0t5QXhPMXh1WEhSY2RGeDBZbWxoY3lBOUlHRmtZWEIwS0drZ0xTQnZiR1JwTENCdmRYUXNJRzlzWkdrZ1BUMGdNQ2s3WEc1Y2JseDBYSFJjZEM4dklHQnBZQ0IzWVhNZ2MzVndjRzl6WldRZ2RHOGdkM0poY0NCaGNtOTFibVFnWm5KdmJTQmdiM1YwWUNCMGJ5QmdNR0FzWEc1Y2RGeDBYSFF2THlCcGJtTnlaVzFsYm5ScGJtY2dZRzVnSUdWaFkyZ2dkR2x0WlN3Z2MyOGdkMlVuYkd3Z1ptbDRJSFJvWVhRZ2JtOTNPbHh1WEhSY2RGeDBhV1lnS0dac2IyOXlLR2tnTHlCdmRYUXBJRDRnYldGNFNXNTBJQzBnYmlrZ2UxeHVYSFJjZEZ4MFhIUmxjbkp2Y2lnbmIzWmxjbVpzYjNjbktUdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBiaUFyUFNCbWJHOXZjaWhwSUM4Z2IzVjBLVHRjYmx4MFhIUmNkR2tnSlQwZ2IzVjBPMXh1WEc1Y2RGeDBYSFF2THlCSmJuTmxjblFnWUc1Z0lHRjBJSEJ2YzJsMGFXOXVJR0JwWUNCdlppQjBhR1VnYjNWMGNIVjBYRzVjZEZ4MFhIUnZkWFJ3ZFhRdWMzQnNhV05sS0drckt5d2dNQ3dnYmlrN1hHNWNibHgwWEhSOVhHNWNibHgwWEhSeVpYUjFjbTRnZFdOek1tVnVZMjlrWlNodmRYUndkWFFwTzF4dVhIUjlYRzVjYmx4MEx5b3FYRzVjZENBcUlFTnZiblpsY25SeklHRWdjM1J5YVc1bklHOW1JRlZ1YVdOdlpHVWdjM2x0WW05c2N5QjBieUJoSUZCMWJubGpiMlJsSUhOMGNtbHVaeUJ2WmlCQlUwTkpTUzF2Ym14NVhHNWNkQ0FxSUhONWJXSnZiSE11WEc1Y2RDQXFJRUJ0WlcxaVpYSlBaaUJ3ZFc1NVkyOWtaVnh1WEhRZ0tpQkFjR0Z5WVcwZ2UxTjBjbWx1WjMwZ2FXNXdkWFFnVkdobElITjBjbWx1WnlCdlppQlZibWxqYjJSbElITjViV0p2YkhNdVhHNWNkQ0FxSUVCeVpYUjFjbTV6SUh0VGRISnBibWQ5SUZSb1pTQnlaWE4xYkhScGJtY2dVSFZ1ZVdOdlpHVWdjM1J5YVc1bklHOW1JRUZUUTBsSkxXOXViSGtnYzNsdFltOXNjeTVjYmx4MElDb3ZYRzVjZEdaMWJtTjBhVzl1SUdWdVkyOWtaU2hwYm5CMWRDa2dlMXh1WEhSY2RIWmhjaUJ1TEZ4dVhIUmNkQ0FnSUNCa1pXeDBZU3hjYmx4MFhIUWdJQ0FnYUdGdVpHeGxaRU5RUTI5MWJuUXNYRzVjZEZ4MElDQWdJR0poYzJsalRHVnVaM1JvTEZ4dVhIUmNkQ0FnSUNCaWFXRnpMRnh1WEhSY2RDQWdJQ0JxTEZ4dVhIUmNkQ0FnSUNCdExGeHVYSFJjZENBZ0lDQnhMRnh1WEhSY2RDQWdJQ0JyTEZ4dVhIUmNkQ0FnSUNCMExGeHVYSFJjZENBZ0lDQmpkWEp5Wlc1MFZtRnNkV1VzWEc1Y2RGeDBJQ0FnSUc5MWRIQjFkQ0E5SUZ0ZExGeHVYSFJjZENBZ0lDQXZLaW9nWUdsdWNIVjBUR1Z1WjNSb1lDQjNhV3hzSUdodmJHUWdkR2hsSUc1MWJXSmxjaUJ2WmlCamIyUmxJSEJ2YVc1MGN5QnBiaUJnYVc1d2RYUmdMaUFxTDF4dVhIUmNkQ0FnSUNCcGJuQjFkRXhsYm1kMGFDeGNibHgwWEhRZ0lDQWdMeW9xSUVOaFkyaGxaQ0JqWVd4amRXeGhkR2x2YmlCeVpYTjFiSFJ6SUNvdlhHNWNkRngwSUNBZ0lHaGhibVJzWldSRFVFTnZkVzUwVUd4MWMwOXVaU3hjYmx4MFhIUWdJQ0FnWW1GelpVMXBiblZ6VkN4Y2JseDBYSFFnSUNBZ2NVMXBiblZ6VkR0Y2JseHVYSFJjZEM4dklFTnZiblpsY25RZ2RHaGxJR2x1Y0hWMElHbHVJRlZEVXkweUlIUnZJRlZ1YVdOdlpHVmNibHgwWEhScGJuQjFkQ0E5SUhWamN6SmtaV052WkdVb2FXNXdkWFFwTzF4dVhHNWNkRngwTHk4Z1EyRmphR1VnZEdobElHeGxibWQwYUZ4dVhIUmNkR2x1Y0hWMFRHVnVaM1JvSUQwZ2FXNXdkWFF1YkdWdVozUm9PMXh1WEc1Y2RGeDBMeThnU1c1cGRHbGhiR2w2WlNCMGFHVWdjM1JoZEdWY2JseDBYSFJ1SUQwZ2FXNXBkR2xoYkU0N1hHNWNkRngwWkdWc2RHRWdQU0F3TzF4dVhIUmNkR0pwWVhNZ1BTQnBibWwwYVdGc1FtbGhjenRjYmx4dVhIUmNkQzh2SUVoaGJtUnNaU0IwYUdVZ1ltRnphV01nWTI5a1pTQndiMmx1ZEhOY2JseDBYSFJtYjNJZ0tHb2dQU0F3T3lCcUlEd2dhVzV3ZFhSTVpXNW5kR2c3SUNzcmFpa2dlMXh1WEhSY2RGeDBZM1Z5Y21WdWRGWmhiSFZsSUQwZ2FXNXdkWFJiYWwwN1hHNWNkRngwWEhScFppQW9ZM1Z5Y21WdWRGWmhiSFZsSUR3Z01IZzRNQ2tnZTF4dVhIUmNkRngwWEhSdmRYUndkWFF1Y0hWemFDaHpkSEpwYm1kR2NtOXRRMmhoY2tOdlpHVW9ZM1Z5Y21WdWRGWmhiSFZsS1NrN1hHNWNkRngwWEhSOVhHNWNkRngwZlZ4dVhHNWNkRngwYUdGdVpHeGxaRU5RUTI5MWJuUWdQU0JpWVhOcFkweGxibWQwYUNBOUlHOTFkSEIxZEM1c1pXNW5kR2c3WEc1Y2JseDBYSFF2THlCZ2FHRnVaR3hsWkVOUVEyOTFiblJnSUdseklIUm9aU0J1ZFcxaVpYSWdiMllnWTI5a1pTQndiMmx1ZEhNZ2RHaGhkQ0JvWVhabElHSmxaVzRnYUdGdVpHeGxaRHRjYmx4MFhIUXZMeUJnWW1GemFXTk1aVzVuZEdoZ0lHbHpJSFJvWlNCdWRXMWlaWElnYjJZZ1ltRnphV01nWTI5a1pTQndiMmx1ZEhNdVhHNWNibHgwWEhRdkx5QkdhVzVwYzJnZ2RHaGxJR0poYzJsaklITjBjbWx1WnlBdElHbG1JR2wwSUdseklHNXZkQ0JsYlhCMGVTQXRJSGRwZEdnZ1lTQmtaV3hwYldsMFpYSmNibHgwWEhScFppQW9ZbUZ6YVdOTVpXNW5kR2dwSUh0Y2JseDBYSFJjZEc5MWRIQjFkQzV3ZFhOb0tHUmxiR2x0YVhSbGNpazdYRzVjZEZ4MGZWeHVYRzVjZEZ4MEx5OGdUV0ZwYmlCbGJtTnZaR2x1WnlCc2IyOXdPbHh1WEhSY2RIZG9hV3hsSUNob1lXNWtiR1ZrUTFCRGIzVnVkQ0E4SUdsdWNIVjBUR1Z1WjNSb0tTQjdYRzVjYmx4MFhIUmNkQzh2SUVGc2JDQnViMjR0WW1GemFXTWdZMjlrWlNCd2IybHVkSE1nUENCdUlHaGhkbVVnWW1WbGJpQm9ZVzVrYkdWa0lHRnNjbVZoWkhrdUlFWnBibVFnZEdobElHNWxlSFJjYmx4MFhIUmNkQzh2SUd4aGNtZGxjaUJ2Ym1VNlhHNWNkRngwWEhSbWIzSWdLRzBnUFNCdFlYaEpiblFzSUdvZ1BTQXdPeUJxSUR3Z2FXNXdkWFJNWlc1bmRHZzdJQ3NyYWlrZ2UxeHVYSFJjZEZ4MFhIUmpkWEp5Wlc1MFZtRnNkV1VnUFNCcGJuQjFkRnRxWFR0Y2JseDBYSFJjZEZ4MGFXWWdLR04xY25KbGJuUldZV3gxWlNBK1BTQnVJQ1ltSUdOMWNuSmxiblJXWVd4MVpTQThJRzBwSUh0Y2JseDBYSFJjZEZ4MFhIUnRJRDBnWTNWeWNtVnVkRlpoYkhWbE8xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkQzh2SUVsdVkzSmxZWE5sSUdCa1pXeDBZV0FnWlc1dmRXZG9JSFJ2SUdGa2RtRnVZMlVnZEdobElHUmxZMjlrWlhJbmN5QThiaXhwUGlCemRHRjBaU0IwYnlBOGJTd3dQaXhjYmx4MFhIUmNkQzh2SUdKMWRDQm5kV0Z5WkNCaFoyRnBibk4wSUc5MlpYSm1iRzkzWEc1Y2RGeDBYSFJvWVc1a2JHVmtRMUJEYjNWdWRGQnNkWE5QYm1VZ1BTQm9ZVzVrYkdWa1ExQkRiM1Z1ZENBcklERTdYRzVjZEZ4MFhIUnBaaUFvYlNBdElHNGdQaUJtYkc5dmNpZ29iV0Y0U1c1MElDMGdaR1ZzZEdFcElDOGdhR0Z1Wkd4bFpFTlFRMjkxYm5SUWJIVnpUMjVsS1NrZ2UxeHVYSFJjZEZ4MFhIUmxjbkp2Y2lnbmIzWmxjbVpzYjNjbktUdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBaR1ZzZEdFZ0t6MGdLRzBnTFNCdUtTQXFJR2hoYm1Sc1pXUkRVRU52ZFc1MFVHeDFjMDl1WlR0Y2JseDBYSFJjZEc0Z1BTQnRPMXh1WEc1Y2RGeDBYSFJtYjNJZ0tHb2dQU0F3T3lCcUlEd2dhVzV3ZFhSTVpXNW5kR2c3SUNzcmFpa2dlMXh1WEhSY2RGeDBYSFJqZFhKeVpXNTBWbUZzZFdVZ1BTQnBibkIxZEZ0cVhUdGNibHh1WEhSY2RGeDBYSFJwWmlBb1kzVnljbVZ1ZEZaaGJIVmxJRHdnYmlBbUppQXJLMlJsYkhSaElENGdiV0Y0U1c1MEtTQjdYRzVjZEZ4MFhIUmNkRngwWlhKeWIzSW9KMjkyWlhKbWJHOTNKeWs3WEc1Y2RGeDBYSFJjZEgxY2JseHVYSFJjZEZ4MFhIUnBaaUFvWTNWeWNtVnVkRlpoYkhWbElEMDlJRzRwSUh0Y2JseDBYSFJjZEZ4MFhIUXZMeUJTWlhCeVpYTmxiblFnWkdWc2RHRWdZWE1nWVNCblpXNWxjbUZzYVhwbFpDQjJZWEpwWVdKc1pTMXNaVzVuZEdnZ2FXNTBaV2RsY2x4dVhIUmNkRngwWEhSY2RHWnZjaUFvY1NBOUlHUmxiSFJoTENCcklEMGdZbUZ6WlRzZ0x5b2dibThnWTI5dVpHbDBhVzl1SUNvdk95QnJJQ3M5SUdKaGMyVXBJSHRjYmx4MFhIUmNkRngwWEhSY2RIUWdQU0JySUR3OUlHSnBZWE1nUHlCMFRXbHVJRG9nS0dzZ1BqMGdZbWxoY3lBcklIUk5ZWGdnUHlCMFRXRjRJRG9nYXlBdElHSnBZWE1wTzF4dVhIUmNkRngwWEhSY2RGeDBhV1lnS0hFZ1BDQjBLU0I3WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkR0p5WldGck8xeHVYSFJjZEZ4MFhIUmNkRngwZlZ4dVhIUmNkRngwWEhSY2RGeDBjVTFwYm5WelZDQTlJSEVnTFNCME8xeHVYSFJjZEZ4MFhIUmNkRngwWW1GelpVMXBiblZ6VkNBOUlHSmhjMlVnTFNCME8xeHVYSFJjZEZ4MFhIUmNkRngwYjNWMGNIVjBMbkIxYzJnb1hHNWNkRngwWEhSY2RGeDBYSFJjZEhOMGNtbHVaMFp5YjIxRGFHRnlRMjlrWlNoa2FXZHBkRlJ2UW1GemFXTW9kQ0FySUhGTmFXNTFjMVFnSlNCaVlYTmxUV2x1ZFhOVUxDQXdLU2xjYmx4MFhIUmNkRngwWEhSY2RDazdYRzVjZEZ4MFhIUmNkRngwWEhSeElEMGdabXh2YjNJb2NVMXBiblZ6VkNBdklHSmhjMlZOYVc1MWMxUXBPMXh1WEhSY2RGeDBYSFJjZEgxY2JseHVYSFJjZEZ4MFhIUmNkRzkxZEhCMWRDNXdkWE5vS0hOMGNtbHVaMFp5YjIxRGFHRnlRMjlrWlNoa2FXZHBkRlJ2UW1GemFXTW9jU3dnTUNrcEtUdGNibHgwWEhSY2RGeDBYSFJpYVdGeklEMGdZV1JoY0hRb1pHVnNkR0VzSUdoaGJtUnNaV1JEVUVOdmRXNTBVR3gxYzA5dVpTd2dhR0Z1Wkd4bFpFTlFRMjkxYm5RZ1BUMGdZbUZ6YVdOTVpXNW5kR2dwTzF4dVhIUmNkRngwWEhSY2RHUmxiSFJoSUQwZ01EdGNibHgwWEhSY2RGeDBYSFFySzJoaGJtUnNaV1JEVUVOdmRXNTBPMXh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZENzclpHVnNkR0U3WEc1Y2RGeDBYSFFySzI0N1hHNWNibHgwWEhSOVhHNWNkRngwY21WMGRYSnVJRzkxZEhCMWRDNXFiMmx1S0NjbktUdGNibHgwZlZ4dVhHNWNkQzhxS2x4dVhIUWdLaUJEYjI1MlpYSjBjeUJoSUZCMWJubGpiMlJsSUhOMGNtbHVaeUJ5WlhCeVpYTmxiblJwYm1jZ1lTQmtiMjFoYVc0Z2JtRnRaU0IwYnlCVmJtbGpiMlJsTGlCUGJteDVJSFJvWlZ4dVhIUWdLaUJRZFc1NVkyOWtaV1FnY0dGeWRITWdiMllnZEdobElHUnZiV0ZwYmlCdVlXMWxJSGRwYkd3Z1ltVWdZMjl1ZG1WeWRHVmtMQ0JwTG1VdUlHbDBJR1J2WlhOdUozUmNibHgwSUNvZ2JXRjBkR1Z5SUdsbUlIbHZkU0JqWVd4c0lHbDBJRzl1SUdFZ2MzUnlhVzVuSUhSb1lYUWdhR0Z6SUdGc2NtVmhaSGtnWW1WbGJpQmpiMjUyWlhKMFpXUWdkRzljYmx4MElDb2dWVzVwWTI5a1pTNWNibHgwSUNvZ1FHMWxiV0psY2s5bUlIQjFibmxqYjJSbFhHNWNkQ0FxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0JrYjIxaGFXNGdWR2hsSUZCMWJubGpiMlJsSUdSdmJXRnBiaUJ1WVcxbElIUnZJR052Ym5abGNuUWdkRzhnVlc1cFkyOWtaUzVjYmx4MElDb2dRSEpsZEhWeWJuTWdlMU4wY21sdVozMGdWR2hsSUZWdWFXTnZaR1VnY21Wd2NtVnpaVzUwWVhScGIyNGdiMllnZEdobElHZHBkbVZ1SUZCMWJubGpiMlJsWEc1Y2RDQXFJSE4wY21sdVp5NWNibHgwSUNvdlhHNWNkR1oxYm1OMGFXOXVJSFJ2Vlc1cFkyOWtaU2hrYjIxaGFXNHBJSHRjYmx4MFhIUnlaWFIxY200Z2JXRndSRzl0WVdsdUtHUnZiV0ZwYml3Z1puVnVZM1JwYjI0b2MzUnlhVzVuS1NCN1hHNWNkRngwWEhSeVpYUjFjbTRnY21WblpYaFFkVzU1WTI5a1pTNTBaWE4wS0hOMGNtbHVaeWxjYmx4MFhIUmNkRngwUHlCa1pXTnZaR1VvYzNSeWFXNW5Mbk5zYVdObEtEUXBMblJ2VEc5M1pYSkRZWE5sS0NrcFhHNWNkRngwWEhSY2REb2djM1J5YVc1bk8xeHVYSFJjZEgwcE8xeHVYSFI5WEc1Y2JseDBMeW9xWEc1Y2RDQXFJRU52Ym5abGNuUnpJR0VnVlc1cFkyOWtaU0J6ZEhKcGJtY2djbVZ3Y21WelpXNTBhVzVuSUdFZ1pHOXRZV2x1SUc1aGJXVWdkRzhnVUhWdWVXTnZaR1V1SUU5dWJIa2dkR2hsWEc1Y2RDQXFJRzV2YmkxQlUwTkpTU0J3WVhKMGN5QnZaaUIwYUdVZ1pHOXRZV2x1SUc1aGJXVWdkMmxzYkNCaVpTQmpiMjUyWlhKMFpXUXNJR2t1WlM0Z2FYUWdaRzlsYzI0bmRGeHVYSFFnS2lCdFlYUjBaWElnYVdZZ2VXOTFJR05oYkd3Z2FYUWdkMmwwYUNCaElHUnZiV0ZwYmlCMGFHRjBKM01nWVd4eVpXRmtlU0JwYmlCQlUwTkpTUzVjYmx4MElDb2dRRzFsYldKbGNrOW1JSEIxYm5samIyUmxYRzVjZENBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCa2IyMWhhVzRnVkdobElHUnZiV0ZwYmlCdVlXMWxJSFJ2SUdOdmJuWmxjblFzSUdGeklHRWdWVzVwWTI5a1pTQnpkSEpwYm1jdVhHNWNkQ0FxSUVCeVpYUjFjbTV6SUh0VGRISnBibWQ5SUZSb1pTQlFkVzU1WTI5a1pTQnlaWEJ5WlhObGJuUmhkR2x2YmlCdlppQjBhR1VnWjJsMlpXNGdaRzl0WVdsdUlHNWhiV1V1WEc1Y2RDQXFMMXh1WEhSbWRXNWpkR2x2YmlCMGIwRlRRMGxKS0dSdmJXRnBiaWtnZTF4dVhIUmNkSEpsZEhWeWJpQnRZWEJFYjIxaGFXNG9aRzl0WVdsdUxDQm1kVzVqZEdsdmJpaHpkSEpwYm1jcElIdGNibHgwWEhSY2RISmxkSFZ5YmlCeVpXZGxlRTV2YmtGVFEwbEpMblJsYzNRb2MzUnlhVzVuS1Z4dVhIUmNkRngwWEhRL0lDZDRiaTB0SnlBcklHVnVZMjlrWlNoemRISnBibWNwWEc1Y2RGeDBYSFJjZERvZ2MzUnlhVzVuTzF4dVhIUmNkSDBwTzF4dVhIUjlYRzVjYmx4MEx5b3RMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMU292WEc1Y2JseDBMeW9xSUVSbFptbHVaU0IwYUdVZ2NIVmliR2xqSUVGUVNTQXFMMXh1WEhSd2RXNTVZMjlrWlNBOUlIdGNibHgwWEhRdktpcGNibHgwWEhRZ0tpQkJJSE4wY21sdVp5QnlaWEJ5WlhObGJuUnBibWNnZEdobElHTjFjbkpsYm5RZ1VIVnVlV052WkdVdWFuTWdkbVZ5YzJsdmJpQnVkVzFpWlhJdVhHNWNkRngwSUNvZ1FHMWxiV0psY2s5bUlIQjFibmxqYjJSbFhHNWNkRngwSUNvZ1FIUjVjR1VnVTNSeWFXNW5YRzVjZEZ4MElDb3ZYRzVjZEZ4MEozWmxjbk5wYjI0bk9pQW5NUzR5TGpRbkxGeHVYSFJjZEM4cUtseHVYSFJjZENBcUlFRnVJRzlpYW1WamRDQnZaaUJ0WlhSb2IyUnpJSFJ2SUdOdmJuWmxjblFnWm5KdmJTQktZWFpoVTJOeWFYQjBKM01nYVc1MFpYSnVZV3dnWTJoaGNtRmpkR1Z5WEc1Y2RGeDBJQ29nY21Wd2NtVnpaVzUwWVhScGIyNGdLRlZEVXkweUtTQjBieUJWYm1samIyUmxJR052WkdVZ2NHOXBiblJ6TENCaGJtUWdZbUZqYXk1Y2JseDBYSFFnS2lCQWMyVmxJRHhvZEhSd09pOHZiV0YwYUdsaGMySjVibVZ1Y3k1aVpTOXViM1JsY3k5cVlYWmhjMk55YVhCMExXVnVZMjlrYVc1blBseHVYSFJjZENBcUlFQnRaVzFpWlhKUFppQndkVzU1WTI5a1pWeHVYSFJjZENBcUlFQjBlWEJsSUU5aWFtVmpkRnh1WEhSY2RDQXFMMXh1WEhSY2RDZDFZM015SnpvZ2UxeHVYSFJjZEZ4MEoyUmxZMjlrWlNjNklIVmpjekprWldOdlpHVXNYRzVjZEZ4MFhIUW5aVzVqYjJSbEp6b2dkV056TW1WdVkyOWtaVnh1WEhSY2RIMHNYRzVjZEZ4MEoyUmxZMjlrWlNjNklHUmxZMjlrWlN4Y2JseDBYSFFuWlc1amIyUmxKem9nWlc1amIyUmxMRnh1WEhSY2RDZDBiMEZUUTBsSkp6b2dkRzlCVTBOSlNTeGNibHgwWEhRbmRHOVZibWxqYjJSbEp6b2dkRzlWYm1samIyUmxYRzVjZEgwN1hHNWNibHgwTHlvcUlFVjRjRzl6WlNCZ2NIVnVlV052WkdWZ0lDb3ZYRzVjZEM4dklGTnZiV1VnUVUxRUlHSjFhV3hrSUc5d2RHbHRhWHBsY25Nc0lHeHBhMlVnY2k1cWN5d2dZMmhsWTJzZ1ptOXlJSE53WldOcFptbGpJR052Ym1ScGRHbHZiaUJ3WVhSMFpYSnVjMXh1WEhRdkx5QnNhV3RsSUhSb1pTQm1iMnhzYjNkcGJtYzZYRzVjZEdsbUlDaGNibHgwWEhSMGVYQmxiMllnWkdWbWFXNWxJRDA5SUNkbWRXNWpkR2x2YmljZ0ppWmNibHgwWEhSMGVYQmxiMllnWkdWbWFXNWxMbUZ0WkNBOVBTQW5iMkpxWldOMEp5QW1KbHh1WEhSY2RHUmxabWx1WlM1aGJXUmNibHgwS1NCN1hHNWNkRngwWkdWbWFXNWxLQ2R3ZFc1NVkyOWtaU2NzSUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEZ4MGNtVjBkWEp1SUhCMWJubGpiMlJsTzF4dVhIUmNkSDBwTzF4dVhIUjlJR1ZzYzJVZ2FXWWdLR1p5WldWRmVIQnZjblJ6SUNZbUlDRm1jbVZsUlhod2IzSjBjeTV1YjJSbFZIbHdaU2tnZTF4dVhIUmNkR2xtSUNobWNtVmxUVzlrZFd4bEtTQjdJQzh2SUdsdUlFNXZaR1V1YW5NZ2IzSWdVbWx1WjI5S1V5QjJNQzQ0TGpBclhHNWNkRngwWEhSbWNtVmxUVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQndkVzU1WTI5a1pUdGNibHgwWEhSOUlHVnNjMlVnZXlBdkx5QnBiaUJPWVhKM2FHRnNJRzl5SUZKcGJtZHZTbE1nZGpBdU55NHdMVnh1WEhSY2RGeDBabTl5SUNoclpYa2dhVzRnY0hWdWVXTnZaR1VwSUh0Y2JseDBYSFJjZEZ4MGNIVnVlV052WkdVdWFHRnpUM2R1VUhKdmNHVnlkSGtvYTJWNUtTQW1KaUFvWm5KbFpVVjRjRzl5ZEhOYmEyVjVYU0E5SUhCMWJubGpiMlJsVzJ0bGVWMHBPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMWNibHgwZlNCbGJITmxJSHNnTHk4Z2FXNGdVbWhwYm04Z2IzSWdZU0IzWldJZ1luSnZkM05sY2x4dVhIUmNkSEp2YjNRdWNIVnVlV052WkdVZ1BTQndkVzU1WTI5a1pUdGNibHgwZlZ4dVhHNTlLSFJvYVhNcEtUdGNiaUpkZlE9PSIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8vIElmIG9iai5oYXNPd25Qcm9wZXJ0eSBoYXMgYmVlbiBvdmVycmlkZGVuLCB0aGVuIGNhbGxpbmdcbi8vIG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wKSB3aWxsIGJyZWFrLlxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vam95ZW50L25vZGUvaXNzdWVzLzE3MDdcbmZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwgcHJvcCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ocXMsIHNlcCwgZXEsIG9wdGlvbnMpIHtcbiAgc2VwID0gc2VwIHx8ICcmJztcbiAgZXEgPSBlcSB8fCAnPSc7XG4gIHZhciBvYmogPSB7fTtcblxuICBpZiAodHlwZW9mIHFzICE9PSAnc3RyaW5nJyB8fCBxcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IC9cXCsvZztcbiAgcXMgPSBxcy5zcGxpdChzZXApO1xuXG4gIHZhciBtYXhLZXlzID0gMTAwMDtcbiAgaWYgKG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMubWF4S2V5cyA9PT0gJ251bWJlcicpIHtcbiAgICBtYXhLZXlzID0gb3B0aW9ucy5tYXhLZXlzO1xuICB9XG5cbiAgdmFyIGxlbiA9IHFzLmxlbmd0aDtcbiAgLy8gbWF4S2V5cyA8PSAwIG1lYW5zIHRoYXQgd2Ugc2hvdWxkIG5vdCBsaW1pdCBrZXlzIGNvdW50XG4gIGlmIChtYXhLZXlzID4gMCAmJiBsZW4gPiBtYXhLZXlzKSB7XG4gICAgbGVuID0gbWF4S2V5cztcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICB2YXIgeCA9IHFzW2ldLnJlcGxhY2UocmVnZXhwLCAnJTIwJyksXG4gICAgICAgIGlkeCA9IHguaW5kZXhPZihlcSksXG4gICAgICAgIGtzdHIsIHZzdHIsIGssIHY7XG5cbiAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgIGtzdHIgPSB4LnN1YnN0cigwLCBpZHgpO1xuICAgICAgdnN0ciA9IHguc3Vic3RyKGlkeCArIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBrc3RyID0geDtcbiAgICAgIHZzdHIgPSAnJztcbiAgICB9XG5cbiAgICBrID0gZGVjb2RlVVJJQ29tcG9uZW50KGtzdHIpO1xuICAgIHYgPSBkZWNvZGVVUklDb21wb25lbnQodnN0cik7XG5cbiAgICBpZiAoIWhhc093blByb3BlcnR5KG9iaiwgaykpIHtcbiAgICAgIG9ialtrXSA9IHY7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KG9ialtrXSkpIHtcbiAgICAgIG9ialtrXS5wdXNoKHYpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvYmpba10gPSBbb2JqW2tdLCB2XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufTtcblxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uICh4cykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHhzKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgc3RyaW5naWZ5UHJpbWl0aXZlID0gZnVuY3Rpb24odikge1xuICBzd2l0Y2ggKHR5cGVvZiB2KSB7XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIHJldHVybiB2O1xuXG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICByZXR1cm4gdiA/ICd0cnVlJyA6ICdmYWxzZSc7XG5cbiAgICBjYXNlICdudW1iZXInOlxuICAgICAgcmV0dXJuIGlzRmluaXRlKHYpID8gdiA6ICcnO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAnJztcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmosIHNlcCwgZXEsIG5hbWUpIHtcbiAgc2VwID0gc2VwIHx8ICcmJztcbiAgZXEgPSBlcSB8fCAnPSc7XG4gIGlmIChvYmogPT09IG51bGwpIHtcbiAgICBvYmogPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gbWFwKG9iamVjdEtleXMob2JqKSwgZnVuY3Rpb24oaykge1xuICAgICAgdmFyIGtzID0gZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShrKSkgKyBlcTtcbiAgICAgIGlmIChpc0FycmF5KG9ialtrXSkpIHtcbiAgICAgICAgcmV0dXJuIG1hcChvYmpba10sIGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICByZXR1cm4ga3MgKyBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKHYpKTtcbiAgICAgICAgfSkuam9pbihzZXApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGtzICsgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShvYmpba10pKTtcbiAgICAgIH1cbiAgICB9KS5qb2luKHNlcCk7XG5cbiAgfVxuXG4gIGlmICghbmFtZSkgcmV0dXJuICcnO1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShuYW1lKSkgKyBlcSArXG4gICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKG9iaikpO1xufTtcblxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uICh4cykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHhzKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG5cbmZ1bmN0aW9uIG1hcCAoeHMsIGYpIHtcbiAgaWYgKHhzLm1hcCkgcmV0dXJuIHhzLm1hcChmKTtcbiAgdmFyIHJlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7XG4gICAgcmVzLnB1c2goZih4c1tpXSwgaSkpO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5cbnZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICB2YXIgcmVzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgcmVzLnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5kZWNvZGUgPSBleHBvcnRzLnBhcnNlID0gcmVxdWlyZSgnLi9kZWNvZGUnKTtcbmV4cG9ydHMuZW5jb2RlID0gZXhwb3J0cy5zdHJpbmdpZnkgPSByZXF1aXJlKCcuL2VuY29kZScpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9saWIvX3N0cmVhbV9kdXBsZXguanNcIilcbiIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gYSBkdXBsZXggc3RyZWFtIGlzIGp1c3QgYSBzdHJlYW0gdGhhdCBpcyBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZS5cbi8vIFNpbmNlIEpTIGRvZXNuJ3QgaGF2ZSBtdWx0aXBsZSBwcm90b3R5cGFsIGluaGVyaXRhbmNlLCB0aGlzIGNsYXNzXG4vLyBwcm90b3R5cGFsbHkgaW5oZXJpdHMgZnJvbSBSZWFkYWJsZSwgYW5kIHRoZW4gcGFyYXNpdGljYWxseSBmcm9tXG4vLyBXcml0YWJsZS5cblxubW9kdWxlLmV4cG9ydHMgPSBEdXBsZXg7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikga2V5cy5wdXNoKGtleSk7XG4gIHJldHVybiBrZXlzO1xufVxuLyo8L3JlcGxhY2VtZW50PiovXG5cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJyk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgUmVhZGFibGUgPSByZXF1aXJlKCcuL19zdHJlYW1fcmVhZGFibGUnKTtcbnZhciBXcml0YWJsZSA9IHJlcXVpcmUoJy4vX3N0cmVhbV93cml0YWJsZScpO1xuXG51dGlsLmluaGVyaXRzKER1cGxleCwgUmVhZGFibGUpO1xuXG5mb3JFYWNoKG9iamVjdEtleXMoV3JpdGFibGUucHJvdG90eXBlKSwgZnVuY3Rpb24obWV0aG9kKSB7XG4gIGlmICghRHVwbGV4LnByb3RvdHlwZVttZXRob2RdKVxuICAgIER1cGxleC5wcm90b3R5cGVbbWV0aG9kXSA9IFdyaXRhYmxlLnByb3RvdHlwZVttZXRob2RdO1xufSk7XG5cbmZ1bmN0aW9uIER1cGxleChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBEdXBsZXgpKVxuICAgIHJldHVybiBuZXcgRHVwbGV4KG9wdGlvbnMpO1xuXG4gIFJlYWRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gIFdyaXRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5yZWFkYWJsZSA9PT0gZmFsc2UpXG4gICAgdGhpcy5yZWFkYWJsZSA9IGZhbHNlO1xuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMud3JpdGFibGUgPT09IGZhbHNlKVxuICAgIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcblxuICB0aGlzLmFsbG93SGFsZk9wZW4gPSB0cnVlO1xuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmFsbG93SGFsZk9wZW4gPT09IGZhbHNlKVxuICAgIHRoaXMuYWxsb3dIYWxmT3BlbiA9IGZhbHNlO1xuXG4gIHRoaXMub25jZSgnZW5kJywgb25lbmQpO1xufVxuXG4vLyB0aGUgbm8taGFsZi1vcGVuIGVuZm9yY2VyXG5mdW5jdGlvbiBvbmVuZCgpIHtcbiAgLy8gaWYgd2UgYWxsb3cgaGFsZi1vcGVuIHN0YXRlLCBvciBpZiB0aGUgd3JpdGFibGUgc2lkZSBlbmRlZCxcbiAgLy8gdGhlbiB3ZSdyZSBvay5cbiAgaWYgKHRoaXMuYWxsb3dIYWxmT3BlbiB8fCB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkKVxuICAgIHJldHVybjtcblxuICAvLyBubyBtb3JlIGRhdGEgY2FuIGJlIHdyaXR0ZW4uXG4gIC8vIEJ1dCBhbGxvdyBtb3JlIHdyaXRlcyB0byBoYXBwZW4gaW4gdGhpcyB0aWNrLlxuICBwcm9jZXNzLm5leHRUaWNrKHRoaXMuZW5kLmJpbmQodGhpcykpO1xufVxuXG5mdW5jdGlvbiBmb3JFYWNoICh4cywgZikge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHhzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGYoeHNbaV0sIGkpO1xuICB9XG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmtZV0pzWlMxemRISmxZVzB2YkdsaUwxOXpkSEpsWVcxZlpIVndiR1Y0TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaTh2SUVOdmNIbHlhV2RvZENCS2IzbGxiblFzSUVsdVl5NGdZVzVrSUc5MGFHVnlJRTV2WkdVZ1kyOXVkSEpwWW5WMGIzSnpMbHh1THk5Y2JpOHZJRkJsY20xcGMzTnBiMjRnYVhNZ2FHVnlaV0o1SUdkeVlXNTBaV1FzSUdaeVpXVWdiMllnWTJoaGNtZGxMQ0IwYnlCaGJua2djR1Z5YzI5dUlHOWlkR0ZwYm1sdVp5QmhYRzR2THlCamIzQjVJRzltSUhSb2FYTWdjMjltZEhkaGNtVWdZVzVrSUdGemMyOWphV0YwWldRZ1pHOWpkVzFsYm5SaGRHbHZiaUJtYVd4bGN5QW9kR2hsWEc0dkx5QmNJbE52Wm5SM1lYSmxYQ0lwTENCMGJ5QmtaV0ZzSUdsdUlIUm9aU0JUYjJaMGQyRnlaU0IzYVhSb2IzVjBJSEpsYzNSeWFXTjBhVzl1TENCcGJtTnNkV1JwYm1kY2JpOHZJSGRwZEdodmRYUWdiR2x0YVhSaGRHbHZiaUIwYUdVZ2NtbG5hSFJ6SUhSdklIVnpaU3dnWTI5d2VTd2diVzlrYVdaNUxDQnRaWEpuWlN3Z2NIVmliR2x6YUN4Y2JpOHZJR1JwYzNSeWFXSjFkR1VzSUhOMVlteHBZMlZ1YzJVc0lHRnVaQzl2Y2lCelpXeHNJR052Y0dsbGN5QnZaaUIwYUdVZ1UyOW1kSGRoY21Vc0lHRnVaQ0IwYnlCd1pYSnRhWFJjYmk4dklIQmxjbk52Ym5NZ2RHOGdkMmh2YlNCMGFHVWdVMjltZEhkaGNtVWdhWE1nWm5WeWJtbHphR1ZrSUhSdklHUnZJSE52TENCemRXSnFaV04wSUhSdklIUm9aVnh1THk4Z1ptOXNiRzkzYVc1bklHTnZibVJwZEdsdmJuTTZYRzR2TDF4dUx5OGdWR2hsSUdGaWIzWmxJR052Y0hseWFXZG9kQ0J1YjNScFkyVWdZVzVrSUhSb2FYTWdjR1Z5YldsemMybHZiaUJ1YjNScFkyVWdjMmhoYkd3Z1ltVWdhVzVqYkhWa1pXUmNiaTh2SUdsdUlHRnNiQ0JqYjNCcFpYTWdiM0lnYzNWaWMzUmhiblJwWVd3Z2NHOXlkR2x2Ym5NZ2IyWWdkR2hsSUZOdlpuUjNZWEpsTGx4dUx5OWNiaTh2SUZSSVJTQlRUMFpVVjBGU1JTQkpVeUJRVWs5V1NVUkZSQ0JjSWtGVElFbFRYQ0lzSUZkSlZFaFBWVlFnVjBGU1VrRk9WRmtnVDBZZ1FVNVpJRXRKVGtRc0lFVllVRkpGVTFOY2JpOHZJRTlTSUVsTlVFeEpSVVFzSUVsT1EweFZSRWxPUnlCQ1ZWUWdUazlVSUV4SlRVbFVSVVFnVkU4Z1ZFaEZJRmRCVWxKQlRsUkpSVk1nVDBaY2JpOHZJRTFGVWtOSVFVNVVRVUpKVEVsVVdTd2dSa2xVVGtWVFV5QkdUMUlnUVNCUVFWSlVTVU5WVEVGU0lGQlZVbEJQVTBVZ1FVNUVJRTVQVGtsT1JsSkpUa2RGVFVWT1ZDNGdTVTVjYmk4dklFNVBJRVZXUlU1VUlGTklRVXhNSUZSSVJTQkJWVlJJVDFKVElFOVNJRU5QVUZsU1NVZElWQ0JJVDB4RVJWSlRJRUpGSUV4SlFVSk1SU0JHVDFJZ1FVNVpJRU5NUVVsTkxGeHVMeThnUkVGTlFVZEZVeUJQVWlCUFZFaEZVaUJNU1VGQ1NVeEpWRmtzSUZkSVJWUklSVklnU1U0Z1FVNGdRVU5VU1U5T0lFOUdJRU5QVGxSU1FVTlVMQ0JVVDFKVUlFOVNYRzR2THlCUFZFaEZVbGRKVTBVc0lFRlNTVk5KVGtjZ1JsSlBUU3dnVDFWVUlFOUdJRTlTSUVsT0lFTlBUazVGUTFSSlQwNGdWMGxVU0NCVVNFVWdVMDlHVkZkQlVrVWdUMUlnVkVoRlhHNHZMeUJWVTBVZ1QxSWdUMVJJUlZJZ1JFVkJURWxPUjFNZ1NVNGdWRWhGSUZOUFJsUlhRVkpGTGx4dVhHNHZMeUJoSUdSMWNHeGxlQ0J6ZEhKbFlXMGdhWE1nYW5WemRDQmhJSE4wY21WaGJTQjBhR0YwSUdseklHSnZkR2dnY21WaFpHRmliR1VnWVc1a0lIZHlhWFJoWW14bExseHVMeThnVTJsdVkyVWdTbE1nWkc5bGMyNG5kQ0JvWVhabElHMTFiSFJwY0d4bElIQnliM1J2ZEhsd1lXd2dhVzVvWlhKcGRHRnVZMlVzSUhSb2FYTWdZMnhoYzNOY2JpOHZJSEJ5YjNSdmRIbHdZV3hzZVNCcGJtaGxjbWwwY3lCbWNtOXRJRkpsWVdSaFlteGxMQ0JoYm1RZ2RHaGxiaUJ3WVhKaGMybDBhV05oYkd4NUlHWnliMjFjYmk4dklGZHlhWFJoWW14bExseHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRVIxY0d4bGVEdGNibHh1THlvOGNtVndiR0ZqWlcxbGJuUStLaTljYm5aaGNpQnZZbXBsWTNSTFpYbHpJRDBnVDJKcVpXTjBMbXRsZVhNZ2ZId2dablZ1WTNScGIyNGdLRzlpYWlrZ2UxeHVJQ0IyWVhJZ2EyVjVjeUE5SUZ0ZE8xeHVJQ0JtYjNJZ0tIWmhjaUJyWlhrZ2FXNGdiMkpxS1NCclpYbHpMbkIxYzJnb2EyVjVLVHRjYmlBZ2NtVjBkWEp1SUd0bGVYTTdYRzU5WEc0dktqd3ZjbVZ3YkdGalpXMWxiblErS2k5Y2JseHVYRzR2S2p4eVpYQnNZV05sYldWdWRENHFMMXh1ZG1GeUlIVjBhV3dnUFNCeVpYRjFhWEpsS0NkamIzSmxMWFYwYVd3dGFYTW5LVHRjYm5WMGFXd3VhVzVvWlhKcGRITWdQU0J5WlhGMWFYSmxLQ2RwYm1obGNtbDBjeWNwTzF4dUx5bzhMM0psY0d4aFkyVnRaVzUwUGlvdlhHNWNiblpoY2lCU1pXRmtZV0pzWlNBOUlISmxjWFZwY21Vb0p5NHZYM04wY21WaGJWOXlaV0ZrWVdKc1pTY3BPMXh1ZG1GeUlGZHlhWFJoWW14bElEMGdjbVZ4ZFdseVpTZ25MaTlmYzNSeVpXRnRYM2R5YVhSaFlteGxKeWs3WEc1Y2JuVjBhV3d1YVc1b1pYSnBkSE1vUkhWd2JHVjRMQ0JTWldGa1lXSnNaU2s3WEc1Y2JtWnZja1ZoWTJnb2IySnFaV04wUzJWNWN5aFhjbWwwWVdKc1pTNXdjbTkwYjNSNWNHVXBMQ0JtZFc1amRHbHZiaWh0WlhSb2IyUXBJSHRjYmlBZ2FXWWdLQ0ZFZFhCc1pYZ3VjSEp2ZEc5MGVYQmxXMjFsZEdodlpGMHBYRzRnSUNBZ1JIVndiR1Y0TG5CeWIzUnZkSGx3WlZ0dFpYUm9iMlJkSUQwZ1YzSnBkR0ZpYkdVdWNISnZkRzkwZVhCbFcyMWxkR2h2WkYwN1hHNTlLVHRjYmx4dVpuVnVZM1JwYjI0Z1JIVndiR1Y0S0c5d2RHbHZibk1wSUh0Y2JpQWdhV1lnS0NFb2RHaHBjeUJwYm5OMFlXNWpaVzltSUVSMWNHeGxlQ2twWEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJFZFhCc1pYZ29iM0IwYVc5dWN5azdYRzVjYmlBZ1VtVmhaR0ZpYkdVdVkyRnNiQ2gwYUdsekxDQnZjSFJwYjI1ektUdGNiaUFnVjNKcGRHRmliR1V1WTJGc2JDaDBhR2x6TENCdmNIUnBiMjV6S1R0Y2JseHVJQ0JwWmlBb2IzQjBhVzl1Y3lBbUppQnZjSFJwYjI1ekxuSmxZV1JoWW14bElEMDlQU0JtWVd4elpTbGNiaUFnSUNCMGFHbHpMbkpsWVdSaFlteGxJRDBnWm1Gc2MyVTdYRzVjYmlBZ2FXWWdLRzl3ZEdsdmJuTWdKaVlnYjNCMGFXOXVjeTUzY21sMFlXSnNaU0E5UFQwZ1ptRnNjMlVwWEc0Z0lDQWdkR2hwY3k1M2NtbDBZV0pzWlNBOUlHWmhiSE5sTzF4dVhHNGdJSFJvYVhNdVlXeHNiM2RJWVd4bVQzQmxiaUE5SUhSeWRXVTdYRzRnSUdsbUlDaHZjSFJwYjI1eklDWW1JRzl3ZEdsdmJuTXVZV3hzYjNkSVlXeG1UM0JsYmlBOVBUMGdabUZzYzJVcFhHNGdJQ0FnZEdocGN5NWhiR3h2ZDBoaGJHWlBjR1Z1SUQwZ1ptRnNjMlU3WEc1Y2JpQWdkR2hwY3k1dmJtTmxLQ2RsYm1RbkxDQnZibVZ1WkNrN1hHNTlYRzVjYmk4dklIUm9aU0J1Ynkxb1lXeG1MVzl3Wlc0Z1pXNW1iM0pqWlhKY2JtWjFibU4wYVc5dUlHOXVaVzVrS0NrZ2UxeHVJQ0F2THlCcFppQjNaU0JoYkd4dmR5Qm9ZV3htTFc5d1pXNGdjM1JoZEdVc0lHOXlJR2xtSUhSb1pTQjNjbWwwWVdKc1pTQnphV1JsSUdWdVpHVmtMRnh1SUNBdkx5QjBhR1Z1SUhkbEozSmxJRzlyTGx4dUlDQnBaaUFvZEdocGN5NWhiR3h2ZDBoaGJHWlBjR1Z1SUh4OElIUm9hWE11WDNkeWFYUmhZbXhsVTNSaGRHVXVaVzVrWldRcFhHNGdJQ0FnY21WMGRYSnVPMXh1WEc0Z0lDOHZJRzV2SUcxdmNtVWdaR0YwWVNCallXNGdZbVVnZDNKcGRIUmxiaTVjYmlBZ0x5OGdRblYwSUdGc2JHOTNJRzF2Y21VZ2QzSnBkR1Z6SUhSdklHaGhjSEJsYmlCcGJpQjBhR2x6SUhScFkyc3VYRzRnSUhCeWIyTmxjM011Ym1WNGRGUnBZMnNvZEdocGN5NWxibVF1WW1sdVpDaDBhR2x6S1NrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUdadmNrVmhZMmdnS0hoekxDQm1LU0I3WEc0Z0lHWnZjaUFvZG1GeUlHa2dQU0F3TENCc0lEMGdlSE11YkdWdVozUm9PeUJwSUR3Z2JEc2dhU3NyS1NCN1hHNGdJQ0FnWmloNGMxdHBYU3dnYVNrN1hHNGdJSDFjYm4xY2JpSmRmUT09IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgcGFzc3Rocm91Z2ggc3RyZWFtLlxuLy8gYmFzaWNhbGx5IGp1c3QgdGhlIG1vc3QgbWluaW1hbCBzb3J0IG9mIFRyYW5zZm9ybSBzdHJlYW0uXG4vLyBFdmVyeSB3cml0dGVuIGNodW5rIGdldHMgb3V0cHV0IGFzLWlzLlxuXG5tb2R1bGUuZXhwb3J0cyA9IFBhc3NUaHJvdWdoO1xuXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnLi9fc3RyZWFtX3RyYW5zZm9ybScpO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnV0aWwuaW5oZXJpdHMoUGFzc1Rocm91Z2gsIFRyYW5zZm9ybSk7XG5cbmZ1bmN0aW9uIFBhc3NUaHJvdWdoKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFBhc3NUaHJvdWdoKSlcbiAgICByZXR1cm4gbmV3IFBhc3NUaHJvdWdoKG9wdGlvbnMpO1xuXG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5QYXNzVGhyb3VnaC5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgY2IobnVsbCwgY2h1bmspO1xufTtcbiIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxubW9kdWxlLmV4cG9ydHMgPSBSZWFkYWJsZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuUmVhZGFibGUuUmVhZGFibGVTdGF0ZSA9IFJlYWRhYmxlU3RhdGU7XG5cbnZhciBFRSA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbmlmICghRUUubGlzdGVuZXJDb3VudCkgRUUubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJzKHR5cGUpLmxlbmd0aDtcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIFN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBTdHJpbmdEZWNvZGVyO1xuXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgZGVidWcgPSByZXF1aXJlKCd1dGlsJyk7XG5pZiAoZGVidWcgJiYgZGVidWcuZGVidWdsb2cpIHtcbiAgZGVidWcgPSBkZWJ1Zy5kZWJ1Z2xvZygnc3RyZWFtJyk7XG59IGVsc2Uge1xuICBkZWJ1ZyA9IGZ1bmN0aW9uICgpIHt9O1xufVxuLyo8L3JlcGxhY2VtZW50PiovXG5cblxudXRpbC5pbmhlcml0cyhSZWFkYWJsZSwgU3RyZWFtKTtcblxuZnVuY3Rpb24gUmVhZGFibGVTdGF0ZShvcHRpb25zLCBzdHJlYW0pIHtcbiAgdmFyIER1cGxleCA9IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyB0aGUgcG9pbnQgYXQgd2hpY2ggaXQgc3RvcHMgY2FsbGluZyBfcmVhZCgpIHRvIGZpbGwgdGhlIGJ1ZmZlclxuICAvLyBOb3RlOiAwIGlzIGEgdmFsaWQgdmFsdWUsIG1lYW5zIFwiZG9uJ3QgY2FsbCBfcmVhZCBwcmVlbXB0aXZlbHkgZXZlclwiXG4gIHZhciBod20gPSBvcHRpb25zLmhpZ2hXYXRlck1hcms7XG4gIHZhciBkZWZhdWx0SHdtID0gb3B0aW9ucy5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7XG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IChod20gfHwgaHdtID09PSAwKSA/IGh3bSA6IGRlZmF1bHRId207XG5cbiAgLy8gY2FzdCB0byBpbnRzLlxuICB0aGlzLmhpZ2hXYXRlck1hcmsgPSB+fnRoaXMuaGlnaFdhdGVyTWFyaztcblxuICB0aGlzLmJ1ZmZlciA9IFtdO1xuICB0aGlzLmxlbmd0aCA9IDA7XG4gIHRoaXMucGlwZXMgPSBudWxsO1xuICB0aGlzLnBpcGVzQ291bnQgPSAwO1xuICB0aGlzLmZsb3dpbmcgPSBudWxsO1xuICB0aGlzLmVuZGVkID0gZmFsc2U7XG4gIHRoaXMuZW5kRW1pdHRlZCA9IGZhbHNlO1xuICB0aGlzLnJlYWRpbmcgPSBmYWxzZTtcblxuICAvLyBhIGZsYWcgdG8gYmUgYWJsZSB0byB0ZWxsIGlmIHRoZSBvbndyaXRlIGNiIGlzIGNhbGxlZCBpbW1lZGlhdGVseSxcbiAgLy8gb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZSBhbnlcbiAgLy8gYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xuICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3Qgd3JpdGUgY2FsbC5cbiAgdGhpcy5zeW5jID0gdHJ1ZTtcblxuICAvLyB3aGVuZXZlciB3ZSByZXR1cm4gbnVsbCwgdGhlbiB3ZSBzZXQgYSBmbGFnIHRvIHNheVxuICAvLyB0aGF0IHdlJ3JlIGF3YWl0aW5nIGEgJ3JlYWRhYmxlJyBldmVudCBlbWlzc2lvbi5cbiAgdGhpcy5uZWVkUmVhZGFibGUgPSBmYWxzZTtcbiAgdGhpcy5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcbiAgdGhpcy5yZWFkYWJsZUxpc3RlbmluZyA9IGZhbHNlO1xuXG5cbiAgLy8gb2JqZWN0IHN0cmVhbSBmbGFnLiBVc2VkIHRvIG1ha2UgcmVhZChuKSBpZ25vcmUgbiBhbmQgdG9cbiAgLy8gbWFrZSBhbGwgdGhlIGJ1ZmZlciBtZXJnaW5nIGFuZCBsZW5ndGggY2hlY2tzIGdvIGF3YXlcbiAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRpb25zLm9iamVjdE1vZGU7XG5cbiAgaWYgKHN0cmVhbSBpbnN0YW5jZW9mIER1cGxleClcbiAgICB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLnJlYWRhYmxlT2JqZWN0TW9kZTtcblxuICAvLyBDcnlwdG8gaXMga2luZCBvZiBvbGQgYW5kIGNydXN0eS4gIEhpc3RvcmljYWxseSwgaXRzIGRlZmF1bHQgc3RyaW5nXG4gIC8vIGVuY29kaW5nIGlzICdiaW5hcnknIHNvIHdlIGhhdmUgdG8gbWFrZSB0aGlzIGNvbmZpZ3VyYWJsZS5cbiAgLy8gRXZlcnl0aGluZyBlbHNlIGluIHRoZSB1bml2ZXJzZSB1c2VzICd1dGY4JywgdGhvdWdoLlxuICB0aGlzLmRlZmF1bHRFbmNvZGluZyA9IG9wdGlvbnMuZGVmYXVsdEVuY29kaW5nIHx8ICd1dGY4JztcblxuICAvLyB3aGVuIHBpcGluZywgd2Ugb25seSBjYXJlIGFib3V0ICdyZWFkYWJsZScgZXZlbnRzIHRoYXQgaGFwcGVuXG4gIC8vIGFmdGVyIHJlYWQoKWluZyBhbGwgdGhlIGJ5dGVzIGFuZCBub3QgZ2V0dGluZyBhbnkgcHVzaGJhY2suXG4gIHRoaXMucmFuT3V0ID0gZmFsc2U7XG5cbiAgLy8gdGhlIG51bWJlciBvZiB3cml0ZXJzIHRoYXQgYXJlIGF3YWl0aW5nIGEgZHJhaW4gZXZlbnQgaW4gLnBpcGUoKXNcbiAgdGhpcy5hd2FpdERyYWluID0gMDtcblxuICAvLyBpZiB0cnVlLCBhIG1heWJlUmVhZE1vcmUgaGFzIGJlZW4gc2NoZWR1bGVkXG4gIHRoaXMucmVhZGluZ01vcmUgPSBmYWxzZTtcblxuICB0aGlzLmRlY29kZXIgPSBudWxsO1xuICB0aGlzLmVuY29kaW5nID0gbnVsbDtcbiAgaWYgKG9wdGlvbnMuZW5jb2RpbmcpIHtcbiAgICBpZiAoIVN0cmluZ0RlY29kZXIpXG4gICAgICBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXIvJykuU3RyaW5nRGVjb2RlcjtcbiAgICB0aGlzLmRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihvcHRpb25zLmVuY29kaW5nKTtcbiAgICB0aGlzLmVuY29kaW5nID0gb3B0aW9ucy5lbmNvZGluZztcbiAgfVxufVxuXG5mdW5jdGlvbiBSZWFkYWJsZShvcHRpb25zKSB7XG4gIHZhciBEdXBsZXggPSByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlYWRhYmxlKSlcbiAgICByZXR1cm4gbmV3IFJlYWRhYmxlKG9wdGlvbnMpO1xuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUgPSBuZXcgUmVhZGFibGVTdGF0ZShvcHRpb25zLCB0aGlzKTtcblxuICAvLyBsZWdhY3lcbiAgdGhpcy5yZWFkYWJsZSA9IHRydWU7XG5cbiAgU3RyZWFtLmNhbGwodGhpcyk7XG59XG5cbi8vIE1hbnVhbGx5IHNob3ZlIHNvbWV0aGluZyBpbnRvIHRoZSByZWFkKCkgYnVmZmVyLlxuLy8gVGhpcyByZXR1cm5zIHRydWUgaWYgdGhlIGhpZ2hXYXRlck1hcmsgaGFzIG5vdCBiZWVuIGhpdCB5ZXQsXG4vLyBzaW1pbGFyIHRvIGhvdyBXcml0YWJsZS53cml0ZSgpIHJldHVybnMgdHJ1ZSBpZiB5b3Ugc2hvdWxkXG4vLyB3cml0ZSgpIHNvbWUgbW9yZS5cblJlYWRhYmxlLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24oY2h1bmssIGVuY29kaW5nKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG5cbiAgaWYgKHV0aWwuaXNTdHJpbmcoY2h1bmspICYmICFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgZW5jb2RpbmcgPSBlbmNvZGluZyB8fCBzdGF0ZS5kZWZhdWx0RW5jb2Rpbmc7XG4gICAgaWYgKGVuY29kaW5nICE9PSBzdGF0ZS5lbmNvZGluZykge1xuICAgICAgY2h1bmsgPSBuZXcgQnVmZmVyKGNodW5rLCBlbmNvZGluZyk7XG4gICAgICBlbmNvZGluZyA9ICcnO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZWFkYWJsZUFkZENodW5rKHRoaXMsIHN0YXRlLCBjaHVuaywgZW5jb2RpbmcsIGZhbHNlKTtcbn07XG5cbi8vIFVuc2hpZnQgc2hvdWxkICphbHdheXMqIGJlIHNvbWV0aGluZyBkaXJlY3RseSBvdXQgb2YgcmVhZCgpXG5SZWFkYWJsZS5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uKGNodW5rKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHJldHVybiByZWFkYWJsZUFkZENodW5rKHRoaXMsIHN0YXRlLCBjaHVuaywgJycsIHRydWUpO1xufTtcblxuZnVuY3Rpb24gcmVhZGFibGVBZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgZW5jb2RpbmcsIGFkZFRvRnJvbnQpIHtcbiAgdmFyIGVyID0gY2h1bmtJbnZhbGlkKHN0YXRlLCBjaHVuayk7XG4gIGlmIChlcikge1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgfSBlbHNlIGlmICh1dGlsLmlzTnVsbE9yVW5kZWZpbmVkKGNodW5rKSkge1xuICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICBpZiAoIXN0YXRlLmVuZGVkKVxuICAgICAgb25Fb2ZDaHVuayhzdHJlYW0sIHN0YXRlKTtcbiAgfSBlbHNlIGlmIChzdGF0ZS5vYmplY3RNb2RlIHx8IGNodW5rICYmIGNodW5rLmxlbmd0aCA+IDApIHtcbiAgICBpZiAoc3RhdGUuZW5kZWQgJiYgIWFkZFRvRnJvbnQpIHtcbiAgICAgIHZhciBlID0gbmV3IEVycm9yKCdzdHJlYW0ucHVzaCgpIGFmdGVyIEVPRicpO1xuICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZSk7XG4gICAgfSBlbHNlIGlmIChzdGF0ZS5lbmRFbWl0dGVkICYmIGFkZFRvRnJvbnQpIHtcbiAgICAgIHZhciBlID0gbmV3IEVycm9yKCdzdHJlYW0udW5zaGlmdCgpIGFmdGVyIGVuZCBldmVudCcpO1xuICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFhZGRUb0Zyb250ICYmICFlbmNvZGluZylcbiAgICAgICAgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTtcblxuICAgICAgaWYgKCFhZGRUb0Zyb250KVxuICAgICAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG5cbiAgICAgIC8vIGlmIHdlIHdhbnQgdGhlIGRhdGEgbm93LCBqdXN0IGVtaXQgaXQuXG4gICAgICBpZiAoc3RhdGUuZmxvd2luZyAmJiBzdGF0ZS5sZW5ndGggPT09IDAgJiYgIXN0YXRlLnN5bmMpIHtcbiAgICAgICAgc3RyZWFtLmVtaXQoJ2RhdGEnLCBjaHVuayk7XG4gICAgICAgIHN0cmVhbS5yZWFkKDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdXBkYXRlIHRoZSBidWZmZXIgaW5mby5cbiAgICAgICAgc3RhdGUubGVuZ3RoICs9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuICAgICAgICBpZiAoYWRkVG9Gcm9udClcbiAgICAgICAgICBzdGF0ZS5idWZmZXIudW5zaGlmdChjaHVuayk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICBzdGF0ZS5idWZmZXIucHVzaChjaHVuayk7XG5cbiAgICAgICAgaWYgKHN0YXRlLm5lZWRSZWFkYWJsZSlcbiAgICAgICAgICBlbWl0UmVhZGFibGUoc3RyZWFtKTtcbiAgICAgIH1cblxuICAgICAgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoIWFkZFRvRnJvbnQpIHtcbiAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gbmVlZE1vcmVEYXRhKHN0YXRlKTtcbn1cblxuXG5cbi8vIGlmIGl0J3MgcGFzdCB0aGUgaGlnaCB3YXRlciBtYXJrLCB3ZSBjYW4gcHVzaCBpbiBzb21lIG1vcmUuXG4vLyBBbHNvLCBpZiB3ZSBoYXZlIG5vIGRhdGEgeWV0LCB3ZSBjYW4gc3RhbmQgc29tZVxuLy8gbW9yZSBieXRlcy4gIFRoaXMgaXMgdG8gd29yayBhcm91bmQgY2FzZXMgd2hlcmUgaHdtPTAsXG4vLyBzdWNoIGFzIHRoZSByZXBsLiAgQWxzbywgaWYgdGhlIHB1c2goKSB0cmlnZ2VyZWQgYVxuLy8gcmVhZGFibGUgZXZlbnQsIGFuZCB0aGUgdXNlciBjYWxsZWQgcmVhZChsYXJnZU51bWJlcikgc3VjaCB0aGF0XG4vLyBuZWVkUmVhZGFibGUgd2FzIHNldCwgdGhlbiB3ZSBvdWdodCB0byBwdXNoIG1vcmUsIHNvIHRoYXQgYW5vdGhlclxuLy8gJ3JlYWRhYmxlJyBldmVudCB3aWxsIGJlIHRyaWdnZXJlZC5cbmZ1bmN0aW9uIG5lZWRNb3JlRGF0YShzdGF0ZSkge1xuICByZXR1cm4gIXN0YXRlLmVuZGVkICYmXG4gICAgICAgICAoc3RhdGUubmVlZFJlYWRhYmxlIHx8XG4gICAgICAgICAgc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyayB8fFxuICAgICAgICAgIHN0YXRlLmxlbmd0aCA9PT0gMCk7XG59XG5cbi8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuUmVhZGFibGUucHJvdG90eXBlLnNldEVuY29kaW5nID0gZnVuY3Rpb24oZW5jKSB7XG4gIGlmICghU3RyaW5nRGVjb2RlcilcbiAgICBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXIvJykuU3RyaW5nRGVjb2RlcjtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKTtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmNvZGluZyA9IGVuYztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBEb24ndCByYWlzZSB0aGUgaHdtID4gMTI4TUJcbnZhciBNQVhfSFdNID0gMHg4MDAwMDA7XG5mdW5jdGlvbiByb3VuZFVwVG9OZXh0UG93ZXJPZjIobikge1xuICBpZiAobiA+PSBNQVhfSFdNKSB7XG4gICAgbiA9IE1BWF9IV007XG4gIH0gZWxzZSB7XG4gICAgLy8gR2V0IHRoZSBuZXh0IGhpZ2hlc3QgcG93ZXIgb2YgMlxuICAgIG4tLTtcbiAgICBmb3IgKHZhciBwID0gMTsgcCA8IDMyOyBwIDw8PSAxKSBuIHw9IG4gPj4gcDtcbiAgICBuKys7XG4gIH1cbiAgcmV0dXJuIG47XG59XG5cbmZ1bmN0aW9uIGhvd011Y2hUb1JlYWQobiwgc3RhdGUpIHtcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5lbmRlZClcbiAgICByZXR1cm4gMDtcblxuICBpZiAoc3RhdGUub2JqZWN0TW9kZSlcbiAgICByZXR1cm4gbiA9PT0gMCA/IDAgOiAxO1xuXG4gIGlmIChpc05hTihuKSB8fCB1dGlsLmlzTnVsbChuKSkge1xuICAgIC8vIG9ubHkgZmxvdyBvbmUgYnVmZmVyIGF0IGEgdGltZVxuICAgIGlmIChzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmJ1ZmZlci5sZW5ndGgpXG4gICAgICByZXR1cm4gc3RhdGUuYnVmZmVyWzBdLmxlbmd0aDtcbiAgICBlbHNlXG4gICAgICByZXR1cm4gc3RhdGUubGVuZ3RoO1xuICB9XG5cbiAgaWYgKG4gPD0gMClcbiAgICByZXR1cm4gMDtcblxuICAvLyBJZiB3ZSdyZSBhc2tpbmcgZm9yIG1vcmUgdGhhbiB0aGUgdGFyZ2V0IGJ1ZmZlciBsZXZlbCxcbiAgLy8gdGhlbiByYWlzZSB0aGUgd2F0ZXIgbWFyay4gIEJ1bXAgdXAgdG8gdGhlIG5leHQgaGlnaGVzdFxuICAvLyBwb3dlciBvZiAyLCB0byBwcmV2ZW50IGluY3JlYXNpbmcgaXQgZXhjZXNzaXZlbHkgaW4gdGlueVxuICAvLyBhbW91bnRzLlxuICBpZiAobiA+IHN0YXRlLmhpZ2hXYXRlck1hcmspXG4gICAgc3RhdGUuaGlnaFdhdGVyTWFyayA9IHJvdW5kVXBUb05leHRQb3dlck9mMihuKTtcblxuICAvLyBkb24ndCBoYXZlIHRoYXQgbXVjaC4gIHJldHVybiBudWxsLCB1bmxlc3Mgd2UndmUgZW5kZWQuXG4gIGlmIChuID4gc3RhdGUubGVuZ3RoKSB7XG4gICAgaWYgKCFzdGF0ZS5lbmRlZCkge1xuICAgICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAgIHJldHVybiAwO1xuICAgIH0gZWxzZVxuICAgICAgcmV0dXJuIHN0YXRlLmxlbmd0aDtcbiAgfVxuXG4gIHJldHVybiBuO1xufVxuXG4vLyB5b3UgY2FuIG92ZXJyaWRlIGVpdGhlciB0aGlzIG1ldGhvZCwgb3IgdGhlIGFzeW5jIF9yZWFkKG4pIGJlbG93LlxuUmVhZGFibGUucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbihuKSB7XG4gIGRlYnVnKCdyZWFkJywgbik7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBuT3JpZyA9IG47XG5cbiAgaWYgKCF1dGlsLmlzTnVtYmVyKG4pIHx8IG4gPiAwKVxuICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuXG4gIC8vIGlmIHdlJ3JlIGRvaW5nIHJlYWQoMCkgdG8gdHJpZ2dlciBhIHJlYWRhYmxlIGV2ZW50LCBidXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGEgYnVuY2ggb2YgZGF0YSBpbiB0aGUgYnVmZmVyLCB0aGVuIGp1c3QgdHJpZ2dlclxuICAvLyB0aGUgJ3JlYWRhYmxlJyBldmVudCBhbmQgbW92ZSBvbi5cbiAgaWYgKG4gPT09IDAgJiZcbiAgICAgIHN0YXRlLm5lZWRSZWFkYWJsZSAmJlxuICAgICAgKHN0YXRlLmxlbmd0aCA+PSBzdGF0ZS5oaWdoV2F0ZXJNYXJrIHx8IHN0YXRlLmVuZGVkKSkge1xuICAgIGRlYnVnKCdyZWFkOiBlbWl0UmVhZGFibGUnLCBzdGF0ZS5sZW5ndGgsIHN0YXRlLmVuZGVkKTtcbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKVxuICAgICAgZW5kUmVhZGFibGUodGhpcyk7XG4gICAgZWxzZVxuICAgICAgZW1pdFJlYWRhYmxlKHRoaXMpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbiA9IGhvd011Y2hUb1JlYWQobiwgc3RhdGUpO1xuXG4gIC8vIGlmIHdlJ3ZlIGVuZGVkLCBhbmQgd2UncmUgbm93IGNsZWFyLCB0aGVuIGZpbmlzaCBpdCB1cC5cbiAgaWYgKG4gPT09IDAgJiYgc3RhdGUuZW5kZWQpIHtcbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKVxuICAgICAgZW5kUmVhZGFibGUodGhpcyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBBbGwgdGhlIGFjdHVhbCBjaHVuayBnZW5lcmF0aW9uIGxvZ2ljIG5lZWRzIHRvIGJlXG4gIC8vICpiZWxvdyogdGhlIGNhbGwgdG8gX3JlYWQuICBUaGUgcmVhc29uIGlzIHRoYXQgaW4gY2VydGFpblxuICAvLyBzeW50aGV0aWMgc3RyZWFtIGNhc2VzLCBzdWNoIGFzIHBhc3N0aHJvdWdoIHN0cmVhbXMsIF9yZWFkXG4gIC8vIG1heSBiZSBhIGNvbXBsZXRlbHkgc3luY2hyb25vdXMgb3BlcmF0aW9uIHdoaWNoIG1heSBjaGFuZ2VcbiAgLy8gdGhlIHN0YXRlIG9mIHRoZSByZWFkIGJ1ZmZlciwgcHJvdmlkaW5nIGVub3VnaCBkYXRhIHdoZW5cbiAgLy8gYmVmb3JlIHRoZXJlIHdhcyAqbm90KiBlbm91Z2guXG4gIC8vXG4gIC8vIFNvLCB0aGUgc3RlcHMgYXJlOlxuICAvLyAxLiBGaWd1cmUgb3V0IHdoYXQgdGhlIHN0YXRlIG9mIHRoaW5ncyB3aWxsIGJlIGFmdGVyIHdlIGRvXG4gIC8vIGEgcmVhZCBmcm9tIHRoZSBidWZmZXIuXG4gIC8vXG4gIC8vIDIuIElmIHRoYXQgcmVzdWx0aW5nIHN0YXRlIHdpbGwgdHJpZ2dlciBhIF9yZWFkLCB0aGVuIGNhbGwgX3JlYWQuXG4gIC8vIE5vdGUgdGhhdCB0aGlzIG1heSBiZSBhc3luY2hyb25vdXMsIG9yIHN5bmNocm9ub3VzLiAgWWVzLCBpdCBpc1xuICAvLyBkZWVwbHkgdWdseSB0byB3cml0ZSBBUElzIHRoaXMgd2F5LCBidXQgdGhhdCBzdGlsbCBkb2Vzbid0IG1lYW5cbiAgLy8gdGhhdCB0aGUgUmVhZGFibGUgY2xhc3Mgc2hvdWxkIGJlaGF2ZSBpbXByb3Blcmx5LCBhcyBzdHJlYW1zIGFyZVxuICAvLyBkZXNpZ25lZCB0byBiZSBzeW5jL2FzeW5jIGFnbm9zdGljLlxuICAvLyBUYWtlIG5vdGUgaWYgdGhlIF9yZWFkIGNhbGwgaXMgc3luYyBvciBhc3luYyAoaWUsIGlmIHRoZSByZWFkIGNhbGxcbiAgLy8gaGFzIHJldHVybmVkIHlldCksIHNvIHRoYXQgd2Uga25vdyB3aGV0aGVyIG9yIG5vdCBpdCdzIHNhZmUgdG8gZW1pdFxuICAvLyAncmVhZGFibGUnIGV0Yy5cbiAgLy9cbiAgLy8gMy4gQWN0dWFsbHkgcHVsbCB0aGUgcmVxdWVzdGVkIGNodW5rcyBvdXQgb2YgdGhlIGJ1ZmZlciBhbmQgcmV0dXJuLlxuXG4gIC8vIGlmIHdlIG5lZWQgYSByZWFkYWJsZSBldmVudCwgdGhlbiB3ZSBuZWVkIHRvIGRvIHNvbWUgcmVhZGluZy5cbiAgdmFyIGRvUmVhZCA9IHN0YXRlLm5lZWRSZWFkYWJsZTtcbiAgZGVidWcoJ25lZWQgcmVhZGFibGUnLCBkb1JlYWQpO1xuXG4gIC8vIGlmIHdlIGN1cnJlbnRseSBoYXZlIGxlc3MgdGhhbiB0aGUgaGlnaFdhdGVyTWFyaywgdGhlbiBhbHNvIHJlYWQgc29tZVxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwIHx8IHN0YXRlLmxlbmd0aCAtIG4gPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgZG9SZWFkID0gdHJ1ZTtcbiAgICBkZWJ1ZygnbGVuZ3RoIGxlc3MgdGhhbiB3YXRlcm1hcmsnLCBkb1JlYWQpO1xuICB9XG5cbiAgLy8gaG93ZXZlciwgaWYgd2UndmUgZW5kZWQsIHRoZW4gdGhlcmUncyBubyBwb2ludCwgYW5kIGlmIHdlJ3JlIGFscmVhZHlcbiAgLy8gcmVhZGluZywgdGhlbiBpdCdzIHVubmVjZXNzYXJ5LlxuICBpZiAoc3RhdGUuZW5kZWQgfHwgc3RhdGUucmVhZGluZykge1xuICAgIGRvUmVhZCA9IGZhbHNlO1xuICAgIGRlYnVnKCdyZWFkaW5nIG9yIGVuZGVkJywgZG9SZWFkKTtcbiAgfVxuXG4gIGlmIChkb1JlYWQpIHtcbiAgICBkZWJ1ZygnZG8gcmVhZCcpO1xuICAgIHN0YXRlLnJlYWRpbmcgPSB0cnVlO1xuICAgIHN0YXRlLnN5bmMgPSB0cnVlO1xuICAgIC8vIGlmIHRoZSBsZW5ndGggaXMgY3VycmVudGx5IHplcm8sIHRoZW4gd2UgKm5lZWQqIGEgcmVhZGFibGUgZXZlbnQuXG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMClcbiAgICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgLy8gY2FsbCBpbnRlcm5hbCByZWFkIG1ldGhvZFxuICAgIHRoaXMuX3JlYWQoc3RhdGUuaGlnaFdhdGVyTWFyayk7XG4gICAgc3RhdGUuc3luYyA9IGZhbHNlO1xuICB9XG5cbiAgLy8gSWYgX3JlYWQgcHVzaGVkIGRhdGEgc3luY2hyb25vdXNseSwgdGhlbiBgcmVhZGluZ2Agd2lsbCBiZSBmYWxzZSxcbiAgLy8gYW5kIHdlIG5lZWQgdG8gcmUtZXZhbHVhdGUgaG93IG11Y2ggZGF0YSB3ZSBjYW4gcmV0dXJuIHRvIHRoZSB1c2VyLlxuICBpZiAoZG9SZWFkICYmICFzdGF0ZS5yZWFkaW5nKVxuICAgIG4gPSBob3dNdWNoVG9SZWFkKG5PcmlnLCBzdGF0ZSk7XG5cbiAgdmFyIHJldDtcbiAgaWYgKG4gPiAwKVxuICAgIHJldCA9IGZyb21MaXN0KG4sIHN0YXRlKTtcbiAgZWxzZVxuICAgIHJldCA9IG51bGw7XG5cbiAgaWYgKHV0aWwuaXNOdWxsKHJldCkpIHtcbiAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIG4gPSAwO1xuICB9XG5cbiAgc3RhdGUubGVuZ3RoIC09IG47XG5cbiAgLy8gSWYgd2UgaGF2ZSBub3RoaW5nIGluIHRoZSBidWZmZXIsIHRoZW4gd2Ugd2FudCB0byBrbm93XG4gIC8vIGFzIHNvb24gYXMgd2UgKmRvKiBnZXQgc29tZXRoaW5nIGludG8gdGhlIGJ1ZmZlci5cbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiAhc3RhdGUuZW5kZWQpXG4gICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcblxuICAvLyBJZiB3ZSB0cmllZCB0byByZWFkKCkgcGFzdCB0aGUgRU9GLCB0aGVuIGVtaXQgZW5kIG9uIHRoZSBuZXh0IHRpY2suXG4gIGlmIChuT3JpZyAhPT0gbiAmJiBzdGF0ZS5lbmRlZCAmJiBzdGF0ZS5sZW5ndGggPT09IDApXG4gICAgZW5kUmVhZGFibGUodGhpcyk7XG5cbiAgaWYgKCF1dGlsLmlzTnVsbChyZXQpKVxuICAgIHRoaXMuZW1pdCgnZGF0YScsIHJldCk7XG5cbiAgcmV0dXJuIHJldDtcbn07XG5cbmZ1bmN0aW9uIGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspIHtcbiAgdmFyIGVyID0gbnVsbDtcbiAgaWYgKCF1dGlsLmlzQnVmZmVyKGNodW5rKSAmJlxuICAgICAgIXV0aWwuaXNTdHJpbmcoY2h1bmspICYmXG4gICAgICAhdXRpbC5pc051bGxPclVuZGVmaW5lZChjaHVuaykgJiZcbiAgICAgICFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgZXIgPSBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG5vbi1zdHJpbmcvYnVmZmVyIGNodW5rJyk7XG4gIH1cbiAgcmV0dXJuIGVyO1xufVxuXG5cbmZ1bmN0aW9uIG9uRW9mQ2h1bmsoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoc3RhdGUuZGVjb2RlciAmJiAhc3RhdGUuZW5kZWQpIHtcbiAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpO1xuICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIHtcbiAgICAgIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTtcbiAgICAgIHN0YXRlLmxlbmd0aCArPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICB9XG4gIH1cbiAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuXG4gIC8vIGVtaXQgJ3JlYWRhYmxlJyBub3cgdG8gbWFrZSBzdXJlIGl0IGdldHMgcGlja2VkIHVwLlxuICBlbWl0UmVhZGFibGUoc3RyZWFtKTtcbn1cblxuLy8gRG9uJ3QgZW1pdCByZWFkYWJsZSByaWdodCBhd2F5IGluIHN5bmMgbW9kZSwgYmVjYXVzZSB0aGlzIGNhbiB0cmlnZ2VyXG4vLyBhbm90aGVyIHJlYWQoKSBjYWxsID0+IHN0YWNrIG92ZXJmbG93LiAgVGhpcyB3YXksIGl0IG1pZ2h0IHRyaWdnZXJcbi8vIGEgbmV4dFRpY2sgcmVjdXJzaW9uIHdhcm5pbmcsIGJ1dCB0aGF0J3Mgbm90IHNvIGJhZC5cbmZ1bmN0aW9uIGVtaXRSZWFkYWJsZShzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBzdGF0ZS5uZWVkUmVhZGFibGUgPSBmYWxzZTtcbiAgaWYgKCFzdGF0ZS5lbWl0dGVkUmVhZGFibGUpIHtcbiAgICBkZWJ1ZygnZW1pdFJlYWRhYmxlJywgc3RhdGUuZmxvd2luZyk7XG4gICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICBpZiAoc3RhdGUuc3luYylcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgIGVtaXRSZWFkYWJsZV8oc3RyZWFtKTtcbiAgICAgIH0pO1xuICAgIGVsc2VcbiAgICAgIGVtaXRSZWFkYWJsZV8oc3RyZWFtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbWl0UmVhZGFibGVfKHN0cmVhbSkge1xuICBkZWJ1ZygnZW1pdCByZWFkYWJsZScpO1xuICBzdHJlYW0uZW1pdCgncmVhZGFibGUnKTtcbiAgZmxvdyhzdHJlYW0pO1xufVxuXG5cbi8vIGF0IHRoaXMgcG9pbnQsIHRoZSB1c2VyIGhhcyBwcmVzdW1hYmx5IHNlZW4gdGhlICdyZWFkYWJsZScgZXZlbnQsXG4vLyBhbmQgY2FsbGVkIHJlYWQoKSB0byBjb25zdW1lIHNvbWUgZGF0YS4gIHRoYXQgbWF5IGhhdmUgdHJpZ2dlcmVkXG4vLyBpbiB0dXJuIGFub3RoZXIgX3JlYWQobikgY2FsbCwgaW4gd2hpY2ggY2FzZSByZWFkaW5nID0gdHJ1ZSBpZlxuLy8gaXQncyBpbiBwcm9ncmVzcy5cbi8vIEhvd2V2ZXIsIGlmIHdlJ3JlIG5vdCBlbmRlZCwgb3IgcmVhZGluZywgYW5kIHRoZSBsZW5ndGggPCBod20sXG4vLyB0aGVuIGdvIGFoZWFkIGFuZCB0cnkgdG8gcmVhZCBzb21lIG1vcmUgcHJlZW1wdGl2ZWx5LlxuZnVuY3Rpb24gbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVhZGluZ01vcmUpIHtcbiAgICBzdGF0ZS5yZWFkaW5nTW9yZSA9IHRydWU7XG4gICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgIG1heWJlUmVhZE1vcmVfKHN0cmVhbSwgc3RhdGUpO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1heWJlUmVhZE1vcmVfKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIGxlbiA9IHN0YXRlLmxlbmd0aDtcbiAgd2hpbGUgKCFzdGF0ZS5yZWFkaW5nICYmICFzdGF0ZS5mbG93aW5nICYmICFzdGF0ZS5lbmRlZCAmJlxuICAgICAgICAgc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyaykge1xuICAgIGRlYnVnKCdtYXliZVJlYWRNb3JlIHJlYWQgMCcpO1xuICAgIHN0cmVhbS5yZWFkKDApO1xuICAgIGlmIChsZW4gPT09IHN0YXRlLmxlbmd0aClcbiAgICAgIC8vIGRpZG4ndCBnZXQgYW55IGRhdGEsIHN0b3Agc3Bpbm5pbmcuXG4gICAgICBicmVhaztcbiAgICBlbHNlXG4gICAgICBsZW4gPSBzdGF0ZS5sZW5ndGg7XG4gIH1cbiAgc3RhdGUucmVhZGluZ01vcmUgPSBmYWxzZTtcbn1cblxuLy8gYWJzdHJhY3QgbWV0aG9kLiAgdG8gYmUgb3ZlcnJpZGRlbiBpbiBzcGVjaWZpYyBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxuLy8gY2FsbCBjYihlciwgZGF0YSkgd2hlcmUgZGF0YSBpcyA8PSBuIGluIGxlbmd0aC5cbi8vIGZvciB2aXJ0dWFsIChub24tc3RyaW5nLCBub24tYnVmZmVyKSBzdHJlYW1zLCBcImxlbmd0aFwiIGlzIHNvbWV3aGF0XG4vLyBhcmJpdHJhcnksIGFuZCBwZXJoYXBzIG5vdCB2ZXJ5IG1lYW5pbmdmdWwuXG5SZWFkYWJsZS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbihuKSB7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCcpKTtcbn07XG5cblJlYWRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24oZGVzdCwgcGlwZU9wdHMpIHtcbiAgdmFyIHNyYyA9IHRoaXM7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG5cbiAgc3dpdGNoIChzdGF0ZS5waXBlc0NvdW50KSB7XG4gICAgY2FzZSAwOlxuICAgICAgc3RhdGUucGlwZXMgPSBkZXN0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOlxuICAgICAgc3RhdGUucGlwZXMgPSBbc3RhdGUucGlwZXMsIGRlc3RdO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHN0YXRlLnBpcGVzLnB1c2goZGVzdCk7XG4gICAgICBicmVhaztcbiAgfVxuICBzdGF0ZS5waXBlc0NvdW50ICs9IDE7XG4gIGRlYnVnKCdwaXBlIGNvdW50PSVkIG9wdHM9JWonLCBzdGF0ZS5waXBlc0NvdW50LCBwaXBlT3B0cyk7XG5cbiAgdmFyIGRvRW5kID0gKCFwaXBlT3B0cyB8fCBwaXBlT3B0cy5lbmQgIT09IGZhbHNlKSAmJlxuICAgICAgICAgICAgICBkZXN0ICE9PSBwcm9jZXNzLnN0ZG91dCAmJlxuICAgICAgICAgICAgICBkZXN0ICE9PSBwcm9jZXNzLnN0ZGVycjtcblxuICB2YXIgZW5kRm4gPSBkb0VuZCA/IG9uZW5kIDogY2xlYW51cDtcbiAgaWYgKHN0YXRlLmVuZEVtaXR0ZWQpXG4gICAgcHJvY2Vzcy5uZXh0VGljayhlbmRGbik7XG4gIGVsc2VcbiAgICBzcmMub25jZSgnZW5kJywgZW5kRm4pO1xuXG4gIGRlc3Qub24oJ3VucGlwZScsIG9udW5waXBlKTtcbiAgZnVuY3Rpb24gb251bnBpcGUocmVhZGFibGUpIHtcbiAgICBkZWJ1Zygnb251bnBpcGUnKTtcbiAgICBpZiAocmVhZGFibGUgPT09IHNyYykge1xuICAgICAgY2xlYW51cCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uZW5kKCkge1xuICAgIGRlYnVnKCdvbmVuZCcpO1xuICAgIGRlc3QuZW5kKCk7XG4gIH1cblxuICAvLyB3aGVuIHRoZSBkZXN0IGRyYWlucywgaXQgcmVkdWNlcyB0aGUgYXdhaXREcmFpbiBjb3VudGVyXG4gIC8vIG9uIHRoZSBzb3VyY2UuICBUaGlzIHdvdWxkIGJlIG1vcmUgZWxlZ2FudCB3aXRoIGEgLm9uY2UoKVxuICAvLyBoYW5kbGVyIGluIGZsb3coKSwgYnV0IGFkZGluZyBhbmQgcmVtb3ZpbmcgcmVwZWF0ZWRseSBpc1xuICAvLyB0b28gc2xvdy5cbiAgdmFyIG9uZHJhaW4gPSBwaXBlT25EcmFpbihzcmMpO1xuICBkZXN0Lm9uKCdkcmFpbicsIG9uZHJhaW4pO1xuXG4gIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgZGVidWcoJ2NsZWFudXAnKTtcbiAgICAvLyBjbGVhbnVwIGV2ZW50IGhhbmRsZXJzIG9uY2UgdGhlIHBpcGUgaXMgYnJva2VuXG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZHJhaW4nLCBvbmRyYWluKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ3VucGlwZScsIG9udW5waXBlKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIGNsZWFudXApO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZGF0YScsIG9uZGF0YSk7XG5cbiAgICAvLyBpZiB0aGUgcmVhZGVyIGlzIHdhaXRpbmcgZm9yIGEgZHJhaW4gZXZlbnQgZnJvbSB0aGlzXG4gICAgLy8gc3BlY2lmaWMgd3JpdGVyLCB0aGVuIGl0IHdvdWxkIGNhdXNlIGl0IHRvIG5ldmVyIHN0YXJ0XG4gICAgLy8gZmxvd2luZyBhZ2Fpbi5cbiAgICAvLyBTbywgaWYgdGhpcyBpcyBhd2FpdGluZyBhIGRyYWluLCB0aGVuIHdlIGp1c3QgY2FsbCBpdCBub3cuXG4gICAgLy8gSWYgd2UgZG9uJ3Qga25vdywgdGhlbiBhc3N1bWUgdGhhdCB3ZSBhcmUgd2FpdGluZyBmb3Igb25lLlxuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluICYmXG4gICAgICAgICghZGVzdC5fd3JpdGFibGVTdGF0ZSB8fCBkZXN0Ll93cml0YWJsZVN0YXRlLm5lZWREcmFpbikpXG4gICAgICBvbmRyYWluKCk7XG4gIH1cblxuICBzcmMub24oJ2RhdGEnLCBvbmRhdGEpO1xuICBmdW5jdGlvbiBvbmRhdGEoY2h1bmspIHtcbiAgICBkZWJ1Zygnb25kYXRhJyk7XG4gICAgdmFyIHJldCA9IGRlc3Qud3JpdGUoY2h1bmspO1xuICAgIGlmIChmYWxzZSA9PT0gcmV0KSB7XG4gICAgICBkZWJ1ZygnZmFsc2Ugd3JpdGUgcmVzcG9uc2UsIHBhdXNlJyxcbiAgICAgICAgICAgIHNyYy5fcmVhZGFibGVTdGF0ZS5hd2FpdERyYWluKTtcbiAgICAgIHNyYy5fcmVhZGFibGVTdGF0ZS5hd2FpdERyYWluKys7XG4gICAgICBzcmMucGF1c2UoKTtcbiAgICB9XG4gIH1cblxuICAvLyBpZiB0aGUgZGVzdCBoYXMgYW4gZXJyb3IsIHRoZW4gc3RvcCBwaXBpbmcgaW50byBpdC5cbiAgLy8gaG93ZXZlciwgZG9uJ3Qgc3VwcHJlc3MgdGhlIHRocm93aW5nIGJlaGF2aW9yIGZvciB0aGlzLlxuICBmdW5jdGlvbiBvbmVycm9yKGVyKSB7XG4gICAgZGVidWcoJ29uZXJyb3InLCBlcik7XG4gICAgdW5waXBlKCk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICBpZiAoRUUubGlzdGVuZXJDb3VudChkZXN0LCAnZXJyb3InKSA9PT0gMClcbiAgICAgIGRlc3QuZW1pdCgnZXJyb3InLCBlcik7XG4gIH1cbiAgLy8gVGhpcyBpcyBhIGJydXRhbGx5IHVnbHkgaGFjayB0byBtYWtlIHN1cmUgdGhhdCBvdXIgZXJyb3IgaGFuZGxlclxuICAvLyBpcyBhdHRhY2hlZCBiZWZvcmUgYW55IHVzZXJsYW5kIG9uZXMuICBORVZFUiBETyBUSElTLlxuICBpZiAoIWRlc3QuX2V2ZW50cyB8fCAhZGVzdC5fZXZlbnRzLmVycm9yKVxuICAgIGRlc3Qub24oJ2Vycm9yJywgb25lcnJvcik7XG4gIGVsc2UgaWYgKGlzQXJyYXkoZGVzdC5fZXZlbnRzLmVycm9yKSlcbiAgICBkZXN0Ll9ldmVudHMuZXJyb3IudW5zaGlmdChvbmVycm9yKTtcbiAgZWxzZVxuICAgIGRlc3QuX2V2ZW50cy5lcnJvciA9IFtvbmVycm9yLCBkZXN0Ll9ldmVudHMuZXJyb3JdO1xuXG5cblxuICAvLyBCb3RoIGNsb3NlIGFuZCBmaW5pc2ggc2hvdWxkIHRyaWdnZXIgdW5waXBlLCBidXQgb25seSBvbmNlLlxuICBmdW5jdGlvbiBvbmNsb3NlKCkge1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgICB1bnBpcGUoKTtcbiAgfVxuICBkZXN0Lm9uY2UoJ2Nsb3NlJywgb25jbG9zZSk7XG4gIGZ1bmN0aW9uIG9uZmluaXNoKCkge1xuICAgIGRlYnVnKCdvbmZpbmlzaCcpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG4gICAgdW5waXBlKCk7XG4gIH1cbiAgZGVzdC5vbmNlKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG5cbiAgZnVuY3Rpb24gdW5waXBlKCkge1xuICAgIGRlYnVnKCd1bnBpcGUnKTtcbiAgICBzcmMudW5waXBlKGRlc3QpO1xuICB9XG5cbiAgLy8gdGVsbCB0aGUgZGVzdCB0aGF0IGl0J3MgYmVpbmcgcGlwZWQgdG9cbiAgZGVzdC5lbWl0KCdwaXBlJywgc3JjKTtcblxuICAvLyBzdGFydCB0aGUgZmxvdyBpZiBpdCBoYXNuJ3QgYmVlbiBzdGFydGVkIGFscmVhZHkuXG4gIGlmICghc3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdwaXBlIHJlc3VtZScpO1xuICAgIHNyYy5yZXN1bWUoKTtcbiAgfVxuXG4gIHJldHVybiBkZXN0O1xufTtcblxuZnVuY3Rpb24gcGlwZU9uRHJhaW4oc3JjKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RhdGUgPSBzcmMuX3JlYWRhYmxlU3RhdGU7XG4gICAgZGVidWcoJ3BpcGVPbkRyYWluJywgc3RhdGUuYXdhaXREcmFpbik7XG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4pXG4gICAgICBzdGF0ZS5hd2FpdERyYWluLS07XG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4gPT09IDAgJiYgRUUubGlzdGVuZXJDb3VudChzcmMsICdkYXRhJykpIHtcbiAgICAgIHN0YXRlLmZsb3dpbmcgPSB0cnVlO1xuICAgICAgZmxvdyhzcmMpO1xuICAgIH1cbiAgfTtcbn1cblxuXG5SZWFkYWJsZS5wcm90b3R5cGUudW5waXBlID0gZnVuY3Rpb24oZGVzdCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuXG4gIC8vIGlmIHdlJ3JlIG5vdCBwaXBpbmcgYW55d2hlcmUsIHRoZW4gZG8gbm90aGluZy5cbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDApXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8ganVzdCBvbmUgZGVzdGluYXRpb24uICBtb3N0IGNvbW1vbiBjYXNlLlxuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMSkge1xuICAgIC8vIHBhc3NlZCBpbiBvbmUsIGJ1dCBpdCdzIG5vdCB0aGUgcmlnaHQgb25lLlxuICAgIGlmIChkZXN0ICYmIGRlc3QgIT09IHN0YXRlLnBpcGVzKVxuICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICBpZiAoIWRlc3QpXG4gICAgICBkZXN0ID0gc3RhdGUucGlwZXM7XG5cbiAgICAvLyBnb3QgYSBtYXRjaC5cbiAgICBzdGF0ZS5waXBlcyA9IG51bGw7XG4gICAgc3RhdGUucGlwZXNDb3VudCA9IDA7XG4gICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuICAgIGlmIChkZXN0KVxuICAgICAgZGVzdC5lbWl0KCd1bnBpcGUnLCB0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHNsb3cgY2FzZS4gbXVsdGlwbGUgcGlwZSBkZXN0aW5hdGlvbnMuXG5cbiAgaWYgKCFkZXN0KSB7XG4gICAgLy8gcmVtb3ZlIGFsbC5cbiAgICB2YXIgZGVzdHMgPSBzdGF0ZS5waXBlcztcbiAgICB2YXIgbGVuID0gc3RhdGUucGlwZXNDb3VudDtcbiAgICBzdGF0ZS5waXBlcyA9IG51bGw7XG4gICAgc3RhdGUucGlwZXNDb3VudCA9IDA7XG4gICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKylcbiAgICAgIGRlc3RzW2ldLmVtaXQoJ3VucGlwZScsIHRoaXMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gdHJ5IHRvIGZpbmQgdGhlIHJpZ2h0IG9uZS5cbiAgdmFyIGkgPSBpbmRleE9mKHN0YXRlLnBpcGVzLCBkZXN0KTtcbiAgaWYgKGkgPT09IC0xKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIHN0YXRlLnBpcGVzLnNwbGljZShpLCAxKTtcbiAgc3RhdGUucGlwZXNDb3VudCAtPSAxO1xuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMSlcbiAgICBzdGF0ZS5waXBlcyA9IHN0YXRlLnBpcGVzWzBdO1xuXG4gIGRlc3QuZW1pdCgndW5waXBlJywgdGhpcyk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBzZXQgdXAgZGF0YSBldmVudHMgaWYgdGhleSBhcmUgYXNrZWQgZm9yXG4vLyBFbnN1cmUgcmVhZGFibGUgbGlzdGVuZXJzIGV2ZW50dWFsbHkgZ2V0IHNvbWV0aGluZ1xuUmVhZGFibGUucHJvdG90eXBlLm9uID0gZnVuY3Rpb24oZXYsIGZuKSB7XG4gIHZhciByZXMgPSBTdHJlYW0ucHJvdG90eXBlLm9uLmNhbGwodGhpcywgZXYsIGZuKTtcblxuICAvLyBJZiBsaXN0ZW5pbmcgdG8gZGF0YSwgYW5kIGl0IGhhcyBub3QgZXhwbGljaXRseSBiZWVuIHBhdXNlZCxcbiAgLy8gdGhlbiBjYWxsIHJlc3VtZSB0byBzdGFydCB0aGUgZmxvdyBvZiBkYXRhIG9uIHRoZSBuZXh0IHRpY2suXG4gIGlmIChldiA9PT0gJ2RhdGEnICYmIGZhbHNlICE9PSB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcpIHtcbiAgICB0aGlzLnJlc3VtZSgpO1xuICB9XG5cbiAgaWYgKGV2ID09PSAncmVhZGFibGUnICYmIHRoaXMucmVhZGFibGUpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICAgIGlmICghc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcpIHtcbiAgICAgIHN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nID0gdHJ1ZTtcbiAgICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAgIGlmICghc3RhdGUucmVhZGluZykge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZGVidWcoJ3JlYWRhYmxlIG5leHR0aWNrIHJlYWQgMCcpO1xuICAgICAgICAgIHNlbGYucmVhZCgwKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLmxlbmd0aCkge1xuICAgICAgICBlbWl0UmVhZGFibGUodGhpcywgc3RhdGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXM7XG59O1xuUmVhZGFibGUucHJvdG90eXBlLmFkZExpc3RlbmVyID0gUmVhZGFibGUucHJvdG90eXBlLm9uO1xuXG4vLyBwYXVzZSgpIGFuZCByZXN1bWUoKSBhcmUgcmVtbmFudHMgb2YgdGhlIGxlZ2FjeSByZWFkYWJsZSBzdHJlYW0gQVBJXG4vLyBJZiB0aGUgdXNlciB1c2VzIHRoZW0sIHRoZW4gc3dpdGNoIGludG8gb2xkIG1vZGUuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIGlmICghc3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdyZXN1bWUnKTtcbiAgICBzdGF0ZS5mbG93aW5nID0gdHJ1ZTtcbiAgICBpZiAoIXN0YXRlLnJlYWRpbmcpIHtcbiAgICAgIGRlYnVnKCdyZXN1bWUgcmVhZCAwJyk7XG4gICAgICB0aGlzLnJlYWQoMCk7XG4gICAgfVxuICAgIHJlc3VtZSh0aGlzLCBzdGF0ZSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiByZXN1bWUoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlc3VtZVNjaGVkdWxlZCkge1xuICAgIHN0YXRlLnJlc3VtZVNjaGVkdWxlZCA9IHRydWU7XG4gICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgIHJlc3VtZV8oc3RyZWFtLCBzdGF0ZSk7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzdW1lXyhzdHJlYW0sIHN0YXRlKSB7XG4gIHN0YXRlLnJlc3VtZVNjaGVkdWxlZCA9IGZhbHNlO1xuICBzdHJlYW0uZW1pdCgncmVzdW1lJyk7XG4gIGZsb3coc3RyZWFtKTtcbiAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgIXN0YXRlLnJlYWRpbmcpXG4gICAgc3RyZWFtLnJlYWQoMCk7XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnY2FsbCBwYXVzZSBmbG93aW5nPSVqJywgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKTtcbiAgaWYgKGZhbHNlICE9PSB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncGF1c2UnKTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmVtaXQoJ3BhdXNlJyk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBmbG93KHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIGRlYnVnKCdmbG93Jywgc3RhdGUuZmxvd2luZyk7XG4gIGlmIChzdGF0ZS5mbG93aW5nKSB7XG4gICAgZG8ge1xuICAgICAgdmFyIGNodW5rID0gc3RyZWFtLnJlYWQoKTtcbiAgICB9IHdoaWxlIChudWxsICE9PSBjaHVuayAmJiBzdGF0ZS5mbG93aW5nKTtcbiAgfVxufVxuXG4vLyB3cmFwIGFuIG9sZC1zdHlsZSBzdHJlYW0gYXMgdGhlIGFzeW5jIGRhdGEgc291cmNlLlxuLy8gVGhpcyBpcyAqbm90KiBwYXJ0IG9mIHRoZSByZWFkYWJsZSBzdHJlYW0gaW50ZXJmYWNlLlxuLy8gSXQgaXMgYW4gdWdseSB1bmZvcnR1bmF0ZSBtZXNzIG9mIGhpc3RvcnkuXG5SZWFkYWJsZS5wcm90b3R5cGUud3JhcCA9IGZ1bmN0aW9uKHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgcGF1c2VkID0gZmFsc2U7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBzdHJlYW0ub24oJ2VuZCcsIGZ1bmN0aW9uKCkge1xuICAgIGRlYnVnKCd3cmFwcGVkIGVuZCcpO1xuICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFzdGF0ZS5lbmRlZCkge1xuICAgICAgdmFyIGNodW5rID0gc3RhdGUuZGVjb2Rlci5lbmQoKTtcbiAgICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpXG4gICAgICAgIHNlbGYucHVzaChjaHVuayk7XG4gICAgfVxuXG4gICAgc2VsZi5wdXNoKG51bGwpO1xuICB9KTtcblxuICBzdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbihjaHVuaykge1xuICAgIGRlYnVnKCd3cmFwcGVkIGRhdGEnKTtcbiAgICBpZiAoc3RhdGUuZGVjb2RlcilcbiAgICAgIGNodW5rID0gc3RhdGUuZGVjb2Rlci53cml0ZShjaHVuayk7XG4gICAgaWYgKCFjaHVuayB8fCAhc3RhdGUub2JqZWN0TW9kZSAmJiAhY2h1bmsubGVuZ3RoKVxuICAgICAgcmV0dXJuO1xuXG4gICAgdmFyIHJldCA9IHNlbGYucHVzaChjaHVuayk7XG4gICAgaWYgKCFyZXQpIHtcbiAgICAgIHBhdXNlZCA9IHRydWU7XG4gICAgICBzdHJlYW0ucGF1c2UoKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIHByb3h5IGFsbCB0aGUgb3RoZXIgbWV0aG9kcy5cbiAgLy8gaW1wb3J0YW50IHdoZW4gd3JhcHBpbmcgZmlsdGVycyBhbmQgZHVwbGV4ZXMuXG4gIGZvciAodmFyIGkgaW4gc3RyZWFtKSB7XG4gICAgaWYgKHV0aWwuaXNGdW5jdGlvbihzdHJlYW1baV0pICYmIHV0aWwuaXNVbmRlZmluZWQodGhpc1tpXSkpIHtcbiAgICAgIHRoaXNbaV0gPSBmdW5jdGlvbihtZXRob2QpIHsgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gc3RyZWFtW21ldGhvZF0uYXBwbHkoc3RyZWFtLCBhcmd1bWVudHMpO1xuICAgICAgfX0oaSk7XG4gICAgfVxuICB9XG5cbiAgLy8gcHJveHkgY2VydGFpbiBpbXBvcnRhbnQgZXZlbnRzLlxuICB2YXIgZXZlbnRzID0gWydlcnJvcicsICdjbG9zZScsICdkZXN0cm95JywgJ3BhdXNlJywgJ3Jlc3VtZSddO1xuICBmb3JFYWNoKGV2ZW50cywgZnVuY3Rpb24oZXYpIHtcbiAgICBzdHJlYW0ub24oZXYsIHNlbGYuZW1pdC5iaW5kKHNlbGYsIGV2KSk7XG4gIH0pO1xuXG4gIC8vIHdoZW4gd2UgdHJ5IHRvIGNvbnN1bWUgc29tZSBtb3JlIGJ5dGVzLCBzaW1wbHkgdW5wYXVzZSB0aGVcbiAgLy8gdW5kZXJseWluZyBzdHJlYW0uXG4gIHNlbGYuX3JlYWQgPSBmdW5jdGlvbihuKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgX3JlYWQnLCBuKTtcbiAgICBpZiAocGF1c2VkKSB7XG4gICAgICBwYXVzZWQgPSBmYWxzZTtcbiAgICAgIHN0cmVhbS5yZXN1bWUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHNlbGY7XG59O1xuXG5cblxuLy8gZXhwb3NlZCBmb3IgdGVzdGluZyBwdXJwb3NlcyBvbmx5LlxuUmVhZGFibGUuX2Zyb21MaXN0ID0gZnJvbUxpc3Q7XG5cbi8vIFBsdWNrIG9mZiBuIGJ5dGVzIGZyb20gYW4gYXJyYXkgb2YgYnVmZmVycy5cbi8vIExlbmd0aCBpcyB0aGUgY29tYmluZWQgbGVuZ3RocyBvZiBhbGwgdGhlIGJ1ZmZlcnMgaW4gdGhlIGxpc3QuXG5mdW5jdGlvbiBmcm9tTGlzdChuLCBzdGF0ZSkge1xuICB2YXIgbGlzdCA9IHN0YXRlLmJ1ZmZlcjtcbiAgdmFyIGxlbmd0aCA9IHN0YXRlLmxlbmd0aDtcbiAgdmFyIHN0cmluZ01vZGUgPSAhIXN0YXRlLmRlY29kZXI7XG4gIHZhciBvYmplY3RNb2RlID0gISFzdGF0ZS5vYmplY3RNb2RlO1xuICB2YXIgcmV0O1xuXG4gIC8vIG5vdGhpbmcgaW4gdGhlIGxpc3QsIGRlZmluaXRlbHkgZW1wdHkuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMClcbiAgICByZXR1cm4gbnVsbDtcblxuICBpZiAobGVuZ3RoID09PSAwKVxuICAgIHJldCA9IG51bGw7XG4gIGVsc2UgaWYgKG9iamVjdE1vZGUpXG4gICAgcmV0ID0gbGlzdC5zaGlmdCgpO1xuICBlbHNlIGlmICghbiB8fCBuID49IGxlbmd0aCkge1xuICAgIC8vIHJlYWQgaXQgYWxsLCB0cnVuY2F0ZSB0aGUgYXJyYXkuXG4gICAgaWYgKHN0cmluZ01vZGUpXG4gICAgICByZXQgPSBsaXN0LmpvaW4oJycpO1xuICAgIGVsc2VcbiAgICAgIHJldCA9IEJ1ZmZlci5jb25jYXQobGlzdCwgbGVuZ3RoKTtcbiAgICBsaXN0Lmxlbmd0aCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gcmVhZCBqdXN0IHNvbWUgb2YgaXQuXG4gICAgaWYgKG4gPCBsaXN0WzBdLmxlbmd0aCkge1xuICAgICAgLy8ganVzdCB0YWtlIGEgcGFydCBvZiB0aGUgZmlyc3QgbGlzdCBpdGVtLlxuICAgICAgLy8gc2xpY2UgaXMgdGhlIHNhbWUgZm9yIGJ1ZmZlcnMgYW5kIHN0cmluZ3MuXG4gICAgICB2YXIgYnVmID0gbGlzdFswXTtcbiAgICAgIHJldCA9IGJ1Zi5zbGljZSgwLCBuKTtcbiAgICAgIGxpc3RbMF0gPSBidWYuc2xpY2Uobik7XG4gICAgfSBlbHNlIGlmIChuID09PSBsaXN0WzBdLmxlbmd0aCkge1xuICAgICAgLy8gZmlyc3QgbGlzdCBpcyBhIHBlcmZlY3QgbWF0Y2hcbiAgICAgIHJldCA9IGxpc3Quc2hpZnQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gY29tcGxleCBjYXNlLlxuICAgICAgLy8gd2UgaGF2ZSBlbm91Z2ggdG8gY292ZXIgaXQsIGJ1dCBpdCBzcGFucyBwYXN0IHRoZSBmaXJzdCBidWZmZXIuXG4gICAgICBpZiAoc3RyaW5nTW9kZSlcbiAgICAgICAgcmV0ID0gJyc7XG4gICAgICBlbHNlXG4gICAgICAgIHJldCA9IG5ldyBCdWZmZXIobik7XG5cbiAgICAgIHZhciBjID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gbGlzdC5sZW5ndGg7IGkgPCBsICYmIGMgPCBuOyBpKyspIHtcbiAgICAgICAgdmFyIGJ1ZiA9IGxpc3RbMF07XG4gICAgICAgIHZhciBjcHkgPSBNYXRoLm1pbihuIC0gYywgYnVmLmxlbmd0aCk7XG5cbiAgICAgICAgaWYgKHN0cmluZ01vZGUpXG4gICAgICAgICAgcmV0ICs9IGJ1Zi5zbGljZSgwLCBjcHkpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgYnVmLmNvcHkocmV0LCBjLCAwLCBjcHkpO1xuXG4gICAgICAgIGlmIChjcHkgPCBidWYubGVuZ3RoKVxuICAgICAgICAgIGxpc3RbMF0gPSBidWYuc2xpY2UoY3B5KTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGxpc3Quc2hpZnQoKTtcblxuICAgICAgICBjICs9IGNweTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBlbmRSZWFkYWJsZShzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuXG4gIC8vIElmIHdlIGdldCBoZXJlIGJlZm9yZSBjb25zdW1pbmcgYWxsIHRoZSBieXRlcywgdGhlbiB0aGF0IGlzIGFcbiAgLy8gYnVnIGluIG5vZGUuICBTaG91bGQgbmV2ZXIgaGFwcGVuLlxuICBpZiAoc3RhdGUubGVuZ3RoID4gMClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2VuZFJlYWRhYmxlIGNhbGxlZCBvbiBub24tZW1wdHkgc3RyZWFtJyk7XG5cbiAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkKSB7XG4gICAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICAvLyBDaGVjayB0aGF0IHdlIGRpZG4ndCBnZXQgb25lIGxhc3QgdW5zaGlmdC5cbiAgICAgIGlmICghc3RhdGUuZW5kRW1pdHRlZCAmJiBzdGF0ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgc3RhdGUuZW5kRW1pdHRlZCA9IHRydWU7XG4gICAgICAgIHN0cmVhbS5yZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgICBzdHJlYW0uZW1pdCgnZW5kJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZm9yRWFjaCAoeHMsIGYpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB4cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmKHhzW2ldLCBpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbmRleE9mICh4cywgeCkge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHhzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmICh4c1tpXSA9PT0geCkgcmV0dXJuIGk7XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZrWVdKc1pTMXpkSEpsWVcwdmJHbGlMMTl6ZEhKbFlXMWZjbVZoWkdGaWJHVXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdkx5QkRiM0I1Y21sbmFIUWdTbTk1Wlc1MExDQkpibU11SUdGdVpDQnZkR2hsY2lCT2IyUmxJR052Ym5SeWFXSjFkRzl5Y3k1Y2JpOHZYRzR2THlCUVpYSnRhWE56YVc5dUlHbHpJR2hsY21WaWVTQm5jbUZ1ZEdWa0xDQm1jbVZsSUc5bUlHTm9ZWEpuWlN3Z2RHOGdZVzU1SUhCbGNuTnZiaUJ2WW5SaGFXNXBibWNnWVZ4dUx5OGdZMjl3ZVNCdlppQjBhR2x6SUhOdlpuUjNZWEpsSUdGdVpDQmhjM052WTJsaGRHVmtJR1J2WTNWdFpXNTBZWFJwYjI0Z1ptbHNaWE1nS0hSb1pWeHVMeThnWENKVGIyWjBkMkZ5WlZ3aUtTd2dkRzhnWkdWaGJDQnBiaUIwYUdVZ1UyOW1kSGRoY21VZ2QybDBhRzkxZENCeVpYTjBjbWxqZEdsdmJpd2dhVzVqYkhWa2FXNW5YRzR2THlCM2FYUm9iM1YwSUd4cGJXbDBZWFJwYjI0Z2RHaGxJSEpwWjJoMGN5QjBieUIxYzJVc0lHTnZjSGtzSUcxdlpHbG1lU3dnYldWeVoyVXNJSEIxWW14cGMyZ3NYRzR2THlCa2FYTjBjbWxpZFhSbExDQnpkV0pzYVdObGJuTmxMQ0JoYm1RdmIzSWdjMlZzYkNCamIzQnBaWE1nYjJZZ2RHaGxJRk52Wm5SM1lYSmxMQ0JoYm1RZ2RHOGdjR1Z5YldsMFhHNHZMeUJ3WlhKemIyNXpJSFJ2SUhkb2IyMGdkR2hsSUZOdlpuUjNZWEpsSUdseklHWjFjbTVwYzJobFpDQjBieUJrYnlCemJ5d2djM1ZpYW1WamRDQjBieUIwYUdWY2JpOHZJR1p2Ykd4dmQybHVaeUJqYjI1a2FYUnBiMjV6T2x4dUx5OWNiaTh2SUZSb1pTQmhZbTkyWlNCamIzQjVjbWxuYUhRZ2JtOTBhV05sSUdGdVpDQjBhR2x6SUhCbGNtMXBjM05wYjI0Z2JtOTBhV05sSUhOb1lXeHNJR0psSUdsdVkyeDFaR1ZrWEc0dkx5QnBiaUJoYkd3Z1kyOXdhV1Z6SUc5eUlITjFZbk4wWVc1MGFXRnNJSEJ2Y25ScGIyNXpJRzltSUhSb1pTQlRiMlowZDJGeVpTNWNiaTh2WEc0dkx5QlVTRVVnVTA5R1ZGZEJVa1VnU1ZNZ1VGSlBWa2xFUlVRZ1hDSkJVeUJKVTF3aUxDQlhTVlJJVDFWVUlGZEJVbEpCVGxSWklFOUdJRUZPV1NCTFNVNUVMQ0JGV0ZCU1JWTlRYRzR2THlCUFVpQkpUVkJNU1VWRUxDQkpUa05NVlVSSlRrY2dRbFZVSUU1UFZDQk1TVTFKVkVWRUlGUlBJRlJJUlNCWFFWSlNRVTVVU1VWVElFOUdYRzR2THlCTlJWSkRTRUZPVkVGQ1NVeEpWRmtzSUVaSlZFNUZVMU1nUms5U0lFRWdVRUZTVkVsRFZVeEJVaUJRVlZKUVQxTkZJRUZPUkNCT1QwNUpUa1pTU1U1SFJVMUZUbFF1SUVsT1hHNHZMeUJPVHlCRlZrVk9WQ0JUU0VGTVRDQlVTRVVnUVZWVVNFOVNVeUJQVWlCRFQxQlpVa2xIU0ZRZ1NFOU1SRVZTVXlCQ1JTQk1TVUZDVEVVZ1JrOVNJRUZPV1NCRFRFRkpUU3hjYmk4dklFUkJUVUZIUlZNZ1QxSWdUMVJJUlZJZ1RFbEJRa2xNU1ZSWkxDQlhTRVZVU0VWU0lFbE9JRUZPSUVGRFZFbFBUaUJQUmlCRFQwNVVVa0ZEVkN3Z1ZFOVNWQ0JQVWx4dUx5OGdUMVJJUlZKWFNWTkZMQ0JCVWtsVFNVNUhJRVpTVDAwc0lFOVZWQ0JQUmlCUFVpQkpUaUJEVDA1T1JVTlVTVTlPSUZkSlZFZ2dWRWhGSUZOUFJsUlhRVkpGSUU5U0lGUklSVnh1THk4Z1ZWTkZJRTlTSUU5VVNFVlNJRVJGUVV4SlRrZFRJRWxPSUZSSVJTQlRUMFpVVjBGU1JTNWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JTWldGa1lXSnNaVHRjYmx4dUx5bzhjbVZ3YkdGalpXMWxiblErS2k5Y2JuWmhjaUJwYzBGeWNtRjVJRDBnY21WeGRXbHlaU2duYVhOaGNuSmhlU2NwTzF4dUx5bzhMM0psY0d4aFkyVnRaVzUwUGlvdlhHNWNibHh1THlvOGNtVndiR0ZqWlcxbGJuUStLaTljYm5aaGNpQkNkV1ptWlhJZ1BTQnlaWEYxYVhKbEtDZGlkV1ptWlhJbktTNUNkV1ptWlhJN1hHNHZLand2Y21Wd2JHRmpaVzFsYm5RK0tpOWNibHh1VW1WaFpHRmliR1V1VW1WaFpHRmliR1ZUZEdGMFpTQTlJRkpsWVdSaFlteGxVM1JoZEdVN1hHNWNiblpoY2lCRlJTQTlJSEpsY1hWcGNtVW9KMlYyWlc1MGN5Y3BMa1YyWlc1MFJXMXBkSFJsY2p0Y2JseHVMeW84Y21Wd2JHRmpaVzFsYm5RK0tpOWNibWxtSUNnaFJVVXViR2x6ZEdWdVpYSkRiM1Z1ZENrZ1JVVXViR2x6ZEdWdVpYSkRiM1Z1ZENBOUlHWjFibU4wYVc5dUtHVnRhWFIwWlhJc0lIUjVjR1VwSUh0Y2JpQWdjbVYwZFhKdUlHVnRhWFIwWlhJdWJHbHpkR1Z1WlhKektIUjVjR1VwTG14bGJtZDBhRHRjYm4wN1hHNHZLand2Y21Wd2JHRmpaVzFsYm5RK0tpOWNibHh1ZG1GeUlGTjBjbVZoYlNBOUlISmxjWFZwY21Vb0ozTjBjbVZoYlNjcE8xeHVYRzR2S2p4eVpYQnNZV05sYldWdWRENHFMMXh1ZG1GeUlIVjBhV3dnUFNCeVpYRjFhWEpsS0NkamIzSmxMWFYwYVd3dGFYTW5LVHRjYm5WMGFXd3VhVzVvWlhKcGRITWdQU0J5WlhGMWFYSmxLQ2RwYm1obGNtbDBjeWNwTzF4dUx5bzhMM0psY0d4aFkyVnRaVzUwUGlvdlhHNWNiblpoY2lCVGRISnBibWRFWldOdlpHVnlPMXh1WEc1Y2JpOHFQSEpsY0d4aFkyVnRaVzUwUGlvdlhHNTJZWElnWkdWaWRXY2dQU0J5WlhGMWFYSmxLQ2QxZEdsc0p5azdYRzVwWmlBb1pHVmlkV2NnSmlZZ1pHVmlkV2N1WkdWaWRXZHNiMmNwSUh0Y2JpQWdaR1ZpZFdjZ1BTQmtaV0oxWnk1a1pXSjFaMnh2WnlnbmMzUnlaV0Z0SnlrN1hHNTlJR1ZzYzJVZ2UxeHVJQ0JrWldKMVp5QTlJR1oxYm1OMGFXOXVJQ2dwSUh0OU8xeHVmVnh1THlvOEwzSmxjR3hoWTJWdFpXNTBQaW92WEc1Y2JseHVkWFJwYkM1cGJtaGxjbWwwY3loU1pXRmtZV0pzWlN3Z1UzUnlaV0Z0S1R0Y2JseHVablZ1WTNScGIyNGdVbVZoWkdGaWJHVlRkR0YwWlNodmNIUnBiMjV6TENCemRISmxZVzBwSUh0Y2JpQWdkbUZ5SUVSMWNHeGxlQ0E5SUhKbGNYVnBjbVVvSnk0dlgzTjBjbVZoYlY5a2RYQnNaWGduS1R0Y2JseHVJQ0J2Y0hScGIyNXpJRDBnYjNCMGFXOXVjeUI4ZkNCN2ZUdGNibHh1SUNBdkx5QjBhR1VnY0c5cGJuUWdZWFFnZDJocFkyZ2dhWFFnYzNSdmNITWdZMkZzYkdsdVp5QmZjbVZoWkNncElIUnZJR1pwYkd3Z2RHaGxJR0oxWm1abGNseHVJQ0F2THlCT2IzUmxPaUF3SUdseklHRWdkbUZzYVdRZ2RtRnNkV1VzSUcxbFlXNXpJRndpWkc5dUozUWdZMkZzYkNCZmNtVmhaQ0J3Y21WbGJYQjBhWFpsYkhrZ1pYWmxjbHdpWEc0Z0lIWmhjaUJvZDIwZ1BTQnZjSFJwYjI1ekxtaHBaMmhYWVhSbGNrMWhjbXM3WEc0Z0lIWmhjaUJrWldaaGRXeDBTSGR0SUQwZ2IzQjBhVzl1Y3k1dlltcGxZM1JOYjJSbElEOGdNVFlnT2lBeE5pQXFJREV3TWpRN1hHNGdJSFJvYVhNdWFHbG5hRmRoZEdWeVRXRnlheUE5SUNob2QyMGdmSHdnYUhkdElEMDlQU0F3S1NBL0lHaDNiU0E2SUdSbFptRjFiSFJJZDIwN1hHNWNiaUFnTHk4Z1kyRnpkQ0IwYnlCcGJuUnpMbHh1SUNCMGFHbHpMbWhwWjJoWFlYUmxjazFoY21zZ1BTQitmblJvYVhNdWFHbG5hRmRoZEdWeVRXRnlhenRjYmx4dUlDQjBhR2x6TG1KMVptWmxjaUE5SUZ0ZE8xeHVJQ0IwYUdsekxteGxibWQwYUNBOUlEQTdYRzRnSUhSb2FYTXVjR2x3WlhNZ1BTQnVkV3hzTzF4dUlDQjBhR2x6TG5CcGNHVnpRMjkxYm5RZ1BTQXdPMXh1SUNCMGFHbHpMbVpzYjNkcGJtY2dQU0J1ZFd4c08xeHVJQ0IwYUdsekxtVnVaR1ZrSUQwZ1ptRnNjMlU3WEc0Z0lIUm9hWE11Wlc1a1JXMXBkSFJsWkNBOUlHWmhiSE5sTzF4dUlDQjBhR2x6TG5KbFlXUnBibWNnUFNCbVlXeHpaVHRjYmx4dUlDQXZMeUJoSUdac1lXY2dkRzhnWW1VZ1lXSnNaU0IwYnlCMFpXeHNJR2xtSUhSb1pTQnZibmR5YVhSbElHTmlJR2x6SUdOaGJHeGxaQ0JwYlcxbFpHbGhkR1ZzZVN4Y2JpQWdMeThnYjNJZ2IyNGdZU0JzWVhSbGNpQjBhV05yTGlBZ1YyVWdjMlYwSUhSb2FYTWdkRzhnZEhKMVpTQmhkQ0JtYVhKemRDd2dZbVZqWVhWelpTQmhibmxjYmlBZ0x5OGdZV04wYVc5dWN5QjBhR0YwSUhOb2IzVnNaRzRuZENCb1lYQndaVzRnZFc1MGFXd2dYQ0pzWVhSbGNsd2lJSE5vYjNWc1pDQm5aVzVsY21Gc2JIa2dZV3h6YjF4dUlDQXZMeUJ1YjNRZ2FHRndjR1Z1SUdKbFptOXlaU0IwYUdVZ1ptbHljM1FnZDNKcGRHVWdZMkZzYkM1Y2JpQWdkR2hwY3k1emVXNWpJRDBnZEhKMVpUdGNibHh1SUNBdkx5QjNhR1Z1WlhabGNpQjNaU0J5WlhSMWNtNGdiblZzYkN3Z2RHaGxiaUIzWlNCelpYUWdZU0JtYkdGbklIUnZJSE5oZVZ4dUlDQXZMeUIwYUdGMElIZGxKM0psSUdGM1lXbDBhVzVuSUdFZ0ozSmxZV1JoWW14bEp5QmxkbVZ1ZENCbGJXbHpjMmx2Ymk1Y2JpQWdkR2hwY3k1dVpXVmtVbVZoWkdGaWJHVWdQU0JtWVd4elpUdGNiaUFnZEdocGN5NWxiV2wwZEdWa1VtVmhaR0ZpYkdVZ1BTQm1ZV3h6WlR0Y2JpQWdkR2hwY3k1eVpXRmtZV0pzWlV4cGMzUmxibWx1WnlBOUlHWmhiSE5sTzF4dVhHNWNiaUFnTHk4Z2IySnFaV04wSUhOMGNtVmhiU0JtYkdGbkxpQlZjMlZrSUhSdklHMWhhMlVnY21WaFpDaHVLU0JwWjI1dmNtVWdiaUJoYm1RZ2RHOWNiaUFnTHk4Z2JXRnJaU0JoYkd3Z2RHaGxJR0oxWm1abGNpQnRaWEpuYVc1bklHRnVaQ0JzWlc1bmRHZ2dZMmhsWTJ0eklHZHZJR0YzWVhsY2JpQWdkR2hwY3k1dlltcGxZM1JOYjJSbElEMGdJU0Z2Y0hScGIyNXpMbTlpYW1WamRFMXZaR1U3WEc1Y2JpQWdhV1lnS0hOMGNtVmhiU0JwYm5OMFlXNWpaVzltSUVSMWNHeGxlQ2xjYmlBZ0lDQjBhR2x6TG05aWFtVmpkRTF2WkdVZ1BTQjBhR2x6TG05aWFtVmpkRTF2WkdVZ2ZId2dJU0Z2Y0hScGIyNXpMbkpsWVdSaFlteGxUMkpxWldOMFRXOWtaVHRjYmx4dUlDQXZMeUJEY25sd2RHOGdhWE1nYTJsdVpDQnZaaUJ2YkdRZ1lXNWtJR055ZFhOMGVTNGdJRWhwYzNSdmNtbGpZV3hzZVN3Z2FYUnpJR1JsWm1GMWJIUWdjM1J5YVc1blhHNGdJQzh2SUdWdVkyOWthVzVuSUdseklDZGlhVzVoY25rbklITnZJSGRsSUdoaGRtVWdkRzhnYldGclpTQjBhR2x6SUdOdmJtWnBaM1Z5WVdKc1pTNWNiaUFnTHk4Z1JYWmxjbmwwYUdsdVp5QmxiSE5sSUdsdUlIUm9aU0IxYm1sMlpYSnpaU0IxYzJWeklDZDFkR1k0Snl3Z2RHaHZkV2RvTGx4dUlDQjBhR2x6TG1SbFptRjFiSFJGYm1OdlpHbHVaeUE5SUc5d2RHbHZibk11WkdWbVlYVnNkRVZ1WTI5a2FXNW5JSHg4SUNkMWRHWTRKenRjYmx4dUlDQXZMeUIzYUdWdUlIQnBjR2x1Wnl3Z2QyVWdiMjVzZVNCallYSmxJR0ZpYjNWMElDZHlaV0ZrWVdKc1pTY2daWFpsYm5SeklIUm9ZWFFnYUdGd2NHVnVYRzRnSUM4dklHRm1kR1Z5SUhKbFlXUW9LV2x1WnlCaGJHd2dkR2hsSUdKNWRHVnpJR0Z1WkNCdWIzUWdaMlYwZEdsdVp5QmhibmtnY0hWemFHSmhZMnN1WEc0Z0lIUm9hWE11Y21GdVQzVjBJRDBnWm1Gc2MyVTdYRzVjYmlBZ0x5OGdkR2hsSUc1MWJXSmxjaUJ2WmlCM2NtbDBaWEp6SUhSb1lYUWdZWEpsSUdGM1lXbDBhVzVuSUdFZ1pISmhhVzRnWlhabGJuUWdhVzRnTG5CcGNHVW9LWE5jYmlBZ2RHaHBjeTVoZDJGcGRFUnlZV2x1SUQwZ01EdGNibHh1SUNBdkx5QnBaaUIwY25WbExDQmhJRzFoZVdKbFVtVmhaRTF2Y21VZ2FHRnpJR0psWlc0Z2MyTm9aV1IxYkdWa1hHNGdJSFJvYVhNdWNtVmhaR2x1WjAxdmNtVWdQU0JtWVd4elpUdGNibHh1SUNCMGFHbHpMbVJsWTI5a1pYSWdQU0J1ZFd4c08xeHVJQ0IwYUdsekxtVnVZMjlrYVc1bklEMGdiblZzYkR0Y2JpQWdhV1lnS0c5d2RHbHZibk11Wlc1amIyUnBibWNwSUh0Y2JpQWdJQ0JwWmlBb0lWTjBjbWx1WjBSbFkyOWtaWElwWEc0Z0lDQWdJQ0JUZEhKcGJtZEVaV052WkdWeUlEMGdjbVZ4ZFdseVpTZ25jM1J5YVc1blgyUmxZMjlrWlhJdkp5a3VVM1J5YVc1blJHVmpiMlJsY2p0Y2JpQWdJQ0IwYUdsekxtUmxZMjlrWlhJZ1BTQnVaWGNnVTNSeWFXNW5SR1ZqYjJSbGNpaHZjSFJwYjI1ekxtVnVZMjlrYVc1bktUdGNiaUFnSUNCMGFHbHpMbVZ1WTI5a2FXNW5JRDBnYjNCMGFXOXVjeTVsYm1OdlpHbHVaenRjYmlBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCU1pXRmtZV0pzWlNodmNIUnBiMjV6S1NCN1hHNGdJSFpoY2lCRWRYQnNaWGdnUFNCeVpYRjFhWEpsS0NjdUwxOXpkSEpsWVcxZlpIVndiR1Y0SnlrN1hHNWNiaUFnYVdZZ0tDRW9kR2hwY3lCcGJuTjBZVzVqWlc5bUlGSmxZV1JoWW14bEtTbGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGSmxZV1JoWW14bEtHOXdkR2x2Ym5NcE8xeHVYRzRnSUhSb2FYTXVYM0psWVdSaFlteGxVM1JoZEdVZ1BTQnVaWGNnVW1WaFpHRmliR1ZUZEdGMFpTaHZjSFJwYjI1ekxDQjBhR2x6S1R0Y2JseHVJQ0F2THlCc1pXZGhZM2xjYmlBZ2RHaHBjeTV5WldGa1lXSnNaU0E5SUhSeWRXVTdYRzVjYmlBZ1UzUnlaV0Z0TG1OaGJHd29kR2hwY3lrN1hHNTlYRzVjYmk4dklFMWhiblZoYkd4NUlITm9iM1psSUhOdmJXVjBhR2x1WnlCcGJuUnZJSFJvWlNCeVpXRmtLQ2tnWW5WbVptVnlMbHh1THk4Z1ZHaHBjeUJ5WlhSMWNtNXpJSFJ5ZFdVZ2FXWWdkR2hsSUdocFoyaFhZWFJsY2sxaGNtc2dhR0Z6SUc1dmRDQmlaV1Z1SUdocGRDQjVaWFFzWEc0dkx5QnphVzFwYkdGeUlIUnZJR2h2ZHlCWGNtbDBZV0pzWlM1M2NtbDBaU2dwSUhKbGRIVnlibk1nZEhKMVpTQnBaaUI1YjNVZ2MyaHZkV3hrWEc0dkx5QjNjbWwwWlNncElITnZiV1VnYlc5eVpTNWNibEpsWVdSaFlteGxMbkJ5YjNSdmRIbHdaUzV3ZFhOb0lEMGdablZ1WTNScGIyNG9ZMmgxYm1zc0lHVnVZMjlrYVc1bktTQjdYRzRnSUhaaGNpQnpkR0YwWlNBOUlIUm9hWE11WDNKbFlXUmhZbXhsVTNSaGRHVTdYRzVjYmlBZ2FXWWdLSFYwYVd3dWFYTlRkSEpwYm1jb1kyaDFibXNwSUNZbUlDRnpkR0YwWlM1dlltcGxZM1JOYjJSbEtTQjdYRzRnSUNBZ1pXNWpiMlJwYm1jZ1BTQmxibU52WkdsdVp5QjhmQ0J6ZEdGMFpTNWtaV1poZFd4MFJXNWpiMlJwYm1jN1hHNGdJQ0FnYVdZZ0tHVnVZMjlrYVc1bklDRTlQU0J6ZEdGMFpTNWxibU52WkdsdVp5a2dlMXh1SUNBZ0lDQWdZMmgxYm1zZ1BTQnVaWGNnUW5WbVptVnlLR05vZFc1ckxDQmxibU52WkdsdVp5azdYRzRnSUNBZ0lDQmxibU52WkdsdVp5QTlJQ2NuTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJ5WldGa1lXSnNaVUZrWkVOb2RXNXJLSFJvYVhNc0lITjBZWFJsTENCamFIVnVheXdnWlc1amIyUnBibWNzSUdaaGJITmxLVHRjYm4wN1hHNWNiaTh2SUZWdWMyaHBablFnYzJodmRXeGtJQ3BoYkhkaGVYTXFJR0psSUhOdmJXVjBhR2x1WnlCa2FYSmxZM1JzZVNCdmRYUWdiMllnY21WaFpDZ3BYRzVTWldGa1lXSnNaUzV3Y205MGIzUjVjR1V1ZFc1emFHbG1kQ0E5SUdaMWJtTjBhVzl1S0dOb2RXNXJLU0I3WEc0Z0lIWmhjaUJ6ZEdGMFpTQTlJSFJvYVhNdVgzSmxZV1JoWW14bFUzUmhkR1U3WEc0Z0lISmxkSFZ5YmlCeVpXRmtZV0pzWlVGa1pFTm9kVzVyS0hSb2FYTXNJSE4wWVhSbExDQmphSFZ1YXl3Z0p5Y3NJSFJ5ZFdVcE8xeHVmVHRjYmx4dVpuVnVZM1JwYjI0Z2NtVmhaR0ZpYkdWQlpHUkRhSFZ1YXloemRISmxZVzBzSUhOMFlYUmxMQ0JqYUhWdWF5d2daVzVqYjJScGJtY3NJR0ZrWkZSdlJuSnZiblFwSUh0Y2JpQWdkbUZ5SUdWeUlEMGdZMmgxYm10SmJuWmhiR2xrS0hOMFlYUmxMQ0JqYUhWdWF5azdYRzRnSUdsbUlDaGxjaWtnZTF4dUlDQWdJSE4wY21WaGJTNWxiV2wwS0NkbGNuSnZjaWNzSUdWeUtUdGNiaUFnZlNCbGJITmxJR2xtSUNoMWRHbHNMbWx6VG5Wc2JFOXlWVzVrWldacGJtVmtLR05vZFc1cktTa2dlMXh1SUNBZ0lITjBZWFJsTG5KbFlXUnBibWNnUFNCbVlXeHpaVHRjYmlBZ0lDQnBaaUFvSVhOMFlYUmxMbVZ1WkdWa0tWeHVJQ0FnSUNBZ2IyNUZiMlpEYUhWdWF5aHpkSEpsWVcwc0lITjBZWFJsS1R0Y2JpQWdmU0JsYkhObElHbG1JQ2h6ZEdGMFpTNXZZbXBsWTNSTmIyUmxJSHg4SUdOb2RXNXJJQ1ltSUdOb2RXNXJMbXhsYm1kMGFDQStJREFwSUh0Y2JpQWdJQ0JwWmlBb2MzUmhkR1V1Wlc1a1pXUWdKaVlnSVdGa1pGUnZSbkp2Ym5RcElIdGNiaUFnSUNBZ0lIWmhjaUJsSUQwZ2JtVjNJRVZ5Y205eUtDZHpkSEpsWVcwdWNIVnphQ2dwSUdGbWRHVnlJRVZQUmljcE8xeHVJQ0FnSUNBZ2MzUnlaV0Z0TG1WdGFYUW9KMlZ5Y205eUp5d2daU2s3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2h6ZEdGMFpTNWxibVJGYldsMGRHVmtJQ1ltSUdGa1pGUnZSbkp2Ym5RcElIdGNiaUFnSUNBZ0lIWmhjaUJsSUQwZ2JtVjNJRVZ5Y205eUtDZHpkSEpsWVcwdWRXNXphR2xtZENncElHRm1kR1Z5SUdWdVpDQmxkbVZ1ZENjcE8xeHVJQ0FnSUNBZ2MzUnlaV0Z0TG1WdGFYUW9KMlZ5Y205eUp5d2daU2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHbG1JQ2h6ZEdGMFpTNWtaV052WkdWeUlDWW1JQ0ZoWkdSVWIwWnliMjUwSUNZbUlDRmxibU52WkdsdVp5bGNiaUFnSUNBZ0lDQWdZMmgxYm1zZ1BTQnpkR0YwWlM1a1pXTnZaR1Z5TG5keWFYUmxLR05vZFc1cktUdGNibHh1SUNBZ0lDQWdhV1lnS0NGaFpHUlViMFp5YjI1MEtWeHVJQ0FnSUNBZ0lDQnpkR0YwWlM1eVpXRmthVzVuSUQwZ1ptRnNjMlU3WEc1Y2JpQWdJQ0FnSUM4dklHbG1JSGRsSUhkaGJuUWdkR2hsSUdSaGRHRWdibTkzTENCcWRYTjBJR1Z0YVhRZ2FYUXVYRzRnSUNBZ0lDQnBaaUFvYzNSaGRHVXVabXh2ZDJsdVp5QW1KaUJ6ZEdGMFpTNXNaVzVuZEdnZ1BUMDlJREFnSmlZZ0lYTjBZWFJsTG5ONWJtTXBJSHRjYmlBZ0lDQWdJQ0FnYzNSeVpXRnRMbVZ0YVhRb0oyUmhkR0VuTENCamFIVnVheWs3WEc0Z0lDQWdJQ0FnSUhOMGNtVmhiUzV5WldGa0tEQXBPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdMeThnZFhCa1lYUmxJSFJvWlNCaWRXWm1aWElnYVc1bWJ5NWNiaUFnSUNBZ0lDQWdjM1JoZEdVdWJHVnVaM1JvSUNzOUlITjBZWFJsTG05aWFtVmpkRTF2WkdVZ1B5QXhJRG9nWTJoMWJtc3ViR1Z1WjNSb08xeHVJQ0FnSUNBZ0lDQnBaaUFvWVdSa1ZHOUdjbTl1ZENsY2JpQWdJQ0FnSUNBZ0lDQnpkR0YwWlM1aWRXWm1aWEl1ZFc1emFHbG1kQ2hqYUhWdWF5azdYRzRnSUNBZ0lDQWdJR1ZzYzJWY2JpQWdJQ0FnSUNBZ0lDQnpkR0YwWlM1aWRXWm1aWEl1Y0hWemFDaGphSFZ1YXlrN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0hOMFlYUmxMbTVsWldSU1pXRmtZV0pzWlNsY2JpQWdJQ0FnSUNBZ0lDQmxiV2wwVW1WaFpHRmliR1VvYzNSeVpXRnRLVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnYldGNVltVlNaV0ZrVFc5eVpTaHpkSEpsWVcwc0lITjBZWFJsS1R0Y2JpQWdJQ0I5WEc0Z0lIMGdaV3h6WlNCcFppQW9JV0ZrWkZSdlJuSnZiblFwSUh0Y2JpQWdJQ0J6ZEdGMFpTNXlaV0ZrYVc1bklEMGdabUZzYzJVN1hHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2JtVmxaRTF2Y21WRVlYUmhLSE4wWVhSbEtUdGNibjFjYmx4dVhHNWNiaTh2SUdsbUlHbDBKM01nY0dGemRDQjBhR1VnYUdsbmFDQjNZWFJsY2lCdFlYSnJMQ0IzWlNCallXNGdjSFZ6YUNCcGJpQnpiMjFsSUcxdmNtVXVYRzR2THlCQmJITnZMQ0JwWmlCM1pTQm9ZWFpsSUc1dklHUmhkR0VnZVdWMExDQjNaU0JqWVc0Z2MzUmhibVFnYzI5dFpWeHVMeThnYlc5eVpTQmllWFJsY3k0Z0lGUm9hWE1nYVhNZ2RHOGdkMjl5YXlCaGNtOTFibVFnWTJGelpYTWdkMmhsY21VZ2FIZHRQVEFzWEc0dkx5QnpkV05vSUdGeklIUm9aU0J5WlhCc0xpQWdRV3h6Ynl3Z2FXWWdkR2hsSUhCMWMyZ29LU0IwY21sbloyVnlaV1FnWVZ4dUx5OGdjbVZoWkdGaWJHVWdaWFpsYm5Rc0lHRnVaQ0IwYUdVZ2RYTmxjaUJqWVd4c1pXUWdjbVZoWkNoc1lYSm5aVTUxYldKbGNpa2djM1ZqYUNCMGFHRjBYRzR2THlCdVpXVmtVbVZoWkdGaWJHVWdkMkZ6SUhObGRDd2dkR2hsYmlCM1pTQnZkV2RvZENCMGJ5QndkWE5vSUcxdmNtVXNJSE52SUhSb1lYUWdZVzV2ZEdobGNseHVMeThnSjNKbFlXUmhZbXhsSnlCbGRtVnVkQ0IzYVd4c0lHSmxJSFJ5YVdkblpYSmxaQzVjYm1aMWJtTjBhVzl1SUc1bFpXUk5iM0psUkdGMFlTaHpkR0YwWlNrZ2UxeHVJQ0J5WlhSMWNtNGdJWE4wWVhSbExtVnVaR1ZrSUNZbVhHNGdJQ0FnSUNBZ0lDQW9jM1JoZEdVdWJtVmxaRkpsWVdSaFlteGxJSHg4WEc0Z0lDQWdJQ0FnSUNBZ2MzUmhkR1V1YkdWdVozUm9JRHdnYzNSaGRHVXVhR2xuYUZkaGRHVnlUV0Z5YXlCOGZGeHVJQ0FnSUNBZ0lDQWdJSE4wWVhSbExteGxibWQwYUNBOVBUMGdNQ2s3WEc1OVhHNWNiaTh2SUdKaFkydDNZWEprY3lCamIyMXdZWFJwWW1sc2FYUjVMbHh1VW1WaFpHRmliR1V1Y0hKdmRHOTBlWEJsTG5ObGRFVnVZMjlrYVc1bklEMGdablZ1WTNScGIyNG9aVzVqS1NCN1hHNGdJR2xtSUNnaFUzUnlhVzVuUkdWamIyUmxjaWxjYmlBZ0lDQlRkSEpwYm1kRVpXTnZaR1Z5SUQwZ2NtVnhkV2x5WlNnbmMzUnlhVzVuWDJSbFkyOWtaWEl2SnlrdVUzUnlhVzVuUkdWamIyUmxjanRjYmlBZ2RHaHBjeTVmY21WaFpHRmliR1ZUZEdGMFpTNWtaV052WkdWeUlEMGdibVYzSUZOMGNtbHVaMFJsWTI5a1pYSW9aVzVqS1R0Y2JpQWdkR2hwY3k1ZmNtVmhaR0ZpYkdWVGRHRjBaUzVsYm1OdlpHbHVaeUE5SUdWdVl6dGNiaUFnY21WMGRYSnVJSFJvYVhNN1hHNTlPMXh1WEc0dkx5QkViMjRuZENCeVlXbHpaU0IwYUdVZ2FIZHRJRDRnTVRJNFRVSmNiblpoY2lCTlFWaGZTRmROSUQwZ01IZzRNREF3TURBN1hHNW1kVzVqZEdsdmJpQnliM1Z1WkZWd1ZHOU9aWGgwVUc5M1pYSlBaaklvYmlrZ2UxeHVJQ0JwWmlBb2JpQStQU0JOUVZoZlNGZE5LU0I3WEc0Z0lDQWdiaUE5SUUxQldGOUlWMDA3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnTHk4Z1IyVjBJSFJvWlNCdVpYaDBJR2hwWjJobGMzUWdjRzkzWlhJZ2IyWWdNbHh1SUNBZ0lHNHRMVHRjYmlBZ0lDQm1iM0lnS0haaGNpQndJRDBnTVRzZ2NDQThJRE15T3lCd0lEdzhQU0F4S1NCdUlIdzlJRzRnUGo0Z2NEdGNiaUFnSUNCdUt5czdYRzRnSUgxY2JpQWdjbVYwZFhKdUlHNDdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHaHZkMDExWTJoVWIxSmxZV1FvYml3Z2MzUmhkR1VwSUh0Y2JpQWdhV1lnS0hOMFlYUmxMbXhsYm1kMGFDQTlQVDBnTUNBbUppQnpkR0YwWlM1bGJtUmxaQ2xjYmlBZ0lDQnlaWFIxY200Z01EdGNibHh1SUNCcFppQW9jM1JoZEdVdWIySnFaV04wVFc5a1pTbGNiaUFnSUNCeVpYUjFjbTRnYmlBOVBUMGdNQ0EvSURBZ09pQXhPMXh1WEc0Z0lHbG1JQ2hwYzA1aFRpaHVLU0I4ZkNCMWRHbHNMbWx6VG5Wc2JDaHVLU2tnZTF4dUlDQWdJQzh2SUc5dWJIa2dabXh2ZHlCdmJtVWdZblZtWm1WeUlHRjBJR0VnZEdsdFpWeHVJQ0FnSUdsbUlDaHpkR0YwWlM1bWJHOTNhVzVuSUNZbUlITjBZWFJsTG1KMVptWmxjaTVzWlc1bmRHZ3BYRzRnSUNBZ0lDQnlaWFIxY200Z2MzUmhkR1V1WW5WbVptVnlXekJkTG14bGJtZDBhRHRjYmlBZ0lDQmxiSE5sWEc0Z0lDQWdJQ0J5WlhSMWNtNGdjM1JoZEdVdWJHVnVaM1JvTzF4dUlDQjlYRzVjYmlBZ2FXWWdLRzRnUEQwZ01DbGNiaUFnSUNCeVpYUjFjbTRnTUR0Y2JseHVJQ0F2THlCSlppQjNaU2R5WlNCaGMydHBibWNnWm05eUlHMXZjbVVnZEdoaGJpQjBhR1VnZEdGeVoyVjBJR0oxWm1abGNpQnNaWFpsYkN4Y2JpQWdMeThnZEdobGJpQnlZV2x6WlNCMGFHVWdkMkYwWlhJZ2JXRnlheTRnSUVKMWJYQWdkWEFnZEc4Z2RHaGxJRzVsZUhRZ2FHbG5hR1Z6ZEZ4dUlDQXZMeUJ3YjNkbGNpQnZaaUF5TENCMGJ5QndjbVYyWlc1MElHbHVZM0psWVhOcGJtY2dhWFFnWlhoalpYTnphWFpsYkhrZ2FXNGdkR2x1ZVZ4dUlDQXZMeUJoYlc5MWJuUnpMbHh1SUNCcFppQW9iaUErSUhOMFlYUmxMbWhwWjJoWFlYUmxjazFoY21zcFhHNGdJQ0FnYzNSaGRHVXVhR2xuYUZkaGRHVnlUV0Z5YXlBOUlISnZkVzVrVlhCVWIwNWxlSFJRYjNkbGNrOW1NaWh1S1R0Y2JseHVJQ0F2THlCa2IyNG5kQ0JvWVhabElIUm9ZWFFnYlhWamFDNGdJSEpsZEhWeWJpQnVkV3hzTENCMWJteGxjM01nZDJVbmRtVWdaVzVrWldRdVhHNGdJR2xtSUNodUlENGdjM1JoZEdVdWJHVnVaM1JvS1NCN1hHNGdJQ0FnYVdZZ0tDRnpkR0YwWlM1bGJtUmxaQ2tnZTF4dUlDQWdJQ0FnYzNSaGRHVXVibVZsWkZKbFlXUmhZbXhsSUQwZ2RISjFaVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQXdPMXh1SUNBZ0lIMGdaV3h6WlZ4dUlDQWdJQ0FnY21WMGRYSnVJSE4wWVhSbExteGxibWQwYUR0Y2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCdU8xeHVmVnh1WEc0dkx5QjViM1VnWTJGdUlHOTJaWEp5YVdSbElHVnBkR2hsY2lCMGFHbHpJRzFsZEdodlpDd2diM0lnZEdobElHRnplVzVqSUY5eVpXRmtLRzRwSUdKbGJHOTNMbHh1VW1WaFpHRmliR1V1Y0hKdmRHOTBlWEJsTG5KbFlXUWdQU0JtZFc1amRHbHZiaWh1S1NCN1hHNGdJR1JsWW5WbktDZHlaV0ZrSnl3Z2JpazdYRzRnSUhaaGNpQnpkR0YwWlNBOUlIUm9hWE11WDNKbFlXUmhZbXhsVTNSaGRHVTdYRzRnSUhaaGNpQnVUM0pwWnlBOUlHNDdYRzVjYmlBZ2FXWWdLQ0YxZEdsc0xtbHpUblZ0WW1WeUtHNHBJSHg4SUc0Z1BpQXdLVnh1SUNBZ0lITjBZWFJsTG1WdGFYUjBaV1JTWldGa1lXSnNaU0E5SUdaaGJITmxPMXh1WEc0Z0lDOHZJR2xtSUhkbEozSmxJR1J2YVc1bklISmxZV1FvTUNrZ2RHOGdkSEpwWjJkbGNpQmhJSEpsWVdSaFlteGxJR1YyWlc1MExDQmlkWFFnZDJWY2JpQWdMeThnWVd4eVpXRmtlU0JvWVhabElHRWdZblZ1WTJnZ2IyWWdaR0YwWVNCcGJpQjBhR1VnWW5WbVptVnlMQ0IwYUdWdUlHcDFjM1FnZEhKcFoyZGxjbHh1SUNBdkx5QjBhR1VnSjNKbFlXUmhZbXhsSnlCbGRtVnVkQ0JoYm1RZ2JXOTJaU0J2Ymk1Y2JpQWdhV1lnS0c0Z1BUMDlJREFnSmlaY2JpQWdJQ0FnSUhOMFlYUmxMbTVsWldSU1pXRmtZV0pzWlNBbUpseHVJQ0FnSUNBZ0tITjBZWFJsTG14bGJtZDBhQ0ErUFNCemRHRjBaUzVvYVdkb1YyRjBaWEpOWVhKcklIeDhJSE4wWVhSbExtVnVaR1ZrS1NrZ2UxeHVJQ0FnSUdSbFluVm5LQ2R5WldGa09pQmxiV2wwVW1WaFpHRmliR1VuTENCemRHRjBaUzVzWlc1bmRHZ3NJSE4wWVhSbExtVnVaR1ZrS1R0Y2JpQWdJQ0JwWmlBb2MzUmhkR1V1YkdWdVozUm9JRDA5UFNBd0lDWW1JSE4wWVhSbExtVnVaR1ZrS1Z4dUlDQWdJQ0FnWlc1a1VtVmhaR0ZpYkdVb2RHaHBjeWs3WEc0Z0lDQWdaV3h6WlZ4dUlDQWdJQ0FnWlcxcGRGSmxZV1JoWW14bEtIUm9hWE1wTzF4dUlDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQjlYRzVjYmlBZ2JpQTlJR2h2ZDAxMVkyaFViMUpsWVdRb2Jpd2djM1JoZEdVcE8xeHVYRzRnSUM4dklHbG1JSGRsSjNabElHVnVaR1ZrTENCaGJtUWdkMlVuY21VZ2JtOTNJR05zWldGeUxDQjBhR1Z1SUdacGJtbHphQ0JwZENCMWNDNWNiaUFnYVdZZ0tHNGdQVDA5SURBZ0ppWWdjM1JoZEdVdVpXNWtaV1FwSUh0Y2JpQWdJQ0JwWmlBb2MzUmhkR1V1YkdWdVozUm9JRDA5UFNBd0tWeHVJQ0FnSUNBZ1pXNWtVbVZoWkdGaWJHVW9kR2hwY3lrN1hHNGdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNGdJSDFjYmx4dUlDQXZMeUJCYkd3Z2RHaGxJR0ZqZEhWaGJDQmphSFZ1YXlCblpXNWxjbUYwYVc5dUlHeHZaMmxqSUc1bFpXUnpJSFJ2SUdKbFhHNGdJQzh2SUNwaVpXeHZkeW9nZEdobElHTmhiR3dnZEc4Z1gzSmxZV1F1SUNCVWFHVWdjbVZoYzI5dUlHbHpJSFJvWVhRZ2FXNGdZMlZ5ZEdGcGJseHVJQ0F2THlCemVXNTBhR1YwYVdNZ2MzUnlaV0Z0SUdOaGMyVnpMQ0J6ZFdOb0lHRnpJSEJoYzNOMGFISnZkV2RvSUhOMGNtVmhiWE1zSUY5eVpXRmtYRzRnSUM4dklHMWhlU0JpWlNCaElHTnZiWEJzWlhSbGJIa2djM2x1WTJoeWIyNXZkWE1nYjNCbGNtRjBhVzl1SUhkb2FXTm9JRzFoZVNCamFHRnVaMlZjYmlBZ0x5OGdkR2hsSUhOMFlYUmxJRzltSUhSb1pTQnlaV0ZrSUdKMVptWmxjaXdnY0hKdmRtbGthVzVuSUdWdWIzVm5hQ0JrWVhSaElIZG9aVzVjYmlBZ0x5OGdZbVZtYjNKbElIUm9aWEpsSUhkaGN5QXFibTkwS2lCbGJtOTFaMmd1WEc0Z0lDOHZYRzRnSUM4dklGTnZMQ0IwYUdVZ2MzUmxjSE1nWVhKbE9seHVJQ0F2THlBeExpQkdhV2QxY21VZ2IzVjBJSGRvWVhRZ2RHaGxJSE4wWVhSbElHOW1JSFJvYVc1bmN5QjNhV3hzSUdKbElHRm1kR1Z5SUhkbElHUnZYRzRnSUM4dklHRWdjbVZoWkNCbWNtOXRJSFJvWlNCaWRXWm1aWEl1WEc0Z0lDOHZYRzRnSUM4dklESXVJRWxtSUhSb1lYUWdjbVZ6ZFd4MGFXNW5JSE4wWVhSbElIZHBiR3dnZEhKcFoyZGxjaUJoSUY5eVpXRmtMQ0IwYUdWdUlHTmhiR3dnWDNKbFlXUXVYRzRnSUM4dklFNXZkR1VnZEdoaGRDQjBhR2x6SUcxaGVTQmlaU0JoYzNsdVkyaHliMjV2ZFhNc0lHOXlJSE41Ym1Ob2NtOXViM1Z6TGlBZ1dXVnpMQ0JwZENCcGMxeHVJQ0F2THlCa1pXVndiSGtnZFdkc2VTQjBieUIzY21sMFpTQkJVRWx6SUhSb2FYTWdkMkY1TENCaWRYUWdkR2hoZENCemRHbHNiQ0JrYjJWemJpZDBJRzFsWVc1Y2JpQWdMeThnZEdoaGRDQjBhR1VnVW1WaFpHRmliR1VnWTJ4aGMzTWdjMmh2ZFd4a0lHSmxhR0YyWlNCcGJYQnliM0JsY214NUxDQmhjeUJ6ZEhKbFlXMXpJR0Z5WlZ4dUlDQXZMeUJrWlhOcFoyNWxaQ0IwYnlCaVpTQnplVzVqTDJGemVXNWpJR0ZuYm05emRHbGpMbHh1SUNBdkx5QlVZV3RsSUc1dmRHVWdhV1lnZEdobElGOXlaV0ZrSUdOaGJHd2dhWE1nYzNsdVl5QnZjaUJoYzNsdVl5QW9hV1VzSUdsbUlIUm9aU0J5WldGa0lHTmhiR3hjYmlBZ0x5OGdhR0Z6SUhKbGRIVnlibVZrSUhsbGRDa3NJSE52SUhSb1lYUWdkMlVnYTI1dmR5QjNhR1YwYUdWeUlHOXlJRzV2ZENCcGRDZHpJSE5oWm1VZ2RHOGdaVzFwZEZ4dUlDQXZMeUFuY21WaFpHRmliR1VuSUdWMFl5NWNiaUFnTHk5Y2JpQWdMeThnTXk0Z1FXTjBkV0ZzYkhrZ2NIVnNiQ0IwYUdVZ2NtVnhkV1Z6ZEdWa0lHTm9kVzVyY3lCdmRYUWdiMllnZEdobElHSjFabVpsY2lCaGJtUWdjbVYwZFhKdUxseHVYRzRnSUM4dklHbG1JSGRsSUc1bFpXUWdZU0J5WldGa1lXSnNaU0JsZG1WdWRDd2dkR2hsYmlCM1pTQnVaV1ZrSUhSdklHUnZJSE52YldVZ2NtVmhaR2x1Wnk1Y2JpQWdkbUZ5SUdSdlVtVmhaQ0E5SUhOMFlYUmxMbTVsWldSU1pXRmtZV0pzWlR0Y2JpQWdaR1ZpZFdjb0oyNWxaV1FnY21WaFpHRmliR1VuTENCa2IxSmxZV1FwTzF4dVhHNGdJQzh2SUdsbUlIZGxJR04xY25KbGJuUnNlU0JvWVhabElHeGxjM01nZEdoaGJpQjBhR1VnYUdsbmFGZGhkR1Z5VFdGeWF5d2dkR2hsYmlCaGJITnZJSEpsWVdRZ2MyOXRaVnh1SUNCcFppQW9jM1JoZEdVdWJHVnVaM1JvSUQwOVBTQXdJSHg4SUhOMFlYUmxMbXhsYm1kMGFDQXRJRzRnUENCemRHRjBaUzVvYVdkb1YyRjBaWEpOWVhKcktTQjdYRzRnSUNBZ1pHOVNaV0ZrSUQwZ2RISjFaVHRjYmlBZ0lDQmtaV0oxWnlnbmJHVnVaM1JvSUd4bGMzTWdkR2hoYmlCM1lYUmxjbTFoY21zbkxDQmtiMUpsWVdRcE8xeHVJQ0I5WEc1Y2JpQWdMeThnYUc5M1pYWmxjaXdnYVdZZ2QyVW5kbVVnWlc1a1pXUXNJSFJvWlc0Z2RHaGxjbVVuY3lCdWJ5QndiMmx1ZEN3Z1lXNWtJR2xtSUhkbEozSmxJR0ZzY21WaFpIbGNiaUFnTHk4Z2NtVmhaR2x1Wnl3Z2RHaGxiaUJwZENkeklIVnVibVZqWlhOellYSjVMbHh1SUNCcFppQW9jM1JoZEdVdVpXNWtaV1FnZkh3Z2MzUmhkR1V1Y21WaFpHbHVaeWtnZTF4dUlDQWdJR1J2VW1WaFpDQTlJR1poYkhObE8xeHVJQ0FnSUdSbFluVm5LQ2R5WldGa2FXNW5JRzl5SUdWdVpHVmtKeXdnWkc5U1pXRmtLVHRjYmlBZ2ZWeHVYRzRnSUdsbUlDaGtiMUpsWVdRcElIdGNiaUFnSUNCa1pXSjFaeWduWkc4Z2NtVmhaQ2NwTzF4dUlDQWdJSE4wWVhSbExuSmxZV1JwYm1jZ1BTQjBjblZsTzF4dUlDQWdJSE4wWVhSbExuTjVibU1nUFNCMGNuVmxPMXh1SUNBZ0lDOHZJR2xtSUhSb1pTQnNaVzVuZEdnZ2FYTWdZM1Z5Y21WdWRHeDVJSHBsY204c0lIUm9aVzRnZDJVZ0ttNWxaV1FxSUdFZ2NtVmhaR0ZpYkdVZ1pYWmxiblF1WEc0Z0lDQWdhV1lnS0hOMFlYUmxMbXhsYm1kMGFDQTlQVDBnTUNsY2JpQWdJQ0FnSUhOMFlYUmxMbTVsWldSU1pXRmtZV0pzWlNBOUlIUnlkV1U3WEc0Z0lDQWdMeThnWTJGc2JDQnBiblJsY201aGJDQnlaV0ZrSUcxbGRHaHZaRnh1SUNBZ0lIUm9hWE11WDNKbFlXUW9jM1JoZEdVdWFHbG5hRmRoZEdWeVRXRnlheWs3WEc0Z0lDQWdjM1JoZEdVdWMzbHVZeUE5SUdaaGJITmxPMXh1SUNCOVhHNWNiaUFnTHk4Z1NXWWdYM0psWVdRZ2NIVnphR1ZrSUdSaGRHRWdjM2x1WTJoeWIyNXZkWE5zZVN3Z2RHaGxiaUJnY21WaFpHbHVaMkFnZDJsc2JDQmlaU0JtWVd4elpTeGNiaUFnTHk4Z1lXNWtJSGRsSUc1bFpXUWdkRzhnY21VdFpYWmhiSFZoZEdVZ2FHOTNJRzExWTJnZ1pHRjBZU0IzWlNCallXNGdjbVYwZFhKdUlIUnZJSFJvWlNCMWMyVnlMbHh1SUNCcFppQW9aRzlTWldGa0lDWW1JQ0Z6ZEdGMFpTNXlaV0ZrYVc1bktWeHVJQ0FnSUc0Z1BTQm9iM2ROZFdOb1ZHOVNaV0ZrS0c1UGNtbG5MQ0J6ZEdGMFpTazdYRzVjYmlBZ2RtRnlJSEpsZER0Y2JpQWdhV1lnS0c0Z1BpQXdLVnh1SUNBZ0lISmxkQ0E5SUdaeWIyMU1hWE4wS0c0c0lITjBZWFJsS1R0Y2JpQWdaV3h6WlZ4dUlDQWdJSEpsZENBOUlHNTFiR3c3WEc1Y2JpQWdhV1lnS0hWMGFXd3VhWE5PZFd4c0tISmxkQ2twSUh0Y2JpQWdJQ0J6ZEdGMFpTNXVaV1ZrVW1WaFpHRmliR1VnUFNCMGNuVmxPMXh1SUNBZ0lHNGdQU0F3TzF4dUlDQjlYRzVjYmlBZ2MzUmhkR1V1YkdWdVozUm9JQzA5SUc0N1hHNWNiaUFnTHk4Z1NXWWdkMlVnYUdGMlpTQnViM1JvYVc1bklHbHVJSFJvWlNCaWRXWm1aWElzSUhSb1pXNGdkMlVnZDJGdWRDQjBieUJyYm05M1hHNGdJQzh2SUdGeklITnZiMjRnWVhNZ2QyVWdLbVJ2S2lCblpYUWdjMjl0WlhSb2FXNW5JR2x1ZEc4Z2RHaGxJR0oxWm1abGNpNWNiaUFnYVdZZ0tITjBZWFJsTG14bGJtZDBhQ0E5UFQwZ01DQW1KaUFoYzNSaGRHVXVaVzVrWldRcFhHNGdJQ0FnYzNSaGRHVXVibVZsWkZKbFlXUmhZbXhsSUQwZ2RISjFaVHRjYmx4dUlDQXZMeUJKWmlCM1pTQjBjbWxsWkNCMGJ5QnlaV0ZrS0NrZ2NHRnpkQ0IwYUdVZ1JVOUdMQ0IwYUdWdUlHVnRhWFFnWlc1a0lHOXVJSFJvWlNCdVpYaDBJSFJwWTJzdVhHNGdJR2xtSUNodVQzSnBaeUFoUFQwZ2JpQW1KaUJ6ZEdGMFpTNWxibVJsWkNBbUppQnpkR0YwWlM1c1pXNW5kR2dnUFQwOUlEQXBYRzRnSUNBZ1pXNWtVbVZoWkdGaWJHVW9kR2hwY3lrN1hHNWNiaUFnYVdZZ0tDRjFkR2xzTG1selRuVnNiQ2h5WlhRcEtWeHVJQ0FnSUhSb2FYTXVaVzFwZENnblpHRjBZU2NzSUhKbGRDazdYRzVjYmlBZ2NtVjBkWEp1SUhKbGREdGNibjA3WEc1Y2JtWjFibU4wYVc5dUlHTm9kVzVyU1c1MllXeHBaQ2h6ZEdGMFpTd2dZMmgxYm1zcElIdGNiaUFnZG1GeUlHVnlJRDBnYm5Wc2JEdGNiaUFnYVdZZ0tDRjFkR2xzTG1selFuVm1abVZ5S0dOb2RXNXJLU0FtSmx4dUlDQWdJQ0FnSVhWMGFXd3VhWE5UZEhKcGJtY29ZMmgxYm1zcElDWW1YRzRnSUNBZ0lDQWhkWFJwYkM1cGMwNTFiR3hQY2xWdVpHVm1hVzVsWkNoamFIVnVheWtnSmlaY2JpQWdJQ0FnSUNGemRHRjBaUzV2WW1wbFkzUk5iMlJsS1NCN1hHNGdJQ0FnWlhJZ1BTQnVaWGNnVkhsd1pVVnljbTl5S0NkSmJuWmhiR2xrSUc1dmJpMXpkSEpwYm1jdlluVm1abVZ5SUdOb2RXNXJKeWs3WEc0Z0lIMWNiaUFnY21WMGRYSnVJR1Z5TzF4dWZWeHVYRzVjYm1aMWJtTjBhVzl1SUc5dVJXOW1RMmgxYm1zb2MzUnlaV0Z0TENCemRHRjBaU2tnZTF4dUlDQnBaaUFvYzNSaGRHVXVaR1ZqYjJSbGNpQW1KaUFoYzNSaGRHVXVaVzVrWldRcElIdGNiaUFnSUNCMllYSWdZMmgxYm1zZ1BTQnpkR0YwWlM1a1pXTnZaR1Z5TG1WdVpDZ3BPMXh1SUNBZ0lHbG1JQ2hqYUhWdWF5QW1KaUJqYUhWdWF5NXNaVzVuZEdncElIdGNiaUFnSUNBZ0lITjBZWFJsTG1KMVptWmxjaTV3ZFhOb0tHTm9kVzVyS1R0Y2JpQWdJQ0FnSUhOMFlYUmxMbXhsYm1kMGFDQXJQU0J6ZEdGMFpTNXZZbXBsWTNSTmIyUmxJRDhnTVNBNklHTm9kVzVyTG14bGJtZDBhRHRjYmlBZ0lDQjlYRzRnSUgxY2JpQWdjM1JoZEdVdVpXNWtaV1FnUFNCMGNuVmxPMXh1WEc0Z0lDOHZJR1Z0YVhRZ0ozSmxZV1JoWW14bEp5QnViM2NnZEc4Z2JXRnJaU0J6ZFhKbElHbDBJR2RsZEhNZ2NHbGphMlZrSUhWd0xseHVJQ0JsYldsMFVtVmhaR0ZpYkdVb2MzUnlaV0Z0S1R0Y2JuMWNibHh1THk4Z1JHOXVKM1FnWlcxcGRDQnlaV0ZrWVdKc1pTQnlhV2RvZENCaGQyRjVJR2x1SUhONWJtTWdiVzlrWlN3Z1ltVmpZWFZ6WlNCMGFHbHpJR05oYmlCMGNtbG5aMlZ5WEc0dkx5QmhibTkwYUdWeUlISmxZV1FvS1NCallXeHNJRDArSUhOMFlXTnJJRzkyWlhKbWJHOTNMaUFnVkdocGN5QjNZWGtzSUdsMElHMXBaMmgwSUhSeWFXZG5aWEpjYmk4dklHRWdibVY0ZEZScFkyc2djbVZqZFhKemFXOXVJSGRoY201cGJtY3NJR0oxZENCMGFHRjBKM01nYm05MElITnZJR0poWkM1Y2JtWjFibU4wYVc5dUlHVnRhWFJTWldGa1lXSnNaU2h6ZEhKbFlXMHBJSHRjYmlBZ2RtRnlJSE4wWVhSbElEMGdjM1J5WldGdExsOXlaV0ZrWVdKc1pWTjBZWFJsTzF4dUlDQnpkR0YwWlM1dVpXVmtVbVZoWkdGaWJHVWdQU0JtWVd4elpUdGNiaUFnYVdZZ0tDRnpkR0YwWlM1bGJXbDBkR1ZrVW1WaFpHRmliR1VwSUh0Y2JpQWdJQ0JrWldKMVp5Z25aVzFwZEZKbFlXUmhZbXhsSnl3Z2MzUmhkR1V1Wm14dmQybHVaeWs3WEc0Z0lDQWdjM1JoZEdVdVpXMXBkSFJsWkZKbFlXUmhZbXhsSUQwZ2RISjFaVHRjYmlBZ0lDQnBaaUFvYzNSaGRHVXVjM2x1WXlsY2JpQWdJQ0FnSUhCeWIyTmxjM011Ym1WNGRGUnBZMnNvWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lHVnRhWFJTWldGa1lXSnNaVjhvYzNSeVpXRnRLVHRjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJR1ZzYzJWY2JpQWdJQ0FnSUdWdGFYUlNaV0ZrWVdKc1pWOG9jM1J5WldGdEtUdGNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJsYldsMFVtVmhaR0ZpYkdWZktITjBjbVZoYlNrZ2UxeHVJQ0JrWldKMVp5Z25aVzFwZENCeVpXRmtZV0pzWlNjcE8xeHVJQ0J6ZEhKbFlXMHVaVzFwZENnbmNtVmhaR0ZpYkdVbktUdGNiaUFnWm14dmR5aHpkSEpsWVcwcE8xeHVmVnh1WEc1Y2JpOHZJR0YwSUhSb2FYTWdjRzlwYm5Rc0lIUm9aU0IxYzJWeUlHaGhjeUJ3Y21WemRXMWhZbXg1SUhObFpXNGdkR2hsSUNkeVpXRmtZV0pzWlNjZ1pYWmxiblFzWEc0dkx5QmhibVFnWTJGc2JHVmtJSEpsWVdRb0tTQjBieUJqYjI1emRXMWxJSE52YldVZ1pHRjBZUzRnSUhSb1lYUWdiV0Y1SUdoaGRtVWdkSEpwWjJkbGNtVmtYRzR2THlCcGJpQjBkWEp1SUdGdWIzUm9aWElnWDNKbFlXUW9iaWtnWTJGc2JDd2dhVzRnZDJocFkyZ2dZMkZ6WlNCeVpXRmthVzVuSUQwZ2RISjFaU0JwWmx4dUx5OGdhWFFuY3lCcGJpQndjbTluY21WemN5NWNiaTh2SUVodmQyVjJaWElzSUdsbUlIZGxKM0psSUc1dmRDQmxibVJsWkN3Z2IzSWdjbVZoWkdsdVp5d2dZVzVrSUhSb1pTQnNaVzVuZEdnZ1BDQm9kMjBzWEc0dkx5QjBhR1Z1SUdkdklHRm9aV0ZrSUdGdVpDQjBjbmtnZEc4Z2NtVmhaQ0J6YjIxbElHMXZjbVVnY0hKbFpXMXdkR2wyWld4NUxseHVablZ1WTNScGIyNGdiV0Y1WW1WU1pXRmtUVzl5WlNoemRISmxZVzBzSUhOMFlYUmxLU0I3WEc0Z0lHbG1JQ2doYzNSaGRHVXVjbVZoWkdsdVowMXZjbVVwSUh0Y2JpQWdJQ0J6ZEdGMFpTNXlaV0ZrYVc1blRXOXlaU0E5SUhSeWRXVTdYRzRnSUNBZ2NISnZZMlZ6Y3k1dVpYaDBWR2xqYXlobWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lHMWhlV0psVW1WaFpFMXZjbVZmS0hOMGNtVmhiU3dnYzNSaGRHVXBPMXh1SUNBZ0lIMHBPMXh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUcxaGVXSmxVbVZoWkUxdmNtVmZLSE4wY21WaGJTd2djM1JoZEdVcElIdGNiaUFnZG1GeUlHeGxiaUE5SUhOMFlYUmxMbXhsYm1kMGFEdGNiaUFnZDJocGJHVWdLQ0Z6ZEdGMFpTNXlaV0ZrYVc1bklDWW1JQ0Z6ZEdGMFpTNW1iRzkzYVc1bklDWW1JQ0Z6ZEdGMFpTNWxibVJsWkNBbUpseHVJQ0FnSUNBZ0lDQWdjM1JoZEdVdWJHVnVaM1JvSUR3Z2MzUmhkR1V1YUdsbmFGZGhkR1Z5VFdGeWF5a2dlMXh1SUNBZ0lHUmxZblZuS0NkdFlYbGlaVkpsWVdSTmIzSmxJSEpsWVdRZ01DY3BPMXh1SUNBZ0lITjBjbVZoYlM1eVpXRmtLREFwTzF4dUlDQWdJR2xtSUNoc1pXNGdQVDA5SUhOMFlYUmxMbXhsYm1kMGFDbGNiaUFnSUNBZ0lDOHZJR1JwWkc0bmRDQm5aWFFnWVc1NUlHUmhkR0VzSUhOMGIzQWdjM0JwYm01cGJtY3VYRzRnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0JsYkhObFhHNGdJQ0FnSUNCc1pXNGdQU0J6ZEdGMFpTNXNaVzVuZEdnN1hHNGdJSDFjYmlBZ2MzUmhkR1V1Y21WaFpHbHVaMDF2Y21VZ1BTQm1ZV3h6WlR0Y2JuMWNibHh1THk4Z1lXSnpkSEpoWTNRZ2JXVjBhRzlrTGlBZ2RHOGdZbVVnYjNabGNuSnBaR1JsYmlCcGJpQnpjR1ZqYVdacFl5QnBiWEJzWlcxbGJuUmhkR2x2YmlCamJHRnpjMlZ6TGx4dUx5OGdZMkZzYkNCallpaGxjaXdnWkdGMFlTa2dkMmhsY21VZ1pHRjBZU0JwY3lBOFBTQnVJR2x1SUd4bGJtZDBhQzVjYmk4dklHWnZjaUIyYVhKMGRXRnNJQ2h1YjI0dGMzUnlhVzVuTENCdWIyNHRZblZtWm1WeUtTQnpkSEpsWVcxekxDQmNJbXhsYm1kMGFGd2lJR2x6SUhOdmJXVjNhR0YwWEc0dkx5QmhjbUpwZEhKaGNua3NJR0Z1WkNCd1pYSm9ZWEJ6SUc1dmRDQjJaWEo1SUcxbFlXNXBibWRtZFd3dVhHNVNaV0ZrWVdKc1pTNXdjbTkwYjNSNWNHVXVYM0psWVdRZ1BTQm1kVzVqZEdsdmJpaHVLU0I3WEc0Z0lIUm9hWE11WlcxcGRDZ25aWEp5YjNJbkxDQnVaWGNnUlhKeWIzSW9KMjV2ZENCcGJYQnNaVzFsYm5SbFpDY3BLVHRjYm4wN1hHNWNibEpsWVdSaFlteGxMbkJ5YjNSdmRIbHdaUzV3YVhCbElEMGdablZ1WTNScGIyNG9aR1Z6ZEN3Z2NHbHdaVTl3ZEhNcElIdGNiaUFnZG1GeUlITnlZeUE5SUhSb2FYTTdYRzRnSUhaaGNpQnpkR0YwWlNBOUlIUm9hWE11WDNKbFlXUmhZbXhsVTNSaGRHVTdYRzVjYmlBZ2MzZHBkR05vSUNoemRHRjBaUzV3YVhCbGMwTnZkVzUwS1NCN1hHNGdJQ0FnWTJGelpTQXdPbHh1SUNBZ0lDQWdjM1JoZEdVdWNHbHdaWE1nUFNCa1pYTjBPMXh1SUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnWTJGelpTQXhPbHh1SUNBZ0lDQWdjM1JoZEdVdWNHbHdaWE1nUFNCYmMzUmhkR1V1Y0dsd1pYTXNJR1JsYzNSZE8xeHVJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lITjBZWFJsTG5CcGNHVnpMbkIxYzJnb1pHVnpkQ2s3WEc0Z0lDQWdJQ0JpY21WaGF6dGNiaUFnZlZ4dUlDQnpkR0YwWlM1d2FYQmxjME52ZFc1MElDczlJREU3WEc0Z0lHUmxZblZuS0Nkd2FYQmxJR052ZFc1MFBTVmtJRzl3ZEhNOUpXb25MQ0J6ZEdGMFpTNXdhWEJsYzBOdmRXNTBMQ0J3YVhCbFQzQjBjeWs3WEc1Y2JpQWdkbUZ5SUdSdlJXNWtJRDBnS0NGd2FYQmxUM0IwY3lCOGZDQndhWEJsVDNCMGN5NWxibVFnSVQwOUlHWmhiSE5sS1NBbUpseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pYTjBJQ0U5UFNCd2NtOWpaWE56TG5OMFpHOTFkQ0FtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JrWlhOMElDRTlQU0J3Y205alpYTnpMbk4wWkdWeWNqdGNibHh1SUNCMllYSWdaVzVrUm00Z1BTQmtiMFZ1WkNBL0lHOXVaVzVrSURvZ1kyeGxZVzUxY0R0Y2JpQWdhV1lnS0hOMFlYUmxMbVZ1WkVWdGFYUjBaV1FwWEc0Z0lDQWdjSEp2WTJWemN5NXVaWGgwVkdsamF5aGxibVJHYmlrN1hHNGdJR1ZzYzJWY2JpQWdJQ0J6Y21NdWIyNWpaU2duWlc1a0p5d2daVzVrUm00cE8xeHVYRzRnSUdSbGMzUXViMjRvSjNWdWNHbHdaU2NzSUc5dWRXNXdhWEJsS1R0Y2JpQWdablZ1WTNScGIyNGdiMjUxYm5CcGNHVW9jbVZoWkdGaWJHVXBJSHRjYmlBZ0lDQmtaV0oxWnlnbmIyNTFibkJwY0dVbktUdGNiaUFnSUNCcFppQW9jbVZoWkdGaWJHVWdQVDA5SUhOeVl5a2dlMXh1SUNBZ0lDQWdZMnhsWVc1MWNDZ3BPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJR1oxYm1OMGFXOXVJRzl1Wlc1a0tDa2dlMXh1SUNBZ0lHUmxZblZuS0NkdmJtVnVaQ2NwTzF4dUlDQWdJR1JsYzNRdVpXNWtLQ2s3WEc0Z0lIMWNibHh1SUNBdkx5QjNhR1Z1SUhSb1pTQmtaWE4wSUdSeVlXbHVjeXdnYVhRZ2NtVmtkV05sY3lCMGFHVWdZWGRoYVhSRWNtRnBiaUJqYjNWdWRHVnlYRzRnSUM4dklHOXVJSFJvWlNCemIzVnlZMlV1SUNCVWFHbHpJSGR2ZFd4a0lHSmxJRzF2Y21VZ1pXeGxaMkZ1ZENCM2FYUm9JR0VnTG05dVkyVW9LVnh1SUNBdkx5Qm9ZVzVrYkdWeUlHbHVJR1pzYjNjb0tTd2dZblYwSUdGa1pHbHVaeUJoYm1RZ2NtVnRiM1pwYm1jZ2NtVndaV0YwWldSc2VTQnBjMXh1SUNBdkx5QjBiMjhnYzJ4dmR5NWNiaUFnZG1GeUlHOXVaSEpoYVc0Z1BTQndhWEJsVDI1RWNtRnBiaWh6Y21NcE8xeHVJQ0JrWlhOMExtOXVLQ2RrY21GcGJpY3NJRzl1WkhKaGFXNHBPMXh1WEc0Z0lHWjFibU4wYVc5dUlHTnNaV0Z1ZFhBb0tTQjdYRzRnSUNBZ1pHVmlkV2NvSjJOc1pXRnVkWEFuS1R0Y2JpQWdJQ0F2THlCamJHVmhiblZ3SUdWMlpXNTBJR2hoYm1Sc1pYSnpJRzl1WTJVZ2RHaGxJSEJwY0dVZ2FYTWdZbkp2YTJWdVhHNGdJQ0FnWkdWemRDNXlaVzF2ZG1WTWFYTjBaVzVsY2lnblkyeHZjMlVuTENCdmJtTnNiM05sS1R0Y2JpQWdJQ0JrWlhOMExuSmxiVzkyWlV4cGMzUmxibVZ5S0NkbWFXNXBjMmduTENCdmJtWnBibWx6YUNrN1hHNGdJQ0FnWkdWemRDNXlaVzF2ZG1WTWFYTjBaVzVsY2lnblpISmhhVzRuTENCdmJtUnlZV2x1S1R0Y2JpQWdJQ0JrWlhOMExuSmxiVzkyWlV4cGMzUmxibVZ5S0NkbGNuSnZjaWNzSUc5dVpYSnliM0lwTzF4dUlDQWdJR1JsYzNRdWNtVnRiM1psVEdsemRHVnVaWElvSjNWdWNHbHdaU2NzSUc5dWRXNXdhWEJsS1R0Y2JpQWdJQ0J6Y21NdWNtVnRiM1psVEdsemRHVnVaWElvSjJWdVpDY3NJRzl1Wlc1a0tUdGNiaUFnSUNCemNtTXVjbVZ0YjNabFRHbHpkR1Z1WlhJb0oyVnVaQ2NzSUdOc1pXRnVkWEFwTzF4dUlDQWdJSE55WXk1eVpXMXZkbVZNYVhOMFpXNWxjaWduWkdGMFlTY3NJRzl1WkdGMFlTazdYRzVjYmlBZ0lDQXZMeUJwWmlCMGFHVWdjbVZoWkdWeUlHbHpJSGRoYVhScGJtY2dabTl5SUdFZ1pISmhhVzRnWlhabGJuUWdabkp2YlNCMGFHbHpYRzRnSUNBZ0x5OGdjM0JsWTJsbWFXTWdkM0pwZEdWeUxDQjBhR1Z1SUdsMElIZHZkV3hrSUdOaGRYTmxJR2wwSUhSdklHNWxkbVZ5SUhOMFlYSjBYRzRnSUNBZ0x5OGdabXh2ZDJsdVp5QmhaMkZwYmk1Y2JpQWdJQ0F2THlCVGJ5d2dhV1lnZEdocGN5QnBjeUJoZDJGcGRHbHVaeUJoSUdSeVlXbHVMQ0IwYUdWdUlIZGxJR3AxYzNRZ1kyRnNiQ0JwZENCdWIzY3VYRzRnSUNBZ0x5OGdTV1lnZDJVZ1pHOXVKM1FnYTI1dmR5d2dkR2hsYmlCaGMzTjFiV1VnZEdoaGRDQjNaU0JoY21VZ2QyRnBkR2x1WnlCbWIzSWdiMjVsTGx4dUlDQWdJR2xtSUNoemRHRjBaUzVoZDJGcGRFUnlZV2x1SUNZbVhHNGdJQ0FnSUNBZ0lDZ2haR1Z6ZEM1ZmQzSnBkR0ZpYkdWVGRHRjBaU0I4ZkNCa1pYTjBMbDkzY21sMFlXSnNaVk4wWVhSbExtNWxaV1JFY21GcGJpa3BYRzRnSUNBZ0lDQnZibVJ5WVdsdUtDazdYRzRnSUgxY2JseHVJQ0J6Y21NdWIyNG9KMlJoZEdFbkxDQnZibVJoZEdFcE8xeHVJQ0JtZFc1amRHbHZiaUJ2Ym1SaGRHRW9ZMmgxYm1zcElIdGNiaUFnSUNCa1pXSjFaeWduYjI1a1lYUmhKeWs3WEc0Z0lDQWdkbUZ5SUhKbGRDQTlJR1JsYzNRdWQzSnBkR1VvWTJoMWJtc3BPMXh1SUNBZ0lHbG1JQ2htWVd4elpTQTlQVDBnY21WMEtTQjdYRzRnSUNBZ0lDQmtaV0oxWnlnblptRnNjMlVnZDNKcGRHVWdjbVZ6Y0c5dWMyVXNJSEJoZFhObEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUhOeVl5NWZjbVZoWkdGaWJHVlRkR0YwWlM1aGQyRnBkRVJ5WVdsdUtUdGNiaUFnSUNBZ0lITnlZeTVmY21WaFpHRmliR1ZUZEdGMFpTNWhkMkZwZEVSeVlXbHVLeXM3WEc0Z0lDQWdJQ0J6Y21NdWNHRjFjMlVvS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdkx5QnBaaUIwYUdVZ1pHVnpkQ0JvWVhNZ1lXNGdaWEp5YjNJc0lIUm9aVzRnYzNSdmNDQndhWEJwYm1jZ2FXNTBieUJwZEM1Y2JpQWdMeThnYUc5M1pYWmxjaXdnWkc5dUozUWdjM1Z3Y0hKbGMzTWdkR2hsSUhSb2NtOTNhVzVuSUdKbGFHRjJhVzl5SUdadmNpQjBhR2x6TGx4dUlDQm1kVzVqZEdsdmJpQnZibVZ5Y205eUtHVnlLU0I3WEc0Z0lDQWdaR1ZpZFdjb0oyOXVaWEp5YjNJbkxDQmxjaWs3WEc0Z0lDQWdkVzV3YVhCbEtDazdYRzRnSUNBZ1pHVnpkQzV5WlcxdmRtVk1hWE4wWlc1bGNpZ25aWEp5YjNJbkxDQnZibVZ5Y205eUtUdGNiaUFnSUNCcFppQW9SVVV1YkdsemRHVnVaWEpEYjNWdWRDaGtaWE4wTENBblpYSnliM0luS1NBOVBUMGdNQ2xjYmlBZ0lDQWdJR1JsYzNRdVpXMXBkQ2duWlhKeWIzSW5MQ0JsY2lrN1hHNGdJSDFjYmlBZ0x5OGdWR2hwY3lCcGN5QmhJR0p5ZFhSaGJHeDVJSFZuYkhrZ2FHRmpheUIwYnlCdFlXdGxJSE4xY21VZ2RHaGhkQ0J2ZFhJZ1pYSnliM0lnYUdGdVpHeGxjbHh1SUNBdkx5QnBjeUJoZEhSaFkyaGxaQ0JpWldadmNtVWdZVzU1SUhWelpYSnNZVzVrSUc5dVpYTXVJQ0JPUlZaRlVpQkVUeUJVU0VsVExseHVJQ0JwWmlBb0lXUmxjM1F1WDJWMlpXNTBjeUI4ZkNBaFpHVnpkQzVmWlhabGJuUnpMbVZ5Y205eUtWeHVJQ0FnSUdSbGMzUXViMjRvSjJWeWNtOXlKeXdnYjI1bGNuSnZjaWs3WEc0Z0lHVnNjMlVnYVdZZ0tHbHpRWEp5WVhrb1pHVnpkQzVmWlhabGJuUnpMbVZ5Y205eUtTbGNiaUFnSUNCa1pYTjBMbDlsZG1WdWRITXVaWEp5YjNJdWRXNXphR2xtZENodmJtVnljbTl5S1R0Y2JpQWdaV3h6WlZ4dUlDQWdJR1JsYzNRdVgyVjJaVzUwY3k1bGNuSnZjaUE5SUZ0dmJtVnljbTl5TENCa1pYTjBMbDlsZG1WdWRITXVaWEp5YjNKZE8xeHVYRzVjYmx4dUlDQXZMeUJDYjNSb0lHTnNiM05sSUdGdVpDQm1hVzVwYzJnZ2MyaHZkV3hrSUhSeWFXZG5aWElnZFc1d2FYQmxMQ0JpZFhRZ2IyNXNlU0J2Ym1ObExseHVJQ0JtZFc1amRHbHZiaUJ2Ym1Oc2IzTmxLQ2tnZTF4dUlDQWdJR1JsYzNRdWNtVnRiM1psVEdsemRHVnVaWElvSjJacGJtbHphQ2NzSUc5dVptbHVhWE5vS1R0Y2JpQWdJQ0IxYm5CcGNHVW9LVHRjYmlBZ2ZWeHVJQ0JrWlhOMExtOXVZMlVvSjJOc2IzTmxKeXdnYjI1amJHOXpaU2s3WEc0Z0lHWjFibU4wYVc5dUlHOXVabWx1YVhOb0tDa2dlMXh1SUNBZ0lHUmxZblZuS0NkdmJtWnBibWx6YUNjcE8xeHVJQ0FnSUdSbGMzUXVjbVZ0YjNabFRHbHpkR1Z1WlhJb0oyTnNiM05sSnl3Z2IyNWpiRzl6WlNrN1hHNGdJQ0FnZFc1d2FYQmxLQ2s3WEc0Z0lIMWNiaUFnWkdWemRDNXZibU5sS0NkbWFXNXBjMmduTENCdmJtWnBibWx6YUNrN1hHNWNiaUFnWm5WdVkzUnBiMjRnZFc1d2FYQmxLQ2tnZTF4dUlDQWdJR1JsWW5WbktDZDFibkJwY0dVbktUdGNiaUFnSUNCemNtTXVkVzV3YVhCbEtHUmxjM1FwTzF4dUlDQjlYRzVjYmlBZ0x5OGdkR1ZzYkNCMGFHVWdaR1Z6ZENCMGFHRjBJR2wwSjNNZ1ltVnBibWNnY0dsd1pXUWdkRzljYmlBZ1pHVnpkQzVsYldsMEtDZHdhWEJsSnl3Z2MzSmpLVHRjYmx4dUlDQXZMeUJ6ZEdGeWRDQjBhR1VnWm14dmR5QnBaaUJwZENCb1lYTnVKM1FnWW1WbGJpQnpkR0Z5ZEdWa0lHRnNjbVZoWkhrdVhHNGdJR2xtSUNnaGMzUmhkR1V1Wm14dmQybHVaeWtnZTF4dUlDQWdJR1JsWW5WbktDZHdhWEJsSUhKbGMzVnRaU2NwTzF4dUlDQWdJSE55WXk1eVpYTjFiV1VvS1R0Y2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCa1pYTjBPMXh1ZlR0Y2JseHVablZ1WTNScGIyNGdjR2x3WlU5dVJISmhhVzRvYzNKaktTQjdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0IyWVhJZ2MzUmhkR1VnUFNCemNtTXVYM0psWVdSaFlteGxVM1JoZEdVN1hHNGdJQ0FnWkdWaWRXY29KM0JwY0dWUGJrUnlZV2x1Snl3Z2MzUmhkR1V1WVhkaGFYUkVjbUZwYmlrN1hHNGdJQ0FnYVdZZ0tITjBZWFJsTG1GM1lXbDBSSEpoYVc0cFhHNGdJQ0FnSUNCemRHRjBaUzVoZDJGcGRFUnlZV2x1TFMwN1hHNGdJQ0FnYVdZZ0tITjBZWFJsTG1GM1lXbDBSSEpoYVc0Z1BUMDlJREFnSmlZZ1JVVXViR2x6ZEdWdVpYSkRiM1Z1ZENoemNtTXNJQ2RrWVhSaEp5a3BJSHRjYmlBZ0lDQWdJSE4wWVhSbExtWnNiM2RwYm1jZ1BTQjBjblZsTzF4dUlDQWdJQ0FnWm14dmR5aHpjbU1wTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibjFjYmx4dVhHNVNaV0ZrWVdKc1pTNXdjbTkwYjNSNWNHVXVkVzV3YVhCbElEMGdablZ1WTNScGIyNG9aR1Z6ZENrZ2UxeHVJQ0IyWVhJZ2MzUmhkR1VnUFNCMGFHbHpMbDl5WldGa1lXSnNaVk4wWVhSbE8xeHVYRzRnSUM4dklHbG1JSGRsSjNKbElHNXZkQ0J3YVhCcGJtY2dZVzU1ZDJobGNtVXNJSFJvWlc0Z1pHOGdibTkwYUdsdVp5NWNiaUFnYVdZZ0tITjBZWFJsTG5CcGNHVnpRMjkxYm5RZ1BUMDlJREFwWEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE03WEc1Y2JpQWdMeThnYW5WemRDQnZibVVnWkdWemRHbHVZWFJwYjI0dUlDQnRiM04wSUdOdmJXMXZiaUJqWVhObExseHVJQ0JwWmlBb2MzUmhkR1V1Y0dsd1pYTkRiM1Z1ZENBOVBUMGdNU2tnZTF4dUlDQWdJQzh2SUhCaGMzTmxaQ0JwYmlCdmJtVXNJR0oxZENCcGRDZHpJRzV2ZENCMGFHVWdjbWxuYUhRZ2IyNWxMbHh1SUNBZ0lHbG1JQ2hrWlhOMElDWW1JR1JsYzNRZ0lUMDlJSE4wWVhSbExuQnBjR1Z6S1Z4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNWNiaUFnSUNCcFppQW9JV1JsYzNRcFhHNGdJQ0FnSUNCa1pYTjBJRDBnYzNSaGRHVXVjR2x3WlhNN1hHNWNiaUFnSUNBdkx5Qm5iM1FnWVNCdFlYUmphQzVjYmlBZ0lDQnpkR0YwWlM1d2FYQmxjeUE5SUc1MWJHdzdYRzRnSUNBZ2MzUmhkR1V1Y0dsd1pYTkRiM1Z1ZENBOUlEQTdYRzRnSUNBZ2MzUmhkR1V1Wm14dmQybHVaeUE5SUdaaGJITmxPMXh1SUNBZ0lHbG1JQ2hrWlhOMEtWeHVJQ0FnSUNBZ1pHVnpkQzVsYldsMEtDZDFibkJwY0dVbkxDQjBhR2x6S1R0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdmVnh1WEc0Z0lDOHZJSE5zYjNjZ1kyRnpaUzRnYlhWc2RHbHdiR1VnY0dsd1pTQmtaWE4wYVc1aGRHbHZibk11WEc1Y2JpQWdhV1lnS0NGa1pYTjBLU0I3WEc0Z0lDQWdMeThnY21WdGIzWmxJR0ZzYkM1Y2JpQWdJQ0IyWVhJZ1pHVnpkSE1nUFNCemRHRjBaUzV3YVhCbGN6dGNiaUFnSUNCMllYSWdiR1Z1SUQwZ2MzUmhkR1V1Y0dsd1pYTkRiM1Z1ZER0Y2JpQWdJQ0J6ZEdGMFpTNXdhWEJsY3lBOUlHNTFiR3c3WEc0Z0lDQWdjM1JoZEdVdWNHbHdaWE5EYjNWdWRDQTlJREE3WEc0Z0lDQWdjM1JoZEdVdVpteHZkMmx1WnlBOUlHWmhiSE5sTzF4dVhHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCc1pXNDdJR2tyS3lsY2JpQWdJQ0FnSUdSbGMzUnpXMmxkTG1WdGFYUW9KM1Z1Y0dsd1pTY3NJSFJvYVhNcE8xeHVJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0I5WEc1Y2JpQWdMeThnZEhKNUlIUnZJR1pwYm1RZ2RHaGxJSEpwWjJoMElHOXVaUzVjYmlBZ2RtRnlJR2tnUFNCcGJtUmxlRTltS0hOMFlYUmxMbkJwY0dWekxDQmtaWE4wS1R0Y2JpQWdhV1lnS0drZ1BUMDlJQzB4S1Z4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dVhHNGdJSE4wWVhSbExuQnBjR1Z6TG5Od2JHbGpaU2hwTENBeEtUdGNiaUFnYzNSaGRHVXVjR2x3WlhORGIzVnVkQ0F0UFNBeE8xeHVJQ0JwWmlBb2MzUmhkR1V1Y0dsd1pYTkRiM1Z1ZENBOVBUMGdNU2xjYmlBZ0lDQnpkR0YwWlM1d2FYQmxjeUE5SUhOMFlYUmxMbkJwY0dWeld6QmRPMXh1WEc0Z0lHUmxjM1F1WlcxcGRDZ25kVzV3YVhCbEp5d2dkR2hwY3lrN1hHNWNiaUFnY21WMGRYSnVJSFJvYVhNN1hHNTlPMXh1WEc0dkx5QnpaWFFnZFhBZ1pHRjBZU0JsZG1WdWRITWdhV1lnZEdobGVTQmhjbVVnWVhOclpXUWdabTl5WEc0dkx5QkZibk4xY21VZ2NtVmhaR0ZpYkdVZ2JHbHpkR1Z1WlhKeklHVjJaVzUwZFdGc2JIa2daMlYwSUhOdmJXVjBhR2x1WjF4dVVtVmhaR0ZpYkdVdWNISnZkRzkwZVhCbExtOXVJRDBnWm5WdVkzUnBiMjRvWlhZc0lHWnVLU0I3WEc0Z0lIWmhjaUJ5WlhNZ1BTQlRkSEpsWVcwdWNISnZkRzkwZVhCbExtOXVMbU5oYkd3b2RHaHBjeXdnWlhZc0lHWnVLVHRjYmx4dUlDQXZMeUJKWmlCc2FYTjBaVzVwYm1jZ2RHOGdaR0YwWVN3Z1lXNWtJR2wwSUdoaGN5QnViM1FnWlhod2JHbGphWFJzZVNCaVpXVnVJSEJoZFhObFpDeGNiaUFnTHk4Z2RHaGxiaUJqWVd4c0lISmxjM1Z0WlNCMGJ5QnpkR0Z5ZENCMGFHVWdabXh2ZHlCdlppQmtZWFJoSUc5dUlIUm9aU0J1WlhoMElIUnBZMnN1WEc0Z0lHbG1JQ2hsZGlBOVBUMGdKMlJoZEdFbklDWW1JR1poYkhObElDRTlQU0IwYUdsekxsOXlaV0ZrWVdKc1pWTjBZWFJsTG1ac2IzZHBibWNwSUh0Y2JpQWdJQ0IwYUdsekxuSmxjM1Z0WlNncE8xeHVJQ0I5WEc1Y2JpQWdhV1lnS0dWMklEMDlQU0FuY21WaFpHRmliR1VuSUNZbUlIUm9hWE11Y21WaFpHRmliR1VwSUh0Y2JpQWdJQ0IyWVhJZ2MzUmhkR1VnUFNCMGFHbHpMbDl5WldGa1lXSnNaVk4wWVhSbE8xeHVJQ0FnSUdsbUlDZ2hjM1JoZEdVdWNtVmhaR0ZpYkdWTWFYTjBaVzVwYm1jcElIdGNiaUFnSUNBZ0lITjBZWFJsTG5KbFlXUmhZbXhsVEdsemRHVnVhVzVuSUQwZ2RISjFaVHRjYmlBZ0lDQWdJSE4wWVhSbExtVnRhWFIwWldSU1pXRmtZV0pzWlNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnYzNSaGRHVXVibVZsWkZKbFlXUmhZbXhsSUQwZ2RISjFaVHRjYmlBZ0lDQWdJR2xtSUNnaGMzUmhkR1V1Y21WaFpHbHVaeWtnZTF4dUlDQWdJQ0FnSUNCMllYSWdjMlZzWmlBOUlIUm9hWE03WEc0Z0lDQWdJQ0FnSUhCeWIyTmxjM011Ym1WNGRGUnBZMnNvWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdaR1ZpZFdjb0ozSmxZV1JoWW14bElHNWxlSFIwYVdOcklISmxZV1FnTUNjcE8xeHVJQ0FnSUNBZ0lDQWdJSE5sYkdZdWNtVmhaQ2d3S1R0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSE4wWVhSbExteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ0lDQmxiV2wwVW1WaFpHRmliR1VvZEdocGN5d2djM1JoZEdVcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCeVpYTTdYRzU5TzF4dVVtVmhaR0ZpYkdVdWNISnZkRzkwZVhCbExtRmtaRXhwYzNSbGJtVnlJRDBnVW1WaFpHRmliR1V1Y0hKdmRHOTBlWEJsTG05dU8xeHVYRzR2THlCd1lYVnpaU2dwSUdGdVpDQnlaWE4xYldVb0tTQmhjbVVnY21WdGJtRnVkSE1nYjJZZ2RHaGxJR3hsWjJGamVTQnlaV0ZrWVdKc1pTQnpkSEpsWVcwZ1FWQkpYRzR2THlCSlppQjBhR1VnZFhObGNpQjFjMlZ6SUhSb1pXMHNJSFJvWlc0Z2MzZHBkR05vSUdsdWRHOGdiMnhrSUcxdlpHVXVYRzVTWldGa1lXSnNaUzV3Y205MGIzUjVjR1V1Y21WemRXMWxJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJSFpoY2lCemRHRjBaU0E5SUhSb2FYTXVYM0psWVdSaFlteGxVM1JoZEdVN1hHNGdJR2xtSUNnaGMzUmhkR1V1Wm14dmQybHVaeWtnZTF4dUlDQWdJR1JsWW5WbktDZHlaWE4xYldVbktUdGNiaUFnSUNCemRHRjBaUzVtYkc5M2FXNW5JRDBnZEhKMVpUdGNiaUFnSUNCcFppQW9JWE4wWVhSbExuSmxZV1JwYm1jcElIdGNiaUFnSUNBZ0lHUmxZblZuS0NkeVpYTjFiV1VnY21WaFpDQXdKeWs3WEc0Z0lDQWdJQ0IwYUdsekxuSmxZV1FvTUNrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsYzNWdFpTaDBhR2x6TENCemRHRjBaU2s3WEc0Z0lIMWNiaUFnY21WMGRYSnVJSFJvYVhNN1hHNTlPMXh1WEc1bWRXNWpkR2x2YmlCeVpYTjFiV1VvYzNSeVpXRnRMQ0J6ZEdGMFpTa2dlMXh1SUNCcFppQW9JWE4wWVhSbExuSmxjM1Z0WlZOamFHVmtkV3hsWkNrZ2UxeHVJQ0FnSUhOMFlYUmxMbkpsYzNWdFpWTmphR1ZrZFd4bFpDQTlJSFJ5ZFdVN1hHNGdJQ0FnY0hKdlkyVnpjeTV1WlhoMFZHbGpheWhtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUhKbGMzVnRaVjhvYzNSeVpXRnRMQ0J6ZEdGMFpTazdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnY21WemRXMWxYeWh6ZEhKbFlXMHNJSE4wWVhSbEtTQjdYRzRnSUhOMFlYUmxMbkpsYzNWdFpWTmphR1ZrZFd4bFpDQTlJR1poYkhObE8xeHVJQ0J6ZEhKbFlXMHVaVzFwZENnbmNtVnpkVzFsSnlrN1hHNGdJR1pzYjNjb2MzUnlaV0Z0S1R0Y2JpQWdhV1lnS0hOMFlYUmxMbVpzYjNkcGJtY2dKaVlnSVhOMFlYUmxMbkpsWVdScGJtY3BYRzRnSUNBZ2MzUnlaV0Z0TG5KbFlXUW9NQ2s3WEc1OVhHNWNibEpsWVdSaFlteGxMbkJ5YjNSdmRIbHdaUzV3WVhWelpTQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQmtaV0oxWnlnblkyRnNiQ0J3WVhWelpTQm1iRzkzYVc1blBTVnFKeXdnZEdocGN5NWZjbVZoWkdGaWJHVlRkR0YwWlM1bWJHOTNhVzVuS1R0Y2JpQWdhV1lnS0daaGJITmxJQ0U5UFNCMGFHbHpMbDl5WldGa1lXSnNaVk4wWVhSbExtWnNiM2RwYm1jcElIdGNiaUFnSUNCa1pXSjFaeWduY0dGMWMyVW5LVHRjYmlBZ0lDQjBhR2x6TGw5eVpXRmtZV0pzWlZOMFlYUmxMbVpzYjNkcGJtY2dQU0JtWVd4elpUdGNiaUFnSUNCMGFHbHpMbVZ0YVhRb0ozQmhkWE5sSnlrN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUhSb2FYTTdYRzU5TzF4dVhHNW1kVzVqZEdsdmJpQm1iRzkzS0hOMGNtVmhiU2tnZTF4dUlDQjJZWElnYzNSaGRHVWdQU0J6ZEhKbFlXMHVYM0psWVdSaFlteGxVM1JoZEdVN1hHNGdJR1JsWW5WbktDZG1iRzkzSnl3Z2MzUmhkR1V1Wm14dmQybHVaeWs3WEc0Z0lHbG1JQ2h6ZEdGMFpTNW1iRzkzYVc1bktTQjdYRzRnSUNBZ1pHOGdlMXh1SUNBZ0lDQWdkbUZ5SUdOb2RXNXJJRDBnYzNSeVpXRnRMbkpsWVdRb0tUdGNiaUFnSUNCOUlIZG9hV3hsSUNodWRXeHNJQ0U5UFNCamFIVnVheUFtSmlCemRHRjBaUzVtYkc5M2FXNW5LVHRjYmlBZ2ZWeHVmVnh1WEc0dkx5QjNjbUZ3SUdGdUlHOXNaQzF6ZEhsc1pTQnpkSEpsWVcwZ1lYTWdkR2hsSUdGemVXNWpJR1JoZEdFZ2MyOTFjbU5sTGx4dUx5OGdWR2hwY3lCcGN5QXFibTkwS2lCd1lYSjBJRzltSUhSb1pTQnlaV0ZrWVdKc1pTQnpkSEpsWVcwZ2FXNTBaWEptWVdObExseHVMeThnU1hRZ2FYTWdZVzRnZFdkc2VTQjFibVp2Y25SMWJtRjBaU0J0WlhOeklHOW1JR2hwYzNSdmNua3VYRzVTWldGa1lXSnNaUzV3Y205MGIzUjVjR1V1ZDNKaGNDQTlJR1oxYm1OMGFXOXVLSE4wY21WaGJTa2dlMXh1SUNCMllYSWdjM1JoZEdVZ1BTQjBhR2x6TGw5eVpXRmtZV0pzWlZOMFlYUmxPMXh1SUNCMllYSWdjR0YxYzJWa0lEMGdabUZzYzJVN1hHNWNiaUFnZG1GeUlITmxiR1lnUFNCMGFHbHpPMXh1SUNCemRISmxZVzB1YjI0b0oyVnVaQ2NzSUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUdSbFluVm5LQ2QzY21Gd2NHVmtJR1Z1WkNjcE8xeHVJQ0FnSUdsbUlDaHpkR0YwWlM1a1pXTnZaR1Z5SUNZbUlDRnpkR0YwWlM1bGJtUmxaQ2tnZTF4dUlDQWdJQ0FnZG1GeUlHTm9kVzVySUQwZ2MzUmhkR1V1WkdWamIyUmxjaTVsYm1Rb0tUdGNiaUFnSUNBZ0lHbG1JQ2hqYUhWdWF5QW1KaUJqYUhWdWF5NXNaVzVuZEdncFhHNGdJQ0FnSUNBZ0lITmxiR1l1Y0hWemFDaGphSFZ1YXlrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYzJWc1ppNXdkWE5vS0c1MWJHd3BPMXh1SUNCOUtUdGNibHh1SUNCemRISmxZVzB1YjI0b0oyUmhkR0VuTENCbWRXNWpkR2x2YmloamFIVnVheWtnZTF4dUlDQWdJR1JsWW5WbktDZDNjbUZ3Y0dWa0lHUmhkR0VuS1R0Y2JpQWdJQ0JwWmlBb2MzUmhkR1V1WkdWamIyUmxjaWxjYmlBZ0lDQWdJR05vZFc1cklEMGdjM1JoZEdVdVpHVmpiMlJsY2k1M2NtbDBaU2hqYUhWdWF5azdYRzRnSUNBZ2FXWWdLQ0ZqYUhWdWF5QjhmQ0FoYzNSaGRHVXViMkpxWldOMFRXOWtaU0FtSmlBaFkyaDFibXN1YkdWdVozUm9LVnh1SUNBZ0lDQWdjbVYwZFhKdU8xeHVYRzRnSUNBZ2RtRnlJSEpsZENBOUlITmxiR1l1Y0hWemFDaGphSFZ1YXlrN1hHNGdJQ0FnYVdZZ0tDRnlaWFFwSUh0Y2JpQWdJQ0FnSUhCaGRYTmxaQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQnpkSEpsWVcwdWNHRjFjMlVvS1R0Y2JpQWdJQ0I5WEc0Z0lIMHBPMXh1WEc0Z0lDOHZJSEJ5YjNoNUlHRnNiQ0IwYUdVZ2IzUm9aWElnYldWMGFHOWtjeTVjYmlBZ0x5OGdhVzF3YjNKMFlXNTBJSGRvWlc0Z2QzSmhjSEJwYm1jZ1ptbHNkR1Z5Y3lCaGJtUWdaSFZ3YkdWNFpYTXVYRzRnSUdadmNpQW9kbUZ5SUdrZ2FXNGdjM1J5WldGdEtTQjdYRzRnSUNBZ2FXWWdLSFYwYVd3dWFYTkdkVzVqZEdsdmJpaHpkSEpsWVcxYmFWMHBJQ1ltSUhWMGFXd3VhWE5WYm1SbFptbHVaV1FvZEdocGMxdHBYU2twSUh0Y2JpQWdJQ0FnSUhSb2FYTmJhVjBnUFNCbWRXNWpkR2x2YmlodFpYUm9iMlFwSUhzZ2NtVjBkWEp1SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2MzUnlaV0Z0VzIxbGRHaHZaRjB1WVhCd2JIa29jM1J5WldGdExDQmhjbWQxYldWdWRITXBPMXh1SUNBZ0lDQWdmWDBvYVNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ0x5OGdjSEp2ZUhrZ1kyVnlkR0ZwYmlCcGJYQnZjblJoYm5RZ1pYWmxiblJ6TGx4dUlDQjJZWElnWlhabGJuUnpJRDBnV3lkbGNuSnZjaWNzSUNkamJHOXpaU2NzSUNka1pYTjBjbTk1Snl3Z0ozQmhkWE5sSnl3Z0ozSmxjM1Z0WlNkZE8xeHVJQ0JtYjNKRllXTm9LR1YyWlc1MGN5d2dablZ1WTNScGIyNG9aWFlwSUh0Y2JpQWdJQ0J6ZEhKbFlXMHViMjRvWlhZc0lITmxiR1l1WlcxcGRDNWlhVzVrS0hObGJHWXNJR1YyS1NrN1hHNGdJSDBwTzF4dVhHNGdJQzh2SUhkb1pXNGdkMlVnZEhKNUlIUnZJR052Ym5OMWJXVWdjMjl0WlNCdGIzSmxJR0o1ZEdWekxDQnphVzF3YkhrZ2RXNXdZWFZ6WlNCMGFHVmNiaUFnTHk4Z2RXNWtaWEpzZVdsdVp5QnpkSEpsWVcwdVhHNGdJSE5sYkdZdVgzSmxZV1FnUFNCbWRXNWpkR2x2YmlodUtTQjdYRzRnSUNBZ1pHVmlkV2NvSjNkeVlYQndaV1FnWDNKbFlXUW5MQ0J1S1R0Y2JpQWdJQ0JwWmlBb2NHRjFjMlZrS1NCN1hHNGdJQ0FnSUNCd1lYVnpaV1FnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJSE4wY21WaGJTNXlaWE4xYldVb0tUdGNiaUFnSUNCOVhHNGdJSDA3WEc1Y2JpQWdjbVYwZFhKdUlITmxiR1k3WEc1OU8xeHVYRzVjYmx4dUx5OGdaWGh3YjNObFpDQm1iM0lnZEdWemRHbHVaeUJ3ZFhKd2IzTmxjeUJ2Ym14NUxseHVVbVZoWkdGaWJHVXVYMlp5YjIxTWFYTjBJRDBnWm5KdmJVeHBjM1E3WEc1Y2JpOHZJRkJzZFdOcklHOW1aaUJ1SUdKNWRHVnpJR1p5YjIwZ1lXNGdZWEp5WVhrZ2IyWWdZblZtWm1WeWN5NWNiaTh2SUV4bGJtZDBhQ0JwY3lCMGFHVWdZMjl0WW1sdVpXUWdiR1Z1WjNSb2N5QnZaaUJoYkd3Z2RHaGxJR0oxWm1abGNuTWdhVzRnZEdobElHeHBjM1F1WEc1bWRXNWpkR2x2YmlCbWNtOXRUR2x6ZENodUxDQnpkR0YwWlNrZ2UxeHVJQ0IyWVhJZ2JHbHpkQ0E5SUhOMFlYUmxMbUoxWm1abGNqdGNiaUFnZG1GeUlHeGxibWQwYUNBOUlITjBZWFJsTG14bGJtZDBhRHRjYmlBZ2RtRnlJSE4wY21sdVowMXZaR1VnUFNBaElYTjBZWFJsTG1SbFkyOWtaWEk3WEc0Z0lIWmhjaUJ2WW1wbFkzUk5iMlJsSUQwZ0lTRnpkR0YwWlM1dlltcGxZM1JOYjJSbE8xeHVJQ0IyWVhJZ2NtVjBPMXh1WEc0Z0lDOHZJRzV2ZEdocGJtY2dhVzRnZEdobElHeHBjM1FzSUdSbFptbHVhWFJsYkhrZ1pXMXdkSGt1WEc0Z0lHbG1JQ2hzYVhOMExteGxibWQwYUNBOVBUMGdNQ2xjYmlBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmx4dUlDQnBaaUFvYkdWdVozUm9JRDA5UFNBd0tWeHVJQ0FnSUhKbGRDQTlJRzUxYkd3N1hHNGdJR1ZzYzJVZ2FXWWdLRzlpYW1WamRFMXZaR1VwWEc0Z0lDQWdjbVYwSUQwZ2JHbHpkQzV6YUdsbWRDZ3BPMXh1SUNCbGJITmxJR2xtSUNnaGJpQjhmQ0J1SUQ0OUlHeGxibWQwYUNrZ2UxeHVJQ0FnSUM4dklISmxZV1FnYVhRZ1lXeHNMQ0IwY25WdVkyRjBaU0IwYUdVZ1lYSnlZWGt1WEc0Z0lDQWdhV1lnS0hOMGNtbHVaMDF2WkdVcFhHNGdJQ0FnSUNCeVpYUWdQU0JzYVhOMExtcHZhVzRvSnljcE8xeHVJQ0FnSUdWc2MyVmNiaUFnSUNBZ0lISmxkQ0E5SUVKMVptWmxjaTVqYjI1allYUW9iR2x6ZEN3Z2JHVnVaM1JvS1R0Y2JpQWdJQ0JzYVhOMExteGxibWQwYUNBOUlEQTdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdMeThnY21WaFpDQnFkWE4wSUhOdmJXVWdiMllnYVhRdVhHNGdJQ0FnYVdZZ0tHNGdQQ0JzYVhOMFd6QmRMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdMeThnYW5WemRDQjBZV3RsSUdFZ2NHRnlkQ0J2WmlCMGFHVWdabWx5YzNRZ2JHbHpkQ0JwZEdWdExseHVJQ0FnSUNBZ0x5OGdjMnhwWTJVZ2FYTWdkR2hsSUhOaGJXVWdabTl5SUdKMVptWmxjbk1nWVc1a0lITjBjbWx1WjNNdVhHNGdJQ0FnSUNCMllYSWdZblZtSUQwZ2JHbHpkRnN3WFR0Y2JpQWdJQ0FnSUhKbGRDQTlJR0oxWmk1emJHbGpaU2d3TENCdUtUdGNiaUFnSUNBZ0lHeHBjM1JiTUYwZ1BTQmlkV1l1YzJ4cFkyVW9iaWs3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2h1SUQwOVBTQnNhWE4wV3pCZExteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ0x5OGdabWx5YzNRZ2JHbHpkQ0JwY3lCaElIQmxjbVpsWTNRZ2JXRjBZMmhjYmlBZ0lDQWdJSEpsZENBOUlHeHBjM1F1YzJocFpuUW9LVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0x5OGdZMjl0Y0d4bGVDQmpZWE5sTGx4dUlDQWdJQ0FnTHk4Z2QyVWdhR0YyWlNCbGJtOTFaMmdnZEc4Z1kyOTJaWElnYVhRc0lHSjFkQ0JwZENCemNHRnVjeUJ3WVhOMElIUm9aU0JtYVhKemRDQmlkV1ptWlhJdVhHNGdJQ0FnSUNCcFppQW9jM1J5YVc1blRXOWtaU2xjYmlBZ0lDQWdJQ0FnY21WMElEMGdKeWM3WEc0Z0lDQWdJQ0JsYkhObFhHNGdJQ0FnSUNBZ0lISmxkQ0E5SUc1bGR5QkNkV1ptWlhJb2JpazdYRzVjYmlBZ0lDQWdJSFpoY2lCaklEMGdNRHRjYmlBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd0xDQnNJRDBnYkdsemRDNXNaVzVuZEdnN0lHa2dQQ0JzSUNZbUlHTWdQQ0J1T3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHSjFaaUE5SUd4cGMzUmJNRjA3WEc0Z0lDQWdJQ0FnSUhaaGNpQmpjSGtnUFNCTllYUm9MbTFwYmlodUlDMGdZeXdnWW5WbUxteGxibWQwYUNrN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0hOMGNtbHVaMDF2WkdVcFhHNGdJQ0FnSUNBZ0lDQWdjbVYwSUNzOUlHSjFaaTV6YkdsalpTZ3dMQ0JqY0hrcE8xeHVJQ0FnSUNBZ0lDQmxiSE5sWEc0Z0lDQWdJQ0FnSUNBZ1luVm1MbU52Y0hrb2NtVjBMQ0JqTENBd0xDQmpjSGtwTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hqY0hrZ1BDQmlkV1l1YkdWdVozUm9LVnh1SUNBZ0lDQWdJQ0FnSUd4cGMzUmJNRjBnUFNCaWRXWXVjMnhwWTJVb1kzQjVLVHRjYmlBZ0lDQWdJQ0FnWld4elpWeHVJQ0FnSUNBZ0lDQWdJR3hwYzNRdWMyaHBablFvS1R0Y2JseHVJQ0FnSUNBZ0lDQmpJQ3M5SUdOd2VUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2NtVjBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmxibVJTWldGa1lXSnNaU2h6ZEhKbFlXMHBJSHRjYmlBZ2RtRnlJSE4wWVhSbElEMGdjM1J5WldGdExsOXlaV0ZrWVdKc1pWTjBZWFJsTzF4dVhHNGdJQzh2SUVsbUlIZGxJR2RsZENCb1pYSmxJR0psWm05eVpTQmpiMjV6ZFcxcGJtY2dZV3hzSUhSb1pTQmllWFJsY3l3Z2RHaGxiaUIwYUdGMElHbHpJR0ZjYmlBZ0x5OGdZblZuSUdsdUlHNXZaR1V1SUNCVGFHOTFiR1FnYm1WMlpYSWdhR0Z3Y0dWdUxseHVJQ0JwWmlBb2MzUmhkR1V1YkdWdVozUm9JRDRnTUNsY2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMlZ1WkZKbFlXUmhZbXhsSUdOaGJHeGxaQ0J2YmlCdWIyNHRaVzF3ZEhrZ2MzUnlaV0Z0SnlrN1hHNWNiaUFnYVdZZ0tDRnpkR0YwWlM1bGJtUkZiV2wwZEdWa0tTQjdYRzRnSUNBZ2MzUmhkR1V1Wlc1a1pXUWdQU0IwY25WbE8xeHVJQ0FnSUhCeWIyTmxjM011Ym1WNGRGUnBZMnNvWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBdkx5QkRhR1ZqYXlCMGFHRjBJSGRsSUdScFpHNG5kQ0JuWlhRZ2IyNWxJR3hoYzNRZ2RXNXphR2xtZEM1Y2JpQWdJQ0FnSUdsbUlDZ2hjM1JoZEdVdVpXNWtSVzFwZEhSbFpDQW1KaUJ6ZEdGMFpTNXNaVzVuZEdnZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ2MzUmhkR1V1Wlc1a1JXMXBkSFJsWkNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUhOMGNtVmhiUzV5WldGa1lXSnNaU0E5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0J6ZEhKbFlXMHVaVzFwZENnblpXNWtKeWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z1ptOXlSV0ZqYUNBb2VITXNJR1lwSUh0Y2JpQWdabTl5SUNoMllYSWdhU0E5SURBc0lHd2dQU0I0Y3k1c1pXNW5kR2c3SUdrZ1BDQnNPeUJwS3lzcElIdGNiaUFnSUNCbUtIaHpXMmxkTENCcEtUdGNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJwYm1SbGVFOW1JQ2g0Y3l3Z2VDa2dlMXh1SUNCbWIzSWdLSFpoY2lCcElEMGdNQ3dnYkNBOUlIaHpMbXhsYm1kMGFEc2dhU0E4SUd3N0lHa3JLeWtnZTF4dUlDQWdJR2xtSUNoNGMxdHBYU0E5UFQwZ2VDa2djbVYwZFhKdUlHazdYRzRnSUgxY2JpQWdjbVYwZFhKdUlDMHhPMXh1ZlZ4dUlsMTkiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuXG4vLyBhIHRyYW5zZm9ybSBzdHJlYW0gaXMgYSByZWFkYWJsZS93cml0YWJsZSBzdHJlYW0gd2hlcmUgeW91IGRvXG4vLyBzb21ldGhpbmcgd2l0aCB0aGUgZGF0YS4gIFNvbWV0aW1lcyBpdCdzIGNhbGxlZCBhIFwiZmlsdGVyXCIsXG4vLyBidXQgdGhhdCdzIG5vdCBhIGdyZWF0IG5hbWUgZm9yIGl0LCBzaW5jZSB0aGF0IGltcGxpZXMgYSB0aGluZyB3aGVyZVxuLy8gc29tZSBiaXRzIHBhc3MgdGhyb3VnaCwgYW5kIG90aGVycyBhcmUgc2ltcGx5IGlnbm9yZWQuICAoVGhhdCB3b3VsZFxuLy8gYmUgYSB2YWxpZCBleGFtcGxlIG9mIGEgdHJhbnNmb3JtLCBvZiBjb3Vyc2UuKVxuLy9cbi8vIFdoaWxlIHRoZSBvdXRwdXQgaXMgY2F1c2FsbHkgcmVsYXRlZCB0byB0aGUgaW5wdXQsIGl0J3Mgbm90IGFcbi8vIG5lY2Vzc2FyaWx5IHN5bW1ldHJpYyBvciBzeW5jaHJvbm91cyB0cmFuc2Zvcm1hdGlvbi4gIEZvciBleGFtcGxlLFxuLy8gYSB6bGliIHN0cmVhbSBtaWdodCB0YWtlIG11bHRpcGxlIHBsYWluLXRleHQgd3JpdGVzKCksIGFuZCB0aGVuXG4vLyBlbWl0IGEgc2luZ2xlIGNvbXByZXNzZWQgY2h1bmsgc29tZSB0aW1lIGluIHRoZSBmdXR1cmUuXG4vL1xuLy8gSGVyZSdzIGhvdyB0aGlzIHdvcmtzOlxuLy9cbi8vIFRoZSBUcmFuc2Zvcm0gc3RyZWFtIGhhcyBhbGwgdGhlIGFzcGVjdHMgb2YgdGhlIHJlYWRhYmxlIGFuZCB3cml0YWJsZVxuLy8gc3RyZWFtIGNsYXNzZXMuICBXaGVuIHlvdSB3cml0ZShjaHVuayksIHRoYXQgY2FsbHMgX3dyaXRlKGNodW5rLGNiKVxuLy8gaW50ZXJuYWxseSwgYW5kIHJldHVybnMgZmFsc2UgaWYgdGhlcmUncyBhIGxvdCBvZiBwZW5kaW5nIHdyaXRlc1xuLy8gYnVmZmVyZWQgdXAuICBXaGVuIHlvdSBjYWxsIHJlYWQoKSwgdGhhdCBjYWxscyBfcmVhZChuKSB1bnRpbFxuLy8gdGhlcmUncyBlbm91Z2ggcGVuZGluZyByZWFkYWJsZSBkYXRhIGJ1ZmZlcmVkIHVwLlxuLy9cbi8vIEluIGEgdHJhbnNmb3JtIHN0cmVhbSwgdGhlIHdyaXR0ZW4gZGF0YSBpcyBwbGFjZWQgaW4gYSBidWZmZXIuICBXaGVuXG4vLyBfcmVhZChuKSBpcyBjYWxsZWQsIGl0IHRyYW5zZm9ybXMgdGhlIHF1ZXVlZCB1cCBkYXRhLCBjYWxsaW5nIHRoZVxuLy8gYnVmZmVyZWQgX3dyaXRlIGNiJ3MgYXMgaXQgY29uc3VtZXMgY2h1bmtzLiAgSWYgY29uc3VtaW5nIGEgc2luZ2xlXG4vLyB3cml0dGVuIGNodW5rIHdvdWxkIHJlc3VsdCBpbiBtdWx0aXBsZSBvdXRwdXQgY2h1bmtzLCB0aGVuIHRoZSBmaXJzdFxuLy8gb3V0cHV0dGVkIGJpdCBjYWxscyB0aGUgcmVhZGNiLCBhbmQgc3Vic2VxdWVudCBjaHVua3MganVzdCBnbyBpbnRvXG4vLyB0aGUgcmVhZCBidWZmZXIsIGFuZCB3aWxsIGNhdXNlIGl0IHRvIGVtaXQgJ3JlYWRhYmxlJyBpZiBuZWNlc3NhcnkuXG4vL1xuLy8gVGhpcyB3YXksIGJhY2stcHJlc3N1cmUgaXMgYWN0dWFsbHkgZGV0ZXJtaW5lZCBieSB0aGUgcmVhZGluZyBzaWRlLFxuLy8gc2luY2UgX3JlYWQgaGFzIHRvIGJlIGNhbGxlZCB0byBzdGFydCBwcm9jZXNzaW5nIGEgbmV3IGNodW5rLiAgSG93ZXZlcixcbi8vIGEgcGF0aG9sb2dpY2FsIGluZmxhdGUgdHlwZSBvZiB0cmFuc2Zvcm0gY2FuIGNhdXNlIGV4Y2Vzc2l2ZSBidWZmZXJpbmdcbi8vIGhlcmUuICBGb3IgZXhhbXBsZSwgaW1hZ2luZSBhIHN0cmVhbSB3aGVyZSBldmVyeSBieXRlIG9mIGlucHV0IGlzXG4vLyBpbnRlcnByZXRlZCBhcyBhbiBpbnRlZ2VyIGZyb20gMC0yNTUsIGFuZCB0aGVuIHJlc3VsdHMgaW4gdGhhdCBtYW55XG4vLyBieXRlcyBvZiBvdXRwdXQuICBXcml0aW5nIHRoZSA0IGJ5dGVzIHtmZixmZixmZixmZn0gd291bGQgcmVzdWx0IGluXG4vLyAxa2Igb2YgZGF0YSBiZWluZyBvdXRwdXQuICBJbiB0aGlzIGNhc2UsIHlvdSBjb3VsZCB3cml0ZSBhIHZlcnkgc21hbGxcbi8vIGFtb3VudCBvZiBpbnB1dCwgYW5kIGVuZCB1cCB3aXRoIGEgdmVyeSBsYXJnZSBhbW91bnQgb2Ygb3V0cHV0LiAgSW5cbi8vIHN1Y2ggYSBwYXRob2xvZ2ljYWwgaW5mbGF0aW5nIG1lY2hhbmlzbSwgdGhlcmUnZCBiZSBubyB3YXkgdG8gdGVsbFxuLy8gdGhlIHN5c3RlbSB0byBzdG9wIGRvaW5nIHRoZSB0cmFuc2Zvcm0uICBBIHNpbmdsZSA0TUIgd3JpdGUgY291bGRcbi8vIGNhdXNlIHRoZSBzeXN0ZW0gdG8gcnVuIG91dCBvZiBtZW1vcnkuXG4vL1xuLy8gSG93ZXZlciwgZXZlbiBpbiBzdWNoIGEgcGF0aG9sb2dpY2FsIGNhc2UsIG9ubHkgYSBzaW5nbGUgd3JpdHRlbiBjaHVua1xuLy8gd291bGQgYmUgY29uc3VtZWQsIGFuZCB0aGVuIHRoZSByZXN0IHdvdWxkIHdhaXQgKHVuLXRyYW5zZm9ybWVkKSB1bnRpbFxuLy8gdGhlIHJlc3VsdHMgb2YgdGhlIHByZXZpb3VzIHRyYW5zZm9ybWVkIGNodW5rIHdlcmUgY29uc3VtZWQuXG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNmb3JtO1xuXG52YXIgRHVwbGV4ID0gcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnV0aWwuaW5oZXJpdHMoVHJhbnNmb3JtLCBEdXBsZXgpO1xuXG5cbmZ1bmN0aW9uIFRyYW5zZm9ybVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkge1xuICB0aGlzLmFmdGVyVHJhbnNmb3JtID0gZnVuY3Rpb24oZXIsIGRhdGEpIHtcbiAgICByZXR1cm4gYWZ0ZXJUcmFuc2Zvcm0oc3RyZWFtLCBlciwgZGF0YSk7XG4gIH07XG5cbiAgdGhpcy5uZWVkVHJhbnNmb3JtID0gZmFsc2U7XG4gIHRoaXMudHJhbnNmb3JtaW5nID0gZmFsc2U7XG4gIHRoaXMud3JpdGVjYiA9IG51bGw7XG4gIHRoaXMud3JpdGVjaHVuayA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGFmdGVyVHJhbnNmb3JtKHN0cmVhbSwgZXIsIGRhdGEpIHtcbiAgdmFyIHRzID0gc3RyZWFtLl90cmFuc2Zvcm1TdGF0ZTtcbiAgdHMudHJhbnNmb3JtaW5nID0gZmFsc2U7XG5cbiAgdmFyIGNiID0gdHMud3JpdGVjYjtcblxuICBpZiAoIWNiKVxuICAgIHJldHVybiBzdHJlYW0uZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ25vIHdyaXRlY2IgaW4gVHJhbnNmb3JtIGNsYXNzJykpO1xuXG4gIHRzLndyaXRlY2h1bmsgPSBudWxsO1xuICB0cy53cml0ZWNiID0gbnVsbDtcblxuICBpZiAoIXV0aWwuaXNOdWxsT3JVbmRlZmluZWQoZGF0YSkpXG4gICAgc3RyZWFtLnB1c2goZGF0YSk7XG5cbiAgaWYgKGNiKVxuICAgIGNiKGVyKTtcblxuICB2YXIgcnMgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIHJzLnJlYWRpbmcgPSBmYWxzZTtcbiAgaWYgKHJzLm5lZWRSZWFkYWJsZSB8fCBycy5sZW5ndGggPCBycy5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgc3RyZWFtLl9yZWFkKHJzLmhpZ2hXYXRlck1hcmspO1xuICB9XG59XG5cblxuZnVuY3Rpb24gVHJhbnNmb3JtKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFRyYW5zZm9ybSkpXG4gICAgcmV0dXJuIG5ldyBUcmFuc2Zvcm0ob3B0aW9ucyk7XG5cbiAgRHVwbGV4LmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUgPSBuZXcgVHJhbnNmb3JtU3RhdGUob3B0aW9ucywgdGhpcyk7XG5cbiAgLy8gd2hlbiB0aGUgd3JpdGFibGUgc2lkZSBmaW5pc2hlcywgdGhlbiBmbHVzaCBvdXQgYW55dGhpbmcgcmVtYWluaW5nLlxuICB2YXIgc3RyZWFtID0gdGhpcztcblxuICAvLyBzdGFydCBvdXQgYXNraW5nIGZvciBhIHJlYWRhYmxlIGV2ZW50IG9uY2UgZGF0YSBpcyB0cmFuc2Zvcm1lZC5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuXG4gIC8vIHdlIGhhdmUgaW1wbGVtZW50ZWQgdGhlIF9yZWFkIG1ldGhvZCwgYW5kIGRvbmUgdGhlIG90aGVyIHRoaW5nc1xuICAvLyB0aGF0IFJlYWRhYmxlIHdhbnRzIGJlZm9yZSB0aGUgZmlyc3QgX3JlYWQgY2FsbCwgc28gdW5zZXQgdGhlXG4gIC8vIHN5bmMgZ3VhcmQgZmxhZy5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5zeW5jID0gZmFsc2U7XG5cbiAgdGhpcy5vbmNlKCdwcmVmaW5pc2gnLCBmdW5jdGlvbigpIHtcbiAgICBpZiAodXRpbC5pc0Z1bmN0aW9uKHRoaXMuX2ZsdXNoKSlcbiAgICAgIHRoaXMuX2ZsdXNoKGZ1bmN0aW9uKGVyKSB7XG4gICAgICAgIGRvbmUoc3RyZWFtLCBlcik7XG4gICAgICB9KTtcbiAgICBlbHNlXG4gICAgICBkb25lKHN0cmVhbSk7XG4gIH0pO1xufVxuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbihjaHVuaywgZW5jb2RpbmcpIHtcbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUubmVlZFRyYW5zZm9ybSA9IGZhbHNlO1xuICByZXR1cm4gRHVwbGV4LnByb3RvdHlwZS5wdXNoLmNhbGwodGhpcywgY2h1bmssIGVuY29kaW5nKTtcbn07XG5cbi8vIFRoaXMgaXMgdGhlIHBhcnQgd2hlcmUgeW91IGRvIHN0dWZmIVxuLy8gb3ZlcnJpZGUgdGhpcyBmdW5jdGlvbiBpbiBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxuLy8gJ2NodW5rJyBpcyBhbiBpbnB1dCBjaHVuay5cbi8vXG4vLyBDYWxsIGBwdXNoKG5ld0NodW5rKWAgdG8gcGFzcyBhbG9uZyB0cmFuc2Zvcm1lZCBvdXRwdXRcbi8vIHRvIHRoZSByZWFkYWJsZSBzaWRlLiAgWW91IG1heSBjYWxsICdwdXNoJyB6ZXJvIG9yIG1vcmUgdGltZXMuXG4vL1xuLy8gQ2FsbCBgY2IoZXJyKWAgd2hlbiB5b3UgYXJlIGRvbmUgd2l0aCB0aGlzIGNodW5rLiAgSWYgeW91IHBhc3Ncbi8vIGFuIGVycm9yLCB0aGVuIHRoYXQnbGwgcHV0IHRoZSBodXJ0IG9uIHRoZSB3aG9sZSBvcGVyYXRpb24uICBJZiB5b3Vcbi8vIG5ldmVyIGNhbGwgY2IoKSwgdGhlbiB5b3UnbGwgbmV2ZXIgZ2V0IGFub3RoZXIgY2h1bmsuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbihjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHRocm93IG5ldyBFcnJvcignbm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XG4gIHRzLndyaXRlY2IgPSBjYjtcbiAgdHMud3JpdGVjaHVuayA9IGNodW5rO1xuICB0cy53cml0ZWVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIGlmICghdHMudHJhbnNmb3JtaW5nKSB7XG4gICAgdmFyIHJzID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgICBpZiAodHMubmVlZFRyYW5zZm9ybSB8fFxuICAgICAgICBycy5uZWVkUmVhZGFibGUgfHxcbiAgICAgICAgcnMubGVuZ3RoIDwgcnMuaGlnaFdhdGVyTWFyaylcbiAgICAgIHRoaXMuX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7XG4gIH1cbn07XG5cbi8vIERvZXNuJ3QgbWF0dGVyIHdoYXQgdGhlIGFyZ3MgYXJlIGhlcmUuXG4vLyBfdHJhbnNmb3JtIGRvZXMgYWxsIHRoZSB3b3JrLlxuLy8gVGhhdCB3ZSBnb3QgaGVyZSBtZWFucyB0aGF0IHRoZSByZWFkYWJsZSBzaWRlIHdhbnRzIG1vcmUgZGF0YS5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbihuKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuXG4gIGlmICghdXRpbC5pc051bGwodHMud3JpdGVjaHVuaykgJiYgdHMud3JpdGVjYiAmJiAhdHMudHJhbnNmb3JtaW5nKSB7XG4gICAgdHMudHJhbnNmb3JtaW5nID0gdHJ1ZTtcbiAgICB0aGlzLl90cmFuc2Zvcm0odHMud3JpdGVjaHVuaywgdHMud3JpdGVlbmNvZGluZywgdHMuYWZ0ZXJUcmFuc2Zvcm0pO1xuICB9IGVsc2Uge1xuICAgIC8vIG1hcmsgdGhhdCB3ZSBuZWVkIGEgdHJhbnNmb3JtLCBzbyB0aGF0IGFueSBkYXRhIHRoYXQgY29tZXMgaW5cbiAgICAvLyB3aWxsIGdldCBwcm9jZXNzZWQsIG5vdyB0aGF0IHdlJ3ZlIGFza2VkIGZvciBpdC5cbiAgICB0cy5uZWVkVHJhbnNmb3JtID0gdHJ1ZTtcbiAgfVxufTtcblxuXG5mdW5jdGlvbiBkb25lKHN0cmVhbSwgZXIpIHtcbiAgaWYgKGVyKVxuICAgIHJldHVybiBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG5cbiAgLy8gaWYgdGhlcmUncyBub3RoaW5nIGluIHRoZSB3cml0ZSBidWZmZXIsIHRoZW4gdGhhdCBtZWFuc1xuICAvLyB0aGF0IG5vdGhpbmcgbW9yZSB3aWxsIGV2ZXIgYmUgcHJvdmlkZWRcbiAgdmFyIHdzID0gc3RyZWFtLl93cml0YWJsZVN0YXRlO1xuICB2YXIgdHMgPSBzdHJlYW0uX3RyYW5zZm9ybVN0YXRlO1xuXG4gIGlmICh3cy5sZW5ndGgpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdjYWxsaW5nIHRyYW5zZm9ybSBkb25lIHdoZW4gd3MubGVuZ3RoICE9IDAnKTtcblxuICBpZiAodHMudHJhbnNmb3JtaW5nKVxuICAgIHRocm93IG5ldyBFcnJvcignY2FsbGluZyB0cmFuc2Zvcm0gZG9uZSB3aGVuIHN0aWxsIHRyYW5zZm9ybWluZycpO1xuXG4gIHJldHVybiBzdHJlYW0ucHVzaChudWxsKTtcbn1cbiIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gQSBiaXQgc2ltcGxlciB0aGFuIHJlYWRhYmxlIHN0cmVhbXMuXG4vLyBJbXBsZW1lbnQgYW4gYXN5bmMgLl93cml0ZShjaHVuaywgY2IpLCBhbmQgaXQnbGwgaGFuZGxlIGFsbFxuLy8gdGhlIGRyYWluIGV2ZW50IGVtaXNzaW9uIGFuZCBidWZmZXJpbmcuXG5cbm1vZHVsZS5leHBvcnRzID0gV3JpdGFibGU7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJykuQnVmZmVyO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbldyaXRhYmxlLldyaXRhYmxlU3RhdGUgPSBXcml0YWJsZVN0YXRlO1xuXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIFN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpO1xuXG51dGlsLmluaGVyaXRzKFdyaXRhYmxlLCBTdHJlYW0pO1xuXG5mdW5jdGlvbiBXcml0ZVJlcShjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHRoaXMuY2h1bmsgPSBjaHVuaztcbiAgdGhpcy5lbmNvZGluZyA9IGVuY29kaW5nO1xuICB0aGlzLmNhbGxiYWNrID0gY2I7XG59XG5cbmZ1bmN0aW9uIFdyaXRhYmxlU3RhdGUob3B0aW9ucywgc3RyZWFtKSB7XG4gIHZhciBEdXBsZXggPSByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gdGhlIHBvaW50IGF0IHdoaWNoIHdyaXRlKCkgc3RhcnRzIHJldHVybmluZyBmYWxzZVxuICAvLyBOb3RlOiAwIGlzIGEgdmFsaWQgdmFsdWUsIG1lYW5zIHRoYXQgd2UgYWx3YXlzIHJldHVybiBmYWxzZSBpZlxuICAvLyB0aGUgZW50aXJlIGJ1ZmZlciBpcyBub3QgZmx1c2hlZCBpbW1lZGlhdGVseSBvbiB3cml0ZSgpXG4gIHZhciBod20gPSBvcHRpb25zLmhpZ2hXYXRlck1hcms7XG4gIHZhciBkZWZhdWx0SHdtID0gb3B0aW9ucy5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7XG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IChod20gfHwgaHdtID09PSAwKSA/IGh3bSA6IGRlZmF1bHRId207XG5cbiAgLy8gb2JqZWN0IHN0cmVhbSBmbGFnIHRvIGluZGljYXRlIHdoZXRoZXIgb3Igbm90IHRoaXMgc3RyZWFtXG4gIC8vIGNvbnRhaW5zIGJ1ZmZlcnMgb3Igb2JqZWN0cy5cbiAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRpb25zLm9iamVjdE1vZGU7XG5cbiAgaWYgKHN0cmVhbSBpbnN0YW5jZW9mIER1cGxleClcbiAgICB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLndyaXRhYmxlT2JqZWN0TW9kZTtcblxuICAvLyBjYXN0IHRvIGludHMuXG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IH5+dGhpcy5oaWdoV2F0ZXJNYXJrO1xuXG4gIHRoaXMubmVlZERyYWluID0gZmFsc2U7XG4gIC8vIGF0IHRoZSBzdGFydCBvZiBjYWxsaW5nIGVuZCgpXG4gIHRoaXMuZW5kaW5nID0gZmFsc2U7XG4gIC8vIHdoZW4gZW5kKCkgaGFzIGJlZW4gY2FsbGVkLCBhbmQgcmV0dXJuZWRcbiAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICAvLyB3aGVuICdmaW5pc2gnIGlzIGVtaXR0ZWRcbiAgdGhpcy5maW5pc2hlZCA9IGZhbHNlO1xuXG4gIC8vIHNob3VsZCB3ZSBkZWNvZGUgc3RyaW5ncyBpbnRvIGJ1ZmZlcnMgYmVmb3JlIHBhc3NpbmcgdG8gX3dyaXRlP1xuICAvLyB0aGlzIGlzIGhlcmUgc28gdGhhdCBzb21lIG5vZGUtY29yZSBzdHJlYW1zIGNhbiBvcHRpbWl6ZSBzdHJpbmdcbiAgLy8gaGFuZGxpbmcgYXQgYSBsb3dlciBsZXZlbC5cbiAgdmFyIG5vRGVjb2RlID0gb3B0aW9ucy5kZWNvZGVTdHJpbmdzID09PSBmYWxzZTtcbiAgdGhpcy5kZWNvZGVTdHJpbmdzID0gIW5vRGVjb2RlO1xuXG4gIC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmdcbiAgLy8gZW5jb2RpbmcgaXMgJ2JpbmFyeScgc28gd2UgaGF2ZSB0byBtYWtlIHRoaXMgY29uZmlndXJhYmxlLlxuICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guXG4gIHRoaXMuZGVmYXVsdEVuY29kaW5nID0gb3B0aW9ucy5kZWZhdWx0RW5jb2RpbmcgfHwgJ3V0ZjgnO1xuXG4gIC8vIG5vdCBhbiBhY3R1YWwgYnVmZmVyIHdlIGtlZXAgdHJhY2sgb2YsIGJ1dCBhIG1lYXN1cmVtZW50XG4gIC8vIG9mIGhvdyBtdWNoIHdlJ3JlIHdhaXRpbmcgdG8gZ2V0IHB1c2hlZCB0byBzb21lIHVuZGVybHlpbmdcbiAgLy8gc29ja2V0IG9yIGZpbGUuXG4gIHRoaXMubGVuZ3RoID0gMDtcblxuICAvLyBhIGZsYWcgdG8gc2VlIHdoZW4gd2UncmUgaW4gdGhlIG1pZGRsZSBvZiBhIHdyaXRlLlxuICB0aGlzLndyaXRpbmcgPSBmYWxzZTtcblxuICAvLyB3aGVuIHRydWUgYWxsIHdyaXRlcyB3aWxsIGJlIGJ1ZmZlcmVkIHVudGlsIC51bmNvcmsoKSBjYWxsXG4gIHRoaXMuY29ya2VkID0gMDtcblxuICAvLyBhIGZsYWcgdG8gYmUgYWJsZSB0byB0ZWxsIGlmIHRoZSBvbndyaXRlIGNiIGlzIGNhbGxlZCBpbW1lZGlhdGVseSxcbiAgLy8gb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZSBhbnlcbiAgLy8gYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xuICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3Qgd3JpdGUgY2FsbC5cbiAgdGhpcy5zeW5jID0gdHJ1ZTtcblxuICAvLyBhIGZsYWcgdG8ga25vdyBpZiB3ZSdyZSBwcm9jZXNzaW5nIHByZXZpb3VzbHkgYnVmZmVyZWQgaXRlbXMsIHdoaWNoXG4gIC8vIG1heSBjYWxsIHRoZSBfd3JpdGUoKSBjYWxsYmFjayBpbiB0aGUgc2FtZSB0aWNrLCBzbyB0aGF0IHdlIGRvbid0XG4gIC8vIGVuZCB1cCBpbiBhbiBvdmVybGFwcGVkIG9ud3JpdGUgc2l0dWF0aW9uLlxuICB0aGlzLmJ1ZmZlclByb2Nlc3NpbmcgPSBmYWxzZTtcblxuICAvLyB0aGUgY2FsbGJhY2sgdGhhdCdzIHBhc3NlZCB0byBfd3JpdGUoY2h1bmssY2IpXG4gIHRoaXMub253cml0ZSA9IGZ1bmN0aW9uKGVyKSB7XG4gICAgb253cml0ZShzdHJlYW0sIGVyKTtcbiAgfTtcblxuICAvLyB0aGUgY2FsbGJhY2sgdGhhdCB0aGUgdXNlciBzdXBwbGllcyB0byB3cml0ZShjaHVuayxlbmNvZGluZyxjYilcbiAgdGhpcy53cml0ZWNiID0gbnVsbDtcblxuICAvLyB0aGUgYW1vdW50IHRoYXQgaXMgYmVpbmcgd3JpdHRlbiB3aGVuIF93cml0ZSBpcyBjYWxsZWQuXG4gIHRoaXMud3JpdGVsZW4gPSAwO1xuXG4gIHRoaXMuYnVmZmVyID0gW107XG5cbiAgLy8gbnVtYmVyIG9mIHBlbmRpbmcgdXNlci1zdXBwbGllZCB3cml0ZSBjYWxsYmFja3NcbiAgLy8gdGhpcyBtdXN0IGJlIDAgYmVmb3JlICdmaW5pc2gnIGNhbiBiZSBlbWl0dGVkXG4gIHRoaXMucGVuZGluZ2NiID0gMDtcblxuICAvLyBlbWl0IHByZWZpbmlzaCBpZiB0aGUgb25seSB0aGluZyB3ZSdyZSB3YWl0aW5nIGZvciBpcyBfd3JpdGUgY2JzXG4gIC8vIFRoaXMgaXMgcmVsZXZhbnQgZm9yIHN5bmNocm9ub3VzIFRyYW5zZm9ybSBzdHJlYW1zXG4gIHRoaXMucHJlZmluaXNoZWQgPSBmYWxzZTtcblxuICAvLyBUcnVlIGlmIHRoZSBlcnJvciB3YXMgYWxyZWFkeSBlbWl0dGVkIGFuZCBzaG91bGQgbm90IGJlIHRocm93biBhZ2FpblxuICB0aGlzLmVycm9yRW1pdHRlZCA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBXcml0YWJsZShvcHRpb25zKSB7XG4gIHZhciBEdXBsZXggPSByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgLy8gV3JpdGFibGUgY3RvciBpcyBhcHBsaWVkIHRvIER1cGxleGVzLCB0aG91Z2ggdGhleSdyZSBub3RcbiAgLy8gaW5zdGFuY2VvZiBXcml0YWJsZSwgdGhleSdyZSBpbnN0YW5jZW9mIFJlYWRhYmxlLlxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgV3JpdGFibGUpICYmICEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpXG4gICAgcmV0dXJuIG5ldyBXcml0YWJsZShvcHRpb25zKTtcblxuICB0aGlzLl93cml0YWJsZVN0YXRlID0gbmV3IFdyaXRhYmxlU3RhdGUob3B0aW9ucywgdGhpcyk7XG5cbiAgLy8gbGVnYWN5LlxuICB0aGlzLndyaXRhYmxlID0gdHJ1ZTtcblxuICBTdHJlYW0uY2FsbCh0aGlzKTtcbn1cblxuLy8gT3RoZXJ3aXNlIHBlb3BsZSBjYW4gcGlwZSBXcml0YWJsZSBzdHJlYW1zLCB3aGljaCBpcyBqdXN0IHdyb25nLlxuV3JpdGFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignQ2Fubm90IHBpcGUuIE5vdCByZWFkYWJsZS4nKSk7XG59O1xuXG5cbmZ1bmN0aW9uIHdyaXRlQWZ0ZXJFbmQoc3RyZWFtLCBzdGF0ZSwgY2IpIHtcbiAgdmFyIGVyID0gbmV3IEVycm9yKCd3cml0ZSBhZnRlciBlbmQnKTtcbiAgLy8gVE9ETzogZGVmZXIgZXJyb3IgZXZlbnRzIGNvbnNpc3RlbnRseSBldmVyeXdoZXJlLCBub3QganVzdCB0aGUgY2JcbiAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgIGNiKGVyKTtcbiAgfSk7XG59XG5cbi8vIElmIHdlIGdldCBzb21ldGhpbmcgdGhhdCBpcyBub3QgYSBidWZmZXIsIHN0cmluZywgbnVsbCwgb3IgdW5kZWZpbmVkLFxuLy8gYW5kIHdlJ3JlIG5vdCBpbiBvYmplY3RNb2RlLCB0aGVuIHRoYXQncyBhbiBlcnJvci5cbi8vIE90aGVyd2lzZSBzdHJlYW0gY2h1bmtzIGFyZSBhbGwgY29uc2lkZXJlZCB0byBiZSBvZiBsZW5ndGg9MSwgYW5kIHRoZVxuLy8gd2F0ZXJtYXJrcyBkZXRlcm1pbmUgaG93IG1hbnkgb2JqZWN0cyB0byBrZWVwIGluIHRoZSBidWZmZXIsIHJhdGhlciB0aGFuXG4vLyBob3cgbWFueSBieXRlcyBvciBjaGFyYWN0ZXJzLlxuZnVuY3Rpb24gdmFsaWRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgY2IpIHtcbiAgdmFyIHZhbGlkID0gdHJ1ZTtcbiAgaWYgKCF1dGlsLmlzQnVmZmVyKGNodW5rKSAmJlxuICAgICAgIXV0aWwuaXNTdHJpbmcoY2h1bmspICYmXG4gICAgICAhdXRpbC5pc051bGxPclVuZGVmaW5lZChjaHVuaykgJiZcbiAgICAgICFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgdmFyIGVyID0gbmV3IFR5cGVFcnJvcignSW52YWxpZCBub24tc3RyaW5nL2J1ZmZlciBjaHVuaycpO1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgY2IoZXIpO1xuICAgIH0pO1xuICAgIHZhbGlkID0gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHZhbGlkO1xufVxuXG5Xcml0YWJsZS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbihjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG4gIHZhciByZXQgPSBmYWxzZTtcblxuICBpZiAodXRpbC5pc0Z1bmN0aW9uKGVuY29kaW5nKSkge1xuICAgIGNiID0gZW5jb2Rpbmc7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9XG5cbiAgaWYgKHV0aWwuaXNCdWZmZXIoY2h1bmspKVxuICAgIGVuY29kaW5nID0gJ2J1ZmZlcic7XG4gIGVsc2UgaWYgKCFlbmNvZGluZylcbiAgICBlbmNvZGluZyA9IHN0YXRlLmRlZmF1bHRFbmNvZGluZztcblxuICBpZiAoIXV0aWwuaXNGdW5jdGlvbihjYikpXG4gICAgY2IgPSBmdW5jdGlvbigpIHt9O1xuXG4gIGlmIChzdGF0ZS5lbmRlZClcbiAgICB3cml0ZUFmdGVyRW5kKHRoaXMsIHN0YXRlLCBjYik7XG4gIGVsc2UgaWYgKHZhbGlkQ2h1bmsodGhpcywgc3RhdGUsIGNodW5rLCBjYikpIHtcbiAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICByZXQgPSB3cml0ZU9yQnVmZmVyKHRoaXMsIHN0YXRlLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuY29yayA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIHN0YXRlLmNvcmtlZCsrO1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLnVuY29yayA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIGlmIChzdGF0ZS5jb3JrZWQpIHtcbiAgICBzdGF0ZS5jb3JrZWQtLTtcblxuICAgIGlmICghc3RhdGUud3JpdGluZyAmJlxuICAgICAgICAhc3RhdGUuY29ya2VkICYmXG4gICAgICAgICFzdGF0ZS5maW5pc2hlZCAmJlxuICAgICAgICAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJlxuICAgICAgICBzdGF0ZS5idWZmZXIubGVuZ3RoKVxuICAgICAgY2xlYXJCdWZmZXIodGhpcywgc3RhdGUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBkZWNvZGVDaHVuayhzdGF0ZSwgY2h1bmssIGVuY29kaW5nKSB7XG4gIGlmICghc3RhdGUub2JqZWN0TW9kZSAmJlxuICAgICAgc3RhdGUuZGVjb2RlU3RyaW5ncyAhPT0gZmFsc2UgJiZcbiAgICAgIHV0aWwuaXNTdHJpbmcoY2h1bmspKSB7XG4gICAgY2h1bmsgPSBuZXcgQnVmZmVyKGNodW5rLCBlbmNvZGluZyk7XG4gIH1cbiAgcmV0dXJuIGNodW5rO1xufVxuXG4vLyBpZiB3ZSdyZSBhbHJlYWR5IHdyaXRpbmcgc29tZXRoaW5nLCB0aGVuIGp1c3QgcHV0IHRoaXNcbi8vIGluIHRoZSBxdWV1ZSwgYW5kIHdhaXQgb3VyIHR1cm4uICBPdGhlcndpc2UsIGNhbGwgX3dyaXRlXG4vLyBJZiB3ZSByZXR1cm4gZmFsc2UsIHRoZW4gd2UgbmVlZCBhIGRyYWluIGV2ZW50LCBzbyBzZXQgdGhhdCBmbGFnLlxuZnVuY3Rpb24gd3JpdGVPckJ1ZmZlcihzdHJlYW0sIHN0YXRlLCBjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNodW5rID0gZGVjb2RlQ2h1bmsoc3RhdGUsIGNodW5rLCBlbmNvZGluZyk7XG4gIGlmICh1dGlsLmlzQnVmZmVyKGNodW5rKSlcbiAgICBlbmNvZGluZyA9ICdidWZmZXInO1xuICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG5cbiAgc3RhdGUubGVuZ3RoICs9IGxlbjtcblxuICB2YXIgcmV0ID0gc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgLy8gd2UgbXVzdCBlbnN1cmUgdGhhdCBwcmV2aW91cyBuZWVkRHJhaW4gd2lsbCBub3QgYmUgcmVzZXQgdG8gZmFsc2UuXG4gIGlmICghcmV0KVxuICAgIHN0YXRlLm5lZWREcmFpbiA9IHRydWU7XG5cbiAgaWYgKHN0YXRlLndyaXRpbmcgfHwgc3RhdGUuY29ya2VkKVxuICAgIHN0YXRlLmJ1ZmZlci5wdXNoKG5ldyBXcml0ZVJlcShjaHVuaywgZW5jb2RpbmcsIGNiKSk7XG4gIGVsc2VcbiAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpO1xuXG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgd3JpdGV2LCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgc3RhdGUud3JpdGVsZW4gPSBsZW47XG4gIHN0YXRlLndyaXRlY2IgPSBjYjtcbiAgc3RhdGUud3JpdGluZyA9IHRydWU7XG4gIHN0YXRlLnN5bmMgPSB0cnVlO1xuICBpZiAod3JpdGV2KVxuICAgIHN0cmVhbS5fd3JpdGV2KGNodW5rLCBzdGF0ZS5vbndyaXRlKTtcbiAgZWxzZVxuICAgIHN0cmVhbS5fd3JpdGUoY2h1bmssIGVuY29kaW5nLCBzdGF0ZS5vbndyaXRlKTtcbiAgc3RhdGUuc3luYyA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBvbndyaXRlRXJyb3Ioc3RyZWFtLCBzdGF0ZSwgc3luYywgZXIsIGNiKSB7XG4gIGlmIChzeW5jKVxuICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgICAgIGNiKGVyKTtcbiAgICB9KTtcbiAgZWxzZSB7XG4gICAgc3RhdGUucGVuZGluZ2NiLS07XG4gICAgY2IoZXIpO1xuICB9XG5cbiAgc3RyZWFtLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbn1cblxuZnVuY3Rpb24gb253cml0ZVN0YXRlVXBkYXRlKHN0YXRlKSB7XG4gIHN0YXRlLndyaXRpbmcgPSBmYWxzZTtcbiAgc3RhdGUud3JpdGVjYiA9IG51bGw7XG4gIHN0YXRlLmxlbmd0aCAtPSBzdGF0ZS53cml0ZWxlbjtcbiAgc3RhdGUud3JpdGVsZW4gPSAwO1xufVxuXG5mdW5jdGlvbiBvbndyaXRlKHN0cmVhbSwgZXIpIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl93cml0YWJsZVN0YXRlO1xuICB2YXIgc3luYyA9IHN0YXRlLnN5bmM7XG4gIHZhciBjYiA9IHN0YXRlLndyaXRlY2I7XG5cbiAgb253cml0ZVN0YXRlVXBkYXRlKHN0YXRlKTtcblxuICBpZiAoZXIpXG4gICAgb253cml0ZUVycm9yKHN0cmVhbSwgc3RhdGUsIHN5bmMsIGVyLCBjYik7XG4gIGVsc2Uge1xuICAgIC8vIENoZWNrIGlmIHdlJ3JlIGFjdHVhbGx5IHJlYWR5IHRvIGZpbmlzaCwgYnV0IGRvbid0IGVtaXQgeWV0XG4gICAgdmFyIGZpbmlzaGVkID0gbmVlZEZpbmlzaChzdHJlYW0sIHN0YXRlKTtcblxuICAgIGlmICghZmluaXNoZWQgJiZcbiAgICAgICAgIXN0YXRlLmNvcmtlZCAmJlxuICAgICAgICAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJlxuICAgICAgICBzdGF0ZS5idWZmZXIubGVuZ3RoKSB7XG4gICAgICBjbGVhckJ1ZmZlcihzdHJlYW0sIHN0YXRlKTtcbiAgICB9XG5cbiAgICBpZiAoc3luYykge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFmdGVyV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpIHtcbiAgaWYgKCFmaW5pc2hlZClcbiAgICBvbndyaXRlRHJhaW4oc3RyZWFtLCBzdGF0ZSk7XG4gIHN0YXRlLnBlbmRpbmdjYi0tO1xuICBjYigpO1xuICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbn1cblxuLy8gTXVzdCBmb3JjZSBjYWxsYmFjayB0byBiZSBjYWxsZWQgb24gbmV4dFRpY2ssIHNvIHRoYXQgd2UgZG9uJ3Rcbi8vIGVtaXQgJ2RyYWluJyBiZWZvcmUgdGhlIHdyaXRlKCkgY29uc3VtZXIgZ2V0cyB0aGUgJ2ZhbHNlJyByZXR1cm5cbi8vIHZhbHVlLCBhbmQgaGFzIGEgY2hhbmNlIHRvIGF0dGFjaCBhICdkcmFpbicgbGlzdGVuZXIuXG5mdW5jdGlvbiBvbndyaXRlRHJhaW4oc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLm5lZWREcmFpbikge1xuICAgIHN0YXRlLm5lZWREcmFpbiA9IGZhbHNlO1xuICAgIHN0cmVhbS5lbWl0KCdkcmFpbicpO1xuICB9XG59XG5cblxuLy8gaWYgdGhlcmUncyBzb21ldGhpbmcgaW4gdGhlIGJ1ZmZlciB3YWl0aW5nLCB0aGVuIHByb2Nlc3MgaXRcbmZ1bmN0aW9uIGNsZWFyQnVmZmVyKHN0cmVhbSwgc3RhdGUpIHtcbiAgc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyA9IHRydWU7XG5cbiAgaWYgKHN0cmVhbS5fd3JpdGV2ICYmIHN0YXRlLmJ1ZmZlci5sZW5ndGggPiAxKSB7XG4gICAgLy8gRmFzdCBjYXNlLCB3cml0ZSBldmVyeXRoaW5nIHVzaW5nIF93cml0ZXYoKVxuICAgIHZhciBjYnMgPSBbXTtcbiAgICBmb3IgKHZhciBjID0gMDsgYyA8IHN0YXRlLmJ1ZmZlci5sZW5ndGg7IGMrKylcbiAgICAgIGNicy5wdXNoKHN0YXRlLmJ1ZmZlcltjXS5jYWxsYmFjayk7XG5cbiAgICAvLyBjb3VudCB0aGUgb25lIHdlIGFyZSBhZGRpbmcsIGFzIHdlbGwuXG4gICAgLy8gVE9ETyhpc2FhY3MpIGNsZWFuIHRoaXMgdXBcbiAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIHRydWUsIHN0YXRlLmxlbmd0aCwgc3RhdGUuYnVmZmVyLCAnJywgZnVuY3Rpb24oZXJyKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNicy5sZW5ndGg7IGkrKykge1xuICAgICAgICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgICAgICAgY2JzW2ldKGVycik7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBDbGVhciBidWZmZXJcbiAgICBzdGF0ZS5idWZmZXIgPSBbXTtcbiAgfSBlbHNlIHtcbiAgICAvLyBTbG93IGNhc2UsIHdyaXRlIGNodW5rcyBvbmUtYnktb25lXG4gICAgZm9yICh2YXIgYyA9IDA7IGMgPCBzdGF0ZS5idWZmZXIubGVuZ3RoOyBjKyspIHtcbiAgICAgIHZhciBlbnRyeSA9IHN0YXRlLmJ1ZmZlcltjXTtcbiAgICAgIHZhciBjaHVuayA9IGVudHJ5LmNodW5rO1xuICAgICAgdmFyIGVuY29kaW5nID0gZW50cnkuZW5jb2Rpbmc7XG4gICAgICB2YXIgY2IgPSBlbnRyeS5jYWxsYmFjaztcbiAgICAgIHZhciBsZW4gPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcblxuICAgICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCBmYWxzZSwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcblxuICAgICAgLy8gaWYgd2UgZGlkbid0IGNhbGwgdGhlIG9ud3JpdGUgaW1tZWRpYXRlbHksIHRoZW5cbiAgICAgIC8vIGl0IG1lYW5zIHRoYXQgd2UgbmVlZCB0byB3YWl0IHVudGlsIGl0IGRvZXMuXG4gICAgICAvLyBhbHNvLCB0aGF0IG1lYW5zIHRoYXQgdGhlIGNodW5rIGFuZCBjYiBhcmUgY3VycmVudGx5XG4gICAgICAvLyBiZWluZyBwcm9jZXNzZWQsIHNvIG1vdmUgdGhlIGJ1ZmZlciBjb3VudGVyIHBhc3QgdGhlbS5cbiAgICAgIGlmIChzdGF0ZS53cml0aW5nKSB7XG4gICAgICAgIGMrKztcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGMgPCBzdGF0ZS5idWZmZXIubGVuZ3RoKVxuICAgICAgc3RhdGUuYnVmZmVyID0gc3RhdGUuYnVmZmVyLnNsaWNlKGMpO1xuICAgIGVsc2VcbiAgICAgIHN0YXRlLmJ1ZmZlci5sZW5ndGggPSAwO1xuICB9XG5cbiAgc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlO1xufVxuXG5Xcml0YWJsZS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24oY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBjYihuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCcpKTtcblxufTtcblxuV3JpdGFibGUucHJvdG90eXBlLl93cml0ZXYgPSBudWxsO1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24oY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIGlmICh1dGlsLmlzRnVuY3Rpb24oY2h1bmspKSB7XG4gICAgY2IgPSBjaHVuaztcbiAgICBjaHVuayA9IG51bGw7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9IGVsc2UgaWYgKHV0aWwuaXNGdW5jdGlvbihlbmNvZGluZykpIHtcbiAgICBjYiA9IGVuY29kaW5nO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfVxuXG4gIGlmICghdXRpbC5pc051bGxPclVuZGVmaW5lZChjaHVuaykpXG4gICAgdGhpcy53cml0ZShjaHVuaywgZW5jb2RpbmcpO1xuXG4gIC8vIC5lbmQoKSBmdWxseSB1bmNvcmtzXG4gIGlmIChzdGF0ZS5jb3JrZWQpIHtcbiAgICBzdGF0ZS5jb3JrZWQgPSAxO1xuICAgIHRoaXMudW5jb3JrKCk7XG4gIH1cblxuICAvLyBpZ25vcmUgdW5uZWNlc3NhcnkgZW5kKCkgY2FsbHMuXG4gIGlmICghc3RhdGUuZW5kaW5nICYmICFzdGF0ZS5maW5pc2hlZClcbiAgICBlbmRXcml0YWJsZSh0aGlzLCBzdGF0ZSwgY2IpO1xufTtcblxuXG5mdW5jdGlvbiBuZWVkRmluaXNoKHN0cmVhbSwgc3RhdGUpIHtcbiAgcmV0dXJuIChzdGF0ZS5lbmRpbmcgJiZcbiAgICAgICAgICBzdGF0ZS5sZW5ndGggPT09IDAgJiZcbiAgICAgICAgICAhc3RhdGUuZmluaXNoZWQgJiZcbiAgICAgICAgICAhc3RhdGUud3JpdGluZyk7XG59XG5cbmZ1bmN0aW9uIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucHJlZmluaXNoZWQpIHtcbiAgICBzdGF0ZS5wcmVmaW5pc2hlZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ3ByZWZpbmlzaCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIG5lZWQgPSBuZWVkRmluaXNoKHN0cmVhbSwgc3RhdGUpO1xuICBpZiAobmVlZCkge1xuICAgIGlmIChzdGF0ZS5wZW5kaW5nY2IgPT09IDApIHtcbiAgICAgIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKTtcbiAgICAgIHN0YXRlLmZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5lbWl0KCdmaW5pc2gnKTtcbiAgICB9IGVsc2VcbiAgICAgIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKTtcbiAgfVxuICByZXR1cm4gbmVlZDtcbn1cblxuZnVuY3Rpb24gZW5kV3JpdGFibGUoc3RyZWFtLCBzdGF0ZSwgY2IpIHtcbiAgc3RhdGUuZW5kaW5nID0gdHJ1ZTtcbiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG4gIGlmIChjYikge1xuICAgIGlmIChzdGF0ZS5maW5pc2hlZClcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY2IpO1xuICAgIGVsc2VcbiAgICAgIHN0cmVhbS5vbmNlKCdmaW5pc2gnLCBjYik7XG4gIH1cbiAgc3RhdGUuZW5kZWQgPSB0cnVlO1xufVxuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlhV1o1TDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZrWVdKc1pTMXpkSEpsWVcwdmJHbGlMMTl6ZEhKbFlXMWZkM0pwZEdGaWJHVXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2labWxzWlNJNkltZGxibVZ5WVhSbFpDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2THlCRGIzQjVjbWxuYUhRZ1NtOTVaVzUwTENCSmJtTXVJR0Z1WkNCdmRHaGxjaUJPYjJSbElHTnZiblJ5YVdKMWRHOXljeTVjYmk4dlhHNHZMeUJRWlhKdGFYTnphVzl1SUdseklHaGxjbVZpZVNCbmNtRnVkR1ZrTENCbWNtVmxJRzltSUdOb1lYSm5aU3dnZEc4Z1lXNTVJSEJsY25OdmJpQnZZblJoYVc1cGJtY2dZVnh1THk4Z1kyOXdlU0J2WmlCMGFHbHpJSE52Wm5SM1lYSmxJR0Z1WkNCaGMzTnZZMmxoZEdWa0lHUnZZM1Z0Wlc1MFlYUnBiMjRnWm1sc1pYTWdLSFJvWlZ4dUx5OGdYQ0pUYjJaMGQyRnlaVndpS1N3Z2RHOGdaR1ZoYkNCcGJpQjBhR1VnVTI5bWRIZGhjbVVnZDJsMGFHOTFkQ0J5WlhOMGNtbGpkR2x2Yml3Z2FXNWpiSFZrYVc1blhHNHZMeUIzYVhSb2IzVjBJR3hwYldsMFlYUnBiMjRnZEdobElISnBaMmgwY3lCMGJ5QjFjMlVzSUdOdmNIa3NJRzF2WkdsbWVTd2diV1Z5WjJVc0lIQjFZbXhwYzJnc1hHNHZMeUJrYVhOMGNtbGlkWFJsTENCemRXSnNhV05sYm5ObExDQmhibVF2YjNJZ2MyVnNiQ0JqYjNCcFpYTWdiMllnZEdobElGTnZablIzWVhKbExDQmhibVFnZEc4Z2NHVnliV2wwWEc0dkx5QndaWEp6YjI1eklIUnZJSGRvYjIwZ2RHaGxJRk52Wm5SM1lYSmxJR2x6SUdaMWNtNXBjMmhsWkNCMGJ5QmtieUJ6Ynl3Z2MzVmlhbVZqZENCMGJ5QjBhR1ZjYmk4dklHWnZiR3h2ZDJsdVp5QmpiMjVrYVhScGIyNXpPbHh1THk5Y2JpOHZJRlJvWlNCaFltOTJaU0JqYjNCNWNtbG5hSFFnYm05MGFXTmxJR0Z1WkNCMGFHbHpJSEJsY20xcGMzTnBiMjRnYm05MGFXTmxJSE5vWVd4c0lHSmxJR2x1WTJ4MVpHVmtYRzR2THlCcGJpQmhiR3dnWTI5d2FXVnpJRzl5SUhOMVluTjBZVzUwYVdGc0lIQnZjblJwYjI1eklHOW1JSFJvWlNCVGIyWjBkMkZ5WlM1Y2JpOHZYRzR2THlCVVNFVWdVMDlHVkZkQlVrVWdTVk1nVUZKUFZrbEVSVVFnWENKQlV5QkpVMXdpTENCWFNWUklUMVZVSUZkQlVsSkJUbFJaSUU5R0lFRk9XU0JMU1U1RUxDQkZXRkJTUlZOVFhHNHZMeUJQVWlCSlRWQk1TVVZFTENCSlRrTk1WVVJKVGtjZ1FsVlVJRTVQVkNCTVNVMUpWRVZFSUZSUElGUklSU0JYUVZKU1FVNVVTVVZUSUU5R1hHNHZMeUJOUlZKRFNFRk9WRUZDU1V4SlZGa3NJRVpKVkU1RlUxTWdSazlTSUVFZ1VFRlNWRWxEVlV4QlVpQlFWVkpRVDFORklFRk9SQ0JPVDA1SlRrWlNTVTVIUlUxRlRsUXVJRWxPWEc0dkx5Qk9UeUJGVmtWT1ZDQlRTRUZNVENCVVNFVWdRVlZVU0U5U1V5QlBVaUJEVDFCWlVrbEhTRlFnU0U5TVJFVlNVeUJDUlNCTVNVRkNURVVnUms5U0lFRk9XU0JEVEVGSlRTeGNiaTh2SUVSQlRVRkhSVk1nVDFJZ1QxUklSVklnVEVsQlFrbE1TVlJaTENCWFNFVlVTRVZTSUVsT0lFRk9JRUZEVkVsUFRpQlBSaUJEVDA1VVVrRkRWQ3dnVkU5U1ZDQlBVbHh1THk4Z1QxUklSVkpYU1ZORkxDQkJVa2xUU1U1SElFWlNUMDBzSUU5VlZDQlBSaUJQVWlCSlRpQkRUMDVPUlVOVVNVOU9JRmRKVkVnZ1ZFaEZJRk5QUmxSWFFWSkZJRTlTSUZSSVJWeHVMeThnVlZORklFOVNJRTlVU0VWU0lFUkZRVXhKVGtkVElFbE9JRlJJUlNCVFQwWlVWMEZTUlM1Y2JseHVMeThnUVNCaWFYUWdjMmx0Y0d4bGNpQjBhR0Z1SUhKbFlXUmhZbXhsSUhOMGNtVmhiWE11WEc0dkx5QkpiWEJzWlcxbGJuUWdZVzRnWVhONWJtTWdMbDkzY21sMFpTaGphSFZ1YXl3Z1kySXBMQ0JoYm1RZ2FYUW5iR3dnYUdGdVpHeGxJR0ZzYkZ4dUx5OGdkR2hsSUdSeVlXbHVJR1YyWlc1MElHVnRhWE56YVc5dUlHRnVaQ0JpZFdabVpYSnBibWN1WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1YzSnBkR0ZpYkdVN1hHNWNiaThxUEhKbGNHeGhZMlZ0Wlc1MFBpb3ZYRzUyWVhJZ1FuVm1abVZ5SUQwZ2NtVnhkV2x5WlNnblluVm1abVZ5SnlrdVFuVm1abVZ5TzF4dUx5bzhMM0psY0d4aFkyVnRaVzUwUGlvdlhHNWNibGR5YVhSaFlteGxMbGR5YVhSaFlteGxVM1JoZEdVZ1BTQlhjbWwwWVdKc1pWTjBZWFJsTzF4dVhHNWNiaThxUEhKbGNHeGhZMlZ0Wlc1MFBpb3ZYRzUyWVhJZ2RYUnBiQ0E5SUhKbGNYVnBjbVVvSjJOdmNtVXRkWFJwYkMxcGN5Y3BPMXh1ZFhScGJDNXBibWhsY21sMGN5QTlJSEpsY1hWcGNtVW9KMmx1YUdWeWFYUnpKeWs3WEc0dktqd3ZjbVZ3YkdGalpXMWxiblErS2k5Y2JseHVkbUZ5SUZOMGNtVmhiU0E5SUhKbGNYVnBjbVVvSjNOMGNtVmhiU2NwTzF4dVhHNTFkR2xzTG1sdWFHVnlhWFJ6S0ZkeWFYUmhZbXhsTENCVGRISmxZVzBwTzF4dVhHNW1kVzVqZEdsdmJpQlhjbWwwWlZKbGNTaGphSFZ1YXl3Z1pXNWpiMlJwYm1jc0lHTmlLU0I3WEc0Z0lIUm9hWE11WTJoMWJtc2dQU0JqYUhWdWF6dGNiaUFnZEdocGN5NWxibU52WkdsdVp5QTlJR1Z1WTI5a2FXNW5PMXh1SUNCMGFHbHpMbU5oYkd4aVlXTnJJRDBnWTJJN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUZkeWFYUmhZbXhsVTNSaGRHVW9iM0IwYVc5dWN5d2djM1J5WldGdEtTQjdYRzRnSUhaaGNpQkVkWEJzWlhnZ1BTQnlaWEYxYVhKbEtDY3VMMTl6ZEhKbFlXMWZaSFZ3YkdWNEp5azdYRzVjYmlBZ2IzQjBhVzl1Y3lBOUlHOXdkR2x2Ym5NZ2ZId2dlMzA3WEc1Y2JpQWdMeThnZEdobElIQnZhVzUwSUdGMElIZG9hV05vSUhkeWFYUmxLQ2tnYzNSaGNuUnpJSEpsZEhWeWJtbHVaeUJtWVd4elpWeHVJQ0F2THlCT2IzUmxPaUF3SUdseklHRWdkbUZzYVdRZ2RtRnNkV1VzSUcxbFlXNXpJSFJvWVhRZ2QyVWdZV3gzWVhseklISmxkSFZ5YmlCbVlXeHpaU0JwWmx4dUlDQXZMeUIwYUdVZ1pXNTBhWEpsSUdKMVptWmxjaUJwY3lCdWIzUWdabXgxYzJobFpDQnBiVzFsWkdsaGRHVnNlU0J2YmlCM2NtbDBaU2dwWEc0Z0lIWmhjaUJvZDIwZ1BTQnZjSFJwYjI1ekxtaHBaMmhYWVhSbGNrMWhjbXM3WEc0Z0lIWmhjaUJrWldaaGRXeDBTSGR0SUQwZ2IzQjBhVzl1Y3k1dlltcGxZM1JOYjJSbElEOGdNVFlnT2lBeE5pQXFJREV3TWpRN1hHNGdJSFJvYVhNdWFHbG5hRmRoZEdWeVRXRnlheUE5SUNob2QyMGdmSHdnYUhkdElEMDlQU0F3S1NBL0lHaDNiU0E2SUdSbFptRjFiSFJJZDIwN1hHNWNiaUFnTHk4Z2IySnFaV04wSUhOMGNtVmhiU0JtYkdGbklIUnZJR2x1WkdsallYUmxJSGRvWlhSb1pYSWdiM0lnYm05MElIUm9hWE1nYzNSeVpXRnRYRzRnSUM4dklHTnZiblJoYVc1eklHSjFabVpsY25NZ2IzSWdiMkpxWldOMGN5NWNiaUFnZEdocGN5NXZZbXBsWTNSTmIyUmxJRDBnSVNGdmNIUnBiMjV6TG05aWFtVmpkRTF2WkdVN1hHNWNiaUFnYVdZZ0tITjBjbVZoYlNCcGJuTjBZVzVqWlc5bUlFUjFjR3hsZUNsY2JpQWdJQ0IwYUdsekxtOWlhbVZqZEUxdlpHVWdQU0IwYUdsekxtOWlhbVZqZEUxdlpHVWdmSHdnSVNGdmNIUnBiMjV6TG5keWFYUmhZbXhsVDJKcVpXTjBUVzlrWlR0Y2JseHVJQ0F2THlCallYTjBJSFJ2SUdsdWRITXVYRzRnSUhSb2FYTXVhR2xuYUZkaGRHVnlUV0Z5YXlBOUlINStkR2hwY3k1b2FXZG9WMkYwWlhKTllYSnJPMXh1WEc0Z0lIUm9hWE11Ym1WbFpFUnlZV2x1SUQwZ1ptRnNjMlU3WEc0Z0lDOHZJR0YwSUhSb1pTQnpkR0Z5ZENCdlppQmpZV3hzYVc1bklHVnVaQ2dwWEc0Z0lIUm9hWE11Wlc1a2FXNW5JRDBnWm1Gc2MyVTdYRzRnSUM4dklIZG9aVzRnWlc1a0tDa2dhR0Z6SUdKbFpXNGdZMkZzYkdWa0xDQmhibVFnY21WMGRYSnVaV1JjYmlBZ2RHaHBjeTVsYm1SbFpDQTlJR1poYkhObE8xeHVJQ0F2THlCM2FHVnVJQ2RtYVc1cGMyZ25JR2x6SUdWdGFYUjBaV1JjYmlBZ2RHaHBjeTVtYVc1cGMyaGxaQ0E5SUdaaGJITmxPMXh1WEc0Z0lDOHZJSE5vYjNWc1pDQjNaU0JrWldOdlpHVWdjM1J5YVc1bmN5QnBiblJ2SUdKMVptWmxjbk1nWW1WbWIzSmxJSEJoYzNOcGJtY2dkRzhnWDNkeWFYUmxQMXh1SUNBdkx5QjBhR2x6SUdseklHaGxjbVVnYzI4Z2RHaGhkQ0J6YjIxbElHNXZaR1V0WTI5eVpTQnpkSEpsWVcxeklHTmhiaUJ2Y0hScGJXbDZaU0J6ZEhKcGJtZGNiaUFnTHk4Z2FHRnVaR3hwYm1jZ1lYUWdZU0JzYjNkbGNpQnNaWFpsYkM1Y2JpQWdkbUZ5SUc1dlJHVmpiMlJsSUQwZ2IzQjBhVzl1Y3k1a1pXTnZaR1ZUZEhKcGJtZHpJRDA5UFNCbVlXeHpaVHRjYmlBZ2RHaHBjeTVrWldOdlpHVlRkSEpwYm1keklEMGdJVzV2UkdWamIyUmxPMXh1WEc0Z0lDOHZJRU55ZVhCMGJ5QnBjeUJyYVc1a0lHOW1JRzlzWkNCaGJtUWdZM0oxYzNSNUxpQWdTR2x6ZEc5eWFXTmhiR3g1TENCcGRITWdaR1ZtWVhWc2RDQnpkSEpwYm1kY2JpQWdMeThnWlc1amIyUnBibWNnYVhNZ0oySnBibUZ5ZVNjZ2MyOGdkMlVnYUdGMlpTQjBieUJ0WVd0bElIUm9hWE1nWTI5dVptbG5kWEpoWW14bExseHVJQ0F2THlCRmRtVnllWFJvYVc1bklHVnNjMlVnYVc0Z2RHaGxJSFZ1YVhabGNuTmxJSFZ6WlhNZ0ozVjBaamduTENCMGFHOTFaMmd1WEc0Z0lIUm9hWE11WkdWbVlYVnNkRVZ1WTI5a2FXNW5JRDBnYjNCMGFXOXVjeTVrWldaaGRXeDBSVzVqYjJScGJtY2dmSHdnSjNWMFpqZ25PMXh1WEc0Z0lDOHZJRzV2ZENCaGJpQmhZM1IxWVd3Z1luVm1abVZ5SUhkbElHdGxaWEFnZEhKaFkyc2diMllzSUdKMWRDQmhJRzFsWVhOMWNtVnRaVzUwWEc0Z0lDOHZJRzltSUdodmR5QnRkV05vSUhkbEozSmxJSGRoYVhScGJtY2dkRzhnWjJWMElIQjFjMmhsWkNCMGJ5QnpiMjFsSUhWdVpHVnliSGxwYm1kY2JpQWdMeThnYzI5amEyVjBJRzl5SUdacGJHVXVYRzRnSUhSb2FYTXViR1Z1WjNSb0lEMGdNRHRjYmx4dUlDQXZMeUJoSUdac1lXY2dkRzhnYzJWbElIZG9aVzRnZDJVbmNtVWdhVzRnZEdobElHMXBaR1JzWlNCdlppQmhJSGR5YVhSbExseHVJQ0IwYUdsekxuZHlhWFJwYm1jZ1BTQm1ZV3h6WlR0Y2JseHVJQ0F2THlCM2FHVnVJSFJ5ZFdVZ1lXeHNJSGR5YVhSbGN5QjNhV3hzSUdKbElHSjFabVpsY21Wa0lIVnVkR2xzSUM1MWJtTnZjbXNvS1NCallXeHNYRzRnSUhSb2FYTXVZMjl5YTJWa0lEMGdNRHRjYmx4dUlDQXZMeUJoSUdac1lXY2dkRzhnWW1VZ1lXSnNaU0IwYnlCMFpXeHNJR2xtSUhSb1pTQnZibmR5YVhSbElHTmlJR2x6SUdOaGJHeGxaQ0JwYlcxbFpHbGhkR1ZzZVN4Y2JpQWdMeThnYjNJZ2IyNGdZU0JzWVhSbGNpQjBhV05yTGlBZ1YyVWdjMlYwSUhSb2FYTWdkRzhnZEhKMVpTQmhkQ0JtYVhKemRDd2dZbVZqWVhWelpTQmhibmxjYmlBZ0x5OGdZV04wYVc5dWN5QjBhR0YwSUhOb2IzVnNaRzRuZENCb1lYQndaVzRnZFc1MGFXd2dYQ0pzWVhSbGNsd2lJSE5vYjNWc1pDQm5aVzVsY21Gc2JIa2dZV3h6YjF4dUlDQXZMeUJ1YjNRZ2FHRndjR1Z1SUdKbFptOXlaU0IwYUdVZ1ptbHljM1FnZDNKcGRHVWdZMkZzYkM1Y2JpQWdkR2hwY3k1emVXNWpJRDBnZEhKMVpUdGNibHh1SUNBdkx5QmhJR1pzWVdjZ2RHOGdhMjV2ZHlCcFppQjNaU2R5WlNCd2NtOWpaWE56YVc1bklIQnlaWFpwYjNWemJIa2dZblZtWm1WeVpXUWdhWFJsYlhNc0lIZG9hV05vWEc0Z0lDOHZJRzFoZVNCallXeHNJSFJvWlNCZmQzSnBkR1VvS1NCallXeHNZbUZqYXlCcGJpQjBhR1VnYzJGdFpTQjBhV05yTENCemJ5QjBhR0YwSUhkbElHUnZiaWQwWEc0Z0lDOHZJR1Z1WkNCMWNDQnBiaUJoYmlCdmRtVnliR0Z3Y0dWa0lHOXVkM0pwZEdVZ2MybDBkV0YwYVc5dUxseHVJQ0IwYUdsekxtSjFabVpsY2xCeWIyTmxjM05wYm1jZ1BTQm1ZV3h6WlR0Y2JseHVJQ0F2THlCMGFHVWdZMkZzYkdKaFkyc2dkR2hoZENkeklIQmhjM05sWkNCMGJ5QmZkM0pwZEdVb1kyaDFibXNzWTJJcFhHNGdJSFJvYVhNdWIyNTNjbWwwWlNBOUlHWjFibU4wYVc5dUtHVnlLU0I3WEc0Z0lDQWdiMjUzY21sMFpTaHpkSEpsWVcwc0lHVnlLVHRjYmlBZ2ZUdGNibHh1SUNBdkx5QjBhR1VnWTJGc2JHSmhZMnNnZEdoaGRDQjBhR1VnZFhObGNpQnpkWEJ3YkdsbGN5QjBieUIzY21sMFpTaGphSFZ1YXl4bGJtTnZaR2x1Wnl4allpbGNiaUFnZEdocGN5NTNjbWwwWldOaUlEMGdiblZzYkR0Y2JseHVJQ0F2THlCMGFHVWdZVzF2ZFc1MElIUm9ZWFFnYVhNZ1ltVnBibWNnZDNKcGRIUmxiaUIzYUdWdUlGOTNjbWwwWlNCcGN5QmpZV3hzWldRdVhHNGdJSFJvYVhNdWQzSnBkR1ZzWlc0Z1BTQXdPMXh1WEc0Z0lIUm9hWE11WW5WbVptVnlJRDBnVzEwN1hHNWNiaUFnTHk4Z2JuVnRZbVZ5SUc5bUlIQmxibVJwYm1jZ2RYTmxjaTF6ZFhCd2JHbGxaQ0IzY21sMFpTQmpZV3hzWW1GamEzTmNiaUFnTHk4Z2RHaHBjeUJ0ZFhOMElHSmxJREFnWW1WbWIzSmxJQ2RtYVc1cGMyZ25JR05oYmlCaVpTQmxiV2wwZEdWa1hHNGdJSFJvYVhNdWNHVnVaR2x1WjJOaUlEMGdNRHRjYmx4dUlDQXZMeUJsYldsMElIQnlaV1pwYm1semFDQnBaaUIwYUdVZ2IyNXNlU0IwYUdsdVp5QjNaU2R5WlNCM1lXbDBhVzVuSUdadmNpQnBjeUJmZDNKcGRHVWdZMkp6WEc0Z0lDOHZJRlJvYVhNZ2FYTWdjbVZzWlhaaGJuUWdabTl5SUhONWJtTm9jbTl1YjNWeklGUnlZVzV6Wm05eWJTQnpkSEpsWVcxelhHNGdJSFJvYVhNdWNISmxabWx1YVhOb1pXUWdQU0JtWVd4elpUdGNibHh1SUNBdkx5QlVjblZsSUdsbUlIUm9aU0JsY25KdmNpQjNZWE1nWVd4eVpXRmtlU0JsYldsMGRHVmtJR0Z1WkNCemFHOTFiR1FnYm05MElHSmxJSFJvY205M2JpQmhaMkZwYmx4dUlDQjBhR2x6TG1WeWNtOXlSVzFwZEhSbFpDQTlJR1poYkhObE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCWGNtbDBZV0pzWlNodmNIUnBiMjV6S1NCN1hHNGdJSFpoY2lCRWRYQnNaWGdnUFNCeVpYRjFhWEpsS0NjdUwxOXpkSEpsWVcxZlpIVndiR1Y0SnlrN1hHNWNiaUFnTHk4Z1YzSnBkR0ZpYkdVZ1kzUnZjaUJwY3lCaGNIQnNhV1ZrSUhSdklFUjFjR3hsZUdWekxDQjBhRzkxWjJnZ2RHaGxlU2R5WlNCdWIzUmNiaUFnTHk4Z2FXNXpkR0Z1WTJWdlppQlhjbWwwWVdKc1pTd2dkR2hsZVNkeVpTQnBibk4wWVc1alpXOW1JRkpsWVdSaFlteGxMbHh1SUNCcFppQW9JU2gwYUdseklHbHVjM1JoYm1ObGIyWWdWM0pwZEdGaWJHVXBJQ1ltSUNFb2RHaHBjeUJwYm5OMFlXNWpaVzltSUVSMWNHeGxlQ2twWEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJYY21sMFlXSnNaU2h2Y0hScGIyNXpLVHRjYmx4dUlDQjBhR2x6TGw5M2NtbDBZV0pzWlZOMFlYUmxJRDBnYm1WM0lGZHlhWFJoWW14bFUzUmhkR1VvYjNCMGFXOXVjeXdnZEdocGN5azdYRzVjYmlBZ0x5OGdiR1ZuWVdONUxseHVJQ0IwYUdsekxuZHlhWFJoWW14bElEMGdkSEoxWlR0Y2JseHVJQ0JUZEhKbFlXMHVZMkZzYkNoMGFHbHpLVHRjYm4xY2JseHVMeThnVDNSb1pYSjNhWE5sSUhCbGIzQnNaU0JqWVc0Z2NHbHdaU0JYY21sMFlXSnNaU0J6ZEhKbFlXMXpMQ0IzYUdsamFDQnBjeUJxZFhOMElIZHliMjVuTGx4dVYzSnBkR0ZpYkdVdWNISnZkRzkwZVhCbExuQnBjR1VnUFNCbWRXNWpkR2x2YmlncElIdGNiaUFnZEdocGN5NWxiV2wwS0NkbGNuSnZjaWNzSUc1bGR5QkZjbkp2Y2lnblEyRnVibTkwSUhCcGNHVXVJRTV2ZENCeVpXRmtZV0pzWlM0bktTazdYRzU5TzF4dVhHNWNibVoxYm1OMGFXOXVJSGR5YVhSbFFXWjBaWEpGYm1Rb2MzUnlaV0Z0TENCemRHRjBaU3dnWTJJcElIdGNiaUFnZG1GeUlHVnlJRDBnYm1WM0lFVnljbTl5S0NkM2NtbDBaU0JoWm5SbGNpQmxibVFuS1R0Y2JpQWdMeThnVkU5RVR6b2daR1ZtWlhJZ1pYSnliM0lnWlhabGJuUnpJR052Ym5OcGMzUmxiblJzZVNCbGRtVnllWGRvWlhKbExDQnViM1FnYW5WemRDQjBhR1VnWTJKY2JpQWdjM1J5WldGdExtVnRhWFFvSjJWeWNtOXlKeXdnWlhJcE8xeHVJQ0J3Y205alpYTnpMbTVsZUhSVWFXTnJLR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJR05pS0dWeUtUdGNiaUFnZlNrN1hHNTlYRzVjYmk4dklFbG1JSGRsSUdkbGRDQnpiMjFsZEdocGJtY2dkR2hoZENCcGN5QnViM1FnWVNCaWRXWm1aWElzSUhOMGNtbHVaeXdnYm5Wc2JDd2diM0lnZFc1a1pXWnBibVZrTEZ4dUx5OGdZVzVrSUhkbEozSmxJRzV2ZENCcGJpQnZZbXBsWTNSTmIyUmxMQ0IwYUdWdUlIUm9ZWFFuY3lCaGJpQmxjbkp2Y2k1Y2JpOHZJRTkwYUdWeWQybHpaU0J6ZEhKbFlXMGdZMmgxYm10eklHRnlaU0JoYkd3Z1kyOXVjMmxrWlhKbFpDQjBieUJpWlNCdlppQnNaVzVuZEdnOU1Td2dZVzVrSUhSb1pWeHVMeThnZDJGMFpYSnRZWEpyY3lCa1pYUmxjbTFwYm1VZ2FHOTNJRzFoYm5rZ2IySnFaV04wY3lCMGJ5QnJaV1Z3SUdsdUlIUm9aU0JpZFdabVpYSXNJSEpoZEdobGNpQjBhR0Z1WEc0dkx5Qm9iM2NnYldGdWVTQmllWFJsY3lCdmNpQmphR0Z5WVdOMFpYSnpMbHh1Wm5WdVkzUnBiMjRnZG1Gc2FXUkRhSFZ1YXloemRISmxZVzBzSUhOMFlYUmxMQ0JqYUhWdWF5d2dZMklwSUh0Y2JpQWdkbUZ5SUhaaGJHbGtJRDBnZEhKMVpUdGNiaUFnYVdZZ0tDRjFkR2xzTG1selFuVm1abVZ5S0dOb2RXNXJLU0FtSmx4dUlDQWdJQ0FnSVhWMGFXd3VhWE5UZEhKcGJtY29ZMmgxYm1zcElDWW1YRzRnSUNBZ0lDQWhkWFJwYkM1cGMwNTFiR3hQY2xWdVpHVm1hVzVsWkNoamFIVnVheWtnSmlaY2JpQWdJQ0FnSUNGemRHRjBaUzV2WW1wbFkzUk5iMlJsS1NCN1hHNGdJQ0FnZG1GeUlHVnlJRDBnYm1WM0lGUjVjR1ZGY25KdmNpZ25TVzUyWVd4cFpDQnViMjR0YzNSeWFXNW5MMkoxWm1abGNpQmphSFZ1YXljcE8xeHVJQ0FnSUhOMGNtVmhiUzVsYldsMEtDZGxjbkp2Y2ljc0lHVnlLVHRjYmlBZ0lDQndjbTlqWlhOekxtNWxlSFJVYVdOcktHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdZMklvWlhJcE8xeHVJQ0FnSUgwcE8xeHVJQ0FnSUhaaGJHbGtJRDBnWm1Gc2MyVTdYRzRnSUgxY2JpQWdjbVYwZFhKdUlIWmhiR2xrTzF4dWZWeHVYRzVYY21sMFlXSnNaUzV3Y205MGIzUjVjR1V1ZDNKcGRHVWdQU0JtZFc1amRHbHZiaWhqYUhWdWF5d2daVzVqYjJScGJtY3NJR05pS1NCN1hHNGdJSFpoY2lCemRHRjBaU0E5SUhSb2FYTXVYM2R5YVhSaFlteGxVM1JoZEdVN1hHNGdJSFpoY2lCeVpYUWdQU0JtWVd4elpUdGNibHh1SUNCcFppQW9kWFJwYkM1cGMwWjFibU4wYVc5dUtHVnVZMjlrYVc1bktTa2dlMXh1SUNBZ0lHTmlJRDBnWlc1amIyUnBibWM3WEc0Z0lDQWdaVzVqYjJScGJtY2dQU0J1ZFd4c08xeHVJQ0I5WEc1Y2JpQWdhV1lnS0hWMGFXd3VhWE5DZFdabVpYSW9ZMmgxYm1zcEtWeHVJQ0FnSUdWdVkyOWthVzVuSUQwZ0oySjFabVpsY2ljN1hHNGdJR1ZzYzJVZ2FXWWdLQ0ZsYm1OdlpHbHVaeWxjYmlBZ0lDQmxibU52WkdsdVp5QTlJSE4wWVhSbExtUmxabUYxYkhSRmJtTnZaR2x1Wnp0Y2JseHVJQ0JwWmlBb0lYVjBhV3d1YVhOR2RXNWpkR2x2Ymloallpa3BYRzRnSUNBZ1kySWdQU0JtZFc1amRHbHZiaWdwSUh0OU8xeHVYRzRnSUdsbUlDaHpkR0YwWlM1bGJtUmxaQ2xjYmlBZ0lDQjNjbWwwWlVGbWRHVnlSVzVrS0hSb2FYTXNJSE4wWVhSbExDQmpZaWs3WEc0Z0lHVnNjMlVnYVdZZ0tIWmhiR2xrUTJoMWJtc29kR2hwY3l3Z2MzUmhkR1VzSUdOb2RXNXJMQ0JqWWlrcElIdGNiaUFnSUNCemRHRjBaUzV3Wlc1a2FXNW5ZMklyS3p0Y2JpQWdJQ0J5WlhRZ1BTQjNjbWwwWlU5eVFuVm1abVZ5S0hSb2FYTXNJSE4wWVhSbExDQmphSFZ1YXl3Z1pXNWpiMlJwYm1jc0lHTmlLVHRjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJ5WlhRN1hHNTlPMXh1WEc1WGNtbDBZV0pzWlM1d2NtOTBiM1I1Y0dVdVkyOXlheUE5SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0IyWVhJZ2MzUmhkR1VnUFNCMGFHbHpMbDkzY21sMFlXSnNaVk4wWVhSbE8xeHVYRzRnSUhOMFlYUmxMbU52Y210bFpDc3JPMXh1ZlR0Y2JseHVWM0pwZEdGaWJHVXVjSEp2ZEc5MGVYQmxMblZ1WTI5eWF5QTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQjJZWElnYzNSaGRHVWdQU0IwYUdsekxsOTNjbWwwWVdKc1pWTjBZWFJsTzF4dVhHNGdJR2xtSUNoemRHRjBaUzVqYjNKclpXUXBJSHRjYmlBZ0lDQnpkR0YwWlM1amIzSnJaV1F0TFR0Y2JseHVJQ0FnSUdsbUlDZ2hjM1JoZEdVdWQzSnBkR2x1WnlBbUpseHVJQ0FnSUNBZ0lDQWhjM1JoZEdVdVkyOXlhMlZrSUNZbVhHNGdJQ0FnSUNBZ0lDRnpkR0YwWlM1bWFXNXBjMmhsWkNBbUpseHVJQ0FnSUNBZ0lDQWhjM1JoZEdVdVluVm1abVZ5VUhKdlkyVnpjMmx1WnlBbUpseHVJQ0FnSUNBZ0lDQnpkR0YwWlM1aWRXWm1aWEl1YkdWdVozUm9LVnh1SUNBZ0lDQWdZMnhsWVhKQ2RXWm1aWElvZEdocGN5d2djM1JoZEdVcE8xeHVJQ0I5WEc1OU8xeHVYRzVtZFc1amRHbHZiaUJrWldOdlpHVkRhSFZ1YXloemRHRjBaU3dnWTJoMWJtc3NJR1Z1WTI5a2FXNW5LU0I3WEc0Z0lHbG1JQ2doYzNSaGRHVXViMkpxWldOMFRXOWtaU0FtSmx4dUlDQWdJQ0FnYzNSaGRHVXVaR1ZqYjJSbFUzUnlhVzVuY3lBaFBUMGdabUZzYzJVZ0ppWmNiaUFnSUNBZ0lIVjBhV3d1YVhOVGRISnBibWNvWTJoMWJtc3BLU0I3WEc0Z0lDQWdZMmgxYm1zZ1BTQnVaWGNnUW5WbVptVnlLR05vZFc1ckxDQmxibU52WkdsdVp5azdYRzRnSUgxY2JpQWdjbVYwZFhKdUlHTm9kVzVyTzF4dWZWeHVYRzR2THlCcFppQjNaU2R5WlNCaGJISmxZV1I1SUhkeWFYUnBibWNnYzI5dFpYUm9hVzVuTENCMGFHVnVJR3AxYzNRZ2NIVjBJSFJvYVhOY2JpOHZJR2x1SUhSb1pTQnhkV1YxWlN3Z1lXNWtJSGRoYVhRZ2IzVnlJSFIxY200dUlDQlBkR2hsY25kcGMyVXNJR05oYkd3Z1gzZHlhWFJsWEc0dkx5QkpaaUIzWlNCeVpYUjFjbTRnWm1Gc2MyVXNJSFJvWlc0Z2QyVWdibVZsWkNCaElHUnlZV2x1SUdWMlpXNTBMQ0J6YnlCelpYUWdkR2hoZENCbWJHRm5MbHh1Wm5WdVkzUnBiMjRnZDNKcGRHVlBja0oxWm1abGNpaHpkSEpsWVcwc0lITjBZWFJsTENCamFIVnVheXdnWlc1amIyUnBibWNzSUdOaUtTQjdYRzRnSUdOb2RXNXJJRDBnWkdWamIyUmxRMmgxYm1zb2MzUmhkR1VzSUdOb2RXNXJMQ0JsYm1OdlpHbHVaeWs3WEc0Z0lHbG1JQ2gxZEdsc0xtbHpRblZtWm1WeUtHTm9kVzVyS1NsY2JpQWdJQ0JsYm1OdlpHbHVaeUE5SUNkaWRXWm1aWEluTzF4dUlDQjJZWElnYkdWdUlEMGdjM1JoZEdVdWIySnFaV04wVFc5a1pTQS9JREVnT2lCamFIVnVheTVzWlc1bmRHZzdYRzVjYmlBZ2MzUmhkR1V1YkdWdVozUm9JQ3M5SUd4bGJqdGNibHh1SUNCMllYSWdjbVYwSUQwZ2MzUmhkR1V1YkdWdVozUm9JRHdnYzNSaGRHVXVhR2xuYUZkaGRHVnlUV0Z5YXp0Y2JpQWdMeThnZDJVZ2JYVnpkQ0JsYm5OMWNtVWdkR2hoZENCd2NtVjJhVzkxY3lCdVpXVmtSSEpoYVc0Z2QybHNiQ0J1YjNRZ1ltVWdjbVZ6WlhRZ2RHOGdabUZzYzJVdVhHNGdJR2xtSUNnaGNtVjBLVnh1SUNBZ0lITjBZWFJsTG01bFpXUkVjbUZwYmlBOUlIUnlkV1U3WEc1Y2JpQWdhV1lnS0hOMFlYUmxMbmR5YVhScGJtY2dmSHdnYzNSaGRHVXVZMjl5YTJWa0tWeHVJQ0FnSUhOMFlYUmxMbUoxWm1abGNpNXdkWE5vS0c1bGR5QlhjbWwwWlZKbGNTaGphSFZ1YXl3Z1pXNWpiMlJwYm1jc0lHTmlLU2s3WEc0Z0lHVnNjMlZjYmlBZ0lDQmtiMWR5YVhSbEtITjBjbVZoYlN3Z2MzUmhkR1VzSUdaaGJITmxMQ0JzWlc0c0lHTm9kVzVyTENCbGJtTnZaR2x1Wnl3Z1kySXBPMXh1WEc0Z0lISmxkSFZ5YmlCeVpYUTdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHUnZWM0pwZEdVb2MzUnlaV0Z0TENCemRHRjBaU3dnZDNKcGRHVjJMQ0JzWlc0c0lHTm9kVzVyTENCbGJtTnZaR2x1Wnl3Z1kySXBJSHRjYmlBZ2MzUmhkR1V1ZDNKcGRHVnNaVzRnUFNCc1pXNDdYRzRnSUhOMFlYUmxMbmR5YVhSbFkySWdQU0JqWWp0Y2JpQWdjM1JoZEdVdWQzSnBkR2x1WnlBOUlIUnlkV1U3WEc0Z0lITjBZWFJsTG5ONWJtTWdQU0IwY25WbE8xeHVJQ0JwWmlBb2QzSnBkR1YyS1Z4dUlDQWdJSE4wY21WaGJTNWZkM0pwZEdWMktHTm9kVzVyTENCemRHRjBaUzV2Ym5keWFYUmxLVHRjYmlBZ1pXeHpaVnh1SUNBZ0lITjBjbVZoYlM1ZmQzSnBkR1VvWTJoMWJtc3NJR1Z1WTI5a2FXNW5MQ0J6ZEdGMFpTNXZibmR5YVhSbEtUdGNiaUFnYzNSaGRHVXVjM2x1WXlBOUlHWmhiSE5sTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJ2Ym5keWFYUmxSWEp5YjNJb2MzUnlaV0Z0TENCemRHRjBaU3dnYzNsdVl5d2daWElzSUdOaUtTQjdYRzRnSUdsbUlDaHplVzVqS1Z4dUlDQWdJSEJ5YjJObGMzTXVibVY0ZEZScFkyc29ablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0J6ZEdGMFpTNXdaVzVrYVc1blkySXRMVHRjYmlBZ0lDQWdJR05pS0dWeUtUdGNiaUFnSUNCOUtUdGNiaUFnWld4elpTQjdYRzRnSUNBZ2MzUmhkR1V1Y0dWdVpHbHVaMk5pTFMwN1hHNGdJQ0FnWTJJb1pYSXBPMXh1SUNCOVhHNWNiaUFnYzNSeVpXRnRMbDkzY21sMFlXSnNaVk4wWVhSbExtVnljbTl5UlcxcGRIUmxaQ0E5SUhSeWRXVTdYRzRnSUhOMGNtVmhiUzVsYldsMEtDZGxjbkp2Y2ljc0lHVnlLVHRjYm4xY2JseHVablZ1WTNScGIyNGdiMjUzY21sMFpWTjBZWFJsVlhCa1lYUmxLSE4wWVhSbEtTQjdYRzRnSUhOMFlYUmxMbmR5YVhScGJtY2dQU0JtWVd4elpUdGNiaUFnYzNSaGRHVXVkM0pwZEdWallpQTlJRzUxYkd3N1hHNGdJSE4wWVhSbExteGxibWQwYUNBdFBTQnpkR0YwWlM1M2NtbDBaV3hsYmp0Y2JpQWdjM1JoZEdVdWQzSnBkR1ZzWlc0Z1BTQXdPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnZibmR5YVhSbEtITjBjbVZoYlN3Z1pYSXBJSHRjYmlBZ2RtRnlJSE4wWVhSbElEMGdjM1J5WldGdExsOTNjbWwwWVdKc1pWTjBZWFJsTzF4dUlDQjJZWElnYzNsdVl5QTlJSE4wWVhSbExuTjVibU03WEc0Z0lIWmhjaUJqWWlBOUlITjBZWFJsTG5keWFYUmxZMkk3WEc1Y2JpQWdiMjUzY21sMFpWTjBZWFJsVlhCa1lYUmxLSE4wWVhSbEtUdGNibHh1SUNCcFppQW9aWElwWEc0Z0lDQWdiMjUzY21sMFpVVnljbTl5S0hOMGNtVmhiU3dnYzNSaGRHVXNJSE41Ym1Nc0lHVnlMQ0JqWWlrN1hHNGdJR1ZzYzJVZ2UxeHVJQ0FnSUM4dklFTm9aV05ySUdsbUlIZGxKM0psSUdGamRIVmhiR3g1SUhKbFlXUjVJSFJ2SUdacGJtbHphQ3dnWW5WMElHUnZiaWQwSUdWdGFYUWdlV1YwWEc0Z0lDQWdkbUZ5SUdacGJtbHphR1ZrSUQwZ2JtVmxaRVpwYm1semFDaHpkSEpsWVcwc0lITjBZWFJsS1R0Y2JseHVJQ0FnSUdsbUlDZ2habWx1YVhOb1pXUWdKaVpjYmlBZ0lDQWdJQ0FnSVhOMFlYUmxMbU52Y210bFpDQW1KbHh1SUNBZ0lDQWdJQ0FoYzNSaGRHVXVZblZtWm1WeVVISnZZMlZ6YzJsdVp5QW1KbHh1SUNBZ0lDQWdJQ0J6ZEdGMFpTNWlkV1ptWlhJdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNCamJHVmhja0oxWm1abGNpaHpkSEpsWVcwc0lITjBZWFJsS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2MzbHVZeWtnZTF4dUlDQWdJQ0FnY0hKdlkyVnpjeTV1WlhoMFZHbGpheWhtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ1lXWjBaWEpYY21sMFpTaHpkSEpsWVcwc0lITjBZWFJsTENCbWFXNXBjMmhsWkN3Z1kySXBPMXh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHRm1kR1Z5VjNKcGRHVW9jM1J5WldGdExDQnpkR0YwWlN3Z1ptbHVhWE5vWldRc0lHTmlLVHRjYmlBZ0lDQjlYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnWVdaMFpYSlhjbWwwWlNoemRISmxZVzBzSUhOMFlYUmxMQ0JtYVc1cGMyaGxaQ3dnWTJJcElIdGNiaUFnYVdZZ0tDRm1hVzVwYzJobFpDbGNiaUFnSUNCdmJuZHlhWFJsUkhKaGFXNG9jM1J5WldGdExDQnpkR0YwWlNrN1hHNGdJSE4wWVhSbExuQmxibVJwYm1kallpMHRPMXh1SUNCallpZ3BPMXh1SUNCbWFXNXBjMmhOWVhsaVpTaHpkSEpsWVcwc0lITjBZWFJsS1R0Y2JuMWNibHh1THk4Z1RYVnpkQ0JtYjNKalpTQmpZV3hzWW1GamF5QjBieUJpWlNCallXeHNaV1FnYjI0Z2JtVjRkRlJwWTJzc0lITnZJSFJvWVhRZ2QyVWdaRzl1SjNSY2JpOHZJR1Z0YVhRZ0oyUnlZV2x1SnlCaVpXWnZjbVVnZEdobElIZHlhWFJsS0NrZ1kyOXVjM1Z0WlhJZ1oyVjBjeUIwYUdVZ0oyWmhiSE5sSnlCeVpYUjFjbTVjYmk4dklIWmhiSFZsTENCaGJtUWdhR0Z6SUdFZ1kyaGhibU5sSUhSdklHRjBkR0ZqYUNCaElDZGtjbUZwYmljZ2JHbHpkR1Z1WlhJdVhHNW1kVzVqZEdsdmJpQnZibmR5YVhSbFJISmhhVzRvYzNSeVpXRnRMQ0J6ZEdGMFpTa2dlMXh1SUNCcFppQW9jM1JoZEdVdWJHVnVaM1JvSUQwOVBTQXdJQ1ltSUhOMFlYUmxMbTVsWldSRWNtRnBiaWtnZTF4dUlDQWdJSE4wWVhSbExtNWxaV1JFY21GcGJpQTlJR1poYkhObE8xeHVJQ0FnSUhOMGNtVmhiUzVsYldsMEtDZGtjbUZwYmljcE8xeHVJQ0I5WEc1OVhHNWNibHh1THk4Z2FXWWdkR2hsY21VbmN5QnpiMjFsZEdocGJtY2dhVzRnZEdobElHSjFabVpsY2lCM1lXbDBhVzVuTENCMGFHVnVJSEJ5YjJObGMzTWdhWFJjYm1aMWJtTjBhVzl1SUdOc1pXRnlRblZtWm1WeUtITjBjbVZoYlN3Z2MzUmhkR1VwSUh0Y2JpQWdjM1JoZEdVdVluVm1abVZ5VUhKdlkyVnpjMmx1WnlBOUlIUnlkV1U3WEc1Y2JpQWdhV1lnS0hOMGNtVmhiUzVmZDNKcGRHVjJJQ1ltSUhOMFlYUmxMbUoxWm1abGNpNXNaVzVuZEdnZ1BpQXhLU0I3WEc0Z0lDQWdMeThnUm1GemRDQmpZWE5sTENCM2NtbDBaU0JsZG1WeWVYUm9hVzVuSUhWemFXNW5JRjkzY21sMFpYWW9LVnh1SUNBZ0lIWmhjaUJqWW5NZ1BTQmJYVHRjYmlBZ0lDQm1iM0lnS0haaGNpQmpJRDBnTURzZ1l5QThJSE4wWVhSbExtSjFabVpsY2k1c1pXNW5kR2c3SUdNckt5bGNiaUFnSUNBZ0lHTmljeTV3ZFhOb0tITjBZWFJsTG1KMVptWmxjbHRqWFM1allXeHNZbUZqYXlrN1hHNWNiaUFnSUNBdkx5QmpiM1Z1ZENCMGFHVWdiMjVsSUhkbElHRnlaU0JoWkdScGJtY3NJR0Z6SUhkbGJHd3VYRzRnSUNBZ0x5OGdWRTlFVHlocGMyRmhZM01wSUdOc1pXRnVJSFJvYVhNZ2RYQmNiaUFnSUNCemRHRjBaUzV3Wlc1a2FXNW5ZMklyS3p0Y2JpQWdJQ0JrYjFkeWFYUmxLSE4wY21WaGJTd2djM1JoZEdVc0lIUnlkV1VzSUhOMFlYUmxMbXhsYm1kMGFDd2djM1JoZEdVdVluVm1abVZ5TENBbkp5d2dablZ1WTNScGIyNG9aWEp5S1NCN1hHNGdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHTmljeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQnpkR0YwWlM1d1pXNWthVzVuWTJJdExUdGNiaUFnSUNBZ0lDQWdZMkp6VzJsZEtHVnljaWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0F2THlCRGJHVmhjaUJpZFdabVpYSmNiaUFnSUNCemRHRjBaUzVpZFdabVpYSWdQU0JiWFR0Y2JpQWdmU0JsYkhObElIdGNiaUFnSUNBdkx5QlRiRzkzSUdOaGMyVXNJSGR5YVhSbElHTm9kVzVyY3lCdmJtVXRZbmt0YjI1bFhHNGdJQ0FnWm05eUlDaDJZWElnWXlBOUlEQTdJR01nUENCemRHRjBaUzVpZFdabVpYSXViR1Z1WjNSb095QmpLeXNwSUh0Y2JpQWdJQ0FnSUhaaGNpQmxiblJ5ZVNBOUlITjBZWFJsTG1KMVptWmxjbHRqWFR0Y2JpQWdJQ0FnSUhaaGNpQmphSFZ1YXlBOUlHVnVkSEo1TG1Ob2RXNXJPMXh1SUNBZ0lDQWdkbUZ5SUdWdVkyOWthVzVuSUQwZ1pXNTBjbmt1Wlc1amIyUnBibWM3WEc0Z0lDQWdJQ0IyWVhJZ1kySWdQU0JsYm5SeWVTNWpZV3hzWW1GamF6dGNiaUFnSUNBZ0lIWmhjaUJzWlc0Z1BTQnpkR0YwWlM1dlltcGxZM1JOYjJSbElEOGdNU0E2SUdOb2RXNXJMbXhsYm1kMGFEdGNibHh1SUNBZ0lDQWdaRzlYY21sMFpTaHpkSEpsWVcwc0lITjBZWFJsTENCbVlXeHpaU3dnYkdWdUxDQmphSFZ1YXl3Z1pXNWpiMlJwYm1jc0lHTmlLVHRjYmx4dUlDQWdJQ0FnTHk4Z2FXWWdkMlVnWkdsa2JpZDBJR05oYkd3Z2RHaGxJRzl1ZDNKcGRHVWdhVzF0WldScFlYUmxiSGtzSUhSb1pXNWNiaUFnSUNBZ0lDOHZJR2wwSUcxbFlXNXpJSFJvWVhRZ2QyVWdibVZsWkNCMGJ5QjNZV2wwSUhWdWRHbHNJR2wwSUdSdlpYTXVYRzRnSUNBZ0lDQXZMeUJoYkhOdkxDQjBhR0YwSUcxbFlXNXpJSFJvWVhRZ2RHaGxJR05vZFc1cklHRnVaQ0JqWWlCaGNtVWdZM1Z5Y21WdWRHeDVYRzRnSUNBZ0lDQXZMeUJpWldsdVp5QndjbTlqWlhOelpXUXNJSE52SUcxdmRtVWdkR2hsSUdKMVptWmxjaUJqYjNWdWRHVnlJSEJoYzNRZ2RHaGxiUzVjYmlBZ0lDQWdJR2xtSUNoemRHRjBaUzUzY21sMGFXNW5LU0I3WEc0Z0lDQWdJQ0FnSUdNckt6dGNiaUFnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tHTWdQQ0J6ZEdGMFpTNWlkV1ptWlhJdWJHVnVaM1JvS1Z4dUlDQWdJQ0FnYzNSaGRHVXVZblZtWm1WeUlEMGdjM1JoZEdVdVluVm1abVZ5TG5Oc2FXTmxLR01wTzF4dUlDQWdJR1ZzYzJWY2JpQWdJQ0FnSUhOMFlYUmxMbUoxWm1abGNpNXNaVzVuZEdnZ1BTQXdPMXh1SUNCOVhHNWNiaUFnYzNSaGRHVXVZblZtWm1WeVVISnZZMlZ6YzJsdVp5QTlJR1poYkhObE8xeHVmVnh1WEc1WGNtbDBZV0pzWlM1d2NtOTBiM1I1Y0dVdVgzZHlhWFJsSUQwZ1puVnVZM1JwYjI0b1kyaDFibXNzSUdWdVkyOWthVzVuTENCallpa2dlMXh1SUNCallpaHVaWGNnUlhKeWIzSW9KMjV2ZENCcGJYQnNaVzFsYm5SbFpDY3BLVHRjYmx4dWZUdGNibHh1VjNKcGRHRmliR1V1Y0hKdmRHOTBlWEJsTGw5M2NtbDBaWFlnUFNCdWRXeHNPMXh1WEc1WGNtbDBZV0pzWlM1d2NtOTBiM1I1Y0dVdVpXNWtJRDBnWm5WdVkzUnBiMjRvWTJoMWJtc3NJR1Z1WTI5a2FXNW5MQ0JqWWlrZ2UxeHVJQ0IyWVhJZ2MzUmhkR1VnUFNCMGFHbHpMbDkzY21sMFlXSnNaVk4wWVhSbE8xeHVYRzRnSUdsbUlDaDFkR2xzTG1selJuVnVZM1JwYjI0b1kyaDFibXNwS1NCN1hHNGdJQ0FnWTJJZ1BTQmphSFZ1YXp0Y2JpQWdJQ0JqYUhWdWF5QTlJRzUxYkd3N1hHNGdJQ0FnWlc1amIyUnBibWNnUFNCdWRXeHNPMXh1SUNCOUlHVnNjMlVnYVdZZ0tIVjBhV3d1YVhOR2RXNWpkR2x2YmlobGJtTnZaR2x1WnlrcElIdGNiaUFnSUNCallpQTlJR1Z1WTI5a2FXNW5PMXh1SUNBZ0lHVnVZMjlrYVc1bklEMGdiblZzYkR0Y2JpQWdmVnh1WEc0Z0lHbG1JQ2doZFhScGJDNXBjMDUxYkd4UGNsVnVaR1ZtYVc1bFpDaGphSFZ1YXlrcFhHNGdJQ0FnZEdocGN5NTNjbWwwWlNoamFIVnVheXdnWlc1amIyUnBibWNwTzF4dVhHNGdJQzh2SUM1bGJtUW9LU0JtZFd4c2VTQjFibU52Y210elhHNGdJR2xtSUNoemRHRjBaUzVqYjNKclpXUXBJSHRjYmlBZ0lDQnpkR0YwWlM1amIzSnJaV1FnUFNBeE8xeHVJQ0FnSUhSb2FYTXVkVzVqYjNKcktDazdYRzRnSUgxY2JseHVJQ0F2THlCcFoyNXZjbVVnZFc1dVpXTmxjM05oY25rZ1pXNWtLQ2tnWTJGc2JITXVYRzRnSUdsbUlDZ2hjM1JoZEdVdVpXNWthVzVuSUNZbUlDRnpkR0YwWlM1bWFXNXBjMmhsWkNsY2JpQWdJQ0JsYm1SWGNtbDBZV0pzWlNoMGFHbHpMQ0J6ZEdGMFpTd2dZMklwTzF4dWZUdGNibHh1WEc1bWRXNWpkR2x2YmlCdVpXVmtSbWx1YVhOb0tITjBjbVZoYlN3Z2MzUmhkR1VwSUh0Y2JpQWdjbVYwZFhKdUlDaHpkR0YwWlM1bGJtUnBibWNnSmlaY2JpQWdJQ0FnSUNBZ0lDQnpkR0YwWlM1c1pXNW5kR2dnUFQwOUlEQWdKaVpjYmlBZ0lDQWdJQ0FnSUNBaGMzUmhkR1V1Wm1sdWFYTm9aV1FnSmlaY2JpQWdJQ0FnSUNBZ0lDQWhjM1JoZEdVdWQzSnBkR2x1WnlrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUhCeVpXWnBibWx6YUNoemRISmxZVzBzSUhOMFlYUmxLU0I3WEc0Z0lHbG1JQ2doYzNSaGRHVXVjSEpsWm1sdWFYTm9aV1FwSUh0Y2JpQWdJQ0J6ZEdGMFpTNXdjbVZtYVc1cGMyaGxaQ0E5SUhSeWRXVTdYRzRnSUNBZ2MzUnlaV0Z0TG1WdGFYUW9KM0J5WldacGJtbHphQ2NwTzF4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlHWnBibWx6YUUxaGVXSmxLSE4wY21WaGJTd2djM1JoZEdVcElIdGNiaUFnZG1GeUlHNWxaV1FnUFNCdVpXVmtSbWx1YVhOb0tITjBjbVZoYlN3Z2MzUmhkR1VwTzF4dUlDQnBaaUFvYm1WbFpDa2dlMXh1SUNBZ0lHbG1JQ2h6ZEdGMFpTNXdaVzVrYVc1blkySWdQVDA5SURBcElIdGNiaUFnSUNBZ0lIQnlaV1pwYm1semFDaHpkSEpsWVcwc0lITjBZWFJsS1R0Y2JpQWdJQ0FnSUhOMFlYUmxMbVpwYm1semFHVmtJRDBnZEhKMVpUdGNiaUFnSUNBZ0lITjBjbVZoYlM1bGJXbDBLQ2RtYVc1cGMyZ25LVHRjYmlBZ0lDQjlJR1ZzYzJWY2JpQWdJQ0FnSUhCeVpXWnBibWx6YUNoemRISmxZVzBzSUhOMFlYUmxLVHRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdibVZsWkR0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWlc1a1YzSnBkR0ZpYkdVb2MzUnlaV0Z0TENCemRHRjBaU3dnWTJJcElIdGNiaUFnYzNSaGRHVXVaVzVrYVc1bklEMGdkSEoxWlR0Y2JpQWdabWx1YVhOb1RXRjVZbVVvYzNSeVpXRnRMQ0J6ZEdGMFpTazdYRzRnSUdsbUlDaGpZaWtnZTF4dUlDQWdJR2xtSUNoemRHRjBaUzVtYVc1cGMyaGxaQ2xjYmlBZ0lDQWdJSEJ5YjJObGMzTXVibVY0ZEZScFkyc29ZMklwTzF4dUlDQWdJR1ZzYzJWY2JpQWdJQ0FnSUhOMGNtVmhiUzV2Ym1ObEtDZG1hVzVwYzJnbkxDQmpZaWs3WEc0Z0lIMWNiaUFnYzNSaGRHVXVaVzVrWldRZ1BTQjBjblZsTzF4dWZWeHVJbDE5IiwiKGZ1bmN0aW9uIChCdWZmZXIpe1xuLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIE5PVEU6IFRoZXNlIHR5cGUgY2hlY2tpbmcgZnVuY3Rpb25zIGludGVudGlvbmFsbHkgZG9uJ3QgdXNlIGBpbnN0YW5jZW9mYFxuLy8gYmVjYXVzZSBpdCBpcyBmcmFnaWxlIGFuZCBjYW4gYmUgZWFzaWx5IGZha2VkIHdpdGggYE9iamVjdC5jcmVhdGUoKWAuXG5cbmZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXJnKTtcbiAgfVxuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcoYXJnKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cbmV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXk7XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJztcbn1cbmV4cG9ydHMuaXNCb29sZWFuID0gaXNCb29sZWFuO1xuXG5mdW5jdGlvbiBpc051bGwoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbCA9IGlzTnVsbDtcblxuZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsT3JVbmRlZmluZWQgPSBpc051bGxPclVuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cbmV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjtcblxuZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJztcbn1cbmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZztcblxuZnVuY3Rpb24gaXNTeW1ib2woYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3ltYm9sJztcbn1cbmV4cG9ydHMuaXNTeW1ib2wgPSBpc1N5bWJvbDtcblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cbmV4cG9ydHMuaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNSZWdFeHAocmUpIHtcbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG5leHBvcnRzLmlzUmVnRXhwID0gaXNSZWdFeHA7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuXG5mdW5jdGlvbiBpc0RhdGUoZCkge1xuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcoZCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cbmV4cG9ydHMuaXNEYXRlID0gaXNEYXRlO1xuXG5mdW5jdGlvbiBpc0Vycm9yKGUpIHtcbiAgcmV0dXJuIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpO1xufVxuZXhwb3J0cy5pc0Vycm9yID0gaXNFcnJvcjtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZShhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbCB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnIHx8ICAvLyBFUzYgc3ltYm9sXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJztcbn1cbmV4cG9ydHMuaXNQcmltaXRpdmUgPSBpc1ByaW1pdGl2ZTtcblxuZXhwb3J0cy5pc0J1ZmZlciA9IEJ1ZmZlci5pc0J1ZmZlcjtcblxuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pO1xufVxuXG59KS5jYWxsKHRoaXMse1wiaXNCdWZmZXJcIjpyZXF1aXJlKFwiLi4vLi4vLi4vLi4vaW5zZXJ0LW1vZHVsZS1nbG9iYWxzL25vZGVfbW9kdWxlcy9pcy1idWZmZXIvaW5kZXguanNcIil9KVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeWFXWjVMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmtZV0pzWlMxemRISmxZVzB2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0ZFhScGJDMXBjeTlzYVdJdmRYUnBiQzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CSWl3aVptbHNaU0k2SW1kbGJtVnlZWFJsWkM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZMeUJEYjNCNWNtbG5hSFFnU205NVpXNTBMQ0JKYm1NdUlHRnVaQ0J2ZEdobGNpQk9iMlJsSUdOdmJuUnlhV0oxZEc5eWN5NWNiaTh2WEc0dkx5QlFaWEp0YVhOemFXOXVJR2x6SUdobGNtVmllU0JuY21GdWRHVmtMQ0JtY21WbElHOW1JR05vWVhKblpTd2dkRzhnWVc1NUlIQmxjbk52YmlCdlluUmhhVzVwYm1jZ1lWeHVMeThnWTI5d2VTQnZaaUIwYUdseklITnZablIzWVhKbElHRnVaQ0JoYzNOdlkybGhkR1ZrSUdSdlkzVnRaVzUwWVhScGIyNGdabWxzWlhNZ0tIUm9aVnh1THk4Z1hDSlRiMlowZDJGeVpWd2lLU3dnZEc4Z1pHVmhiQ0JwYmlCMGFHVWdVMjltZEhkaGNtVWdkMmwwYUc5MWRDQnlaWE4wY21samRHbHZiaXdnYVc1amJIVmthVzVuWEc0dkx5QjNhWFJvYjNWMElHeHBiV2wwWVhScGIyNGdkR2hsSUhKcFoyaDBjeUIwYnlCMWMyVXNJR052Y0hrc0lHMXZaR2xtZVN3Z2JXVnlaMlVzSUhCMVlteHBjMmdzWEc0dkx5QmthWE4wY21saWRYUmxMQ0J6ZFdKc2FXTmxibk5sTENCaGJtUXZiM0lnYzJWc2JDQmpiM0JwWlhNZ2IyWWdkR2hsSUZOdlpuUjNZWEpsTENCaGJtUWdkRzhnY0dWeWJXbDBYRzR2THlCd1pYSnpiMjV6SUhSdklIZG9iMjBnZEdobElGTnZablIzWVhKbElHbHpJR1oxY201cGMyaGxaQ0IwYnlCa2J5QnpieXdnYzNWaWFtVmpkQ0IwYnlCMGFHVmNiaTh2SUdadmJHeHZkMmx1WnlCamIyNWthWFJwYjI1ek9seHVMeTljYmk4dklGUm9aU0JoWW05MlpTQmpiM0I1Y21sbmFIUWdibTkwYVdObElHRnVaQ0IwYUdseklIQmxjbTFwYzNOcGIyNGdibTkwYVdObElITm9ZV3hzSUdKbElHbHVZMngxWkdWa1hHNHZMeUJwYmlCaGJHd2dZMjl3YVdWeklHOXlJSE4xWW5OMFlXNTBhV0ZzSUhCdmNuUnBiMjV6SUc5bUlIUm9aU0JUYjJaMGQyRnlaUzVjYmk4dlhHNHZMeUJVU0VVZ1UwOUdWRmRCVWtVZ1NWTWdVRkpQVmtsRVJVUWdYQ0pCVXlCSlUxd2lMQ0JYU1ZSSVQxVlVJRmRCVWxKQlRsUlpJRTlHSUVGT1dTQkxTVTVFTENCRldGQlNSVk5UWEc0dkx5QlBVaUJKVFZCTVNVVkVMQ0JKVGtOTVZVUkpUa2NnUWxWVUlFNVBWQ0JNU1UxSlZFVkVJRlJQSUZSSVJTQlhRVkpTUVU1VVNVVlRJRTlHWEc0dkx5Qk5SVkpEU0VGT1ZFRkNTVXhKVkZrc0lFWkpWRTVGVTFNZ1JrOVNJRUVnVUVGU1ZFbERWVXhCVWlCUVZWSlFUMU5GSUVGT1JDQk9UMDVKVGtaU1NVNUhSVTFGVGxRdUlFbE9YRzR2THlCT1R5QkZWa1ZPVkNCVFNFRk1UQ0JVU0VVZ1FWVlVTRTlTVXlCUFVpQkRUMUJaVWtsSFNGUWdTRTlNUkVWU1V5QkNSU0JNU1VGQ1RFVWdSazlTSUVGT1dTQkRURUZKVFN4Y2JpOHZJRVJCVFVGSFJWTWdUMUlnVDFSSVJWSWdURWxCUWtsTVNWUlpMQ0JYU0VWVVNFVlNJRWxPSUVGT0lFRkRWRWxQVGlCUFJpQkRUMDVVVWtGRFZDd2dWRTlTVkNCUFVseHVMeThnVDFSSVJWSlhTVk5GTENCQlVrbFRTVTVISUVaU1QwMHNJRTlWVkNCUFJpQlBVaUJKVGlCRFQwNU9SVU5VU1U5T0lGZEpWRWdnVkVoRklGTlBSbFJYUVZKRklFOVNJRlJJUlZ4dUx5OGdWVk5GSUU5U0lFOVVTRVZTSUVSRlFVeEpUa2RUSUVsT0lGUklSU0JUVDBaVVYwRlNSUzVjYmx4dUx5OGdUazlVUlRvZ1ZHaGxjMlVnZEhsd1pTQmphR1ZqYTJsdVp5Qm1kVzVqZEdsdmJuTWdhVzUwWlc1MGFXOXVZV3hzZVNCa2IyNG5kQ0IxYzJVZ1lHbHVjM1JoYm1ObGIyWmdYRzR2THlCaVpXTmhkWE5sSUdsMElHbHpJR1p5WVdkcGJHVWdZVzVrSUdOaGJpQmlaU0JsWVhOcGJIa2dabUZyWldRZ2QybDBhQ0JnVDJKcVpXTjBMbU55WldGMFpTZ3BZQzVjYmx4dVpuVnVZM1JwYjI0Z2FYTkJjbkpoZVNoaGNtY3BJSHRjYmlBZ2FXWWdLRUZ5Y21GNUxtbHpRWEp5WVhrcElIdGNiaUFnSUNCeVpYUjFjbTRnUVhKeVlYa3VhWE5CY25KaGVTaGhjbWNwTzF4dUlDQjlYRzRnSUhKbGRIVnliaUJ2WW1wbFkzUlViMU4wY21sdVp5aGhjbWNwSUQwOVBTQW5XMjlpYW1WamRDQkJjbkpoZVYwbk8xeHVmVnh1Wlhod2IzSjBjeTVwYzBGeWNtRjVJRDBnYVhOQmNuSmhlVHRjYmx4dVpuVnVZM1JwYjI0Z2FYTkNiMjlzWldGdUtHRnlaeWtnZTF4dUlDQnlaWFIxY200Z2RIbHdaVzltSUdGeVp5QTlQVDBnSjJKdmIyeGxZVzRuTzF4dWZWeHVaWGh3YjNKMGN5NXBjMEp2YjJ4bFlXNGdQU0JwYzBKdmIyeGxZVzQ3WEc1Y2JtWjFibU4wYVc5dUlHbHpUblZzYkNoaGNtY3BJSHRjYmlBZ2NtVjBkWEp1SUdGeVp5QTlQVDBnYm5Wc2JEdGNibjFjYm1WNGNHOXlkSE11YVhOT2RXeHNJRDBnYVhOT2RXeHNPMXh1WEc1bWRXNWpkR2x2YmlCcGMwNTFiR3hQY2xWdVpHVm1hVzVsWkNoaGNtY3BJSHRjYmlBZ2NtVjBkWEp1SUdGeVp5QTlQU0J1ZFd4c08xeHVmVnh1Wlhod2IzSjBjeTVwYzA1MWJHeFBjbFZ1WkdWbWFXNWxaQ0E5SUdselRuVnNiRTl5Vlc1a1pXWnBibVZrTzF4dVhHNW1kVzVqZEdsdmJpQnBjMDUxYldKbGNpaGhjbWNwSUh0Y2JpQWdjbVYwZFhKdUlIUjVjR1Z2WmlCaGNtY2dQVDA5SUNkdWRXMWlaWEluTzF4dWZWeHVaWGh3YjNKMGN5NXBjMDUxYldKbGNpQTlJR2x6VG5WdFltVnlPMXh1WEc1bWRXNWpkR2x2YmlCcGMxTjBjbWx1WnloaGNtY3BJSHRjYmlBZ2NtVjBkWEp1SUhSNWNHVnZaaUJoY21jZ1BUMDlJQ2R6ZEhKcGJtY25PMXh1ZlZ4dVpYaHdiM0owY3k1cGMxTjBjbWx1WnlBOUlHbHpVM1J5YVc1bk8xeHVYRzVtZFc1amRHbHZiaUJwYzFONWJXSnZiQ2hoY21jcElIdGNiaUFnY21WMGRYSnVJSFI1Y0dWdlppQmhjbWNnUFQwOUlDZHplVzFpYjJ3bk8xeHVmVnh1Wlhod2IzSjBjeTVwYzFONWJXSnZiQ0E5SUdselUzbHRZbTlzTzF4dVhHNW1kVzVqZEdsdmJpQnBjMVZ1WkdWbWFXNWxaQ2hoY21jcElIdGNiaUFnY21WMGRYSnVJR0Z5WnlBOVBUMGdkbTlwWkNBd08xeHVmVnh1Wlhod2IzSjBjeTVwYzFWdVpHVm1hVzVsWkNBOUlHbHpWVzVrWldacGJtVmtPMXh1WEc1bWRXNWpkR2x2YmlCcGMxSmxaMFY0Y0NoeVpTa2dlMXh1SUNCeVpYUjFjbTRnYjJKcVpXTjBWRzlUZEhKcGJtY29jbVVwSUQwOVBTQW5XMjlpYW1WamRDQlNaV2RGZUhCZEp6dGNibjFjYm1WNGNHOXlkSE11YVhOU1pXZEZlSEFnUFNCcGMxSmxaMFY0Y0R0Y2JseHVablZ1WTNScGIyNGdhWE5QWW1wbFkzUW9ZWEpuS1NCN1hHNGdJSEpsZEhWeWJpQjBlWEJsYjJZZ1lYSm5JRDA5UFNBbmIySnFaV04wSnlBbUppQmhjbWNnSVQwOUlHNTFiR3c3WEc1OVhHNWxlSEJ2Y25SekxtbHpUMkpxWldOMElEMGdhWE5QWW1wbFkzUTdYRzVjYm1aMWJtTjBhVzl1SUdselJHRjBaU2hrS1NCN1hHNGdJSEpsZEhWeWJpQnZZbXBsWTNSVWIxTjBjbWx1Wnloa0tTQTlQVDBnSjF0dlltcGxZM1FnUkdGMFpWMG5PMXh1ZlZ4dVpYaHdiM0owY3k1cGMwUmhkR1VnUFNCcGMwUmhkR1U3WEc1Y2JtWjFibU4wYVc5dUlHbHpSWEp5YjNJb1pTa2dlMXh1SUNCeVpYUjFjbTRnS0c5aWFtVmpkRlJ2VTNSeWFXNW5LR1VwSUQwOVBTQW5XMjlpYW1WamRDQkZjbkp2Y2wwbklIeDhJR1VnYVc1emRHRnVZMlZ2WmlCRmNuSnZjaWs3WEc1OVhHNWxlSEJ2Y25SekxtbHpSWEp5YjNJZ1BTQnBjMFZ5Y205eU8xeHVYRzVtZFc1amRHbHZiaUJwYzBaMWJtTjBhVzl1S0dGeVp5a2dlMXh1SUNCeVpYUjFjbTRnZEhsd1pXOW1JR0Z5WnlBOVBUMGdKMloxYm1OMGFXOXVKenRjYm4xY2JtVjRjRzl5ZEhNdWFYTkdkVzVqZEdsdmJpQTlJR2x6Um5WdVkzUnBiMjQ3WEc1Y2JtWjFibU4wYVc5dUlHbHpVSEpwYldsMGFYWmxLR0Z5WnlrZ2UxeHVJQ0J5WlhSMWNtNGdZWEpuSUQwOVBTQnVkV3hzSUh4OFhHNGdJQ0FnSUNBZ0lDQjBlWEJsYjJZZ1lYSm5JRDA5UFNBblltOXZiR1ZoYmljZ2ZIeGNiaUFnSUNBZ0lDQWdJSFI1Y0dWdlppQmhjbWNnUFQwOUlDZHVkVzFpWlhJbklIeDhYRzRnSUNBZ0lDQWdJQ0IwZVhCbGIyWWdZWEpuSUQwOVBTQW5jM1J5YVc1bkp5QjhmRnh1SUNBZ0lDQWdJQ0FnZEhsd1pXOW1JR0Z5WnlBOVBUMGdKM041YldKdmJDY2dmSHdnSUM4dklFVlROaUJ6ZVcxaWIyeGNiaUFnSUNBZ0lDQWdJSFI1Y0dWdlppQmhjbWNnUFQwOUlDZDFibVJsWm1sdVpXUW5PMXh1ZlZ4dVpYaHdiM0owY3k1cGMxQnlhVzFwZEdsMlpTQTlJR2x6VUhKcGJXbDBhWFpsTzF4dVhHNWxlSEJ2Y25SekxtbHpRblZtWm1WeUlEMGdRblZtWm1WeUxtbHpRblZtWm1WeU8xeHVYRzVtZFc1amRHbHZiaUJ2WW1wbFkzUlViMU4wY21sdVp5aHZLU0I3WEc0Z0lISmxkSFZ5YmlCUFltcGxZM1F1Y0hKdmRHOTBlWEJsTG5SdlUzUnlhVzVuTG1OaGJHd29ieWs3WEc1OVhHNGlYWDA9IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qc1wiKVxuIiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcmVhZGFibGUuanMnKTtcbmV4cG9ydHMuU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJyk7XG5leHBvcnRzLlJlYWRhYmxlID0gZXhwb3J0cztcbmV4cG9ydHMuV3JpdGFibGUgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzJyk7XG5leHBvcnRzLkR1cGxleCA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fZHVwbGV4LmpzJyk7XG5leHBvcnRzLlRyYW5zZm9ybSA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzJyk7XG5leHBvcnRzLlBhc3NUaHJvdWdoID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qcycpO1xuaWYgKCFwcm9jZXNzLmJyb3dzZXIgJiYgcHJvY2Vzcy5lbnYuUkVBREFCTEVfU1RSRUFNID09PSAnZGlzYWJsZScpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdzdHJlYW0nKTtcbn1cblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGa1lXSnNaUzF6ZEhKbFlXMHZjbVZoWkdGaWJHVXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltVjRjRzl5ZEhNZ1BTQnRiMlIxYkdVdVpYaHdiM0owY3lBOUlISmxjWFZwY21Vb0p5NHZiR2xpTDE5emRISmxZVzFmY21WaFpHRmliR1V1YW5NbktUdGNibVY0Y0c5eWRITXVVM1J5WldGdElEMGdjbVZ4ZFdseVpTZ25jM1J5WldGdEp5azdYRzVsZUhCdmNuUnpMbEpsWVdSaFlteGxJRDBnWlhod2IzSjBjenRjYm1WNGNHOXlkSE11VjNKcGRHRmliR1VnUFNCeVpYRjFhWEpsS0NjdUwyeHBZaTlmYzNSeVpXRnRYM2R5YVhSaFlteGxMbXB6SnlrN1hHNWxlSEJ2Y25SekxrUjFjR3hsZUNBOUlISmxjWFZwY21Vb0p5NHZiR2xpTDE5emRISmxZVzFmWkhWd2JHVjRMbXB6SnlrN1hHNWxlSEJ2Y25SekxsUnlZVzV6Wm05eWJTQTlJSEpsY1hWcGNtVW9KeTR2YkdsaUwxOXpkSEpsWVcxZmRISmhibk5tYjNKdExtcHpKeWs3WEc1bGVIQnZjblJ6TGxCaGMzTlVhSEp2ZFdkb0lEMGdjbVZ4ZFdseVpTZ25MaTlzYVdJdlgzTjBjbVZoYlY5d1lYTnpkR2h5YjNWbmFDNXFjeWNwTzF4dWFXWWdLQ0Z3Y205alpYTnpMbUp5YjNkelpYSWdKaVlnY0hKdlkyVnpjeTVsYm5ZdVVrVkJSRUZDVEVWZlUxUlNSVUZOSUQwOVBTQW5aR2x6WVdKc1pTY3BJSHRjYmlBZ2JXOWtkV3hsTG1WNGNHOXlkSE1nUFNCeVpYRjFhWEpsS0NkemRISmxZVzBuS1R0Y2JuMWNiaUpkZlE9PSIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzXCIpXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzXCIpXG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxubW9kdWxlLmV4cG9ydHMgPSBTdHJlYW07XG5cbnZhciBFRSA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmluaGVyaXRzKFN0cmVhbSwgRUUpO1xuU3RyZWFtLlJlYWRhYmxlID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3JlYWRhYmxlLmpzJyk7XG5TdHJlYW0uV3JpdGFibGUgPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vd3JpdGFibGUuanMnKTtcblN0cmVhbS5EdXBsZXggPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vZHVwbGV4LmpzJyk7XG5TdHJlYW0uVHJhbnNmb3JtID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3RyYW5zZm9ybS5qcycpO1xuU3RyZWFtLlBhc3NUaHJvdWdoID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3Bhc3N0aHJvdWdoLmpzJyk7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuNC54XG5TdHJlYW0uU3RyZWFtID0gU3RyZWFtO1xuXG5cblxuLy8gb2xkLXN0eWxlIHN0cmVhbXMuICBOb3RlIHRoYXQgdGhlIHBpcGUgbWV0aG9kICh0aGUgb25seSByZWxldmFudFxuLy8gcGFydCBvZiB0aGlzIGNsYXNzKSBpcyBvdmVycmlkZGVuIGluIHRoZSBSZWFkYWJsZSBjbGFzcy5cblxuZnVuY3Rpb24gU3RyZWFtKCkge1xuICBFRS5jYWxsKHRoaXMpO1xufVxuXG5TdHJlYW0ucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbihkZXN0LCBvcHRpb25zKSB7XG4gIHZhciBzb3VyY2UgPSB0aGlzO1xuXG4gIGZ1bmN0aW9uIG9uZGF0YShjaHVuaykge1xuICAgIGlmIChkZXN0LndyaXRhYmxlKSB7XG4gICAgICBpZiAoZmFsc2UgPT09IGRlc3Qud3JpdGUoY2h1bmspICYmIHNvdXJjZS5wYXVzZSkge1xuICAgICAgICBzb3VyY2UucGF1c2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzb3VyY2Uub24oJ2RhdGEnLCBvbmRhdGEpO1xuXG4gIGZ1bmN0aW9uIG9uZHJhaW4oKSB7XG4gICAgaWYgKHNvdXJjZS5yZWFkYWJsZSAmJiBzb3VyY2UucmVzdW1lKSB7XG4gICAgICBzb3VyY2UucmVzdW1lKCk7XG4gICAgfVxuICB9XG5cbiAgZGVzdC5vbignZHJhaW4nLCBvbmRyYWluKTtcblxuICAvLyBJZiB0aGUgJ2VuZCcgb3B0aW9uIGlzIG5vdCBzdXBwbGllZCwgZGVzdC5lbmQoKSB3aWxsIGJlIGNhbGxlZCB3aGVuXG4gIC8vIHNvdXJjZSBnZXRzIHRoZSAnZW5kJyBvciAnY2xvc2UnIGV2ZW50cy4gIE9ubHkgZGVzdC5lbmQoKSBvbmNlLlxuICBpZiAoIWRlc3QuX2lzU3RkaW8gJiYgKCFvcHRpb25zIHx8IG9wdGlvbnMuZW5kICE9PSBmYWxzZSkpIHtcbiAgICBzb3VyY2Uub24oJ2VuZCcsIG9uZW5kKTtcbiAgICBzb3VyY2Uub24oJ2Nsb3NlJywgb25jbG9zZSk7XG4gIH1cblxuICB2YXIgZGlkT25FbmQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gb25lbmQoKSB7XG4gICAgaWYgKGRpZE9uRW5kKSByZXR1cm47XG4gICAgZGlkT25FbmQgPSB0cnVlO1xuXG4gICAgZGVzdC5lbmQoKTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gb25jbG9zZSgpIHtcbiAgICBpZiAoZGlkT25FbmQpIHJldHVybjtcbiAgICBkaWRPbkVuZCA9IHRydWU7XG5cbiAgICBpZiAodHlwZW9mIGRlc3QuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgZGVzdC5kZXN0cm95KCk7XG4gIH1cblxuICAvLyBkb24ndCBsZWF2ZSBkYW5nbGluZyBwaXBlcyB3aGVuIHRoZXJlIGFyZSBlcnJvcnMuXG4gIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHtcbiAgICBjbGVhbnVwKCk7XG4gICAgaWYgKEVFLmxpc3RlbmVyQ291bnQodGhpcywgJ2Vycm9yJykgPT09IDApIHtcbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgc3RyZWFtIGVycm9yIGluIHBpcGUuXG4gICAgfVxuICB9XG5cbiAgc291cmNlLm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuICBkZXN0Lm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuXG4gIC8vIHJlbW92ZSBhbGwgdGhlIGV2ZW50IGxpc3RlbmVycyB0aGF0IHdlcmUgYWRkZWQuXG4gIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgb25kYXRhKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdkcmFpbicsIG9uZHJhaW4pO1xuXG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7XG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuXG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG5cbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIGNsZWFudXApO1xuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBjbGVhbnVwKTtcblxuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgY2xlYW51cCk7XG4gIH1cblxuICBzb3VyY2Uub24oJ2VuZCcsIGNsZWFudXApO1xuICBzb3VyY2Uub24oJ2Nsb3NlJywgY2xlYW51cCk7XG5cbiAgZGVzdC5vbignY2xvc2UnLCBjbGVhbnVwKTtcblxuICBkZXN0LmVtaXQoJ3BpcGUnLCBzb3VyY2UpO1xuXG4gIC8vIEFsbG93IGZvciB1bml4LWxpa2UgdXNhZ2U6IEEucGlwZShCKS5waXBlKEMpXG4gIHJldHVybiBkZXN0O1xufTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJykuQnVmZmVyO1xuXG52YXIgaXNCdWZmZXJFbmNvZGluZyA9IEJ1ZmZlci5pc0VuY29kaW5nXG4gIHx8IGZ1bmN0aW9uKGVuY29kaW5nKSB7XG4gICAgICAgc3dpdGNoIChlbmNvZGluZyAmJiBlbmNvZGluZy50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICBjYXNlICdoZXgnOiBjYXNlICd1dGY4JzogY2FzZSAndXRmLTgnOiBjYXNlICdhc2NpaSc6IGNhc2UgJ2JpbmFyeSc6IGNhc2UgJ2Jhc2U2NCc6IGNhc2UgJ3VjczInOiBjYXNlICd1Y3MtMic6IGNhc2UgJ3V0ZjE2bGUnOiBjYXNlICd1dGYtMTZsZSc6IGNhc2UgJ3Jhdyc6IHJldHVybiB0cnVlO1xuICAgICAgICAgZGVmYXVsdDogcmV0dXJuIGZhbHNlO1xuICAgICAgIH1cbiAgICAgfVxuXG5cbmZ1bmN0aW9uIGFzc2VydEVuY29kaW5nKGVuY29kaW5nKSB7XG4gIGlmIChlbmNvZGluZyAmJiAhaXNCdWZmZXJFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZyk7XG4gIH1cbn1cblxuLy8gU3RyaW5nRGVjb2RlciBwcm92aWRlcyBhbiBpbnRlcmZhY2UgZm9yIGVmZmljaWVudGx5IHNwbGl0dGluZyBhIHNlcmllcyBvZlxuLy8gYnVmZmVycyBpbnRvIGEgc2VyaWVzIG9mIEpTIHN0cmluZ3Mgd2l0aG91dCBicmVha2luZyBhcGFydCBtdWx0aS1ieXRlXG4vLyBjaGFyYWN0ZXJzLiBDRVNVLTggaXMgaGFuZGxlZCBhcyBwYXJ0IG9mIHRoZSBVVEYtOCBlbmNvZGluZy5cbi8vXG4vLyBAVE9ETyBIYW5kbGluZyBhbGwgZW5jb2RpbmdzIGluc2lkZSBhIHNpbmdsZSBvYmplY3QgbWFrZXMgaXQgdmVyeSBkaWZmaWN1bHRcbi8vIHRvIHJlYXNvbiBhYm91dCB0aGlzIGNvZGUsIHNvIGl0IHNob3VsZCBiZSBzcGxpdCB1cCBpbiB0aGUgZnV0dXJlLlxuLy8gQFRPRE8gVGhlcmUgc2hvdWxkIGJlIGEgdXRmOC1zdHJpY3QgZW5jb2RpbmcgdGhhdCByZWplY3RzIGludmFsaWQgVVRGLTggY29kZVxuLy8gcG9pbnRzIGFzIHVzZWQgYnkgQ0VTVS04LlxudmFyIFN0cmluZ0RlY29kZXIgPSBleHBvcnRzLlN0cmluZ0RlY29kZXIgPSBmdW5jdGlvbihlbmNvZGluZykge1xuICB0aGlzLmVuY29kaW5nID0gKGVuY29kaW5nIHx8ICd1dGY4JykudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bLV9dLywgJycpO1xuICBhc3NlcnRFbmNvZGluZyhlbmNvZGluZyk7XG4gIHN3aXRjaCAodGhpcy5lbmNvZGluZykge1xuICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgLy8gQ0VTVS04IHJlcHJlc2VudHMgZWFjaCBvZiBTdXJyb2dhdGUgUGFpciBieSAzLWJ5dGVzXG4gICAgICB0aGlzLnN1cnJvZ2F0ZVNpemUgPSAzO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICAvLyBVVEYtMTYgcmVwcmVzZW50cyBlYWNoIG9mIFN1cnJvZ2F0ZSBQYWlyIGJ5IDItYnl0ZXNcbiAgICAgIHRoaXMuc3Vycm9nYXRlU2l6ZSA9IDI7XG4gICAgICB0aGlzLmRldGVjdEluY29tcGxldGVDaGFyID0gdXRmMTZEZXRlY3RJbmNvbXBsZXRlQ2hhcjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAvLyBCYXNlLTY0IHN0b3JlcyAzIGJ5dGVzIGluIDQgY2hhcnMsIGFuZCBwYWRzIHRoZSByZW1haW5kZXIuXG4gICAgICB0aGlzLnN1cnJvZ2F0ZVNpemUgPSAzO1xuICAgICAgdGhpcy5kZXRlY3RJbmNvbXBsZXRlQ2hhciA9IGJhc2U2NERldGVjdEluY29tcGxldGVDaGFyO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRoaXMud3JpdGUgPSBwYXNzVGhyb3VnaFdyaXRlO1xuICAgICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRW5vdWdoIHNwYWNlIHRvIHN0b3JlIGFsbCBieXRlcyBvZiBhIHNpbmdsZSBjaGFyYWN0ZXIuIFVURi04IG5lZWRzIDRcbiAgLy8gYnl0ZXMsIGJ1dCBDRVNVLTggbWF5IHJlcXVpcmUgdXAgdG8gNiAoMyBieXRlcyBwZXIgc3Vycm9nYXRlKS5cbiAgdGhpcy5jaGFyQnVmZmVyID0gbmV3IEJ1ZmZlcig2KTtcbiAgLy8gTnVtYmVyIG9mIGJ5dGVzIHJlY2VpdmVkIGZvciB0aGUgY3VycmVudCBpbmNvbXBsZXRlIG11bHRpLWJ5dGUgY2hhcmFjdGVyLlxuICB0aGlzLmNoYXJSZWNlaXZlZCA9IDA7XG4gIC8vIE51bWJlciBvZiBieXRlcyBleHBlY3RlZCBmb3IgdGhlIGN1cnJlbnQgaW5jb21wbGV0ZSBtdWx0aS1ieXRlIGNoYXJhY3Rlci5cbiAgdGhpcy5jaGFyTGVuZ3RoID0gMDtcbn07XG5cblxuLy8gd3JpdGUgZGVjb2RlcyB0aGUgZ2l2ZW4gYnVmZmVyIGFuZCByZXR1cm5zIGl0IGFzIEpTIHN0cmluZyB0aGF0IGlzXG4vLyBndWFyYW50ZWVkIHRvIG5vdCBjb250YWluIGFueSBwYXJ0aWFsIG11bHRpLWJ5dGUgY2hhcmFjdGVycy4gQW55IHBhcnRpYWxcbi8vIGNoYXJhY3RlciBmb3VuZCBhdCB0aGUgZW5kIG9mIHRoZSBidWZmZXIgaXMgYnVmZmVyZWQgdXAsIGFuZCB3aWxsIGJlXG4vLyByZXR1cm5lZCB3aGVuIGNhbGxpbmcgd3JpdGUgYWdhaW4gd2l0aCB0aGUgcmVtYWluaW5nIGJ5dGVzLlxuLy9cbi8vIE5vdGU6IENvbnZlcnRpbmcgYSBCdWZmZXIgY29udGFpbmluZyBhbiBvcnBoYW4gc3Vycm9nYXRlIHRvIGEgU3RyaW5nXG4vLyBjdXJyZW50bHkgd29ya3MsIGJ1dCBjb252ZXJ0aW5nIGEgU3RyaW5nIHRvIGEgQnVmZmVyICh2aWEgYG5ldyBCdWZmZXJgLCBvclxuLy8gQnVmZmVyI3dyaXRlKSB3aWxsIHJlcGxhY2UgaW5jb21wbGV0ZSBzdXJyb2dhdGVzIHdpdGggdGhlIHVuaWNvZGVcbi8vIHJlcGxhY2VtZW50IGNoYXJhY3Rlci4gU2VlIGh0dHBzOi8vY29kZXJldmlldy5jaHJvbWl1bS5vcmcvMTIxMTczMDA5LyAuXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uKGJ1ZmZlcikge1xuICB2YXIgY2hhclN0ciA9ICcnO1xuICAvLyBpZiBvdXIgbGFzdCB3cml0ZSBlbmRlZCB3aXRoIGFuIGluY29tcGxldGUgbXVsdGlieXRlIGNoYXJhY3RlclxuICB3aGlsZSAodGhpcy5jaGFyTGVuZ3RoKSB7XG4gICAgLy8gZGV0ZXJtaW5lIGhvdyBtYW55IHJlbWFpbmluZyBieXRlcyB0aGlzIGJ1ZmZlciBoYXMgdG8gb2ZmZXIgZm9yIHRoaXMgY2hhclxuICAgIHZhciBhdmFpbGFibGUgPSAoYnVmZmVyLmxlbmd0aCA+PSB0aGlzLmNoYXJMZW5ndGggLSB0aGlzLmNoYXJSZWNlaXZlZCkgP1xuICAgICAgICB0aGlzLmNoYXJMZW5ndGggLSB0aGlzLmNoYXJSZWNlaXZlZCA6XG4gICAgICAgIGJ1ZmZlci5sZW5ndGg7XG5cbiAgICAvLyBhZGQgdGhlIG5ldyBieXRlcyB0byB0aGUgY2hhciBidWZmZXJcbiAgICBidWZmZXIuY29weSh0aGlzLmNoYXJCdWZmZXIsIHRoaXMuY2hhclJlY2VpdmVkLCAwLCBhdmFpbGFibGUpO1xuICAgIHRoaXMuY2hhclJlY2VpdmVkICs9IGF2YWlsYWJsZTtcblxuICAgIGlmICh0aGlzLmNoYXJSZWNlaXZlZCA8IHRoaXMuY2hhckxlbmd0aCkge1xuICAgICAgLy8gc3RpbGwgbm90IGVub3VnaCBjaGFycyBpbiB0aGlzIGJ1ZmZlcj8gd2FpdCBmb3IgbW9yZSAuLi5cbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICAvLyByZW1vdmUgYnl0ZXMgYmVsb25naW5nIHRvIHRoZSBjdXJyZW50IGNoYXJhY3RlciBmcm9tIHRoZSBidWZmZXJcbiAgICBidWZmZXIgPSBidWZmZXIuc2xpY2UoYXZhaWxhYmxlLCBidWZmZXIubGVuZ3RoKTtcblxuICAgIC8vIGdldCB0aGUgY2hhcmFjdGVyIHRoYXQgd2FzIHNwbGl0XG4gICAgY2hhclN0ciA9IHRoaXMuY2hhckJ1ZmZlci5zbGljZSgwLCB0aGlzLmNoYXJMZW5ndGgpLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcpO1xuXG4gICAgLy8gQ0VTVS04OiBsZWFkIHN1cnJvZ2F0ZSAoRDgwMC1EQkZGKSBpcyBhbHNvIHRoZSBpbmNvbXBsZXRlIGNoYXJhY3RlclxuICAgIHZhciBjaGFyQ29kZSA9IGNoYXJTdHIuY2hhckNvZGVBdChjaGFyU3RyLmxlbmd0aCAtIDEpO1xuICAgIGlmIChjaGFyQ29kZSA+PSAweEQ4MDAgJiYgY2hhckNvZGUgPD0gMHhEQkZGKSB7XG4gICAgICB0aGlzLmNoYXJMZW5ndGggKz0gdGhpcy5zdXJyb2dhdGVTaXplO1xuICAgICAgY2hhclN0ciA9ICcnO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHRoaXMuY2hhclJlY2VpdmVkID0gdGhpcy5jaGFyTGVuZ3RoID0gMDtcblxuICAgIC8vIGlmIHRoZXJlIGFyZSBubyBtb3JlIGJ5dGVzIGluIHRoaXMgYnVmZmVyLCBqdXN0IGVtaXQgb3VyIGNoYXJcbiAgICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGNoYXJTdHI7XG4gICAgfVxuICAgIGJyZWFrO1xuICB9XG5cbiAgLy8gZGV0ZXJtaW5lIGFuZCBzZXQgY2hhckxlbmd0aCAvIGNoYXJSZWNlaXZlZFxuICB0aGlzLmRldGVjdEluY29tcGxldGVDaGFyKGJ1ZmZlcik7XG5cbiAgdmFyIGVuZCA9IGJ1ZmZlci5sZW5ndGg7XG4gIGlmICh0aGlzLmNoYXJMZW5ndGgpIHtcbiAgICAvLyBidWZmZXIgdGhlIGluY29tcGxldGUgY2hhcmFjdGVyIGJ5dGVzIHdlIGdvdFxuICAgIGJ1ZmZlci5jb3B5KHRoaXMuY2hhckJ1ZmZlciwgMCwgYnVmZmVyLmxlbmd0aCAtIHRoaXMuY2hhclJlY2VpdmVkLCBlbmQpO1xuICAgIGVuZCAtPSB0aGlzLmNoYXJSZWNlaXZlZDtcbiAgfVxuXG4gIGNoYXJTdHIgKz0gYnVmZmVyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsIDAsIGVuZCk7XG5cbiAgdmFyIGVuZCA9IGNoYXJTdHIubGVuZ3RoIC0gMTtcbiAgdmFyIGNoYXJDb2RlID0gY2hhclN0ci5jaGFyQ29kZUF0KGVuZCk7XG4gIC8vIENFU1UtODogbGVhZCBzdXJyb2dhdGUgKEQ4MDAtREJGRikgaXMgYWxzbyB0aGUgaW5jb21wbGV0ZSBjaGFyYWN0ZXJcbiAgaWYgKGNoYXJDb2RlID49IDB4RDgwMCAmJiBjaGFyQ29kZSA8PSAweERCRkYpIHtcbiAgICB2YXIgc2l6ZSA9IHRoaXMuc3Vycm9nYXRlU2l6ZTtcbiAgICB0aGlzLmNoYXJMZW5ndGggKz0gc2l6ZTtcbiAgICB0aGlzLmNoYXJSZWNlaXZlZCArPSBzaXplO1xuICAgIHRoaXMuY2hhckJ1ZmZlci5jb3B5KHRoaXMuY2hhckJ1ZmZlciwgc2l6ZSwgMCwgc2l6ZSk7XG4gICAgYnVmZmVyLmNvcHkodGhpcy5jaGFyQnVmZmVyLCAwLCAwLCBzaXplKTtcbiAgICByZXR1cm4gY2hhclN0ci5zdWJzdHJpbmcoMCwgZW5kKTtcbiAgfVxuXG4gIC8vIG9yIGp1c3QgZW1pdCB0aGUgY2hhclN0clxuICByZXR1cm4gY2hhclN0cjtcbn07XG5cbi8vIGRldGVjdEluY29tcGxldGVDaGFyIGRldGVybWluZXMgaWYgdGhlcmUgaXMgYW4gaW5jb21wbGV0ZSBVVEYtOCBjaGFyYWN0ZXIgYXRcbi8vIHRoZSBlbmQgb2YgdGhlIGdpdmVuIGJ1ZmZlci4gSWYgc28sIGl0IHNldHMgdGhpcy5jaGFyTGVuZ3RoIHRvIHRoZSBieXRlXG4vLyBsZW5ndGggdGhhdCBjaGFyYWN0ZXIsIGFuZCBzZXRzIHRoaXMuY2hhclJlY2VpdmVkIHRvIHRoZSBudW1iZXIgb2YgYnl0ZXNcbi8vIHRoYXQgYXJlIGF2YWlsYWJsZSBmb3IgdGhpcyBjaGFyYWN0ZXIuXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5kZXRlY3RJbmNvbXBsZXRlQ2hhciA9IGZ1bmN0aW9uKGJ1ZmZlcikge1xuICAvLyBkZXRlcm1pbmUgaG93IG1hbnkgYnl0ZXMgd2UgaGF2ZSB0byBjaGVjayBhdCB0aGUgZW5kIG9mIHRoaXMgYnVmZmVyXG4gIHZhciBpID0gKGJ1ZmZlci5sZW5ndGggPj0gMykgPyAzIDogYnVmZmVyLmxlbmd0aDtcblxuICAvLyBGaWd1cmUgb3V0IGlmIG9uZSBvZiB0aGUgbGFzdCBpIGJ5dGVzIG9mIG91ciBidWZmZXIgYW5ub3VuY2VzIGFuXG4gIC8vIGluY29tcGxldGUgY2hhci5cbiAgZm9yICg7IGkgPiAwOyBpLS0pIHtcbiAgICB2YXIgYyA9IGJ1ZmZlcltidWZmZXIubGVuZ3RoIC0gaV07XG5cbiAgICAvLyBTZWUgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9VVEYtOCNEZXNjcmlwdGlvblxuXG4gICAgLy8gMTEwWFhYWFhcbiAgICBpZiAoaSA9PSAxICYmIGMgPj4gNSA9PSAweDA2KSB7XG4gICAgICB0aGlzLmNoYXJMZW5ndGggPSAyO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgLy8gMTExMFhYWFhcbiAgICBpZiAoaSA8PSAyICYmIGMgPj4gNCA9PSAweDBFKSB7XG4gICAgICB0aGlzLmNoYXJMZW5ndGggPSAzO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgLy8gMTExMTBYWFhcbiAgICBpZiAoaSA8PSAzICYmIGMgPj4gMyA9PSAweDFFKSB7XG4gICAgICB0aGlzLmNoYXJMZW5ndGggPSA0O1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHRoaXMuY2hhclJlY2VpdmVkID0gaTtcbn07XG5cblN0cmluZ0RlY29kZXIucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKGJ1ZmZlcikge1xuICB2YXIgcmVzID0gJyc7XG4gIGlmIChidWZmZXIgJiYgYnVmZmVyLmxlbmd0aClcbiAgICByZXMgPSB0aGlzLndyaXRlKGJ1ZmZlcik7XG5cbiAgaWYgKHRoaXMuY2hhclJlY2VpdmVkKSB7XG4gICAgdmFyIGNyID0gdGhpcy5jaGFyUmVjZWl2ZWQ7XG4gICAgdmFyIGJ1ZiA9IHRoaXMuY2hhckJ1ZmZlcjtcbiAgICB2YXIgZW5jID0gdGhpcy5lbmNvZGluZztcbiAgICByZXMgKz0gYnVmLnNsaWNlKDAsIGNyKS50b1N0cmluZyhlbmMpO1xuICB9XG5cbiAgcmV0dXJuIHJlcztcbn07XG5cbmZ1bmN0aW9uIHBhc3NUaHJvdWdoV3JpdGUoYnVmZmVyKSB7XG4gIHJldHVybiBidWZmZXIudG9TdHJpbmcodGhpcy5lbmNvZGluZyk7XG59XG5cbmZ1bmN0aW9uIHV0ZjE2RGV0ZWN0SW5jb21wbGV0ZUNoYXIoYnVmZmVyKSB7XG4gIHRoaXMuY2hhclJlY2VpdmVkID0gYnVmZmVyLmxlbmd0aCAlIDI7XG4gIHRoaXMuY2hhckxlbmd0aCA9IHRoaXMuY2hhclJlY2VpdmVkID8gMiA6IDA7XG59XG5cbmZ1bmN0aW9uIGJhc2U2NERldGVjdEluY29tcGxldGVDaGFyKGJ1ZmZlcikge1xuICB0aGlzLmNoYXJSZWNlaXZlZCA9IGJ1ZmZlci5sZW5ndGggJSAzO1xuICB0aGlzLmNoYXJMZW5ndGggPSB0aGlzLmNoYXJSZWNlaXZlZCA/IDMgOiAwO1xufVxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbnZhciBwdW55Y29kZSA9IHJlcXVpcmUoJ3B1bnljb2RlJyk7XG5cbmV4cG9ydHMucGFyc2UgPSB1cmxQYXJzZTtcbmV4cG9ydHMucmVzb2x2ZSA9IHVybFJlc29sdmU7XG5leHBvcnRzLnJlc29sdmVPYmplY3QgPSB1cmxSZXNvbHZlT2JqZWN0O1xuZXhwb3J0cy5mb3JtYXQgPSB1cmxGb3JtYXQ7XG5cbmV4cG9ydHMuVXJsID0gVXJsO1xuXG5mdW5jdGlvbiBVcmwoKSB7XG4gIHRoaXMucHJvdG9jb2wgPSBudWxsO1xuICB0aGlzLnNsYXNoZXMgPSBudWxsO1xuICB0aGlzLmF1dGggPSBudWxsO1xuICB0aGlzLmhvc3QgPSBudWxsO1xuICB0aGlzLnBvcnQgPSBudWxsO1xuICB0aGlzLmhvc3RuYW1lID0gbnVsbDtcbiAgdGhpcy5oYXNoID0gbnVsbDtcbiAgdGhpcy5zZWFyY2ggPSBudWxsO1xuICB0aGlzLnF1ZXJ5ID0gbnVsbDtcbiAgdGhpcy5wYXRobmFtZSA9IG51bGw7XG4gIHRoaXMucGF0aCA9IG51bGw7XG4gIHRoaXMuaHJlZiA9IG51bGw7XG59XG5cbi8vIFJlZmVyZW5jZTogUkZDIDM5ODYsIFJGQyAxODA4LCBSRkMgMjM5NlxuXG4vLyBkZWZpbmUgdGhlc2UgaGVyZSBzbyBhdCBsZWFzdCB0aGV5IG9ubHkgaGF2ZSB0byBiZVxuLy8gY29tcGlsZWQgb25jZSBvbiB0aGUgZmlyc3QgbW9kdWxlIGxvYWQuXG52YXIgcHJvdG9jb2xQYXR0ZXJuID0gL14oW2EtejAtOS4rLV0rOikvaSxcbiAgICBwb3J0UGF0dGVybiA9IC86WzAtOV0qJC8sXG5cbiAgICAvLyBSRkMgMjM5NjogY2hhcmFjdGVycyByZXNlcnZlZCBmb3IgZGVsaW1pdGluZyBVUkxzLlxuICAgIC8vIFdlIGFjdHVhbGx5IGp1c3QgYXV0by1lc2NhcGUgdGhlc2UuXG4gICAgZGVsaW1zID0gWyc8JywgJz4nLCAnXCInLCAnYCcsICcgJywgJ1xccicsICdcXG4nLCAnXFx0J10sXG5cbiAgICAvLyBSRkMgMjM5NjogY2hhcmFjdGVycyBub3QgYWxsb3dlZCBmb3IgdmFyaW91cyByZWFzb25zLlxuICAgIHVud2lzZSA9IFsneycsICd9JywgJ3wnLCAnXFxcXCcsICdeJywgJ2AnXS5jb25jYXQoZGVsaW1zKSxcblxuICAgIC8vIEFsbG93ZWQgYnkgUkZDcywgYnV0IGNhdXNlIG9mIFhTUyBhdHRhY2tzLiAgQWx3YXlzIGVzY2FwZSB0aGVzZS5cbiAgICBhdXRvRXNjYXBlID0gWydcXCcnXS5jb25jYXQodW53aXNlKSxcbiAgICAvLyBDaGFyYWN0ZXJzIHRoYXQgYXJlIG5ldmVyIGV2ZXIgYWxsb3dlZCBpbiBhIGhvc3RuYW1lLlxuICAgIC8vIE5vdGUgdGhhdCBhbnkgaW52YWxpZCBjaGFycyBhcmUgYWxzbyBoYW5kbGVkLCBidXQgdGhlc2VcbiAgICAvLyBhcmUgdGhlIG9uZXMgdGhhdCBhcmUgKmV4cGVjdGVkKiB0byBiZSBzZWVuLCBzbyB3ZSBmYXN0LXBhdGhcbiAgICAvLyB0aGVtLlxuICAgIG5vbkhvc3RDaGFycyA9IFsnJScsICcvJywgJz8nLCAnOycsICcjJ10uY29uY2F0KGF1dG9Fc2NhcGUpLFxuICAgIGhvc3RFbmRpbmdDaGFycyA9IFsnLycsICc/JywgJyMnXSxcbiAgICBob3N0bmFtZU1heExlbiA9IDI1NSxcbiAgICBob3N0bmFtZVBhcnRQYXR0ZXJuID0gL15bYS16MC05QS1aXy1dezAsNjN9JC8sXG4gICAgaG9zdG5hbWVQYXJ0U3RhcnQgPSAvXihbYS16MC05QS1aXy1dezAsNjN9KSguKikkLyxcbiAgICAvLyBwcm90b2NvbHMgdGhhdCBjYW4gYWxsb3cgXCJ1bnNhZmVcIiBhbmQgXCJ1bndpc2VcIiBjaGFycy5cbiAgICB1bnNhZmVQcm90b2NvbCA9IHtcbiAgICAgICdqYXZhc2NyaXB0JzogdHJ1ZSxcbiAgICAgICdqYXZhc2NyaXB0Oic6IHRydWVcbiAgICB9LFxuICAgIC8vIHByb3RvY29scyB0aGF0IG5ldmVyIGhhdmUgYSBob3N0bmFtZS5cbiAgICBob3N0bGVzc1Byb3RvY29sID0ge1xuICAgICAgJ2phdmFzY3JpcHQnOiB0cnVlLFxuICAgICAgJ2phdmFzY3JpcHQ6JzogdHJ1ZVxuICAgIH0sXG4gICAgLy8gcHJvdG9jb2xzIHRoYXQgYWx3YXlzIGNvbnRhaW4gYSAvLyBiaXQuXG4gICAgc2xhc2hlZFByb3RvY29sID0ge1xuICAgICAgJ2h0dHAnOiB0cnVlLFxuICAgICAgJ2h0dHBzJzogdHJ1ZSxcbiAgICAgICdmdHAnOiB0cnVlLFxuICAgICAgJ2dvcGhlcic6IHRydWUsXG4gICAgICAnZmlsZSc6IHRydWUsXG4gICAgICAnaHR0cDonOiB0cnVlLFxuICAgICAgJ2h0dHBzOic6IHRydWUsXG4gICAgICAnZnRwOic6IHRydWUsXG4gICAgICAnZ29waGVyOic6IHRydWUsXG4gICAgICAnZmlsZTonOiB0cnVlXG4gICAgfSxcbiAgICBxdWVyeXN0cmluZyA9IHJlcXVpcmUoJ3F1ZXJ5c3RyaW5nJyk7XG5cbmZ1bmN0aW9uIHVybFBhcnNlKHVybCwgcGFyc2VRdWVyeVN0cmluZywgc2xhc2hlc0Rlbm90ZUhvc3QpIHtcbiAgaWYgKHVybCAmJiBpc09iamVjdCh1cmwpICYmIHVybCBpbnN0YW5jZW9mIFVybCkgcmV0dXJuIHVybDtcblxuICB2YXIgdSA9IG5ldyBVcmw7XG4gIHUucGFyc2UodXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCk7XG4gIHJldHVybiB1O1xufVxuXG5VcmwucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24odXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCkge1xuICBpZiAoIWlzU3RyaW5nKHVybCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUGFyYW1ldGVyICd1cmwnIG11c3QgYmUgYSBzdHJpbmcsIG5vdCBcIiArIHR5cGVvZiB1cmwpO1xuICB9XG5cbiAgdmFyIHJlc3QgPSB1cmw7XG5cbiAgLy8gdHJpbSBiZWZvcmUgcHJvY2VlZGluZy5cbiAgLy8gVGhpcyBpcyB0byBzdXBwb3J0IHBhcnNlIHN0dWZmIGxpa2UgXCIgIGh0dHA6Ly9mb28uY29tICBcXG5cIlxuICByZXN0ID0gcmVzdC50cmltKCk7XG5cbiAgdmFyIHByb3RvID0gcHJvdG9jb2xQYXR0ZXJuLmV4ZWMocmVzdCk7XG4gIGlmIChwcm90bykge1xuICAgIHByb3RvID0gcHJvdG9bMF07XG4gICAgdmFyIGxvd2VyUHJvdG8gPSBwcm90by50b0xvd2VyQ2FzZSgpO1xuICAgIHRoaXMucHJvdG9jb2wgPSBsb3dlclByb3RvO1xuICAgIHJlc3QgPSByZXN0LnN1YnN0cihwcm90by5sZW5ndGgpO1xuICB9XG5cbiAgLy8gZmlndXJlIG91dCBpZiBpdCdzIGdvdCBhIGhvc3RcbiAgLy8gdXNlckBzZXJ2ZXIgaXMgKmFsd2F5cyogaW50ZXJwcmV0ZWQgYXMgYSBob3N0bmFtZSwgYW5kIHVybFxuICAvLyByZXNvbHV0aW9uIHdpbGwgdHJlYXQgLy9mb28vYmFyIGFzIGhvc3Q9Zm9vLHBhdGg9YmFyIGJlY2F1c2UgdGhhdCdzXG4gIC8vIGhvdyB0aGUgYnJvd3NlciByZXNvbHZlcyByZWxhdGl2ZSBVUkxzLlxuICBpZiAoc2xhc2hlc0Rlbm90ZUhvc3QgfHwgcHJvdG8gfHwgcmVzdC5tYXRjaCgvXlxcL1xcL1teQFxcL10rQFteQFxcL10rLykpIHtcbiAgICB2YXIgc2xhc2hlcyA9IHJlc3Quc3Vic3RyKDAsIDIpID09PSAnLy8nO1xuICAgIGlmIChzbGFzaGVzICYmICEocHJvdG8gJiYgaG9zdGxlc3NQcm90b2NvbFtwcm90b10pKSB7XG4gICAgICByZXN0ID0gcmVzdC5zdWJzdHIoMik7XG4gICAgICB0aGlzLnNsYXNoZXMgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmICghaG9zdGxlc3NQcm90b2NvbFtwcm90b10gJiZcbiAgICAgIChzbGFzaGVzIHx8IChwcm90byAmJiAhc2xhc2hlZFByb3RvY29sW3Byb3RvXSkpKSB7XG5cbiAgICAvLyB0aGVyZSdzIGEgaG9zdG5hbWUuXG4gICAgLy8gdGhlIGZpcnN0IGluc3RhbmNlIG9mIC8sID8sIDssIG9yICMgZW5kcyB0aGUgaG9zdC5cbiAgICAvL1xuICAgIC8vIElmIHRoZXJlIGlzIGFuIEAgaW4gdGhlIGhvc3RuYW1lLCB0aGVuIG5vbi1ob3N0IGNoYXJzICphcmUqIGFsbG93ZWRcbiAgICAvLyB0byB0aGUgbGVmdCBvZiB0aGUgbGFzdCBAIHNpZ24sIHVubGVzcyBzb21lIGhvc3QtZW5kaW5nIGNoYXJhY3RlclxuICAgIC8vIGNvbWVzICpiZWZvcmUqIHRoZSBALXNpZ24uXG4gICAgLy8gVVJMcyBhcmUgb2Jub3hpb3VzLlxuICAgIC8vXG4gICAgLy8gZXg6XG4gICAgLy8gaHR0cDovL2FAYkBjLyA9PiB1c2VyOmFAYiBob3N0OmNcbiAgICAvLyBodHRwOi8vYUBiP0BjID0+IHVzZXI6YSBob3N0OmMgcGF0aDovP0BjXG5cbiAgICAvLyB2MC4xMiBUT0RPKGlzYWFjcyk6IFRoaXMgaXMgbm90IHF1aXRlIGhvdyBDaHJvbWUgZG9lcyB0aGluZ3MuXG4gICAgLy8gUmV2aWV3IG91ciB0ZXN0IGNhc2UgYWdhaW5zdCBicm93c2VycyBtb3JlIGNvbXByZWhlbnNpdmVseS5cblxuICAgIC8vIGZpbmQgdGhlIGZpcnN0IGluc3RhbmNlIG9mIGFueSBob3N0RW5kaW5nQ2hhcnNcbiAgICB2YXIgaG9zdEVuZCA9IC0xO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9zdEVuZGluZ0NoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaGVjID0gcmVzdC5pbmRleE9mKGhvc3RFbmRpbmdDaGFyc1tpXSk7XG4gICAgICBpZiAoaGVjICE9PSAtMSAmJiAoaG9zdEVuZCA9PT0gLTEgfHwgaGVjIDwgaG9zdEVuZCkpXG4gICAgICAgIGhvc3RFbmQgPSBoZWM7XG4gICAgfVxuXG4gICAgLy8gYXQgdGhpcyBwb2ludCwgZWl0aGVyIHdlIGhhdmUgYW4gZXhwbGljaXQgcG9pbnQgd2hlcmUgdGhlXG4gICAgLy8gYXV0aCBwb3J0aW9uIGNhbm5vdCBnbyBwYXN0LCBvciB0aGUgbGFzdCBAIGNoYXIgaXMgdGhlIGRlY2lkZXIuXG4gICAgdmFyIGF1dGgsIGF0U2lnbjtcbiAgICBpZiAoaG9zdEVuZCA9PT0gLTEpIHtcbiAgICAgIC8vIGF0U2lnbiBjYW4gYmUgYW55d2hlcmUuXG4gICAgICBhdFNpZ24gPSByZXN0Lmxhc3RJbmRleE9mKCdAJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGF0U2lnbiBtdXN0IGJlIGluIGF1dGggcG9ydGlvbi5cbiAgICAgIC8vIGh0dHA6Ly9hQGIvY0BkID0+IGhvc3Q6YiBhdXRoOmEgcGF0aDovY0BkXG4gICAgICBhdFNpZ24gPSByZXN0Lmxhc3RJbmRleE9mKCdAJywgaG9zdEVuZCk7XG4gICAgfVxuXG4gICAgLy8gTm93IHdlIGhhdmUgYSBwb3J0aW9uIHdoaWNoIGlzIGRlZmluaXRlbHkgdGhlIGF1dGguXG4gICAgLy8gUHVsbCB0aGF0IG9mZi5cbiAgICBpZiAoYXRTaWduICE9PSAtMSkge1xuICAgICAgYXV0aCA9IHJlc3Quc2xpY2UoMCwgYXRTaWduKTtcbiAgICAgIHJlc3QgPSByZXN0LnNsaWNlKGF0U2lnbiArIDEpO1xuICAgICAgdGhpcy5hdXRoID0gZGVjb2RlVVJJQ29tcG9uZW50KGF1dGgpO1xuICAgIH1cblxuICAgIC8vIHRoZSBob3N0IGlzIHRoZSByZW1haW5pbmcgdG8gdGhlIGxlZnQgb2YgdGhlIGZpcnN0IG5vbi1ob3N0IGNoYXJcbiAgICBob3N0RW5kID0gLTE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub25Ib3N0Q2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBoZWMgPSByZXN0LmluZGV4T2Yobm9uSG9zdENoYXJzW2ldKTtcbiAgICAgIGlmIChoZWMgIT09IC0xICYmIChob3N0RW5kID09PSAtMSB8fCBoZWMgPCBob3N0RW5kKSlcbiAgICAgICAgaG9zdEVuZCA9IGhlYztcbiAgICB9XG4gICAgLy8gaWYgd2Ugc3RpbGwgaGF2ZSBub3QgaGl0IGl0LCB0aGVuIHRoZSBlbnRpcmUgdGhpbmcgaXMgYSBob3N0LlxuICAgIGlmIChob3N0RW5kID09PSAtMSlcbiAgICAgIGhvc3RFbmQgPSByZXN0Lmxlbmd0aDtcblxuICAgIHRoaXMuaG9zdCA9IHJlc3Quc2xpY2UoMCwgaG9zdEVuZCk7XG4gICAgcmVzdCA9IHJlc3Quc2xpY2UoaG9zdEVuZCk7XG5cbiAgICAvLyBwdWxsIG91dCBwb3J0LlxuICAgIHRoaXMucGFyc2VIb3N0KCk7XG5cbiAgICAvLyB3ZSd2ZSBpbmRpY2F0ZWQgdGhhdCB0aGVyZSBpcyBhIGhvc3RuYW1lLFxuICAgIC8vIHNvIGV2ZW4gaWYgaXQncyBlbXB0eSwgaXQgaGFzIHRvIGJlIHByZXNlbnQuXG4gICAgdGhpcy5ob3N0bmFtZSA9IHRoaXMuaG9zdG5hbWUgfHwgJyc7XG5cbiAgICAvLyBpZiBob3N0bmFtZSBiZWdpbnMgd2l0aCBbIGFuZCBlbmRzIHdpdGggXVxuICAgIC8vIGFzc3VtZSB0aGF0IGl0J3MgYW4gSVB2NiBhZGRyZXNzLlxuICAgIHZhciBpcHY2SG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lWzBdID09PSAnWycgJiZcbiAgICAgICAgdGhpcy5ob3N0bmFtZVt0aGlzLmhvc3RuYW1lLmxlbmd0aCAtIDFdID09PSAnXSc7XG5cbiAgICAvLyB2YWxpZGF0ZSBhIGxpdHRsZS5cbiAgICBpZiAoIWlwdjZIb3N0bmFtZSkge1xuICAgICAgdmFyIGhvc3RwYXJ0cyA9IHRoaXMuaG9zdG5hbWUuc3BsaXQoL1xcLi8pO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBob3N0cGFydHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZhciBwYXJ0ID0gaG9zdHBhcnRzW2ldO1xuICAgICAgICBpZiAoIXBhcnQpIGNvbnRpbnVlO1xuICAgICAgICBpZiAoIXBhcnQubWF0Y2goaG9zdG5hbWVQYXJ0UGF0dGVybikpIHtcbiAgICAgICAgICB2YXIgbmV3cGFydCA9ICcnO1xuICAgICAgICAgIGZvciAodmFyIGogPSAwLCBrID0gcGFydC5sZW5ndGg7IGogPCBrOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChwYXJ0LmNoYXJDb2RlQXQoaikgPiAxMjcpIHtcbiAgICAgICAgICAgICAgLy8gd2UgcmVwbGFjZSBub24tQVNDSUkgY2hhciB3aXRoIGEgdGVtcG9yYXJ5IHBsYWNlaG9sZGVyXG4gICAgICAgICAgICAgIC8vIHdlIG5lZWQgdGhpcyB0byBtYWtlIHN1cmUgc2l6ZSBvZiBob3N0bmFtZSBpcyBub3RcbiAgICAgICAgICAgICAgLy8gYnJva2VuIGJ5IHJlcGxhY2luZyBub24tQVNDSUkgYnkgbm90aGluZ1xuICAgICAgICAgICAgICBuZXdwYXJ0ICs9ICd4JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG5ld3BhcnQgKz0gcGFydFtqXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gd2UgdGVzdCBhZ2FpbiB3aXRoIEFTQ0lJIGNoYXIgb25seVxuICAgICAgICAgIGlmICghbmV3cGFydC5tYXRjaChob3N0bmFtZVBhcnRQYXR0ZXJuKSkge1xuICAgICAgICAgICAgdmFyIHZhbGlkUGFydHMgPSBob3N0cGFydHMuc2xpY2UoMCwgaSk7XG4gICAgICAgICAgICB2YXIgbm90SG9zdCA9IGhvc3RwYXJ0cy5zbGljZShpICsgMSk7XG4gICAgICAgICAgICB2YXIgYml0ID0gcGFydC5tYXRjaChob3N0bmFtZVBhcnRTdGFydCk7XG4gICAgICAgICAgICBpZiAoYml0KSB7XG4gICAgICAgICAgICAgIHZhbGlkUGFydHMucHVzaChiaXRbMV0pO1xuICAgICAgICAgICAgICBub3RIb3N0LnVuc2hpZnQoYml0WzJdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChub3RIb3N0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICByZXN0ID0gJy8nICsgbm90SG9zdC5qb2luKCcuJykgKyByZXN0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5ob3N0bmFtZSA9IHZhbGlkUGFydHMuam9pbignLicpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaG9zdG5hbWUubGVuZ3RoID4gaG9zdG5hbWVNYXhMZW4pIHtcbiAgICAgIHRoaXMuaG9zdG5hbWUgPSAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaG9zdG5hbWVzIGFyZSBhbHdheXMgbG93ZXIgY2FzZS5cbiAgICAgIHRoaXMuaG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgaWYgKCFpcHY2SG9zdG5hbWUpIHtcbiAgICAgIC8vIElETkEgU3VwcG9ydDogUmV0dXJucyBhIHB1bnkgY29kZWQgcmVwcmVzZW50YXRpb24gb2YgXCJkb21haW5cIi5cbiAgICAgIC8vIEl0IG9ubHkgY29udmVydHMgdGhlIHBhcnQgb2YgdGhlIGRvbWFpbiBuYW1lIHRoYXRcbiAgICAgIC8vIGhhcyBub24gQVNDSUkgY2hhcmFjdGVycy4gSS5lLiBpdCBkb3NlbnQgbWF0dGVyIGlmXG4gICAgICAvLyB5b3UgY2FsbCBpdCB3aXRoIGEgZG9tYWluIHRoYXQgYWxyZWFkeSBpcyBpbiBBU0NJSS5cbiAgICAgIHZhciBkb21haW5BcnJheSA9IHRoaXMuaG9zdG5hbWUuc3BsaXQoJy4nKTtcbiAgICAgIHZhciBuZXdPdXQgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZG9tYWluQXJyYXkubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIHMgPSBkb21haW5BcnJheVtpXTtcbiAgICAgICAgbmV3T3V0LnB1c2gocy5tYXRjaCgvW15BLVphLXowLTlfLV0vKSA/XG4gICAgICAgICAgICAneG4tLScgKyBwdW55Y29kZS5lbmNvZGUocykgOiBzKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaG9zdG5hbWUgPSBuZXdPdXQuam9pbignLicpO1xuICAgIH1cblxuICAgIHZhciBwID0gdGhpcy5wb3J0ID8gJzonICsgdGhpcy5wb3J0IDogJyc7XG4gICAgdmFyIGggPSB0aGlzLmhvc3RuYW1lIHx8ICcnO1xuICAgIHRoaXMuaG9zdCA9IGggKyBwO1xuICAgIHRoaXMuaHJlZiArPSB0aGlzLmhvc3Q7XG5cbiAgICAvLyBzdHJpcCBbIGFuZCBdIGZyb20gdGhlIGhvc3RuYW1lXG4gICAgLy8gdGhlIGhvc3QgZmllbGQgc3RpbGwgcmV0YWlucyB0aGVtLCB0aG91Z2hcbiAgICBpZiAoaXB2Nkhvc3RuYW1lKSB7XG4gICAgICB0aGlzLmhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZS5zdWJzdHIoMSwgdGhpcy5ob3N0bmFtZS5sZW5ndGggLSAyKTtcbiAgICAgIGlmIChyZXN0WzBdICE9PSAnLycpIHtcbiAgICAgICAgcmVzdCA9ICcvJyArIHJlc3Q7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gbm93IHJlc3QgaXMgc2V0IHRvIHRoZSBwb3N0LWhvc3Qgc3R1ZmYuXG4gIC8vIGNob3Agb2ZmIGFueSBkZWxpbSBjaGFycy5cbiAgaWYgKCF1bnNhZmVQcm90b2NvbFtsb3dlclByb3RvXSkge1xuXG4gICAgLy8gRmlyc3QsIG1ha2UgMTAwJSBzdXJlIHRoYXQgYW55IFwiYXV0b0VzY2FwZVwiIGNoYXJzIGdldFxuICAgIC8vIGVzY2FwZWQsIGV2ZW4gaWYgZW5jb2RlVVJJQ29tcG9uZW50IGRvZXNuJ3QgdGhpbmsgdGhleVxuICAgIC8vIG5lZWQgdG8gYmUuXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhdXRvRXNjYXBlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGFlID0gYXV0b0VzY2FwZVtpXTtcbiAgICAgIHZhciBlc2MgPSBlbmNvZGVVUklDb21wb25lbnQoYWUpO1xuICAgICAgaWYgKGVzYyA9PT0gYWUpIHtcbiAgICAgICAgZXNjID0gZXNjYXBlKGFlKTtcbiAgICAgIH1cbiAgICAgIHJlc3QgPSByZXN0LnNwbGl0KGFlKS5qb2luKGVzYyk7XG4gICAgfVxuICB9XG5cblxuICAvLyBjaG9wIG9mZiBmcm9tIHRoZSB0YWlsIGZpcnN0LlxuICB2YXIgaGFzaCA9IHJlc3QuaW5kZXhPZignIycpO1xuICBpZiAoaGFzaCAhPT0gLTEpIHtcbiAgICAvLyBnb3QgYSBmcmFnbWVudCBzdHJpbmcuXG4gICAgdGhpcy5oYXNoID0gcmVzdC5zdWJzdHIoaGFzaCk7XG4gICAgcmVzdCA9IHJlc3Quc2xpY2UoMCwgaGFzaCk7XG4gIH1cbiAgdmFyIHFtID0gcmVzdC5pbmRleE9mKCc/Jyk7XG4gIGlmIChxbSAhPT0gLTEpIHtcbiAgICB0aGlzLnNlYXJjaCA9IHJlc3Quc3Vic3RyKHFtKTtcbiAgICB0aGlzLnF1ZXJ5ID0gcmVzdC5zdWJzdHIocW0gKyAxKTtcbiAgICBpZiAocGFyc2VRdWVyeVN0cmluZykge1xuICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5c3RyaW5nLnBhcnNlKHRoaXMucXVlcnkpO1xuICAgIH1cbiAgICByZXN0ID0gcmVzdC5zbGljZSgwLCBxbSk7XG4gIH0gZWxzZSBpZiAocGFyc2VRdWVyeVN0cmluZykge1xuICAgIC8vIG5vIHF1ZXJ5IHN0cmluZywgYnV0IHBhcnNlUXVlcnlTdHJpbmcgc3RpbGwgcmVxdWVzdGVkXG4gICAgdGhpcy5zZWFyY2ggPSAnJztcbiAgICB0aGlzLnF1ZXJ5ID0ge307XG4gIH1cbiAgaWYgKHJlc3QpIHRoaXMucGF0aG5hbWUgPSByZXN0O1xuICBpZiAoc2xhc2hlZFByb3RvY29sW2xvd2VyUHJvdG9dICYmXG4gICAgICB0aGlzLmhvc3RuYW1lICYmICF0aGlzLnBhdGhuYW1lKSB7XG4gICAgdGhpcy5wYXRobmFtZSA9ICcvJztcbiAgfVxuXG4gIC8vdG8gc3VwcG9ydCBodHRwLnJlcXVlc3RcbiAgaWYgKHRoaXMucGF0aG5hbWUgfHwgdGhpcy5zZWFyY2gpIHtcbiAgICB2YXIgcCA9IHRoaXMucGF0aG5hbWUgfHwgJyc7XG4gICAgdmFyIHMgPSB0aGlzLnNlYXJjaCB8fCAnJztcbiAgICB0aGlzLnBhdGggPSBwICsgcztcbiAgfVxuXG4gIC8vIGZpbmFsbHksIHJlY29uc3RydWN0IHRoZSBocmVmIGJhc2VkIG9uIHdoYXQgaGFzIGJlZW4gdmFsaWRhdGVkLlxuICB0aGlzLmhyZWYgPSB0aGlzLmZvcm1hdCgpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIGZvcm1hdCBhIHBhcnNlZCBvYmplY3QgaW50byBhIHVybCBzdHJpbmdcbmZ1bmN0aW9uIHVybEZvcm1hdChvYmopIHtcbiAgLy8gZW5zdXJlIGl0J3MgYW4gb2JqZWN0LCBhbmQgbm90IGEgc3RyaW5nIHVybC5cbiAgLy8gSWYgaXQncyBhbiBvYmosIHRoaXMgaXMgYSBuby1vcC5cbiAgLy8gdGhpcyB3YXksIHlvdSBjYW4gY2FsbCB1cmxfZm9ybWF0KCkgb24gc3RyaW5nc1xuICAvLyB0byBjbGVhbiB1cCBwb3RlbnRpYWxseSB3b25reSB1cmxzLlxuICBpZiAoaXNTdHJpbmcob2JqKSkgb2JqID0gdXJsUGFyc2Uob2JqKTtcbiAgaWYgKCEob2JqIGluc3RhbmNlb2YgVXJsKSkgcmV0dXJuIFVybC5wcm90b3R5cGUuZm9ybWF0LmNhbGwob2JqKTtcbiAgcmV0dXJuIG9iai5mb3JtYXQoKTtcbn1cblxuVXJsLnByb3RvdHlwZS5mb3JtYXQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGF1dGggPSB0aGlzLmF1dGggfHwgJyc7XG4gIGlmIChhdXRoKSB7XG4gICAgYXV0aCA9IGVuY29kZVVSSUNvbXBvbmVudChhdXRoKTtcbiAgICBhdXRoID0gYXV0aC5yZXBsYWNlKC8lM0EvaSwgJzonKTtcbiAgICBhdXRoICs9ICdAJztcbiAgfVxuXG4gIHZhciBwcm90b2NvbCA9IHRoaXMucHJvdG9jb2wgfHwgJycsXG4gICAgICBwYXRobmFtZSA9IHRoaXMucGF0aG5hbWUgfHwgJycsXG4gICAgICBoYXNoID0gdGhpcy5oYXNoIHx8ICcnLFxuICAgICAgaG9zdCA9IGZhbHNlLFxuICAgICAgcXVlcnkgPSAnJztcblxuICBpZiAodGhpcy5ob3N0KSB7XG4gICAgaG9zdCA9IGF1dGggKyB0aGlzLmhvc3Q7XG4gIH0gZWxzZSBpZiAodGhpcy5ob3N0bmFtZSkge1xuICAgIGhvc3QgPSBhdXRoICsgKHRoaXMuaG9zdG5hbWUuaW5kZXhPZignOicpID09PSAtMSA/XG4gICAgICAgIHRoaXMuaG9zdG5hbWUgOlxuICAgICAgICAnWycgKyB0aGlzLmhvc3RuYW1lICsgJ10nKTtcbiAgICBpZiAodGhpcy5wb3J0KSB7XG4gICAgICBob3N0ICs9ICc6JyArIHRoaXMucG9ydDtcbiAgICB9XG4gIH1cblxuICBpZiAodGhpcy5xdWVyeSAmJlxuICAgICAgaXNPYmplY3QodGhpcy5xdWVyeSkgJiZcbiAgICAgIE9iamVjdC5rZXlzKHRoaXMucXVlcnkpLmxlbmd0aCkge1xuICAgIHF1ZXJ5ID0gcXVlcnlzdHJpbmcuc3RyaW5naWZ5KHRoaXMucXVlcnkpO1xuICB9XG5cbiAgdmFyIHNlYXJjaCA9IHRoaXMuc2VhcmNoIHx8IChxdWVyeSAmJiAoJz8nICsgcXVlcnkpKSB8fCAnJztcblxuICBpZiAocHJvdG9jb2wgJiYgcHJvdG9jb2wuc3Vic3RyKC0xKSAhPT0gJzonKSBwcm90b2NvbCArPSAnOic7XG5cbiAgLy8gb25seSB0aGUgc2xhc2hlZFByb3RvY29scyBnZXQgdGhlIC8vLiAgTm90IG1haWx0bzosIHhtcHA6LCBldGMuXG4gIC8vIHVubGVzcyB0aGV5IGhhZCB0aGVtIHRvIGJlZ2luIHdpdGguXG4gIGlmICh0aGlzLnNsYXNoZXMgfHxcbiAgICAgICghcHJvdG9jb2wgfHwgc2xhc2hlZFByb3RvY29sW3Byb3RvY29sXSkgJiYgaG9zdCAhPT0gZmFsc2UpIHtcbiAgICBob3N0ID0gJy8vJyArIChob3N0IHx8ICcnKTtcbiAgICBpZiAocGF0aG5hbWUgJiYgcGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHBhdGhuYW1lID0gJy8nICsgcGF0aG5hbWU7XG4gIH0gZWxzZSBpZiAoIWhvc3QpIHtcbiAgICBob3N0ID0gJyc7XG4gIH1cblxuICBpZiAoaGFzaCAmJiBoYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBoYXNoID0gJyMnICsgaGFzaDtcbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2guY2hhckF0KDApICE9PSAnPycpIHNlYXJjaCA9ICc/JyArIHNlYXJjaDtcblxuICBwYXRobmFtZSA9IHBhdGhuYW1lLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KG1hdGNoKTtcbiAgfSk7XG4gIHNlYXJjaCA9IHNlYXJjaC5yZXBsYWNlKCcjJywgJyUyMycpO1xuXG4gIHJldHVybiBwcm90b2NvbCArIGhvc3QgKyBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG59O1xuXG5mdW5jdGlvbiB1cmxSZXNvbHZlKHNvdXJjZSwgcmVsYXRpdmUpIHtcbiAgcmV0dXJuIHVybFBhcnNlKHNvdXJjZSwgZmFsc2UsIHRydWUpLnJlc29sdmUocmVsYXRpdmUpO1xufVxuXG5VcmwucHJvdG90eXBlLnJlc29sdmUgPSBmdW5jdGlvbihyZWxhdGl2ZSkge1xuICByZXR1cm4gdGhpcy5yZXNvbHZlT2JqZWN0KHVybFBhcnNlKHJlbGF0aXZlLCBmYWxzZSwgdHJ1ZSkpLmZvcm1hdCgpO1xufTtcblxuZnVuY3Rpb24gdXJsUmVzb2x2ZU9iamVjdChzb3VyY2UsIHJlbGF0aXZlKSB7XG4gIGlmICghc291cmNlKSByZXR1cm4gcmVsYXRpdmU7XG4gIHJldHVybiB1cmxQYXJzZShzb3VyY2UsIGZhbHNlLCB0cnVlKS5yZXNvbHZlT2JqZWN0KHJlbGF0aXZlKTtcbn1cblxuVXJsLnByb3RvdHlwZS5yZXNvbHZlT2JqZWN0ID0gZnVuY3Rpb24ocmVsYXRpdmUpIHtcbiAgaWYgKGlzU3RyaW5nKHJlbGF0aXZlKSkge1xuICAgIHZhciByZWwgPSBuZXcgVXJsKCk7XG4gICAgcmVsLnBhcnNlKHJlbGF0aXZlLCBmYWxzZSwgdHJ1ZSk7XG4gICAgcmVsYXRpdmUgPSByZWw7XG4gIH1cblxuICB2YXIgcmVzdWx0ID0gbmV3IFVybCgpO1xuICBPYmplY3Qua2V5cyh0aGlzKS5mb3JFYWNoKGZ1bmN0aW9uKGspIHtcbiAgICByZXN1bHRba10gPSB0aGlzW2tdO1xuICB9LCB0aGlzKTtcblxuICAvLyBoYXNoIGlzIGFsd2F5cyBvdmVycmlkZGVuLCBubyBtYXR0ZXIgd2hhdC5cbiAgLy8gZXZlbiBocmVmPVwiXCIgd2lsbCByZW1vdmUgaXQuXG4gIHJlc3VsdC5oYXNoID0gcmVsYXRpdmUuaGFzaDtcblxuICAvLyBpZiB0aGUgcmVsYXRpdmUgdXJsIGlzIGVtcHR5LCB0aGVuIHRoZXJlJ3Mgbm90aGluZyBsZWZ0IHRvIGRvIGhlcmUuXG4gIGlmIChyZWxhdGl2ZS5ocmVmID09PSAnJykge1xuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvLyBocmVmcyBsaWtlIC8vZm9vL2JhciBhbHdheXMgY3V0IHRvIHRoZSBwcm90b2NvbC5cbiAgaWYgKHJlbGF0aXZlLnNsYXNoZXMgJiYgIXJlbGF0aXZlLnByb3RvY29sKSB7XG4gICAgLy8gdGFrZSBldmVyeXRoaW5nIGV4Y2VwdCB0aGUgcHJvdG9jb2wgZnJvbSByZWxhdGl2ZVxuICAgIE9iamVjdC5rZXlzKHJlbGF0aXZlKS5mb3JFYWNoKGZ1bmN0aW9uKGspIHtcbiAgICAgIGlmIChrICE9PSAncHJvdG9jb2wnKVxuICAgICAgICByZXN1bHRba10gPSByZWxhdGl2ZVtrXTtcbiAgICB9KTtcblxuICAgIC8vdXJsUGFyc2UgYXBwZW5kcyB0cmFpbGluZyAvIHRvIHVybHMgbGlrZSBodHRwOi8vd3d3LmV4YW1wbGUuY29tXG4gICAgaWYgKHNsYXNoZWRQcm90b2NvbFtyZXN1bHQucHJvdG9jb2xdICYmXG4gICAgICAgIHJlc3VsdC5ob3N0bmFtZSAmJiAhcmVzdWx0LnBhdGhuYW1lKSB7XG4gICAgICByZXN1bHQucGF0aCA9IHJlc3VsdC5wYXRobmFtZSA9ICcvJztcbiAgICB9XG5cbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgaWYgKHJlbGF0aXZlLnByb3RvY29sICYmIHJlbGF0aXZlLnByb3RvY29sICE9PSByZXN1bHQucHJvdG9jb2wpIHtcbiAgICAvLyBpZiBpdCdzIGEga25vd24gdXJsIHByb3RvY29sLCB0aGVuIGNoYW5naW5nXG4gICAgLy8gdGhlIHByb3RvY29sIGRvZXMgd2VpcmQgdGhpbmdzXG4gICAgLy8gZmlyc3QsIGlmIGl0J3Mgbm90IGZpbGU6LCB0aGVuIHdlIE1VU1QgaGF2ZSBhIGhvc3QsXG4gICAgLy8gYW5kIGlmIHRoZXJlIHdhcyBhIHBhdGhcbiAgICAvLyB0byBiZWdpbiB3aXRoLCB0aGVuIHdlIE1VU1QgaGF2ZSBhIHBhdGguXG4gICAgLy8gaWYgaXQgaXMgZmlsZTosIHRoZW4gdGhlIGhvc3QgaXMgZHJvcHBlZCxcbiAgICAvLyBiZWNhdXNlIHRoYXQncyBrbm93biB0byBiZSBob3N0bGVzcy5cbiAgICAvLyBhbnl0aGluZyBlbHNlIGlzIGFzc3VtZWQgdG8gYmUgYWJzb2x1dGUuXG4gICAgaWYgKCFzbGFzaGVkUHJvdG9jb2xbcmVsYXRpdmUucHJvdG9jb2xdKSB7XG4gICAgICBPYmplY3Qua2V5cyhyZWxhdGl2ZSkuZm9yRWFjaChmdW5jdGlvbihrKSB7XG4gICAgICAgIHJlc3VsdFtrXSA9IHJlbGF0aXZlW2tdO1xuICAgICAgfSk7XG4gICAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcmVzdWx0LnByb3RvY29sID0gcmVsYXRpdmUucHJvdG9jb2w7XG4gICAgaWYgKCFyZWxhdGl2ZS5ob3N0ICYmICFob3N0bGVzc1Byb3RvY29sW3JlbGF0aXZlLnByb3RvY29sXSkge1xuICAgICAgdmFyIHJlbFBhdGggPSAocmVsYXRpdmUucGF0aG5hbWUgfHwgJycpLnNwbGl0KCcvJyk7XG4gICAgICB3aGlsZSAocmVsUGF0aC5sZW5ndGggJiYgIShyZWxhdGl2ZS5ob3N0ID0gcmVsUGF0aC5zaGlmdCgpKSk7XG4gICAgICBpZiAoIXJlbGF0aXZlLmhvc3QpIHJlbGF0aXZlLmhvc3QgPSAnJztcbiAgICAgIGlmICghcmVsYXRpdmUuaG9zdG5hbWUpIHJlbGF0aXZlLmhvc3RuYW1lID0gJyc7XG4gICAgICBpZiAocmVsUGF0aFswXSAhPT0gJycpIHJlbFBhdGgudW5zaGlmdCgnJyk7XG4gICAgICBpZiAocmVsUGF0aC5sZW5ndGggPCAyKSByZWxQYXRoLnVuc2hpZnQoJycpO1xuICAgICAgcmVzdWx0LnBhdGhuYW1lID0gcmVsUGF0aC5qb2luKCcvJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5wYXRobmFtZSA9IHJlbGF0aXZlLnBhdGhuYW1lO1xuICAgIH1cbiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoO1xuICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICAgIHJlc3VsdC5ob3N0ID0gcmVsYXRpdmUuaG9zdCB8fCAnJztcbiAgICByZXN1bHQuYXV0aCA9IHJlbGF0aXZlLmF1dGg7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gcmVsYXRpdmUuaG9zdG5hbWUgfHwgcmVsYXRpdmUuaG9zdDtcbiAgICByZXN1bHQucG9ydCA9IHJlbGF0aXZlLnBvcnQ7XG4gICAgLy8gdG8gc3VwcG9ydCBodHRwLnJlcXVlc3RcbiAgICBpZiAocmVzdWx0LnBhdGhuYW1lIHx8IHJlc3VsdC5zZWFyY2gpIHtcbiAgICAgIHZhciBwID0gcmVzdWx0LnBhdGhuYW1lIHx8ICcnO1xuICAgICAgdmFyIHMgPSByZXN1bHQuc2VhcmNoIHx8ICcnO1xuICAgICAgcmVzdWx0LnBhdGggPSBwICsgcztcbiAgICB9XG4gICAgcmVzdWx0LnNsYXNoZXMgPSByZXN1bHQuc2xhc2hlcyB8fCByZWxhdGl2ZS5zbGFzaGVzO1xuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICB2YXIgaXNTb3VyY2VBYnMgPSAocmVzdWx0LnBhdGhuYW1lICYmIHJlc3VsdC5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJyksXG4gICAgICBpc1JlbEFicyA9IChcbiAgICAgICAgICByZWxhdGl2ZS5ob3N0IHx8XG4gICAgICAgICAgcmVsYXRpdmUucGF0aG5hbWUgJiYgcmVsYXRpdmUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLydcbiAgICAgICksXG4gICAgICBtdXN0RW5kQWJzID0gKGlzUmVsQWJzIHx8IGlzU291cmNlQWJzIHx8XG4gICAgICAgICAgICAgICAgICAgIChyZXN1bHQuaG9zdCAmJiByZWxhdGl2ZS5wYXRobmFtZSkpLFxuICAgICAgcmVtb3ZlQWxsRG90cyA9IG11c3RFbmRBYnMsXG4gICAgICBzcmNQYXRoID0gcmVzdWx0LnBhdGhuYW1lICYmIHJlc3VsdC5wYXRobmFtZS5zcGxpdCgnLycpIHx8IFtdLFxuICAgICAgcmVsUGF0aCA9IHJlbGF0aXZlLnBhdGhuYW1lICYmIHJlbGF0aXZlLnBhdGhuYW1lLnNwbGl0KCcvJykgfHwgW10sXG4gICAgICBwc3ljaG90aWMgPSByZXN1bHQucHJvdG9jb2wgJiYgIXNsYXNoZWRQcm90b2NvbFtyZXN1bHQucHJvdG9jb2xdO1xuXG4gIC8vIGlmIHRoZSB1cmwgaXMgYSBub24tc2xhc2hlZCB1cmwsIHRoZW4gcmVsYXRpdmVcbiAgLy8gbGlua3MgbGlrZSAuLi8uLiBzaG91bGQgYmUgYWJsZVxuICAvLyB0byBjcmF3bCB1cCB0byB0aGUgaG9zdG5hbWUsIGFzIHdlbGwuICBUaGlzIGlzIHN0cmFuZ2UuXG4gIC8vIHJlc3VsdC5wcm90b2NvbCBoYXMgYWxyZWFkeSBiZWVuIHNldCBieSBub3cuXG4gIC8vIExhdGVyIG9uLCBwdXQgdGhlIGZpcnN0IHBhdGggcGFydCBpbnRvIHRoZSBob3N0IGZpZWxkLlxuICBpZiAocHN5Y2hvdGljKSB7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gJyc7XG4gICAgcmVzdWx0LnBvcnQgPSBudWxsO1xuICAgIGlmIChyZXN1bHQuaG9zdCkge1xuICAgICAgaWYgKHNyY1BhdGhbMF0gPT09ICcnKSBzcmNQYXRoWzBdID0gcmVzdWx0Lmhvc3Q7XG4gICAgICBlbHNlIHNyY1BhdGgudW5zaGlmdChyZXN1bHQuaG9zdCk7XG4gICAgfVxuICAgIHJlc3VsdC5ob3N0ID0gJyc7XG4gICAgaWYgKHJlbGF0aXZlLnByb3RvY29sKSB7XG4gICAgICByZWxhdGl2ZS5ob3N0bmFtZSA9IG51bGw7XG4gICAgICByZWxhdGl2ZS5wb3J0ID0gbnVsbDtcbiAgICAgIGlmIChyZWxhdGl2ZS5ob3N0KSB7XG4gICAgICAgIGlmIChyZWxQYXRoWzBdID09PSAnJykgcmVsUGF0aFswXSA9IHJlbGF0aXZlLmhvc3Q7XG4gICAgICAgIGVsc2UgcmVsUGF0aC51bnNoaWZ0KHJlbGF0aXZlLmhvc3QpO1xuICAgICAgfVxuICAgICAgcmVsYXRpdmUuaG9zdCA9IG51bGw7XG4gICAgfVxuICAgIG11c3RFbmRBYnMgPSBtdXN0RW5kQWJzICYmIChyZWxQYXRoWzBdID09PSAnJyB8fCBzcmNQYXRoWzBdID09PSAnJyk7XG4gIH1cblxuICBpZiAoaXNSZWxBYnMpIHtcbiAgICAvLyBpdCdzIGFic29sdXRlLlxuICAgIHJlc3VsdC5ob3N0ID0gKHJlbGF0aXZlLmhvc3QgfHwgcmVsYXRpdmUuaG9zdCA9PT0gJycpID9cbiAgICAgICAgICAgICAgICAgIHJlbGF0aXZlLmhvc3QgOiByZXN1bHQuaG9zdDtcbiAgICByZXN1bHQuaG9zdG5hbWUgPSAocmVsYXRpdmUuaG9zdG5hbWUgfHwgcmVsYXRpdmUuaG9zdG5hbWUgPT09ICcnKSA/XG4gICAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmUuaG9zdG5hbWUgOiByZXN1bHQuaG9zdG5hbWU7XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICBzcmNQYXRoID0gcmVsUGF0aDtcbiAgICAvLyBmYWxsIHRocm91Z2ggdG8gdGhlIGRvdC1oYW5kbGluZyBiZWxvdy5cbiAgfSBlbHNlIGlmIChyZWxQYXRoLmxlbmd0aCkge1xuICAgIC8vIGl0J3MgcmVsYXRpdmVcbiAgICAvLyB0aHJvdyBhd2F5IHRoZSBleGlzdGluZyBmaWxlLCBhbmQgdGFrZSB0aGUgbmV3IHBhdGggaW5zdGVhZC5cbiAgICBpZiAoIXNyY1BhdGgpIHNyY1BhdGggPSBbXTtcbiAgICBzcmNQYXRoLnBvcCgpO1xuICAgIHNyY1BhdGggPSBzcmNQYXRoLmNvbmNhdChyZWxQYXRoKTtcbiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoO1xuICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICB9IGVsc2UgaWYgKCFpc051bGxPclVuZGVmaW5lZChyZWxhdGl2ZS5zZWFyY2gpKSB7XG4gICAgLy8ganVzdCBwdWxsIG91dCB0aGUgc2VhcmNoLlxuICAgIC8vIGxpa2UgaHJlZj0nP2ZvbycuXG4gICAgLy8gUHV0IHRoaXMgYWZ0ZXIgdGhlIG90aGVyIHR3byBjYXNlcyBiZWNhdXNlIGl0IHNpbXBsaWZpZXMgdGhlIGJvb2xlYW5zXG4gICAgaWYgKHBzeWNob3RpYykge1xuICAgICAgcmVzdWx0Lmhvc3RuYW1lID0gcmVzdWx0Lmhvc3QgPSBzcmNQYXRoLnNoaWZ0KCk7XG4gICAgICAvL29jY2F0aW9uYWx5IHRoZSBhdXRoIGNhbiBnZXQgc3R1Y2sgb25seSBpbiBob3N0XG4gICAgICAvL3RoaXMgZXNwZWNpYWx5IGhhcHBlbnMgaW4gY2FzZXMgbGlrZVxuICAgICAgLy91cmwucmVzb2x2ZU9iamVjdCgnbWFpbHRvOmxvY2FsMUBkb21haW4xJywgJ2xvY2FsMkBkb21haW4yJylcbiAgICAgIHZhciBhdXRoSW5Ib3N0ID0gcmVzdWx0Lmhvc3QgJiYgcmVzdWx0Lmhvc3QuaW5kZXhPZignQCcpID4gMCA/XG4gICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5ob3N0LnNwbGl0KCdAJykgOiBmYWxzZTtcbiAgICAgIGlmIChhdXRoSW5Ib3N0KSB7XG4gICAgICAgIHJlc3VsdC5hdXRoID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgICAgICByZXN1bHQuaG9zdCA9IHJlc3VsdC5ob3N0bmFtZSA9IGF1dGhJbkhvc3Quc2hpZnQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICAvL3RvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gICAgaWYgKCFpc051bGwocmVzdWx0LnBhdGhuYW1lKSB8fCAhaXNOdWxsKHJlc3VsdC5zZWFyY2gpKSB7XG4gICAgICByZXN1bHQucGF0aCA9IChyZXN1bHQucGF0aG5hbWUgPyByZXN1bHQucGF0aG5hbWUgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAocmVzdWx0LnNlYXJjaCA/IHJlc3VsdC5zZWFyY2ggOiAnJyk7XG4gICAgfVxuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBpZiAoIXNyY1BhdGgubGVuZ3RoKSB7XG4gICAgLy8gbm8gcGF0aCBhdCBhbGwuICBlYXN5LlxuICAgIC8vIHdlJ3ZlIGFscmVhZHkgaGFuZGxlZCB0aGUgb3RoZXIgc3R1ZmYgYWJvdmUuXG4gICAgcmVzdWx0LnBhdGhuYW1lID0gbnVsbDtcbiAgICAvL3RvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gICAgaWYgKHJlc3VsdC5zZWFyY2gpIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gJy8nICsgcmVzdWx0LnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LnBhdGggPSBudWxsO1xuICAgIH1cbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLy8gaWYgYSB1cmwgRU5EcyBpbiAuIG9yIC4uLCB0aGVuIGl0IG11c3QgZ2V0IGEgdHJhaWxpbmcgc2xhc2guXG4gIC8vIGhvd2V2ZXIsIGlmIGl0IGVuZHMgaW4gYW55dGhpbmcgZWxzZSBub24tc2xhc2h5LFxuICAvLyB0aGVuIGl0IG11c3QgTk9UIGdldCBhIHRyYWlsaW5nIHNsYXNoLlxuICB2YXIgbGFzdCA9IHNyY1BhdGguc2xpY2UoLTEpWzBdO1xuICB2YXIgaGFzVHJhaWxpbmdTbGFzaCA9IChcbiAgICAgIChyZXN1bHQuaG9zdCB8fCByZWxhdGl2ZS5ob3N0KSAmJiAobGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicpIHx8XG4gICAgICBsYXN0ID09PSAnJyk7XG5cbiAgLy8gc3RyaXAgc2luZ2xlIGRvdHMsIHJlc29sdmUgZG91YmxlIGRvdHMgdG8gcGFyZW50IGRpclxuICAvLyBpZiB0aGUgcGF0aCB0cmllcyB0byBnbyBhYm92ZSB0aGUgcm9vdCwgYHVwYCBlbmRzIHVwID4gMFxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gc3JjUGF0aC5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgbGFzdCA9IHNyY1BhdGhbaV07XG4gICAgaWYgKGxhc3QgPT0gJy4nKSB7XG4gICAgICBzcmNQYXRoLnNwbGljZShpLCAxKTtcbiAgICB9IGVsc2UgaWYgKGxhc3QgPT09ICcuLicpIHtcbiAgICAgIHNyY1BhdGguc3BsaWNlKGksIDEpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcmNQYXRoLnNwbGljZShpLCAxKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlIHBhdGggaXMgYWxsb3dlZCB0byBnbyBhYm92ZSB0aGUgcm9vdCwgcmVzdG9yZSBsZWFkaW5nIC4uc1xuICBpZiAoIW11c3RFbmRBYnMgJiYgIXJlbW92ZUFsbERvdHMpIHtcbiAgICBmb3IgKDsgdXAtLTsgdXApIHtcbiAgICAgIHNyY1BhdGgudW5zaGlmdCgnLi4nKTtcbiAgICB9XG4gIH1cblxuICBpZiAobXVzdEVuZEFicyAmJiBzcmNQYXRoWzBdICE9PSAnJyAmJlxuICAgICAgKCFzcmNQYXRoWzBdIHx8IHNyY1BhdGhbMF0uY2hhckF0KDApICE9PSAnLycpKSB7XG4gICAgc3JjUGF0aC51bnNoaWZ0KCcnKTtcbiAgfVxuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIChzcmNQYXRoLmpvaW4oJy8nKS5zdWJzdHIoLTEpICE9PSAnLycpKSB7XG4gICAgc3JjUGF0aC5wdXNoKCcnKTtcbiAgfVxuXG4gIHZhciBpc0Fic29sdXRlID0gc3JjUGF0aFswXSA9PT0gJycgfHxcbiAgICAgIChzcmNQYXRoWzBdICYmIHNyY1BhdGhbMF0uY2hhckF0KDApID09PSAnLycpO1xuXG4gIC8vIHB1dCB0aGUgaG9zdCBiYWNrXG4gIGlmIChwc3ljaG90aWMpIHtcbiAgICByZXN1bHQuaG9zdG5hbWUgPSByZXN1bHQuaG9zdCA9IGlzQWJzb2x1dGUgPyAnJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmNQYXRoLmxlbmd0aCA/IHNyY1BhdGguc2hpZnQoKSA6ICcnO1xuICAgIC8vb2NjYXRpb25hbHkgdGhlIGF1dGggY2FuIGdldCBzdHVjayBvbmx5IGluIGhvc3RcbiAgICAvL3RoaXMgZXNwZWNpYWx5IGhhcHBlbnMgaW4gY2FzZXMgbGlrZVxuICAgIC8vdXJsLnJlc29sdmVPYmplY3QoJ21haWx0bzpsb2NhbDFAZG9tYWluMScsICdsb2NhbDJAZG9tYWluMicpXG4gICAgdmFyIGF1dGhJbkhvc3QgPSByZXN1bHQuaG9zdCAmJiByZXN1bHQuaG9zdC5pbmRleE9mKCdAJykgPiAwID9cbiAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5ob3N0LnNwbGl0KCdAJykgOiBmYWxzZTtcbiAgICBpZiAoYXV0aEluSG9zdCkge1xuICAgICAgcmVzdWx0LmF1dGggPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7XG4gICAgICByZXN1bHQuaG9zdCA9IHJlc3VsdC5ob3N0bmFtZSA9IGF1dGhJbkhvc3Quc2hpZnQoKTtcbiAgICB9XG4gIH1cblxuICBtdXN0RW5kQWJzID0gbXVzdEVuZEFicyB8fCAocmVzdWx0Lmhvc3QgJiYgc3JjUGF0aC5sZW5ndGgpO1xuXG4gIGlmIChtdXN0RW5kQWJzICYmICFpc0Fic29sdXRlKSB7XG4gICAgc3JjUGF0aC51bnNoaWZ0KCcnKTtcbiAgfVxuXG4gIGlmICghc3JjUGF0aC5sZW5ndGgpIHtcbiAgICByZXN1bHQucGF0aG5hbWUgPSBudWxsO1xuICAgIHJlc3VsdC5wYXRoID0gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQucGF0aG5hbWUgPSBzcmNQYXRoLmpvaW4oJy8nKTtcbiAgfVxuXG4gIC8vdG8gc3VwcG9ydCByZXF1ZXN0Lmh0dHBcbiAgaWYgKCFpc051bGwocmVzdWx0LnBhdGhuYW1lKSB8fCAhaXNOdWxsKHJlc3VsdC5zZWFyY2gpKSB7XG4gICAgcmVzdWx0LnBhdGggPSAocmVzdWx0LnBhdGhuYW1lID8gcmVzdWx0LnBhdGhuYW1lIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyZXN1bHQuc2VhcmNoID8gcmVzdWx0LnNlYXJjaCA6ICcnKTtcbiAgfVxuICByZXN1bHQuYXV0aCA9IHJlbGF0aXZlLmF1dGggfHwgcmVzdWx0LmF1dGg7XG4gIHJlc3VsdC5zbGFzaGVzID0gcmVzdWx0LnNsYXNoZXMgfHwgcmVsYXRpdmUuc2xhc2hlcztcbiAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5VcmwucHJvdG90eXBlLnBhcnNlSG9zdCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaG9zdCA9IHRoaXMuaG9zdDtcbiAgdmFyIHBvcnQgPSBwb3J0UGF0dGVybi5leGVjKGhvc3QpO1xuICBpZiAocG9ydCkge1xuICAgIHBvcnQgPSBwb3J0WzBdO1xuICAgIGlmIChwb3J0ICE9PSAnOicpIHtcbiAgICAgIHRoaXMucG9ydCA9IHBvcnQuc3Vic3RyKDEpO1xuICAgIH1cbiAgICBob3N0ID0gaG9zdC5zdWJzdHIoMCwgaG9zdC5sZW5ndGggLSBwb3J0Lmxlbmd0aCk7XG4gIH1cbiAgaWYgKGhvc3QpIHRoaXMuaG9zdG5hbWUgPSBob3N0O1xufTtcblxuZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSBcInN0cmluZ1wiO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiAgYXJnID09IG51bGw7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQnVmZmVyKGFyZykge1xuICByZXR1cm4gYXJnICYmIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnXG4gICAgJiYgdHlwZW9mIGFyZy5jb3B5ID09PSAnZnVuY3Rpb24nXG4gICAgJiYgdHlwZW9mIGFyZy5maWxsID09PSAnZnVuY3Rpb24nXG4gICAgJiYgdHlwZW9mIGFyZy5yZWFkVUludDggPT09ICdmdW5jdGlvbic7XG59IiwiKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCl7XG4vLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxudmFyIGZvcm1hdFJlZ0V4cCA9IC8lW3NkaiVdL2c7XG5leHBvcnRzLmZvcm1hdCA9IGZ1bmN0aW9uKGYpIHtcbiAgaWYgKCFpc1N0cmluZyhmKSkge1xuICAgIHZhciBvYmplY3RzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIG9iamVjdHMucHVzaChpbnNwZWN0KGFyZ3VtZW50c1tpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0cy5qb2luKCcgJyk7XG4gIH1cblxuICB2YXIgaSA9IDE7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIHZhciBzdHIgPSBTdHJpbmcoZikucmVwbGFjZShmb3JtYXRSZWdFeHAsIGZ1bmN0aW9uKHgpIHtcbiAgICBpZiAoeCA9PT0gJyUlJykgcmV0dXJuICclJztcbiAgICBpZiAoaSA+PSBsZW4pIHJldHVybiB4O1xuICAgIHN3aXRjaCAoeCkge1xuICAgICAgY2FzZSAnJXMnOiByZXR1cm4gU3RyaW5nKGFyZ3NbaSsrXSk7XG4gICAgICBjYXNlICclZCc6IHJldHVybiBOdW1iZXIoYXJnc1tpKytdKTtcbiAgICAgIGNhc2UgJyVqJzpcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnc1tpKytdKTtcbiAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgIHJldHVybiAnW0NpcmN1bGFyXSc7XG4gICAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB4O1xuICAgIH1cbiAgfSk7XG4gIGZvciAodmFyIHggPSBhcmdzW2ldOyBpIDwgbGVuOyB4ID0gYXJnc1srK2ldKSB7XG4gICAgaWYgKGlzTnVsbCh4KSB8fCAhaXNPYmplY3QoeCkpIHtcbiAgICAgIHN0ciArPSAnICcgKyB4O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgKz0gJyAnICsgaW5zcGVjdCh4KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0cjtcbn07XG5cblxuLy8gTWFyayB0aGF0IGEgbWV0aG9kIHNob3VsZCBub3QgYmUgdXNlZC5cbi8vIFJldHVybnMgYSBtb2RpZmllZCBmdW5jdGlvbiB3aGljaCB3YXJucyBvbmNlIGJ5IGRlZmF1bHQuXG4vLyBJZiAtLW5vLWRlcHJlY2F0aW9uIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxuZXhwb3J0cy5kZXByZWNhdGUgPSBmdW5jdGlvbihmbiwgbXNnKSB7XG4gIC8vIEFsbG93IGZvciBkZXByZWNhdGluZyB0aGluZ3MgaW4gdGhlIHByb2Nlc3Mgb2Ygc3RhcnRpbmcgdXAuXG4gIGlmIChpc1VuZGVmaW5lZChnbG9iYWwucHJvY2VzcykpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZXhwb3J0cy5kZXByZWNhdGUoZm4sIG1zZykuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKHByb2Nlc3Mubm9EZXByZWNhdGlvbiA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiBmbjtcbiAgfVxuXG4gIHZhciB3YXJuZWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gZGVwcmVjYXRlZCgpIHtcbiAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgaWYgKHByb2Nlc3MudGhyb3dEZXByZWNhdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy50cmFjZURlcHJlY2F0aW9uKSB7XG4gICAgICAgIGNvbnNvbGUudHJhY2UobXNnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobXNnKTtcbiAgICAgIH1cbiAgICAgIHdhcm5lZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgcmV0dXJuIGRlcHJlY2F0ZWQ7XG59O1xuXG5cbnZhciBkZWJ1Z3MgPSB7fTtcbnZhciBkZWJ1Z0Vudmlyb247XG5leHBvcnRzLmRlYnVnbG9nID0gZnVuY3Rpb24oc2V0KSB7XG4gIGlmIChpc1VuZGVmaW5lZChkZWJ1Z0Vudmlyb24pKVxuICAgIGRlYnVnRW52aXJvbiA9IHByb2Nlc3MuZW52Lk5PREVfREVCVUcgfHwgJyc7XG4gIHNldCA9IHNldC50b1VwcGVyQ2FzZSgpO1xuICBpZiAoIWRlYnVnc1tzZXRdKSB7XG4gICAgaWYgKG5ldyBSZWdFeHAoJ1xcXFxiJyArIHNldCArICdcXFxcYicsICdpJykudGVzdChkZWJ1Z0Vudmlyb24pKSB7XG4gICAgICB2YXIgcGlkID0gcHJvY2Vzcy5waWQ7XG4gICAgICBkZWJ1Z3Nbc2V0XSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbXNnID0gZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cywgYXJndW1lbnRzKTtcbiAgICAgICAgY29uc29sZS5lcnJvcignJXMgJWQ6ICVzJywgc2V0LCBwaWQsIG1zZyk7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWJ1Z3Nbc2V0XSA9IGZ1bmN0aW9uKCkge307XG4gICAgfVxuICB9XG4gIHJldHVybiBkZWJ1Z3Nbc2V0XTtcbn07XG5cblxuLyoqXG4gKiBFY2hvcyB0aGUgdmFsdWUgb2YgYSB2YWx1ZS4gVHJ5cyB0byBwcmludCB0aGUgdmFsdWUgb3V0XG4gKiBpbiB0aGUgYmVzdCB3YXkgcG9zc2libGUgZ2l2ZW4gdGhlIGRpZmZlcmVudCB0eXBlcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gcHJpbnQgb3V0LlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uYWwgb3B0aW9ucyBvYmplY3QgdGhhdCBhbHRlcnMgdGhlIG91dHB1dC5cbiAqL1xuLyogbGVnYWN5OiBvYmosIHNob3dIaWRkZW4sIGRlcHRoLCBjb2xvcnMqL1xuZnVuY3Rpb24gaW5zcGVjdChvYmosIG9wdHMpIHtcbiAgLy8gZGVmYXVsdCBvcHRpb25zXG4gIHZhciBjdHggPSB7XG4gICAgc2VlbjogW10sXG4gICAgc3R5bGl6ZTogc3R5bGl6ZU5vQ29sb3JcbiAgfTtcbiAgLy8gbGVnYWN5Li4uXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDMpIGN0eC5kZXB0aCA9IGFyZ3VtZW50c1syXTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gNCkgY3R4LmNvbG9ycyA9IGFyZ3VtZW50c1szXTtcbiAgaWYgKGlzQm9vbGVhbihvcHRzKSkge1xuICAgIC8vIGxlZ2FjeS4uLlxuICAgIGN0eC5zaG93SGlkZGVuID0gb3B0cztcbiAgfSBlbHNlIGlmIChvcHRzKSB7XG4gICAgLy8gZ290IGFuIFwib3B0aW9uc1wiIG9iamVjdFxuICAgIGV4cG9ydHMuX2V4dGVuZChjdHgsIG9wdHMpO1xuICB9XG4gIC8vIHNldCBkZWZhdWx0IG9wdGlvbnNcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5zaG93SGlkZGVuKSkgY3R4LnNob3dIaWRkZW4gPSBmYWxzZTtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5kZXB0aCkpIGN0eC5kZXB0aCA9IDI7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY29sb3JzKSkgY3R4LmNvbG9ycyA9IGZhbHNlO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmN1c3RvbUluc3BlY3QpKSBjdHguY3VzdG9tSW5zcGVjdCA9IHRydWU7XG4gIGlmIChjdHguY29sb3JzKSBjdHguc3R5bGl6ZSA9IHN0eWxpemVXaXRoQ29sb3I7XG4gIHJldHVybiBmb3JtYXRWYWx1ZShjdHgsIG9iaiwgY3R4LmRlcHRoKTtcbn1cbmV4cG9ydHMuaW5zcGVjdCA9IGluc3BlY3Q7XG5cblxuLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9BTlNJX2VzY2FwZV9jb2RlI2dyYXBoaWNzXG5pbnNwZWN0LmNvbG9ycyA9IHtcbiAgJ2JvbGQnIDogWzEsIDIyXSxcbiAgJ2l0YWxpYycgOiBbMywgMjNdLFxuICAndW5kZXJsaW5lJyA6IFs0LCAyNF0sXG4gICdpbnZlcnNlJyA6IFs3LCAyN10sXG4gICd3aGl0ZScgOiBbMzcsIDM5XSxcbiAgJ2dyZXknIDogWzkwLCAzOV0sXG4gICdibGFjaycgOiBbMzAsIDM5XSxcbiAgJ2JsdWUnIDogWzM0LCAzOV0sXG4gICdjeWFuJyA6IFszNiwgMzldLFxuICAnZ3JlZW4nIDogWzMyLCAzOV0sXG4gICdtYWdlbnRhJyA6IFszNSwgMzldLFxuICAncmVkJyA6IFszMSwgMzldLFxuICAneWVsbG93JyA6IFszMywgMzldXG59O1xuXG4vLyBEb24ndCB1c2UgJ2JsdWUnIG5vdCB2aXNpYmxlIG9uIGNtZC5leGVcbmluc3BlY3Quc3R5bGVzID0ge1xuICAnc3BlY2lhbCc6ICdjeWFuJyxcbiAgJ251bWJlcic6ICd5ZWxsb3cnLFxuICAnYm9vbGVhbic6ICd5ZWxsb3cnLFxuICAndW5kZWZpbmVkJzogJ2dyZXknLFxuICAnbnVsbCc6ICdib2xkJyxcbiAgJ3N0cmluZyc6ICdncmVlbicsXG4gICdkYXRlJzogJ21hZ2VudGEnLFxuICAvLyBcIm5hbWVcIjogaW50ZW50aW9uYWxseSBub3Qgc3R5bGluZ1xuICAncmVnZXhwJzogJ3JlZCdcbn07XG5cblxuZnVuY3Rpb24gc3R5bGl6ZVdpdGhDb2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICB2YXIgc3R5bGUgPSBpbnNwZWN0LnN0eWxlc1tzdHlsZVR5cGVdO1xuXG4gIGlmIChzdHlsZSkge1xuICAgIHJldHVybiAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzBdICsgJ20nICsgc3RyICtcbiAgICAgICAgICAgJ1xcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVsxXSArICdtJztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG59XG5cblxuZnVuY3Rpb24gc3R5bGl6ZU5vQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHtcbiAgcmV0dXJuIHN0cjtcbn1cblxuXG5mdW5jdGlvbiBhcnJheVRvSGFzaChhcnJheSkge1xuICB2YXIgaGFzaCA9IHt9O1xuXG4gIGFycmF5LmZvckVhY2goZnVuY3Rpb24odmFsLCBpZHgpIHtcbiAgICBoYXNoW3ZhbF0gPSB0cnVlO1xuICB9KTtcblxuICByZXR1cm4gaGFzaDtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRWYWx1ZShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMpIHtcbiAgLy8gUHJvdmlkZSBhIGhvb2sgZm9yIHVzZXItc3BlY2lmaWVkIGluc3BlY3QgZnVuY3Rpb25zLlxuICAvLyBDaGVjayB0aGF0IHZhbHVlIGlzIGFuIG9iamVjdCB3aXRoIGFuIGluc3BlY3QgZnVuY3Rpb24gb24gaXRcbiAgaWYgKGN0eC5jdXN0b21JbnNwZWN0ICYmXG4gICAgICB2YWx1ZSAmJlxuICAgICAgaXNGdW5jdGlvbih2YWx1ZS5pbnNwZWN0KSAmJlxuICAgICAgLy8gRmlsdGVyIG91dCB0aGUgdXRpbCBtb2R1bGUsIGl0J3MgaW5zcGVjdCBmdW5jdGlvbiBpcyBzcGVjaWFsXG4gICAgICB2YWx1ZS5pbnNwZWN0ICE9PSBleHBvcnRzLmluc3BlY3QgJiZcbiAgICAgIC8vIEFsc28gZmlsdGVyIG91dCBhbnkgcHJvdG90eXBlIG9iamVjdHMgdXNpbmcgdGhlIGNpcmN1bGFyIGNoZWNrLlxuICAgICAgISh2YWx1ZS5jb25zdHJ1Y3RvciAmJiB2YWx1ZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgPT09IHZhbHVlKSkge1xuICAgIHZhciByZXQgPSB2YWx1ZS5pbnNwZWN0KHJlY3Vyc2VUaW1lcywgY3R4KTtcbiAgICBpZiAoIWlzU3RyaW5nKHJldCkpIHtcbiAgICAgIHJldCA9IGZvcm1hdFZhbHVlKGN0eCwgcmV0LCByZWN1cnNlVGltZXMpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLy8gUHJpbWl0aXZlIHR5cGVzIGNhbm5vdCBoYXZlIHByb3BlcnRpZXNcbiAgdmFyIHByaW1pdGl2ZSA9IGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKTtcbiAgaWYgKHByaW1pdGl2ZSkge1xuICAgIHJldHVybiBwcmltaXRpdmU7XG4gIH1cblxuICAvLyBMb29rIHVwIHRoZSBrZXlzIG9mIHRoZSBvYmplY3QuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpO1xuICB2YXIgdmlzaWJsZUtleXMgPSBhcnJheVRvSGFzaChrZXlzKTtcblxuICBpZiAoY3R4LnNob3dIaWRkZW4pIHtcbiAgICBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmFsdWUpO1xuICB9XG5cbiAgLy8gSUUgZG9lc24ndCBtYWtlIGVycm9yIGZpZWxkcyBub24tZW51bWVyYWJsZVxuICAvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvZHd3NTJzYnQodj12cy45NCkuYXNweFxuICBpZiAoaXNFcnJvcih2YWx1ZSlcbiAgICAgICYmIChrZXlzLmluZGV4T2YoJ21lc3NhZ2UnKSA+PSAwIHx8IGtleXMuaW5kZXhPZignZGVzY3JpcHRpb24nKSA+PSAwKSkge1xuICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gIH1cblxuICAvLyBTb21lIHR5cGUgb2Ygb2JqZWN0IHdpdGhvdXQgcHJvcGVydGllcyBjYW4gYmUgc2hvcnRjdXR0ZWQuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgdmFyIG5hbWUgPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJztcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW0Z1bmN0aW9uJyArIG5hbWUgKyAnXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfVxuICAgIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdkYXRlJyk7XG4gICAgfVxuICAgIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgYmFzZSA9ICcnLCBhcnJheSA9IGZhbHNlLCBicmFjZXMgPSBbJ3snLCAnfSddO1xuXG4gIC8vIE1ha2UgQXJyYXkgc2F5IHRoYXQgdGhleSBhcmUgQXJyYXlcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgYXJyYXkgPSB0cnVlO1xuICAgIGJyYWNlcyA9IFsnWycsICddJ107XG4gIH1cblxuICAvLyBNYWtlIGZ1bmN0aW9ucyBzYXkgdGhhdCB0aGV5IGFyZSBmdW5jdGlvbnNcbiAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgdmFyIG4gPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJztcbiAgICBiYXNlID0gJyBbRnVuY3Rpb24nICsgbiArICddJztcbiAgfVxuXG4gIC8vIE1ha2UgUmVnRXhwcyBzYXkgdGhhdCB0aGV5IGFyZSBSZWdFeHBzXG4gIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgfVxuXG4gIC8vIE1ha2UgZGF0ZXMgd2l0aCBwcm9wZXJ0aWVzIGZpcnN0IHNheSB0aGUgZGF0ZVxuICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBEYXRlLnByb3RvdHlwZS50b1VUQ1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgfVxuXG4gIC8vIE1ha2UgZXJyb3Igd2l0aCBtZXNzYWdlIGZpcnN0IHNheSB0aGUgZXJyb3JcbiAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCAmJiAoIWFycmF5IHx8IHZhbHVlLmxlbmd0aCA9PSAwKSkge1xuICAgIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgYnJhY2VzWzFdO1xuICB9XG5cbiAgaWYgKHJlY3Vyc2VUaW1lcyA8IDApIHtcbiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tPYmplY3RdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cblxuICBjdHguc2Vlbi5wdXNoKHZhbHVlKTtcblxuICB2YXIgb3V0cHV0O1xuICBpZiAoYXJyYXkpIHtcbiAgICBvdXRwdXQgPSBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKTtcbiAgfSBlbHNlIHtcbiAgICBvdXRwdXQgPSBrZXlzLm1hcChmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KTtcbiAgICB9KTtcbiAgfVxuXG4gIGN0eC5zZWVuLnBvcCgpO1xuXG4gIHJldHVybiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcyk7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJ3VuZGVmaW5lZCcsICd1bmRlZmluZWQnKTtcbiAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xuICAgIHZhciBzaW1wbGUgPSAnXFwnJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKS5yZXBsYWNlKC9eXCJ8XCIkL2csICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKSArICdcXCcnO1xuICAgIHJldHVybiBjdHguc3R5bGl6ZShzaW1wbGUsICdzdHJpbmcnKTtcbiAgfVxuICBpZiAoaXNOdW1iZXIodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnbnVtYmVyJyk7XG4gIGlmIChpc0Jvb2xlYW4odmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnYm9vbGVhbicpO1xuICAvLyBGb3Igc29tZSByZWFzb24gdHlwZW9mIG51bGwgaXMgXCJvYmplY3RcIiwgc28gc3BlY2lhbCBjYXNlIGhlcmUuXG4gIGlmIChpc051bGwodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnbnVsbCcsICdudWxsJyk7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0RXJyb3IodmFsdWUpIHtcbiAgcmV0dXJuICdbJyArIEVycm9yLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSArICddJztcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKSB7XG4gIHZhciBvdXRwdXQgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkodmFsdWUsIFN0cmluZyhpKSkpIHtcbiAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsXG4gICAgICAgICAgU3RyaW5nKGkpLCB0cnVlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHB1dC5wdXNoKCcnKTtcbiAgICB9XG4gIH1cbiAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgIGlmICgha2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBrZXksIHRydWUpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpIHtcbiAgdmFyIG5hbWUsIHN0ciwgZGVzYztcbiAgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodmFsdWUsIGtleSkgfHwgeyB2YWx1ZTogdmFsdWVba2V5XSB9O1xuICBpZiAoZGVzYy5nZXQpIHtcbiAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyL1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG4gIGlmICghaGFzT3duUHJvcGVydHkodmlzaWJsZUtleXMsIGtleSkpIHtcbiAgICBuYW1lID0gJ1snICsga2V5ICsgJ10nO1xuICB9XG4gIGlmICghc3RyKSB7XG4gICAgaWYgKGN0eC5zZWVuLmluZGV4T2YoZGVzYy52YWx1ZSkgPCAwKSB7XG4gICAgICBpZiAoaXNOdWxsKHJlY3Vyc2VUaW1lcykpIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgcmVjdXJzZVRpbWVzIC0gMSk7XG4gICAgICB9XG4gICAgICBpZiAoc3RyLmluZGV4T2YoJ1xcbicpID4gLTEpIHtcbiAgICAgICAgaWYgKGFycmF5KSB7XG4gICAgICAgICAgc3RyID0gc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpLnN1YnN0cigyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHIgPSAnXFxuJyArIHN0ci5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tDaXJjdWxhcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuICBpZiAoaXNVbmRlZmluZWQobmFtZSkpIHtcbiAgICBpZiAoYXJyYXkgJiYga2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgbmFtZSA9IEpTT04uc3RyaW5naWZ5KCcnICsga2V5KTtcbiAgICBpZiAobmFtZS5tYXRjaCgvXlwiKFthLXpBLVpfXVthLXpBLVpfMC05XSopXCIkLykpIHtcbiAgICAgIG5hbWUgPSBuYW1lLnN1YnN0cigxLCBuYW1lLmxlbmd0aCAtIDIpO1xuICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICduYW1lJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8oXlwifFwiJCkvZywgXCInXCIpO1xuICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICdzdHJpbmcnKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmFtZSArICc6ICcgKyBzdHI7XG59XG5cblxuZnVuY3Rpb24gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpIHtcbiAgdmFyIG51bUxpbmVzRXN0ID0gMDtcbiAgdmFyIGxlbmd0aCA9IG91dHB1dC5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgY3VyKSB7XG4gICAgbnVtTGluZXNFc3QrKztcbiAgICBpZiAoY3VyLmluZGV4T2YoJ1xcbicpID49IDApIG51bUxpbmVzRXN0Kys7XG4gICAgcmV0dXJuIHByZXYgKyBjdXIucmVwbGFjZSgvXFx1MDAxYlxcW1xcZFxcZD9tL2csICcnKS5sZW5ndGggKyAxO1xuICB9LCAwKTtcblxuICBpZiAobGVuZ3RoID4gNjApIHtcbiAgICByZXR1cm4gYnJhY2VzWzBdICtcbiAgICAgICAgICAgKGJhc2UgPT09ICcnID8gJycgOiBiYXNlICsgJ1xcbiAnKSArXG4gICAgICAgICAgICcgJyArXG4gICAgICAgICAgIG91dHB1dC5qb2luKCcsXFxuICAnKSArXG4gICAgICAgICAgICcgJyArXG4gICAgICAgICAgIGJyYWNlc1sxXTtcbiAgfVxuXG4gIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgJyAnICsgb3V0cHV0LmpvaW4oJywgJykgKyAnICcgKyBicmFjZXNbMV07XG59XG5cblxuLy8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgXG4vLyBiZWNhdXNlIGl0IGlzIGZyYWdpbGUgYW5kIGNhbiBiZSBlYXNpbHkgZmFrZWQgd2l0aCBgT2JqZWN0LmNyZWF0ZSgpYC5cbmZ1bmN0aW9uIGlzQXJyYXkoYXIpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXIpO1xufVxuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcblxuZnVuY3Rpb24gaXNCb29sZWFuKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nO1xufVxuZXhwb3J0cy5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG5cbmZ1bmN0aW9uIGlzTnVsbChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsID0gaXNOdWxsO1xuXG5mdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZCA9IGlzTnVsbE9yVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuZXhwb3J0cy5pc051bWJlciA9IGlzTnVtYmVyO1xuXG5mdW5jdGlvbiBpc1N0cmluZyhhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnO1xufVxuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuXG5mdW5jdGlvbiBpc1N5bWJvbChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnO1xufVxuZXhwb3J0cy5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuZXhwb3J0cy5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc1JlZ0V4cChyZSkge1xuICByZXR1cm4gaXNPYmplY3QocmUpICYmIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG5leHBvcnRzLmlzUmVnRXhwID0gaXNSZWdFeHA7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuXG5mdW5jdGlvbiBpc0RhdGUoZCkge1xuICByZXR1cm4gaXNPYmplY3QoZCkgJiYgb2JqZWN0VG9TdHJpbmcoZCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cbmV4cG9ydHMuaXNEYXRlID0gaXNEYXRlO1xuXG5mdW5jdGlvbiBpc0Vycm9yKGUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KGUpICYmXG4gICAgICAob2JqZWN0VG9TdHJpbmcoZSkgPT09ICdbb2JqZWN0IEVycm9yXScgfHwgZSBpbnN0YW5jZW9mIEVycm9yKTtcbn1cbmV4cG9ydHMuaXNFcnJvciA9IGlzRXJyb3I7XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcblxuZnVuY3Rpb24gaXNQcmltaXRpdmUoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGwgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3ltYm9sJyB8fCAgLy8gRVM2IHN5bWJvbFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCc7XG59XG5leHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7XG5cbmV4cG9ydHMuaXNCdWZmZXIgPSByZXF1aXJlKCcuL3N1cHBvcnQvaXNCdWZmZXInKTtcblxuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pO1xufVxuXG5cbmZ1bmN0aW9uIHBhZChuKSB7XG4gIHJldHVybiBuIDwgMTAgPyAnMCcgKyBuLnRvU3RyaW5nKDEwKSA6IG4udG9TdHJpbmcoMTApO1xufVxuXG5cbnZhciBtb250aHMgPSBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJyxcbiAgICAgICAgICAgICAgJ09jdCcsICdOb3YnLCAnRGVjJ107XG5cbi8vIDI2IEZlYiAxNjoxOTozNFxuZnVuY3Rpb24gdGltZXN0YW1wKCkge1xuICB2YXIgZCA9IG5ldyBEYXRlKCk7XG4gIHZhciB0aW1lID0gW3BhZChkLmdldEhvdXJzKCkpLFxuICAgICAgICAgICAgICBwYWQoZC5nZXRNaW51dGVzKCkpLFxuICAgICAgICAgICAgICBwYWQoZC5nZXRTZWNvbmRzKCkpXS5qb2luKCc6Jyk7XG4gIHJldHVybiBbZC5nZXREYXRlKCksIG1vbnRoc1tkLmdldE1vbnRoKCldLCB0aW1lXS5qb2luKCcgJyk7XG59XG5cblxuLy8gbG9nIGlzIGp1c3QgYSB0aGluIHdyYXBwZXIgdG8gY29uc29sZS5sb2cgdGhhdCBwcmVwZW5kcyBhIHRpbWVzdGFtcFxuZXhwb3J0cy5sb2cgPSBmdW5jdGlvbigpIHtcbiAgY29uc29sZS5sb2coJyVzIC0gJXMnLCB0aW1lc3RhbXAoKSwgZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cywgYXJndW1lbnRzKSk7XG59O1xuXG5cbi8qKlxuICogSW5oZXJpdCB0aGUgcHJvdG90eXBlIG1ldGhvZHMgZnJvbSBvbmUgY29uc3RydWN0b3IgaW50byBhbm90aGVyLlxuICpcbiAqIFRoZSBGdW5jdGlvbi5wcm90b3R5cGUuaW5oZXJpdHMgZnJvbSBsYW5nLmpzIHJld3JpdHRlbiBhcyBhIHN0YW5kYWxvbmVcbiAqIGZ1bmN0aW9uIChub3Qgb24gRnVuY3Rpb24ucHJvdG90eXBlKS4gTk9URTogSWYgdGhpcyBmaWxlIGlzIHRvIGJlIGxvYWRlZFxuICogZHVyaW5nIGJvb3RzdHJhcHBpbmcgdGhpcyBmdW5jdGlvbiBuZWVkcyB0byBiZSByZXdyaXR0ZW4gdXNpbmcgc29tZSBuYXRpdmVcbiAqIGZ1bmN0aW9ucyBhcyBwcm90b3R5cGUgc2V0dXAgdXNpbmcgbm9ybWFsIEphdmFTY3JpcHQgZG9lcyBub3Qgd29yayBhc1xuICogZXhwZWN0ZWQgZHVyaW5nIGJvb3RzdHJhcHBpbmcgKHNlZSBtaXJyb3IuanMgaW4gcjExNDkwMykuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbiB3aGljaCBuZWVkcyB0byBpbmhlcml0IHRoZVxuICogICAgIHByb3RvdHlwZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHN1cGVyQ3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbiB0byBpbmhlcml0IHByb3RvdHlwZSBmcm9tLlxuICovXG5leHBvcnRzLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxuZXhwb3J0cy5fZXh0ZW5kID0gZnVuY3Rpb24ob3JpZ2luLCBhZGQpIHtcbiAgLy8gRG9uJ3QgZG8gYW55dGhpbmcgaWYgYWRkIGlzbid0IGFuIG9iamVjdFxuICBpZiAoIWFkZCB8fCAhaXNPYmplY3QoYWRkKSkgcmV0dXJuIG9yaWdpbjtcblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGFkZCk7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICBvcmlnaW5ba2V5c1tpXV0gPSBhZGRba2V5c1tpXV07XG4gIH1cbiAgcmV0dXJuIG9yaWdpbjtcbn07XG5cbmZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwgcHJvcCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG59XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpLHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5YVdaNUwyNXZaR1ZmYlc5a2RXeGxjeTkxZEdsc0wzVjBhV3d1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWp0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaTh2SUVOdmNIbHlhV2RvZENCS2IzbGxiblFzSUVsdVl5NGdZVzVrSUc5MGFHVnlJRTV2WkdVZ1kyOXVkSEpwWW5WMGIzSnpMbHh1THk5Y2JpOHZJRkJsY20xcGMzTnBiMjRnYVhNZ2FHVnlaV0o1SUdkeVlXNTBaV1FzSUdaeVpXVWdiMllnWTJoaGNtZGxMQ0IwYnlCaGJua2djR1Z5YzI5dUlHOWlkR0ZwYm1sdVp5QmhYRzR2THlCamIzQjVJRzltSUhSb2FYTWdjMjltZEhkaGNtVWdZVzVrSUdGemMyOWphV0YwWldRZ1pHOWpkVzFsYm5SaGRHbHZiaUJtYVd4bGN5QW9kR2hsWEc0dkx5QmNJbE52Wm5SM1lYSmxYQ0lwTENCMGJ5QmtaV0ZzSUdsdUlIUm9aU0JUYjJaMGQyRnlaU0IzYVhSb2IzVjBJSEpsYzNSeWFXTjBhVzl1TENCcGJtTnNkV1JwYm1kY2JpOHZJSGRwZEdodmRYUWdiR2x0YVhSaGRHbHZiaUIwYUdVZ2NtbG5hSFJ6SUhSdklIVnpaU3dnWTI5d2VTd2diVzlrYVdaNUxDQnRaWEpuWlN3Z2NIVmliR2x6YUN4Y2JpOHZJR1JwYzNSeWFXSjFkR1VzSUhOMVlteHBZMlZ1YzJVc0lHRnVaQzl2Y2lCelpXeHNJR052Y0dsbGN5QnZaaUIwYUdVZ1UyOW1kSGRoY21Vc0lHRnVaQ0IwYnlCd1pYSnRhWFJjYmk4dklIQmxjbk52Ym5NZ2RHOGdkMmh2YlNCMGFHVWdVMjltZEhkaGNtVWdhWE1nWm5WeWJtbHphR1ZrSUhSdklHUnZJSE52TENCemRXSnFaV04wSUhSdklIUm9aVnh1THk4Z1ptOXNiRzkzYVc1bklHTnZibVJwZEdsdmJuTTZYRzR2TDF4dUx5OGdWR2hsSUdGaWIzWmxJR052Y0hseWFXZG9kQ0J1YjNScFkyVWdZVzVrSUhSb2FYTWdjR1Z5YldsemMybHZiaUJ1YjNScFkyVWdjMmhoYkd3Z1ltVWdhVzVqYkhWa1pXUmNiaTh2SUdsdUlHRnNiQ0JqYjNCcFpYTWdiM0lnYzNWaWMzUmhiblJwWVd3Z2NHOXlkR2x2Ym5NZ2IyWWdkR2hsSUZOdlpuUjNZWEpsTGx4dUx5OWNiaTh2SUZSSVJTQlRUMFpVVjBGU1JTQkpVeUJRVWs5V1NVUkZSQ0JjSWtGVElFbFRYQ0lzSUZkSlZFaFBWVlFnVjBGU1VrRk9WRmtnVDBZZ1FVNVpJRXRKVGtRc0lFVllVRkpGVTFOY2JpOHZJRTlTSUVsTlVFeEpSVVFzSUVsT1EweFZSRWxPUnlCQ1ZWUWdUazlVSUV4SlRVbFVSVVFnVkU4Z1ZFaEZJRmRCVWxKQlRsUkpSVk1nVDBaY2JpOHZJRTFGVWtOSVFVNVVRVUpKVEVsVVdTd2dSa2xVVGtWVFV5QkdUMUlnUVNCUVFWSlVTVU5WVEVGU0lGQlZVbEJQVTBVZ1FVNUVJRTVQVGtsT1JsSkpUa2RGVFVWT1ZDNGdTVTVjYmk4dklFNVBJRVZXUlU1VUlGTklRVXhNSUZSSVJTQkJWVlJJVDFKVElFOVNJRU5QVUZsU1NVZElWQ0JJVDB4RVJWSlRJRUpGSUV4SlFVSk1SU0JHVDFJZ1FVNVpJRU5NUVVsTkxGeHVMeThnUkVGTlFVZEZVeUJQVWlCUFZFaEZVaUJNU1VGQ1NVeEpWRmtzSUZkSVJWUklSVklnU1U0Z1FVNGdRVU5VU1U5T0lFOUdJRU5QVGxSU1FVTlVMQ0JVVDFKVUlFOVNYRzR2THlCUFZFaEZVbGRKVTBVc0lFRlNTVk5KVGtjZ1JsSlBUU3dnVDFWVUlFOUdJRTlTSUVsT0lFTlBUazVGUTFSSlQwNGdWMGxVU0NCVVNFVWdVMDlHVkZkQlVrVWdUMUlnVkVoRlhHNHZMeUJWVTBVZ1QxSWdUMVJJUlZJZ1JFVkJURWxPUjFNZ1NVNGdWRWhGSUZOUFJsUlhRVkpGTGx4dVhHNTJZWElnWm05eWJXRjBVbVZuUlhod0lEMGdMeVZiYzJScUpWMHZaenRjYm1WNGNHOXlkSE11Wm05eWJXRjBJRDBnWm5WdVkzUnBiMjRvWmlrZ2UxeHVJQ0JwWmlBb0lXbHpVM1J5YVc1bktHWXBLU0I3WEc0Z0lDQWdkbUZ5SUc5aWFtVmpkSE1nUFNCYlhUdGNiaUFnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnYjJKcVpXTjBjeTV3ZFhOb0tHbHVjM0JsWTNRb1lYSm5kVzFsYm5SelcybGRLU2s3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCdlltcGxZM1J6TG1wdmFXNG9KeUFuS1R0Y2JpQWdmVnh1WEc0Z0lIWmhjaUJwSUQwZ01UdGNiaUFnZG1GeUlHRnlaM01nUFNCaGNtZDFiV1Z1ZEhNN1hHNGdJSFpoY2lCc1pXNGdQU0JoY21kekxteGxibWQwYUR0Y2JpQWdkbUZ5SUhOMGNpQTlJRk4wY21sdVp5aG1LUzV5WlhCc1lXTmxLR1p2Y20xaGRGSmxaMFY0Y0N3Z1puVnVZM1JwYjI0b2VDa2dlMXh1SUNBZ0lHbG1JQ2g0SUQwOVBTQW5KU1VuS1NCeVpYUjFjbTRnSnlVbk8xeHVJQ0FnSUdsbUlDaHBJRDQ5SUd4bGJpa2djbVYwZFhKdUlIZzdYRzRnSUNBZ2MzZHBkR05vSUNoNEtTQjdYRzRnSUNBZ0lDQmpZWE5sSUNjbGN5YzZJSEpsZEhWeWJpQlRkSEpwYm1jb1lYSm5jMXRwS3l0ZEtUdGNiaUFnSUNBZ0lHTmhjMlVnSnlWa0p6b2djbVYwZFhKdUlFNTFiV0psY2loaGNtZHpXMmtySzEwcE8xeHVJQ0FnSUNBZ1kyRnpaU0FuSldvbk9seHVJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCS1UwOU9Mbk4wY21sdVoybG1lU2hoY21kelcya3JLMTBwTzF4dUlDQWdJQ0FnSUNCOUlHTmhkR05vSUNoZktTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJQ2RiUTJseVkzVnNZWEpkSnp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ1pHVm1ZWFZzZERwY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhnN1hHNGdJQ0FnZlZ4dUlDQjlLVHRjYmlBZ1ptOXlJQ2gyWVhJZ2VDQTlJR0Z5WjNOYmFWMDdJR2tnUENCc1pXNDdJSGdnUFNCaGNtZHpXeXNyYVYwcElIdGNiaUFnSUNCcFppQW9hWE5PZFd4c0tIZ3BJSHg4SUNGcGMwOWlhbVZqZENoNEtTa2dlMXh1SUNBZ0lDQWdjM1J5SUNzOUlDY2dKeUFySUhnN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSE4wY2lBclBTQW5JQ2NnS3lCcGJuTndaV04wS0hncE8xeHVJQ0FnSUgxY2JpQWdmVnh1SUNCeVpYUjFjbTRnYzNSeU8xeHVmVHRjYmx4dVhHNHZMeUJOWVhKcklIUm9ZWFFnWVNCdFpYUm9iMlFnYzJodmRXeGtJRzV2ZENCaVpTQjFjMlZrTGx4dUx5OGdVbVYwZFhKdWN5QmhJRzF2WkdsbWFXVmtJR1oxYm1OMGFXOXVJSGRvYVdOb0lIZGhjbTV6SUc5dVkyVWdZbmtnWkdWbVlYVnNkQzVjYmk4dklFbG1JQzB0Ym04dFpHVndjbVZqWVhScGIyNGdhWE1nYzJWMExDQjBhR1Z1SUdsMElHbHpJR0VnYm04dGIzQXVYRzVsZUhCdmNuUnpMbVJsY0hKbFkyRjBaU0E5SUdaMWJtTjBhVzl1S0dadUxDQnRjMmNwSUh0Y2JpQWdMeThnUVd4c2IzY2dabTl5SUdSbGNISmxZMkYwYVc1bklIUm9hVzVuY3lCcGJpQjBhR1VnY0hKdlkyVnpjeUJ2WmlCemRHRnlkR2x1WnlCMWNDNWNiaUFnYVdZZ0tHbHpWVzVrWldacGJtVmtLR2RzYjJKaGJDNXdjbTlqWlhOektTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCbGVIQnZjblJ6TG1SbGNISmxZMkYwWlNobWJpd2diWE5uS1M1aGNIQnNlU2gwYUdsekxDQmhjbWQxYldWdWRITXBPMXh1SUNBZ0lIMDdYRzRnSUgxY2JseHVJQ0JwWmlBb2NISnZZMlZ6Y3k1dWIwUmxjSEpsWTJGMGFXOXVJRDA5UFNCMGNuVmxLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHWnVPMXh1SUNCOVhHNWNiaUFnZG1GeUlIZGhjbTVsWkNBOUlHWmhiSE5sTzF4dUlDQm1kVzVqZEdsdmJpQmtaWEJ5WldOaGRHVmtLQ2tnZTF4dUlDQWdJR2xtSUNnaGQyRnlibVZrS1NCN1hHNGdJQ0FnSUNCcFppQW9jSEp2WTJWemN5NTBhSEp2ZDBSbGNISmxZMkYwYVc5dUtTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaHRjMmNwTzF4dUlDQWdJQ0FnZlNCbGJITmxJR2xtSUNod2NtOWpaWE56TG5SeVlXTmxSR1Z3Y21WallYUnBiMjRwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1MGNtRmpaU2h0YzJjcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWh0YzJjcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2QyRnlibVZrSUQwZ2RISjFaVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUdadUxtRndjR3g1S0hSb2FYTXNJR0Z5WjNWdFpXNTBjeWs3WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnWkdWd2NtVmpZWFJsWkR0Y2JuMDdYRzVjYmx4dWRtRnlJR1JsWW5WbmN5QTlJSHQ5TzF4dWRtRnlJR1JsWW5WblJXNTJhWEp2Ymp0Y2JtVjRjRzl5ZEhNdVpHVmlkV2RzYjJjZ1BTQm1kVzVqZEdsdmJpaHpaWFFwSUh0Y2JpQWdhV1lnS0dselZXNWtaV1pwYm1Wa0tHUmxZblZuUlc1MmFYSnZiaWtwWEc0Z0lDQWdaR1ZpZFdkRmJuWnBjbTl1SUQwZ2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RVJVSlZSeUI4ZkNBbkp6dGNiaUFnYzJWMElEMGdjMlYwTG5SdlZYQndaWEpEWVhObEtDazdYRzRnSUdsbUlDZ2haR1ZpZFdkelczTmxkRjBwSUh0Y2JpQWdJQ0JwWmlBb2JtVjNJRkpsWjBWNGNDZ25YRnhjWEdJbklDc2djMlYwSUNzZ0oxeGNYRnhpSnl3Z0oya25LUzUwWlhOMEtHUmxZblZuUlc1MmFYSnZiaWtwSUh0Y2JpQWdJQ0FnSUhaaGNpQndhV1FnUFNCd2NtOWpaWE56TG5CcFpEdGNiaUFnSUNBZ0lHUmxZblZuYzF0elpYUmRJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ0YzJjZ1BTQmxlSEJ2Y25SekxtWnZjbTFoZEM1aGNIQnNlU2hsZUhCdmNuUnpMQ0JoY21kMWJXVnVkSE1wTzF4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLQ2NsY3lBbFpEb2dKWE1uTENCelpYUXNJSEJwWkN3Z2JYTm5LVHRjYmlBZ0lDQWdJSDA3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHUmxZblZuYzF0elpYUmRJRDBnWm5WdVkzUnBiMjRvS1NCN2ZUdGNiaUFnSUNCOVhHNGdJSDFjYmlBZ2NtVjBkWEp1SUdSbFluVm5jMXR6WlhSZE8xeHVmVHRjYmx4dVhHNHZLaXBjYmlBcUlFVmphRzl6SUhSb1pTQjJZV3gxWlNCdlppQmhJSFpoYkhWbExpQlVjbmx6SUhSdklIQnlhVzUwSUhSb1pTQjJZV3gxWlNCdmRYUmNiaUFxSUdsdUlIUm9aU0JpWlhOMElIZGhlU0J3YjNOemFXSnNaU0JuYVhabGJpQjBhR1VnWkdsbVptVnlaVzUwSUhSNWNHVnpMbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnZZbW9nVkdobElHOWlhbVZqZENCMGJ5QndjbWx1ZENCdmRYUXVYRzRnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnYjNCMGN5QlBjSFJwYjI1aGJDQnZjSFJwYjI1eklHOWlhbVZqZENCMGFHRjBJR0ZzZEdWeWN5QjBhR1VnYjNWMGNIVjBMbHh1SUNvdlhHNHZLaUJzWldkaFkzazZJRzlpYWl3Z2MyaHZkMGhwWkdSbGJpd2daR1Z3ZEdnc0lHTnZiRzl5Y3lvdlhHNW1kVzVqZEdsdmJpQnBibk53WldOMEtHOWlhaXdnYjNCMGN5a2dlMXh1SUNBdkx5QmtaV1poZFd4MElHOXdkR2x2Ym5OY2JpQWdkbUZ5SUdOMGVDQTlJSHRjYmlBZ0lDQnpaV1Z1T2lCYlhTeGNiaUFnSUNCemRIbHNhWHBsT2lCemRIbHNhWHBsVG05RGIyeHZjbHh1SUNCOU8xeHVJQ0F2THlCc1pXZGhZM2t1TGk1Y2JpQWdhV1lnS0dGeVozVnRaVzUwY3k1c1pXNW5kR2dnUGowZ015a2dZM1I0TG1SbGNIUm9JRDBnWVhKbmRXMWxiblJ6V3pKZE8xeHVJQ0JwWmlBb1lYSm5kVzFsYm5SekxteGxibWQwYUNBK1BTQTBLU0JqZEhndVkyOXNiM0p6SUQwZ1lYSm5kVzFsYm5Seld6TmRPMXh1SUNCcFppQW9hWE5DYjI5c1pXRnVLRzl3ZEhNcEtTQjdYRzRnSUNBZ0x5OGdiR1ZuWVdONUxpNHVYRzRnSUNBZ1kzUjRMbk5vYjNkSWFXUmtaVzRnUFNCdmNIUnpPMXh1SUNCOUlHVnNjMlVnYVdZZ0tHOXdkSE1wSUh0Y2JpQWdJQ0F2THlCbmIzUWdZVzRnWENKdmNIUnBiMjV6WENJZ2IySnFaV04wWEc0Z0lDQWdaWGh3YjNKMGN5NWZaWGgwWlc1a0tHTjBlQ3dnYjNCMGN5azdYRzRnSUgxY2JpQWdMeThnYzJWMElHUmxabUYxYkhRZ2IzQjBhVzl1YzF4dUlDQnBaaUFvYVhOVmJtUmxabWx1WldRb1kzUjRMbk5vYjNkSWFXUmtaVzRwS1NCamRIZ3VjMmh2ZDBocFpHUmxiaUE5SUdaaGJITmxPMXh1SUNCcFppQW9hWE5WYm1SbFptbHVaV1FvWTNSNExtUmxjSFJvS1NrZ1kzUjRMbVJsY0hSb0lEMGdNanRjYmlBZ2FXWWdLR2x6Vlc1a1pXWnBibVZrS0dOMGVDNWpiMnh2Y25NcEtTQmpkSGd1WTI5c2IzSnpJRDBnWm1Gc2MyVTdYRzRnSUdsbUlDaHBjMVZ1WkdWbWFXNWxaQ2hqZEhndVkzVnpkRzl0U1c1emNHVmpkQ2twSUdOMGVDNWpkWE4wYjIxSmJuTndaV04wSUQwZ2RISjFaVHRjYmlBZ2FXWWdLR04wZUM1amIyeHZjbk1wSUdOMGVDNXpkSGxzYVhwbElEMGdjM1I1YkdsNlpWZHBkR2hEYjJ4dmNqdGNiaUFnY21WMGRYSnVJR1p2Y20xaGRGWmhiSFZsS0dOMGVDd2diMkpxTENCamRIZ3VaR1Z3ZEdncE8xeHVmVnh1Wlhod2IzSjBjeTVwYm5Od1pXTjBJRDBnYVc1emNHVmpkRHRjYmx4dVhHNHZMeUJvZEhSd09pOHZaVzR1ZDJscmFYQmxaR2xoTG05eVp5OTNhV3RwTDBGT1UwbGZaWE5qWVhCbFgyTnZaR1VqWjNKaGNHaHBZM05jYm1sdWMzQmxZM1F1WTI5c2IzSnpJRDBnZTF4dUlDQW5ZbTlzWkNjZ09pQmJNU3dnTWpKZExGeHVJQ0FuYVhSaGJHbGpKeUE2SUZzekxDQXlNMTBzWEc0Z0lDZDFibVJsY214cGJtVW5JRG9nV3pRc0lESTBYU3hjYmlBZ0oybHVkbVZ5YzJVbklEb2dXemNzSURJM1hTeGNiaUFnSjNkb2FYUmxKeUE2SUZzek55d2dNemxkTEZ4dUlDQW5aM0psZVNjZ09pQmJPVEFzSURNNVhTeGNiaUFnSjJKc1lXTnJKeUE2SUZzek1Dd2dNemxkTEZ4dUlDQW5ZbXgxWlNjZ09pQmJNelFzSURNNVhTeGNiaUFnSjJONVlXNG5JRG9nV3pNMkxDQXpPVjBzWEc0Z0lDZG5jbVZsYmljZ09pQmJNeklzSURNNVhTeGNiaUFnSjIxaFoyVnVkR0VuSURvZ1d6TTFMQ0F6T1Ywc1hHNGdJQ2R5WldRbklEb2dXek14TENBek9WMHNYRzRnSUNkNVpXeHNiM2NuSURvZ1d6TXpMQ0F6T1YxY2JuMDdYRzVjYmk4dklFUnZiaWQwSUhWelpTQW5ZbXgxWlNjZ2JtOTBJSFpwYzJsaWJHVWdiMjRnWTIxa0xtVjRaVnh1YVc1emNHVmpkQzV6ZEhsc1pYTWdQU0I3WEc0Z0lDZHpjR1ZqYVdGc0p6b2dKMk41WVc0bkxGeHVJQ0FuYm5WdFltVnlKem9nSjNsbGJHeHZkeWNzWEc0Z0lDZGliMjlzWldGdUp6b2dKM2xsYkd4dmR5Y3NYRzRnSUNkMWJtUmxabWx1WldRbk9pQW5aM0psZVNjc1hHNGdJQ2R1ZFd4c0p6b2dKMkp2YkdRbkxGeHVJQ0FuYzNSeWFXNW5Kem9nSjJkeVpXVnVKeXhjYmlBZ0oyUmhkR1VuT2lBbmJXRm5aVzUwWVNjc1hHNGdJQzh2SUZ3aWJtRnRaVndpT2lCcGJuUmxiblJwYjI1aGJHeDVJRzV2ZENCemRIbHNhVzVuWEc0Z0lDZHlaV2RsZUhBbk9pQW5jbVZrSjF4dWZUdGNibHh1WEc1bWRXNWpkR2x2YmlCemRIbHNhWHBsVjJsMGFFTnZiRzl5S0hOMGNpd2djM1I1YkdWVWVYQmxLU0I3WEc0Z0lIWmhjaUJ6ZEhsc1pTQTlJR2x1YzNCbFkzUXVjM1I1YkdWelczTjBlV3hsVkhsd1pWMDdYRzVjYmlBZ2FXWWdLSE4wZVd4bEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUNkY1hIVXdNREZpV3ljZ0t5QnBibk53WldOMExtTnZiRzl5YzF0emRIbHNaVjFiTUYwZ0t5QW5iU2NnS3lCemRISWdLMXh1SUNBZ0lDQWdJQ0FnSUNBblhGeDFNREF4WWxzbklDc2dhVzV6Y0dWamRDNWpiMnh2Y25OYmMzUjViR1ZkV3pGZElDc2dKMjBuTzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhKbGRIVnliaUJ6ZEhJN1hHNGdJSDFjYm4xY2JseHVYRzVtZFc1amRHbHZiaUJ6ZEhsc2FYcGxUbTlEYjJ4dmNpaHpkSElzSUhOMGVXeGxWSGx3WlNrZ2UxeHVJQ0J5WlhSMWNtNGdjM1J5TzF4dWZWeHVYRzVjYm1aMWJtTjBhVzl1SUdGeWNtRjVWRzlJWVhOb0tHRnljbUY1S1NCN1hHNGdJSFpoY2lCb1lYTm9JRDBnZTMwN1hHNWNiaUFnWVhKeVlYa3VabTl5UldGamFDaG1kVzVqZEdsdmJpaDJZV3dzSUdsa2VDa2dlMXh1SUNBZ0lHaGhjMmhiZG1Gc1hTQTlJSFJ5ZFdVN1hHNGdJSDBwTzF4dVhHNGdJSEpsZEhWeWJpQm9ZWE5vTzF4dWZWeHVYRzVjYm1aMWJtTjBhVzl1SUdadmNtMWhkRlpoYkhWbEtHTjBlQ3dnZG1Gc2RXVXNJSEpsWTNWeWMyVlVhVzFsY3lrZ2UxeHVJQ0F2THlCUWNtOTJhV1JsSUdFZ2FHOXZheUJtYjNJZ2RYTmxjaTF6Y0dWamFXWnBaV1FnYVc1emNHVmpkQ0JtZFc1amRHbHZibk11WEc0Z0lDOHZJRU5vWldOcklIUm9ZWFFnZG1Gc2RXVWdhWE1nWVc0Z2IySnFaV04wSUhkcGRHZ2dZVzRnYVc1emNHVmpkQ0JtZFc1amRHbHZiaUJ2YmlCcGRGeHVJQ0JwWmlBb1kzUjRMbU4xYzNSdmJVbHVjM0JsWTNRZ0ppWmNiaUFnSUNBZ0lIWmhiSFZsSUNZbVhHNGdJQ0FnSUNCcGMwWjFibU4wYVc5dUtIWmhiSFZsTG1sdWMzQmxZM1FwSUNZbVhHNGdJQ0FnSUNBdkx5QkdhV3gwWlhJZ2IzVjBJSFJvWlNCMWRHbHNJRzF2WkhWc1pTd2dhWFFuY3lCcGJuTndaV04wSUdaMWJtTjBhVzl1SUdseklITndaV05wWVd4Y2JpQWdJQ0FnSUhaaGJIVmxMbWx1YzNCbFkzUWdJVDA5SUdWNGNHOXlkSE11YVc1emNHVmpkQ0FtSmx4dUlDQWdJQ0FnTHk4Z1FXeHpieUJtYVd4MFpYSWdiM1YwSUdGdWVTQndjbTkwYjNSNWNHVWdiMkpxWldOMGN5QjFjMmx1WnlCMGFHVWdZMmx5WTNWc1lYSWdZMmhsWTJzdVhHNGdJQ0FnSUNBaEtIWmhiSFZsTG1OdmJuTjBjblZqZEc5eUlDWW1JSFpoYkhWbExtTnZibk4wY25WamRHOXlMbkJ5YjNSdmRIbHdaU0E5UFQwZ2RtRnNkV1VwS1NCN1hHNGdJQ0FnZG1GeUlISmxkQ0E5SUhaaGJIVmxMbWx1YzNCbFkzUW9jbVZqZFhKelpWUnBiV1Z6TENCamRIZ3BPMXh1SUNBZ0lHbG1JQ2doYVhOVGRISnBibWNvY21WMEtTa2dlMXh1SUNBZ0lDQWdjbVYwSUQwZ1ptOXliV0YwVm1Gc2RXVW9ZM1I0TENCeVpYUXNJSEpsWTNWeWMyVlVhVzFsY3lrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnlaWFE3WEc0Z0lIMWNibHh1SUNBdkx5QlFjbWx0YVhScGRtVWdkSGx3WlhNZ1kyRnVibTkwSUdoaGRtVWdjSEp2Y0dWeWRHbGxjMXh1SUNCMllYSWdjSEpwYldsMGFYWmxJRDBnWm05eWJXRjBVSEpwYldsMGFYWmxLR04wZUN3Z2RtRnNkV1VwTzF4dUlDQnBaaUFvY0hKcGJXbDBhWFpsS1NCN1hHNGdJQ0FnY21WMGRYSnVJSEJ5YVcxcGRHbDJaVHRjYmlBZ2ZWeHVYRzRnSUM4dklFeHZiMnNnZFhBZ2RHaGxJR3RsZVhNZ2IyWWdkR2hsSUc5aWFtVmpkQzVjYmlBZ2RtRnlJR3RsZVhNZ1BTQlBZbXBsWTNRdWEyVjVjeWgyWVd4MVpTazdYRzRnSUhaaGNpQjJhWE5wWW14bFMyVjVjeUE5SUdGeWNtRjVWRzlJWVhOb0tHdGxlWE1wTzF4dVhHNGdJR2xtSUNoamRIZ3VjMmh2ZDBocFpHUmxiaWtnZTF4dUlDQWdJR3RsZVhNZ1BTQlBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxPWVcxbGN5aDJZV3gxWlNrN1hHNGdJSDFjYmx4dUlDQXZMeUJKUlNCa2IyVnpiaWQwSUcxaGEyVWdaWEp5YjNJZ1ptbGxiR1J6SUc1dmJpMWxiblZ0WlhKaFlteGxYRzRnSUM4dklHaDBkSEE2THk5dGMyUnVMbTFwWTNKdmMyOW1kQzVqYjIwdlpXNHRkWE12YkdsaWNtRnllUzlwWlM5a2QzYzFNbk5pZENoMlBYWnpMamswS1M1aGMzQjRYRzRnSUdsbUlDaHBjMFZ5Y205eUtIWmhiSFZsS1Z4dUlDQWdJQ0FnSmlZZ0tHdGxlWE11YVc1a1pYaFBaaWduYldWemMyRm5aU2NwSUQ0OUlEQWdmSHdnYTJWNWN5NXBibVJsZUU5bUtDZGtaWE5qY21sd2RHbHZiaWNwSUQ0OUlEQXBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHWnZjbTFoZEVWeWNtOXlLSFpoYkhWbEtUdGNiaUFnZlZ4dVhHNGdJQzh2SUZOdmJXVWdkSGx3WlNCdlppQnZZbXBsWTNRZ2QybDBhRzkxZENCd2NtOXdaWEowYVdWeklHTmhiaUJpWlNCemFHOXlkR04xZEhSbFpDNWNiaUFnYVdZZ0tHdGxlWE11YkdWdVozUm9JRDA5UFNBd0tTQjdYRzRnSUNBZ2FXWWdLR2x6Um5WdVkzUnBiMjRvZG1Gc2RXVXBLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2JtRnRaU0E5SUhaaGJIVmxMbTVoYldVZ1B5QW5PaUFuSUNzZ2RtRnNkV1V1Ym1GdFpTQTZJQ2NuTzF4dUlDQWdJQ0FnY21WMGRYSnVJR04wZUM1emRIbHNhWHBsS0NkYlJuVnVZM1JwYjI0bklDc2dibUZ0WlNBcklDZGRKeXdnSjNOd1pXTnBZV3duS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0dselVtVm5SWGh3S0haaGJIVmxLU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR04wZUM1emRIbHNhWHBsS0ZKbFowVjRjQzV3Y205MGIzUjVjR1V1ZEc5VGRISnBibWN1WTJGc2JDaDJZV3gxWlNrc0lDZHlaV2RsZUhBbktUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tHbHpSR0YwWlNoMllXeDFaU2twSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJqZEhndWMzUjViR2w2WlNoRVlYUmxMbkJ5YjNSdmRIbHdaUzUwYjFOMGNtbHVaeTVqWVd4c0tIWmhiSFZsS1N3Z0oyUmhkR1VuS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0dselJYSnliM0lvZG1Gc2RXVXBLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdabTl5YldGMFJYSnliM0lvZG1Gc2RXVXBPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJSFpoY2lCaVlYTmxJRDBnSnljc0lHRnljbUY1SUQwZ1ptRnNjMlVzSUdKeVlXTmxjeUE5SUZzbmV5Y3NJQ2Q5SjEwN1hHNWNiaUFnTHk4Z1RXRnJaU0JCY25KaGVTQnpZWGtnZEdoaGRDQjBhR1Y1SUdGeVpTQkJjbkpoZVZ4dUlDQnBaaUFvYVhOQmNuSmhlU2gyWVd4MVpTa3BJSHRjYmlBZ0lDQmhjbkpoZVNBOUlIUnlkV1U3WEc0Z0lDQWdZbkpoWTJWeklEMGdXeWRiSnl3Z0oxMG5YVHRjYmlBZ2ZWeHVYRzRnSUM4dklFMWhhMlVnWm5WdVkzUnBiMjV6SUhOaGVTQjBhR0YwSUhSb1pYa2dZWEpsSUdaMWJtTjBhVzl1YzF4dUlDQnBaaUFvYVhOR2RXNWpkR2x2YmloMllXeDFaU2twSUh0Y2JpQWdJQ0IyWVhJZ2JpQTlJSFpoYkhWbExtNWhiV1VnUHlBbk9pQW5JQ3NnZG1Gc2RXVXVibUZ0WlNBNklDY25PMXh1SUNBZ0lHSmhjMlVnUFNBbklGdEdkVzVqZEdsdmJpY2dLeUJ1SUNzZ0oxMG5PMXh1SUNCOVhHNWNiaUFnTHk4Z1RXRnJaU0JTWldkRmVIQnpJSE5oZVNCMGFHRjBJSFJvWlhrZ1lYSmxJRkpsWjBWNGNITmNiaUFnYVdZZ0tHbHpVbVZuUlhod0tIWmhiSFZsS1NrZ2UxeHVJQ0FnSUdKaGMyVWdQU0FuSUNjZ0t5QlNaV2RGZUhBdWNISnZkRzkwZVhCbExuUnZVM1J5YVc1bkxtTmhiR3dvZG1Gc2RXVXBPMXh1SUNCOVhHNWNiaUFnTHk4Z1RXRnJaU0JrWVhSbGN5QjNhWFJvSUhCeWIzQmxjblJwWlhNZ1ptbHljM1FnYzJGNUlIUm9aU0JrWVhSbFhHNGdJR2xtSUNocGMwUmhkR1VvZG1Gc2RXVXBLU0I3WEc0Z0lDQWdZbUZ6WlNBOUlDY2dKeUFySUVSaGRHVXVjSEp2ZEc5MGVYQmxMblJ2VlZSRFUzUnlhVzVuTG1OaGJHd29kbUZzZFdVcE8xeHVJQ0I5WEc1Y2JpQWdMeThnVFdGclpTQmxjbkp2Y2lCM2FYUm9JRzFsYzNOaFoyVWdabWx5YzNRZ2MyRjVJSFJvWlNCbGNuSnZjbHh1SUNCcFppQW9hWE5GY25KdmNpaDJZV3gxWlNrcElIdGNiaUFnSUNCaVlYTmxJRDBnSnlBbklDc2dabTl5YldGMFJYSnliM0lvZG1Gc2RXVXBPMXh1SUNCOVhHNWNiaUFnYVdZZ0tHdGxlWE11YkdWdVozUm9JRDA5UFNBd0lDWW1JQ2doWVhKeVlYa2dmSHdnZG1Gc2RXVXViR1Z1WjNSb0lEMDlJREFwS1NCN1hHNGdJQ0FnY21WMGRYSnVJR0p5WVdObGMxc3dYU0FySUdKaGMyVWdLeUJpY21GalpYTmJNVjA3WEc0Z0lIMWNibHh1SUNCcFppQW9jbVZqZFhKelpWUnBiV1Z6SUR3Z01Da2dlMXh1SUNBZ0lHbG1JQ2hwYzFKbFowVjRjQ2gyWVd4MVpTa3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmpkSGd1YzNSNWJHbDZaU2hTWldkRmVIQXVjSEp2ZEc5MGVYQmxMblJ2VTNSeWFXNW5MbU5oYkd3b2RtRnNkV1VwTENBbmNtVm5aWGh3SnlrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmpkSGd1YzNSNWJHbDZaU2duVzA5aWFtVmpkRjBuTENBbmMzQmxZMmxoYkNjcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lHTjBlQzV6WldWdUxuQjFjMmdvZG1Gc2RXVXBPMXh1WEc0Z0lIWmhjaUJ2ZFhSd2RYUTdYRzRnSUdsbUlDaGhjbkpoZVNrZ2UxeHVJQ0FnSUc5MWRIQjFkQ0E5SUdadmNtMWhkRUZ5Y21GNUtHTjBlQ3dnZG1Gc2RXVXNJSEpsWTNWeWMyVlVhVzFsY3l3Z2RtbHphV0pzWlV0bGVYTXNJR3RsZVhNcE8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lHOTFkSEIxZENBOUlHdGxlWE11YldGd0tHWjFibU4wYVc5dUtHdGxlU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR1p2Y20xaGRGQnliM0JsY25SNUtHTjBlQ3dnZG1Gc2RXVXNJSEpsWTNWeWMyVlVhVzFsY3l3Z2RtbHphV0pzWlV0bGVYTXNJR3RsZVN3Z1lYSnlZWGtwTzF4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ1kzUjRMbk5sWlc0dWNHOXdLQ2s3WEc1Y2JpQWdjbVYwZFhKdUlISmxaSFZqWlZSdlUybHVaMnhsVTNSeWFXNW5LRzkxZEhCMWRDd2dZbUZ6WlN3Z1luSmhZMlZ6S1R0Y2JuMWNibHh1WEc1bWRXNWpkR2x2YmlCbWIzSnRZWFJRY21sdGFYUnBkbVVvWTNSNExDQjJZV3gxWlNrZ2UxeHVJQ0JwWmlBb2FYTlZibVJsWm1sdVpXUW9kbUZzZFdVcEtWeHVJQ0FnSUhKbGRIVnliaUJqZEhndWMzUjViR2w2WlNnbmRXNWtaV1pwYm1Wa0p5d2dKM1Z1WkdWbWFXNWxaQ2NwTzF4dUlDQnBaaUFvYVhOVGRISnBibWNvZG1Gc2RXVXBLU0I3WEc0Z0lDQWdkbUZ5SUhOcGJYQnNaU0E5SUNkY1hDY25JQ3NnU2xOUFRpNXpkSEpwYm1kcFpua29kbUZzZFdVcExuSmxjR3hoWTJVb0wxNWNJbnhjSWlRdlp5d2dKeWNwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdWNtVndiR0ZqWlNndkp5OW5MQ0JjSWx4Y1hGd25YQ0lwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdWNtVndiR0ZqWlNndlhGeGNYRndpTDJjc0lDZGNJaWNwSUNzZ0oxeGNKeWM3WEc0Z0lDQWdjbVYwZFhKdUlHTjBlQzV6ZEhsc2FYcGxLSE5wYlhCc1pTd2dKM04wY21sdVp5Y3BPMXh1SUNCOVhHNGdJR2xtSUNocGMwNTFiV0psY2loMllXeDFaU2twWEc0Z0lDQWdjbVYwZFhKdUlHTjBlQzV6ZEhsc2FYcGxLQ2NuSUNzZ2RtRnNkV1VzSUNkdWRXMWlaWEluS1R0Y2JpQWdhV1lnS0dselFtOXZiR1ZoYmloMllXeDFaU2twWEc0Z0lDQWdjbVYwZFhKdUlHTjBlQzV6ZEhsc2FYcGxLQ2NuSUNzZ2RtRnNkV1VzSUNkaWIyOXNaV0Z1SnlrN1hHNGdJQzh2SUVadmNpQnpiMjFsSUhKbFlYTnZiaUIwZVhCbGIyWWdiblZzYkNCcGN5QmNJbTlpYW1WamRGd2lMQ0J6YnlCemNHVmphV0ZzSUdOaGMyVWdhR1Z5WlM1Y2JpQWdhV1lnS0dselRuVnNiQ2gyWVd4MVpTa3BYRzRnSUNBZ2NtVjBkWEp1SUdOMGVDNXpkSGxzYVhwbEtDZHVkV3hzSnl3Z0oyNTFiR3duS1R0Y2JuMWNibHh1WEc1bWRXNWpkR2x2YmlCbWIzSnRZWFJGY25KdmNpaDJZV3gxWlNrZ2UxeHVJQ0J5WlhSMWNtNGdKMXNuSUNzZ1JYSnliM0l1Y0hKdmRHOTBlWEJsTG5SdlUzUnlhVzVuTG1OaGJHd29kbUZzZFdVcElDc2dKMTBuTzF4dWZWeHVYRzVjYm1aMWJtTjBhVzl1SUdadmNtMWhkRUZ5Y21GNUtHTjBlQ3dnZG1Gc2RXVXNJSEpsWTNWeWMyVlVhVzFsY3l3Z2RtbHphV0pzWlV0bGVYTXNJR3RsZVhNcElIdGNiaUFnZG1GeUlHOTFkSEIxZENBOUlGdGRPMXh1SUNCbWIzSWdLSFpoY2lCcElEMGdNQ3dnYkNBOUlIWmhiSFZsTG14bGJtZDBhRHNnYVNBOElHdzdJQ3NyYVNrZ2UxeHVJQ0FnSUdsbUlDaG9ZWE5QZDI1UWNtOXdaWEowZVNoMllXeDFaU3dnVTNSeWFXNW5LR2twS1NrZ2UxeHVJQ0FnSUNBZ2IzVjBjSFYwTG5CMWMyZ29abTl5YldGMFVISnZjR1Z5ZEhrb1kzUjRMQ0IyWVd4MVpTd2djbVZqZFhKelpWUnBiV1Z6TENCMmFYTnBZbXhsUzJWNWN5eGNiaUFnSUNBZ0lDQWdJQ0JUZEhKcGJtY29hU2tzSUhSeWRXVXBLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2IzVjBjSFYwTG5CMWMyZ29KeWNwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0JyWlhsekxtWnZja1ZoWTJnb1puVnVZM1JwYjI0b2EyVjVLU0I3WEc0Z0lDQWdhV1lnS0NGclpYa3ViV0YwWTJnb0wxNWNYR1FySkM4cEtTQjdYRzRnSUNBZ0lDQnZkWFJ3ZFhRdWNIVnphQ2htYjNKdFlYUlFjbTl3WlhKMGVTaGpkSGdzSUhaaGJIVmxMQ0J5WldOMWNuTmxWR2x0WlhNc0lIWnBjMmxpYkdWTFpYbHpMRnh1SUNBZ0lDQWdJQ0FnSUd0bGVTd2dkSEoxWlNrcE8xeHVJQ0FnSUgxY2JpQWdmU2s3WEc0Z0lISmxkSFZ5YmlCdmRYUndkWFE3WEc1OVhHNWNibHh1Wm5WdVkzUnBiMjRnWm05eWJXRjBVSEp2Y0dWeWRIa29ZM1I0TENCMllXeDFaU3dnY21WamRYSnpaVlJwYldWekxDQjJhWE5wWW14bFMyVjVjeXdnYTJWNUxDQmhjbkpoZVNrZ2UxeHVJQ0IyWVhJZ2JtRnRaU3dnYzNSeUxDQmtaWE5qTzF4dUlDQmtaWE5qSUQwZ1QySnFaV04wTG1kbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjaWgyWVd4MVpTd2dhMlY1S1NCOGZDQjdJSFpoYkhWbE9pQjJZV3gxWlZ0clpYbGRJSDA3WEc0Z0lHbG1JQ2hrWlhOakxtZGxkQ2tnZTF4dUlDQWdJR2xtSUNoa1pYTmpMbk5sZENrZ2UxeHVJQ0FnSUNBZ2MzUnlJRDBnWTNSNExuTjBlV3hwZW1Vb0oxdEhaWFIwWlhJdlUyVjBkR1Z5WFNjc0lDZHpjR1ZqYVdGc0p5azdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhOMGNpQTlJR04wZUM1emRIbHNhWHBsS0NkYlIyVjBkR1Z5WFNjc0lDZHpjR1ZqYVdGc0p5azdYRzRnSUNBZ2ZWeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lHbG1JQ2hrWlhOakxuTmxkQ2tnZTF4dUlDQWdJQ0FnYzNSeUlEMGdZM1I0TG5OMGVXeHBlbVVvSjF0VFpYUjBaWEpkSnl3Z0ozTndaV05wWVd3bktUdGNiaUFnSUNCOVhHNGdJSDFjYmlBZ2FXWWdLQ0ZvWVhOUGQyNVFjbTl3WlhKMGVTaDJhWE5wWW14bFMyVjVjeXdnYTJWNUtTa2dlMXh1SUNBZ0lHNWhiV1VnUFNBbld5Y2dLeUJyWlhrZ0t5QW5YU2M3WEc0Z0lIMWNiaUFnYVdZZ0tDRnpkSElwSUh0Y2JpQWdJQ0JwWmlBb1kzUjRMbk5sWlc0dWFXNWtaWGhQWmloa1pYTmpMblpoYkhWbEtTQThJREFwSUh0Y2JpQWdJQ0FnSUdsbUlDaHBjMDUxYkd3b2NtVmpkWEp6WlZScGJXVnpLU2tnZTF4dUlDQWdJQ0FnSUNCemRISWdQU0JtYjNKdFlYUldZV3gxWlNoamRIZ3NJR1JsYzJNdWRtRnNkV1VzSUc1MWJHd3BPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdjM1J5SUQwZ1ptOXliV0YwVm1Gc2RXVW9ZM1I0TENCa1pYTmpMblpoYkhWbExDQnlaV04xY25ObFZHbHRaWE1nTFNBeEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHbG1JQ2h6ZEhJdWFXNWtaWGhQWmlnblhGeHVKeWtnUGlBdE1Ta2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1lYSnlZWGtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnpkSElnUFNCemRISXVjM0JzYVhRb0oxeGNiaWNwTG0xaGNDaG1kVzVqZEdsdmJpaHNhVzVsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdKeUFnSnlBcklHeHBibVU3WEc0Z0lDQWdJQ0FnSUNBZ2ZTa3VhbTlwYmlnblhGeHVKeWt1YzNWaWMzUnlLRElwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lITjBjaUE5SUNkY1hHNG5JQ3NnYzNSeUxuTndiR2wwS0NkY1hHNG5LUzV0WVhBb1puVnVZM1JwYjI0b2JHbHVaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlDY2dJQ0FuSUNzZ2JHbHVaVHRjYmlBZ0lDQWdJQ0FnSUNCOUtTNXFiMmx1S0NkY1hHNG5LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnpkSElnUFNCamRIZ3VjM1I1YkdsNlpTZ25XME5wY21OMWJHRnlYU2NzSUNkemNHVmphV0ZzSnlrN1hHNGdJQ0FnZlZ4dUlDQjlYRzRnSUdsbUlDaHBjMVZ1WkdWbWFXNWxaQ2h1WVcxbEtTa2dlMXh1SUNBZ0lHbG1JQ2hoY25KaGVTQW1KaUJyWlhrdWJXRjBZMmdvTDE1Y1hHUXJKQzhwS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYzNSeU8xeHVJQ0FnSUgxY2JpQWdJQ0J1WVcxbElEMGdTbE5QVGk1emRISnBibWRwWm5rb0p5Y2dLeUJyWlhrcE8xeHVJQ0FnSUdsbUlDaHVZVzFsTG0xaGRHTm9LQzllWENJb1cyRXRla0V0V2w5ZFcyRXRla0V0V2w4d0xUbGRLaWxjSWlRdktTa2dlMXh1SUNBZ0lDQWdibUZ0WlNBOUlHNWhiV1V1YzNWaWMzUnlLREVzSUc1aGJXVXViR1Z1WjNSb0lDMGdNaWs3WEc0Z0lDQWdJQ0J1WVcxbElEMGdZM1I0TG5OMGVXeHBlbVVvYm1GdFpTd2dKMjVoYldVbktUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnYm1GdFpTQTlJRzVoYldVdWNtVndiR0ZqWlNndkp5OW5MQ0JjSWx4Y1hGd25YQ0lwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1eVpYQnNZV05sS0M5Y1hGeGNYQ0l2Wnl3Z0oxd2lKeWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG5KbGNHeGhZMlVvTHloZVhDSjhYQ0lrS1M5bkxDQmNJaWRjSWlrN1hHNGdJQ0FnSUNCdVlXMWxJRDBnWTNSNExuTjBlV3hwZW1Vb2JtRnRaU3dnSjNOMGNtbHVaeWNwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJ1WVcxbElDc2dKem9nSnlBcklITjBjanRjYm4xY2JseHVYRzVtZFc1amRHbHZiaUJ5WldSMVkyVlViMU5wYm1kc1pWTjBjbWx1WnlodmRYUndkWFFzSUdKaGMyVXNJR0p5WVdObGN5a2dlMXh1SUNCMllYSWdiblZ0VEdsdVpYTkZjM1FnUFNBd08xeHVJQ0IyWVhJZ2JHVnVaM1JvSUQwZ2IzVjBjSFYwTG5KbFpIVmpaU2htZFc1amRHbHZiaWh3Y21WMkxDQmpkWElwSUh0Y2JpQWdJQ0J1ZFcxTWFXNWxjMFZ6ZENzck8xeHVJQ0FnSUdsbUlDaGpkWEl1YVc1a1pYaFBaaWduWEZ4dUp5a2dQajBnTUNrZ2JuVnRUR2x1WlhORmMzUXJLenRjYmlBZ0lDQnlaWFIxY200Z2NISmxkaUFySUdOMWNpNXlaWEJzWVdObEtDOWNYSFV3TURGaVhGeGJYRnhrWEZ4a1AyMHZaeXdnSnljcExteGxibWQwYUNBcklERTdYRzRnSUgwc0lEQXBPMXh1WEc0Z0lHbG1JQ2hzWlc1bmRHZ2dQaUEyTUNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJpY21GalpYTmJNRjBnSzF4dUlDQWdJQ0FnSUNBZ0lDQW9ZbUZ6WlNBOVBUMGdKeWNnUHlBbkp5QTZJR0poYzJVZ0t5QW5YRnh1SUNjcElDdGNiaUFnSUNBZ0lDQWdJQ0FnSnlBbklDdGNiaUFnSUNBZ0lDQWdJQ0FnYjNWMGNIVjBMbXB2YVc0b0p5eGNYRzRnSUNjcElDdGNiaUFnSUNBZ0lDQWdJQ0FnSnlBbklDdGNiaUFnSUNBZ0lDQWdJQ0FnWW5KaFkyVnpXekZkTzF4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUdKeVlXTmxjMXN3WFNBcklHSmhjMlVnS3lBbklDY2dLeUJ2ZFhSd2RYUXVhbTlwYmlnbkxDQW5LU0FySUNjZ0p5QXJJR0p5WVdObGMxc3hYVHRjYm4xY2JseHVYRzR2THlCT1QxUkZPaUJVYUdWelpTQjBlWEJsSUdOb1pXTnJhVzVuSUdaMWJtTjBhVzl1Y3lCcGJuUmxiblJwYjI1aGJHeDVJR1J2YmlkMElIVnpaU0JnYVc1emRHRnVZMlZ2Wm1CY2JpOHZJR0psWTJGMWMyVWdhWFFnYVhNZ1puSmhaMmxzWlNCaGJtUWdZMkZ1SUdKbElHVmhjMmxzZVNCbVlXdGxaQ0IzYVhSb0lHQlBZbXBsWTNRdVkzSmxZWFJsS0NsZ0xseHVablZ1WTNScGIyNGdhWE5CY25KaGVTaGhjaWtnZTF4dUlDQnlaWFIxY200Z1FYSnlZWGt1YVhOQmNuSmhlU2hoY2lrN1hHNTlYRzVsZUhCdmNuUnpMbWx6UVhKeVlYa2dQU0JwYzBGeWNtRjVPMXh1WEc1bWRXNWpkR2x2YmlCcGMwSnZiMnhsWVc0b1lYSm5LU0I3WEc0Z0lISmxkSFZ5YmlCMGVYQmxiMllnWVhKbklEMDlQU0FuWW05dmJHVmhiaWM3WEc1OVhHNWxlSEJ2Y25SekxtbHpRbTl2YkdWaGJpQTlJR2x6UW05dmJHVmhianRjYmx4dVpuVnVZM1JwYjI0Z2FYTk9kV3hzS0dGeVp5a2dlMXh1SUNCeVpYUjFjbTRnWVhKbklEMDlQU0J1ZFd4c08xeHVmVnh1Wlhod2IzSjBjeTVwYzA1MWJHd2dQU0JwYzA1MWJHdzdYRzVjYm1aMWJtTjBhVzl1SUdselRuVnNiRTl5Vlc1a1pXWnBibVZrS0dGeVp5a2dlMXh1SUNCeVpYUjFjbTRnWVhKbklEMDlJRzUxYkd3N1hHNTlYRzVsZUhCdmNuUnpMbWx6VG5Wc2JFOXlWVzVrWldacGJtVmtJRDBnYVhOT2RXeHNUM0pWYm1SbFptbHVaV1E3WEc1Y2JtWjFibU4wYVc5dUlHbHpUblZ0WW1WeUtHRnlaeWtnZTF4dUlDQnlaWFIxY200Z2RIbHdaVzltSUdGeVp5QTlQVDBnSjI1MWJXSmxjaWM3WEc1OVhHNWxlSEJ2Y25SekxtbHpUblZ0WW1WeUlEMGdhWE5PZFcxaVpYSTdYRzVjYm1aMWJtTjBhVzl1SUdselUzUnlhVzVuS0dGeVp5a2dlMXh1SUNCeVpYUjFjbTRnZEhsd1pXOW1JR0Z5WnlBOVBUMGdKM04wY21sdVp5YzdYRzU5WEc1bGVIQnZjblJ6TG1selUzUnlhVzVuSUQwZ2FYTlRkSEpwYm1jN1hHNWNibVoxYm1OMGFXOXVJR2x6VTNsdFltOXNLR0Z5WnlrZ2UxeHVJQ0J5WlhSMWNtNGdkSGx3Wlc5bUlHRnlaeUE5UFQwZ0ozTjViV0p2YkNjN1hHNTlYRzVsZUhCdmNuUnpMbWx6VTNsdFltOXNJRDBnYVhOVGVXMWliMnc3WEc1Y2JtWjFibU4wYVc5dUlHbHpWVzVrWldacGJtVmtLR0Z5WnlrZ2UxeHVJQ0J5WlhSMWNtNGdZWEpuSUQwOVBTQjJiMmxrSURBN1hHNTlYRzVsZUhCdmNuUnpMbWx6Vlc1a1pXWnBibVZrSUQwZ2FYTlZibVJsWm1sdVpXUTdYRzVjYm1aMWJtTjBhVzl1SUdselVtVm5SWGh3S0hKbEtTQjdYRzRnSUhKbGRIVnliaUJwYzA5aWFtVmpkQ2h5WlNrZ0ppWWdiMkpxWldOMFZHOVRkSEpwYm1jb2NtVXBJRDA5UFNBblcyOWlhbVZqZENCU1pXZEZlSEJkSnp0Y2JuMWNibVY0Y0c5eWRITXVhWE5TWldkRmVIQWdQU0JwYzFKbFowVjRjRHRjYmx4dVpuVnVZM1JwYjI0Z2FYTlBZbXBsWTNRb1lYSm5LU0I3WEc0Z0lISmxkSFZ5YmlCMGVYQmxiMllnWVhKbklEMDlQU0FuYjJKcVpXTjBKeUFtSmlCaGNtY2dJVDA5SUc1MWJHdzdYRzU5WEc1bGVIQnZjblJ6TG1selQySnFaV04wSUQwZ2FYTlBZbXBsWTNRN1hHNWNibVoxYm1OMGFXOXVJR2x6UkdGMFpTaGtLU0I3WEc0Z0lISmxkSFZ5YmlCcGMwOWlhbVZqZENoa0tTQW1KaUJ2WW1wbFkzUlViMU4wY21sdVp5aGtLU0E5UFQwZ0oxdHZZbXBsWTNRZ1JHRjBaVjBuTzF4dWZWeHVaWGh3YjNKMGN5NXBjMFJoZEdVZ1BTQnBjMFJoZEdVN1hHNWNibVoxYm1OMGFXOXVJR2x6UlhKeWIzSW9aU2tnZTF4dUlDQnlaWFIxY200Z2FYTlBZbXBsWTNRb1pTa2dKaVpjYmlBZ0lDQWdJQ2h2WW1wbFkzUlViMU4wY21sdVp5aGxLU0E5UFQwZ0oxdHZZbXBsWTNRZ1JYSnliM0pkSnlCOGZDQmxJR2x1YzNSaGJtTmxiMllnUlhKeWIzSXBPMXh1ZlZ4dVpYaHdiM0owY3k1cGMwVnljbTl5SUQwZ2FYTkZjbkp2Y2p0Y2JseHVablZ1WTNScGIyNGdhWE5HZFc1amRHbHZiaWhoY21jcElIdGNiaUFnY21WMGRYSnVJSFI1Y0dWdlppQmhjbWNnUFQwOUlDZG1kVzVqZEdsdmJpYzdYRzU5WEc1bGVIQnZjblJ6TG1selJuVnVZM1JwYjI0Z1BTQnBjMFoxYm1OMGFXOXVPMXh1WEc1bWRXNWpkR2x2YmlCcGMxQnlhVzFwZEdsMlpTaGhjbWNwSUh0Y2JpQWdjbVYwZFhKdUlHRnlaeUE5UFQwZ2JuVnNiQ0I4ZkZ4dUlDQWdJQ0FnSUNBZ2RIbHdaVzltSUdGeVp5QTlQVDBnSjJKdmIyeGxZVzRuSUh4OFhHNGdJQ0FnSUNBZ0lDQjBlWEJsYjJZZ1lYSm5JRDA5UFNBbmJuVnRZbVZ5SnlCOGZGeHVJQ0FnSUNBZ0lDQWdkSGx3Wlc5bUlHRnlaeUE5UFQwZ0ozTjBjbWx1WnljZ2ZIeGNiaUFnSUNBZ0lDQWdJSFI1Y0dWdlppQmhjbWNnUFQwOUlDZHplVzFpYjJ3bklIeDhJQ0F2THlCRlV6WWdjM2x0WW05c1hHNGdJQ0FnSUNBZ0lDQjBlWEJsYjJZZ1lYSm5JRDA5UFNBbmRXNWtaV1pwYm1Wa0p6dGNibjFjYm1WNGNHOXlkSE11YVhOUWNtbHRhWFJwZG1VZ1BTQnBjMUJ5YVcxcGRHbDJaVHRjYmx4dVpYaHdiM0owY3k1cGMwSjFabVpsY2lBOUlISmxjWFZwY21Vb0p5NHZjM1Z3Y0c5eWRDOXBjMEoxWm1abGNpY3BPMXh1WEc1bWRXNWpkR2x2YmlCdlltcGxZM1JVYjFOMGNtbHVaeWh2S1NCN1hHNGdJSEpsZEhWeWJpQlBZbXBsWTNRdWNISnZkRzkwZVhCbExuUnZVM1J5YVc1bkxtTmhiR3dvYnlrN1hHNTlYRzVjYmx4dVpuVnVZM1JwYjI0Z2NHRmtLRzRwSUh0Y2JpQWdjbVYwZFhKdUlHNGdQQ0F4TUNBL0lDY3dKeUFySUc0dWRHOVRkSEpwYm1jb01UQXBJRG9nYmk1MGIxTjBjbWx1WnlneE1DazdYRzU5WEc1Y2JseHVkbUZ5SUcxdmJuUm9jeUE5SUZzblNtRnVKeXdnSjBabFlpY3NJQ2ROWVhJbkxDQW5RWEJ5Snl3Z0owMWhlU2NzSUNkS2RXNG5MQ0FuU25Wc0p5d2dKMEYxWnljc0lDZFRaWEFuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FuVDJOMEp5d2dKMDV2ZGljc0lDZEVaV01uWFR0Y2JseHVMeThnTWpZZ1JtVmlJREUyT2pFNU9qTTBYRzVtZFc1amRHbHZiaUIwYVcxbGMzUmhiWEFvS1NCN1hHNGdJSFpoY2lCa0lEMGdibVYzSUVSaGRHVW9LVHRjYmlBZ2RtRnlJSFJwYldVZ1BTQmJjR0ZrS0dRdVoyVjBTRzkxY25Nb0tTa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIQmhaQ2hrTG1kbGRFMXBiblYwWlhNb0tTa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIQmhaQ2hrTG1kbGRGTmxZMjl1WkhNb0tTbGRMbXB2YVc0b0p6b25LVHRjYmlBZ2NtVjBkWEp1SUZ0a0xtZGxkRVJoZEdVb0tTd2diVzl1ZEdoelcyUXVaMlYwVFc5dWRHZ29LVjBzSUhScGJXVmRMbXB2YVc0b0p5QW5LVHRjYm4xY2JseHVYRzR2THlCc2IyY2dhWE1nYW5WemRDQmhJSFJvYVc0Z2QzSmhjSEJsY2lCMGJ5QmpiMjV6YjJ4bExteHZaeUIwYUdGMElIQnlaWEJsYm1SeklHRWdkR2x0WlhOMFlXMXdYRzVsZUhCdmNuUnpMbXh2WnlBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNCamIyNXpiMnhsTG14dlp5Z25KWE1nTFNBbGN5Y3NJSFJwYldWemRHRnRjQ2dwTENCbGVIQnZjblJ6TG1admNtMWhkQzVoY0hCc2VTaGxlSEJ2Y25SekxDQmhjbWQxYldWdWRITXBLVHRjYm4wN1hHNWNibHh1THlvcVhHNGdLaUJKYm1obGNtbDBJSFJvWlNCd2NtOTBiM1I1Y0dVZ2JXVjBhRzlrY3lCbWNtOXRJRzl1WlNCamIyNXpkSEoxWTNSdmNpQnBiblJ2SUdGdWIzUm9aWEl1WEc0Z0tseHVJQ29nVkdobElFWjFibU4wYVc5dUxuQnliM1J2ZEhsd1pTNXBibWhsY21sMGN5Qm1jbTl0SUd4aGJtY3Vhbk1nY21WM2NtbDBkR1Z1SUdGeklHRWdjM1JoYm1SaGJHOXVaVnh1SUNvZ1puVnVZM1JwYjI0Z0tHNXZkQ0J2YmlCR2RXNWpkR2x2Ymk1d2NtOTBiM1I1Y0dVcExpQk9UMVJGT2lCSlppQjBhR2x6SUdacGJHVWdhWE1nZEc4Z1ltVWdiRzloWkdWa1hHNGdLaUJrZFhKcGJtY2dZbTl2ZEhOMGNtRndjR2x1WnlCMGFHbHpJR1oxYm1OMGFXOXVJRzVsWldSeklIUnZJR0psSUhKbGQzSnBkSFJsYmlCMWMybHVaeUJ6YjIxbElHNWhkR2wyWlZ4dUlDb2dablZ1WTNScGIyNXpJR0Z6SUhCeWIzUnZkSGx3WlNCelpYUjFjQ0IxYzJsdVp5QnViM0p0WVd3Z1NtRjJZVk5qY21sd2RDQmtiMlZ6SUc1dmRDQjNiM0pySUdGelhHNGdLaUJsZUhCbFkzUmxaQ0JrZFhKcGJtY2dZbTl2ZEhOMGNtRndjR2x1WnlBb2MyVmxJRzFwY25KdmNpNXFjeUJwYmlCeU1URTBPVEF6S1M1Y2JpQXFYRzRnS2lCQWNHRnlZVzBnZTJaMWJtTjBhVzl1ZlNCamRHOXlJRU52Ym5OMGNuVmpkRzl5SUdaMWJtTjBhVzl1SUhkb2FXTm9JRzVsWldSeklIUnZJR2x1YUdWeWFYUWdkR2hsWEc0Z0tpQWdJQ0FnY0hKdmRHOTBlWEJsTGx4dUlDb2dRSEJoY21GdElIdG1kVzVqZEdsdmJuMGdjM1Z3WlhKRGRHOXlJRU52Ym5OMGNuVmpkRzl5SUdaMWJtTjBhVzl1SUhSdklHbHVhR1Z5YVhRZ2NISnZkRzkwZVhCbElHWnliMjB1WEc0Z0tpOWNibVY0Y0c5eWRITXVhVzVvWlhKcGRITWdQU0J5WlhGMWFYSmxLQ2RwYm1obGNtbDBjeWNwTzF4dVhHNWxlSEJ2Y25SekxsOWxlSFJsYm1RZ1BTQm1kVzVqZEdsdmJpaHZjbWxuYVc0c0lHRmtaQ2tnZTF4dUlDQXZMeUJFYjI0bmRDQmtieUJoYm5sMGFHbHVaeUJwWmlCaFpHUWdhWE51SjNRZ1lXNGdiMkpxWldOMFhHNGdJR2xtSUNnaFlXUmtJSHg4SUNGcGMwOWlhbVZqZENoaFpHUXBLU0J5WlhSMWNtNGdiM0pwWjJsdU8xeHVYRzRnSUhaaGNpQnJaWGx6SUQwZ1QySnFaV04wTG10bGVYTW9ZV1JrS1R0Y2JpQWdkbUZ5SUdrZ1BTQnJaWGx6TG14bGJtZDBhRHRjYmlBZ2QyaHBiR1VnS0drdExTa2dlMXh1SUNBZ0lHOXlhV2RwYmx0clpYbHpXMmxkWFNBOUlHRmtaRnRyWlhselcybGRYVHRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdiM0pwWjJsdU8xeHVmVHRjYmx4dVpuVnVZM1JwYjI0Z2FHRnpUM2R1VUhKdmNHVnlkSGtvYjJKcUxDQndjbTl3S1NCN1hHNGdJSEpsZEhWeWJpQlBZbXBsWTNRdWNISnZkRzkwZVhCbExtaGhjMDkzYmxCeWIzQmxjblI1TG1OaGJHd29iMkpxTENCd2NtOXdLVHRjYm4xY2JpSmRmUT09IiwiKGZ1bmN0aW9uIChnbG9iYWwpe1xuLyohIGh0dHA6Ly9tdGhzLmJlL2hlIHYwLjUuMCBieSBAbWF0aGlhcyB8IE1JVCBsaWNlbnNlICovXG47KGZ1bmN0aW9uKHJvb3QpIHtcblxuXHQvLyBEZXRlY3QgZnJlZSB2YXJpYWJsZXMgYGV4cG9ydHNgLlxuXHR2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzO1xuXG5cdC8vIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLlxuXHR2YXIgZnJlZU1vZHVsZSA9IHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmXG5cdFx0bW9kdWxlLmV4cG9ydHMgPT0gZnJlZUV4cG9ydHMgJiYgbW9kdWxlO1xuXG5cdC8vIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgLCBmcm9tIE5vZGUuanMgb3IgQnJvd3NlcmlmaWVkIGNvZGUsXG5cdC8vIGFuZCB1c2UgaXQgYXMgYHJvb3RgLlxuXHR2YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsO1xuXHRpZiAoZnJlZUdsb2JhbC5nbG9iYWwgPT09IGZyZWVHbG9iYWwgfHwgZnJlZUdsb2JhbC53aW5kb3cgPT09IGZyZWVHbG9iYWwpIHtcblx0XHRyb290ID0gZnJlZUdsb2JhbDtcblx0fVxuXG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdC8vIEFsbCBhc3RyYWwgc3ltYm9scy5cblx0dmFyIHJlZ2V4QXN0cmFsU3ltYm9scyA9IC9bXFx1RDgwMC1cXHVEQkZGXVtcXHVEQzAwLVxcdURGRkZdL2c7XG5cdC8vIEFsbCBBU0NJSSBzeW1ib2xzIChub3QganVzdCBwcmludGFibGUgQVNDSUkpIGV4Y2VwdCB0aG9zZSBsaXN0ZWQgaW4gdGhlXG5cdC8vIGZpcnN0IGNvbHVtbiBvZiB0aGUgb3ZlcnJpZGVzIHRhYmxlLlxuXHQvLyBodHRwOi8vd2hhdHdnLm9yZy9odG1sL3Rva2VuaXphdGlvbi5odG1sI3RhYmxlLWNoYXJyZWYtb3ZlcnJpZGVzXG5cdHZhciByZWdleEFzY2lpV2hpdGVsaXN0ID0gL1tcXHgwMS1cXHg3Rl0vZztcblx0Ly8gQWxsIEJNUCBzeW1ib2xzIHRoYXQgYXJlIG5vdCBBU0NJSSBuZXdsaW5lcywgcHJpbnRhYmxlIEFTQ0lJIHN5bWJvbHMsIG9yXG5cdC8vIGNvZGUgcG9pbnRzIGxpc3RlZCBpbiB0aGUgZmlyc3QgY29sdW1uIG9mIHRoZSBvdmVycmlkZXMgdGFibGUgb25cblx0Ly8gaHR0cDovL3doYXR3Zy5vcmcvaHRtbC90b2tlbml6YXRpb24uaHRtbCN0YWJsZS1jaGFycmVmLW92ZXJyaWRlcy5cblx0dmFyIHJlZ2V4Qm1wV2hpdGVsaXN0ID0gL1tcXHgwMS1cXHRcXHgwQlxcZlxceDBFLVxceDFGXFx4N0ZcXHg4MVxceDhEXFx4OEZcXHg5MFxceDlEXFx4QTAtXFx1RkZGRl0vZztcblxuXHR2YXIgcmVnZXhFbmNvZGVOb25Bc2NpaSA9IC88XFx1MjBEMnw9XFx1MjBFNXw+XFx1MjBEMnxcXHUyMDVGXFx1MjAwQXxcXHUyMTlEXFx1MDMzOHxcXHUyMjAyXFx1MDMzOHxcXHUyMjIwXFx1MjBEMnxcXHUyMjI5XFx1RkUwMHxcXHUyMjJBXFx1RkUwMHxcXHUyMjNDXFx1MjBEMnxcXHUyMjNEXFx1MDMzMXxcXHUyMjNFXFx1MDMzM3xcXHUyMjQyXFx1MDMzOHxcXHUyMjRCXFx1MDMzOHxcXHUyMjREXFx1MjBEMnxcXHUyMjRFXFx1MDMzOHxcXHUyMjRGXFx1MDMzOHxcXHUyMjUwXFx1MDMzOHxcXHUyMjYxXFx1MjBFNXxcXHUyMjY0XFx1MjBEMnxcXHUyMjY1XFx1MjBEMnxcXHUyMjY2XFx1MDMzOHxcXHUyMjY3XFx1MDMzOHxcXHUyMjY4XFx1RkUwMHxcXHUyMjY5XFx1RkUwMHxcXHUyMjZBXFx1MDMzOHxcXHUyMjZBXFx1MjBEMnxcXHUyMjZCXFx1MDMzOHxcXHUyMjZCXFx1MjBEMnxcXHUyMjdGXFx1MDMzOHxcXHUyMjgyXFx1MjBEMnxcXHUyMjgzXFx1MjBEMnxcXHUyMjhBXFx1RkUwMHxcXHUyMjhCXFx1RkUwMHxcXHUyMjhGXFx1MDMzOHxcXHUyMjkwXFx1MDMzOHxcXHUyMjkzXFx1RkUwMHxcXHUyMjk0XFx1RkUwMHxcXHUyMkI0XFx1MjBEMnxcXHUyMkI1XFx1MjBEMnxcXHUyMkQ4XFx1MDMzOHxcXHUyMkQ5XFx1MDMzOHxcXHUyMkRBXFx1RkUwMHxcXHUyMkRCXFx1RkUwMHxcXHUyMkY1XFx1MDMzOHxcXHUyMkY5XFx1MDMzOHxcXHUyOTMzXFx1MDMzOHxcXHUyOUNGXFx1MDMzOHxcXHUyOUQwXFx1MDMzOHxcXHUyQTZEXFx1MDMzOHxcXHUyQTcwXFx1MDMzOHxcXHUyQTdEXFx1MDMzOHxcXHUyQTdFXFx1MDMzOHxcXHUyQUExXFx1MDMzOHxcXHUyQUEyXFx1MDMzOHxcXHUyQUFDXFx1RkUwMHxcXHUyQUFEXFx1RkUwMHxcXHUyQUFGXFx1MDMzOHxcXHUyQUIwXFx1MDMzOHxcXHUyQUM1XFx1MDMzOHxcXHUyQUM2XFx1MDMzOHxcXHUyQUNCXFx1RkUwMHxcXHUyQUNDXFx1RkUwMHxcXHUyQUZEXFx1MjBFNXxbXFx4QTAtXFx1MDExM1xcdTAxMTYtXFx1MDEyMlxcdTAxMjQtXFx1MDEyQlxcdTAxMkUtXFx1MDE0RFxcdTAxNTAtXFx1MDE3RVxcdTAxOTJcXHUwMUI1XFx1MDFGNVxcdTAyMzdcXHUwMkM2XFx1MDJDN1xcdTAyRDgtXFx1MDJERFxcdTAzMTFcXHUwMzkxLVxcdTAzQTFcXHUwM0EzLVxcdTAzQTlcXHUwM0IxLVxcdTAzQzlcXHUwM0QxXFx1MDNEMlxcdTAzRDVcXHUwM0Q2XFx1MDNEQ1xcdTAzRERcXHUwM0YwXFx1MDNGMVxcdTAzRjVcXHUwM0Y2XFx1MDQwMS1cXHUwNDBDXFx1MDQwRS1cXHUwNDRGXFx1MDQ1MS1cXHUwNDVDXFx1MDQ1RVxcdTA0NUZcXHUyMDAyLVxcdTIwMDVcXHUyMDA3LVxcdTIwMTBcXHUyMDEzLVxcdTIwMTZcXHUyMDE4LVxcdTIwMUFcXHUyMDFDLVxcdTIwMUVcXHUyMDIwLVxcdTIwMjJcXHUyMDI1XFx1MjAyNlxcdTIwMzAtXFx1MjAzNVxcdTIwMzlcXHUyMDNBXFx1MjAzRVxcdTIwNDFcXHUyMDQzXFx1MjA0NFxcdTIwNEZcXHUyMDU3XFx1MjA1Ri1cXHUyMDYzXFx1MjBBQ1xcdTIwREJcXHUyMERDXFx1MjEwMlxcdTIxMDVcXHUyMTBBLVxcdTIxMTNcXHUyMTE1LVxcdTIxMUVcXHUyMTIyXFx1MjEyNFxcdTIxMjctXFx1MjEyOVxcdTIxMkNcXHUyMTJEXFx1MjEyRi1cXHUyMTMxXFx1MjEzMy1cXHUyMTM4XFx1MjE0NS1cXHUyMTQ4XFx1MjE1My1cXHUyMTVFXFx1MjE5MC1cXHUyMTlCXFx1MjE5RC1cXHUyMUE3XFx1MjFBOS1cXHUyMUFFXFx1MjFCMC1cXHUyMUIzXFx1MjFCNS1cXHUyMUI3XFx1MjFCQS1cXHUyMURCXFx1MjFERFxcdTIxRTRcXHUyMUU1XFx1MjFGNVxcdTIxRkQtXFx1MjIwNVxcdTIyMDctXFx1MjIwOVxcdTIyMEJcXHUyMjBDXFx1MjIwRi1cXHUyMjE0XFx1MjIxNi1cXHUyMjE4XFx1MjIxQVxcdTIyMUQtXFx1MjIzOFxcdTIyM0EtXFx1MjI1N1xcdTIyNTlcXHUyMjVBXFx1MjI1Q1xcdTIyNUYtXFx1MjI2MlxcdTIyNjQtXFx1MjI4QlxcdTIyOEQtXFx1MjI5QlxcdTIyOUQtXFx1MjJBNVxcdTIyQTctXFx1MjJCMFxcdTIyQjItXFx1MjJCQlxcdTIyQkQtXFx1MjJEQlxcdTIyREUtXFx1MjJFM1xcdTIyRTYtXFx1MjJGN1xcdTIyRjktXFx1MjJGRVxcdTIzMDVcXHUyMzA2XFx1MjMwOC1cXHUyMzEwXFx1MjMxMlxcdTIzMTNcXHUyMzE1XFx1MjMxNlxcdTIzMUMtXFx1MjMxRlxcdTIzMjJcXHUyMzIzXFx1MjMyRFxcdTIzMkVcXHUyMzM2XFx1MjMzRFxcdTIzM0ZcXHUyMzdDXFx1MjNCMFxcdTIzQjFcXHUyM0I0LVxcdTIzQjZcXHUyM0RDLVxcdTIzREZcXHUyM0UyXFx1MjNFN1xcdTI0MjNcXHUyNEM4XFx1MjUwMFxcdTI1MDJcXHUyNTBDXFx1MjUxMFxcdTI1MTRcXHUyNTE4XFx1MjUxQ1xcdTI1MjRcXHUyNTJDXFx1MjUzNFxcdTI1M0NcXHUyNTUwLVxcdTI1NkNcXHUyNTgwXFx1MjU4NFxcdTI1ODhcXHUyNTkxLVxcdTI1OTNcXHUyNUExXFx1MjVBQVxcdTI1QUJcXHUyNUFEXFx1MjVBRVxcdTI1QjFcXHUyNUIzLVxcdTI1QjVcXHUyNUI4XFx1MjVCOVxcdTI1QkQtXFx1MjVCRlxcdTI1QzJcXHUyNUMzXFx1MjVDQVxcdTI1Q0JcXHUyNUVDXFx1MjVFRlxcdTI1RjgtXFx1MjVGQ1xcdTI2MDVcXHUyNjA2XFx1MjYwRVxcdTI2NDBcXHUyNjQyXFx1MjY2MFxcdTI2NjNcXHUyNjY1XFx1MjY2NlxcdTI2NkFcXHUyNjZELVxcdTI2NkZcXHUyNzEzXFx1MjcxN1xcdTI3MjBcXHUyNzM2XFx1Mjc1OFxcdTI3NzJcXHUyNzczXFx1MjdDOFxcdTI3QzlcXHUyN0U2LVxcdTI3RURcXHUyN0Y1LVxcdTI3RkFcXHUyN0ZDXFx1MjdGRlxcdTI5MDItXFx1MjkwNVxcdTI5MEMtXFx1MjkxM1xcdTI5MTZcXHUyOTE5LVxcdTI5MjBcXHUyOTIzLVxcdTI5MkFcXHUyOTMzXFx1MjkzNS1cXHUyOTM5XFx1MjkzQ1xcdTI5M0RcXHUyOTQ1XFx1Mjk0OC1cXHUyOTRCXFx1Mjk0RS1cXHUyOTc2XFx1Mjk3OFxcdTI5NzlcXHUyOTdCLVxcdTI5N0ZcXHUyOTg1XFx1Mjk4NlxcdTI5OEItXFx1Mjk5NlxcdTI5OUFcXHUyOTlDXFx1Mjk5RFxcdTI5QTQtXFx1MjlCN1xcdTI5QjlcXHUyOUJCXFx1MjlCQ1xcdTI5QkUtXFx1MjlDNVxcdTI5QzlcXHUyOUNELVxcdTI5RDBcXHUyOURDLVxcdTI5REVcXHUyOUUzLVxcdTI5RTVcXHUyOUVCXFx1MjlGNFxcdTI5RjZcXHUyQTAwLVxcdTJBMDJcXHUyQTA0XFx1MkEwNlxcdTJBMENcXHUyQTBEXFx1MkExMC1cXHUyQTE3XFx1MkEyMi1cXHUyQTI3XFx1MkEyOVxcdTJBMkFcXHUyQTJELVxcdTJBMzFcXHUyQTMzLVxcdTJBM0NcXHUyQTNGXFx1MkE0MFxcdTJBNDItXFx1MkE0RFxcdTJBNTBcXHUyQTUzLVxcdTJBNThcXHUyQTVBLVxcdTJBNURcXHUyQTVGXFx1MkE2NlxcdTJBNkFcXHUyQTZELVxcdTJBNzVcXHUyQTc3LVxcdTJBOUFcXHUyQTlELVxcdTJBQTJcXHUyQUE0LVxcdTJBQjBcXHUyQUIzLVxcdTJBQzhcXHUyQUNCXFx1MkFDQ1xcdTJBQ0YtXFx1MkFEQlxcdTJBRTRcXHUyQUU2LVxcdTJBRTlcXHUyQUVCLVxcdTJBRjNcXHUyQUZEXFx1RkIwMC1cXHVGQjA0XXxcXHVEODM1W1xcdURDOUNcXHVEQzlFXFx1REM5RlxcdURDQTJcXHVEQ0E1XFx1RENBNlxcdURDQTktXFx1RENBQ1xcdURDQUUtXFx1RENCOVxcdURDQkJcXHVEQ0JELVxcdURDQzNcXHVEQ0M1LVxcdURDQ0ZcXHVERDA0XFx1REQwNVxcdUREMDctXFx1REQwQVxcdUREMEQtXFx1REQxNFxcdUREMTYtXFx1REQxQ1xcdUREMUUtXFx1REQzOVxcdUREM0ItXFx1REQzRVxcdURENDAtXFx1REQ0NFxcdURENDZcXHVERDRBLVxcdURENTBcXHVERDUyLVxcdURENkJdL2c7XG5cdHZhciBlbmNvZGVNYXAgPSB7J1xceEMxJzonQWFjdXRlJywnXFx4RTEnOidhYWN1dGUnLCdcXHUwMTAyJzonQWJyZXZlJywnXFx1MDEwMyc6J2FicmV2ZScsJ1xcdTIyM0UnOidhYycsJ1xcdTIyM0YnOidhY2QnLCdcXHUyMjNFXFx1MDMzMyc6J2FjRScsJ1xceEMyJzonQWNpcmMnLCdcXHhFMic6J2FjaXJjJywnXFx4QjQnOidhY3V0ZScsJ1xcdTA0MTAnOidBY3knLCdcXHUwNDMwJzonYWN5JywnXFx4QzYnOidBRWxpZycsJ1xceEU2JzonYWVsaWcnLCdcXHUyMDYxJzonYWYnLCdcXHVEODM1XFx1REQwNCc6J0FmcicsJ1xcdUQ4MzVcXHVERDFFJzonYWZyJywnXFx4QzAnOidBZ3JhdmUnLCdcXHhFMCc6J2FncmF2ZScsJ1xcdTIxMzUnOidhbGVwaCcsJ1xcdTAzOTEnOidBbHBoYScsJ1xcdTAzQjEnOidhbHBoYScsJ1xcdTAxMDAnOidBbWFjcicsJ1xcdTAxMDEnOidhbWFjcicsJ1xcdTJBM0YnOidhbWFsZycsJyYnOidhbXAnLCdcXHUyQTU1JzonYW5kYW5kJywnXFx1MkE1Myc6J0FuZCcsJ1xcdTIyMjcnOidhbmQnLCdcXHUyQTVDJzonYW5kZCcsJ1xcdTJBNTgnOidhbmRzbG9wZScsJ1xcdTJBNUEnOidhbmR2JywnXFx1MjIyMCc6J2FuZycsJ1xcdTI5QTQnOidhbmdlJywnXFx1MjlBOCc6J2FuZ21zZGFhJywnXFx1MjlBOSc6J2FuZ21zZGFiJywnXFx1MjlBQSc6J2FuZ21zZGFjJywnXFx1MjlBQic6J2FuZ21zZGFkJywnXFx1MjlBQyc6J2FuZ21zZGFlJywnXFx1MjlBRCc6J2FuZ21zZGFmJywnXFx1MjlBRSc6J2FuZ21zZGFnJywnXFx1MjlBRic6J2FuZ21zZGFoJywnXFx1MjIyMSc6J2FuZ21zZCcsJ1xcdTIyMUYnOidhbmdydCcsJ1xcdTIyQkUnOidhbmdydHZiJywnXFx1Mjk5RCc6J2FuZ3J0dmJkJywnXFx1MjIyMic6J2FuZ3NwaCcsJ1xceEM1JzonYW5nc3QnLCdcXHUyMzdDJzonYW5nemFycicsJ1xcdTAxMDQnOidBb2dvbicsJ1xcdTAxMDUnOidhb2dvbicsJ1xcdUQ4MzVcXHVERDM4JzonQW9wZicsJ1xcdUQ4MzVcXHVERDUyJzonYW9wZicsJ1xcdTJBNkYnOidhcGFjaXInLCdcXHUyMjQ4JzonYXAnLCdcXHUyQTcwJzonYXBFJywnXFx1MjI0QSc6J2FwZScsJ1xcdTIyNEInOidhcGlkJywnXFwnJzonYXBvcycsJ1xceEU1JzonYXJpbmcnLCdcXHVEODM1XFx1REM5Qyc6J0FzY3InLCdcXHVEODM1XFx1RENCNic6J2FzY3InLCdcXHUyMjU0JzonY29sb25lJywnKic6J2FzdCcsJ1xcdTIyNEQnOidDdXBDYXAnLCdcXHhDMyc6J0F0aWxkZScsJ1xceEUzJzonYXRpbGRlJywnXFx4QzQnOidBdW1sJywnXFx4RTQnOidhdW1sJywnXFx1MjIzMyc6J2F3Y29uaW50JywnXFx1MkExMSc6J2F3aW50JywnXFx1MjI0Qyc6J2Jjb25nJywnXFx1MDNGNic6J2JlcHNpJywnXFx1MjAzNSc6J2JwcmltZScsJ1xcdTIyM0QnOidic2ltJywnXFx1MjJDRCc6J2JzaW1lJywnXFx1MjIxNic6J3NldG1uJywnXFx1MkFFNyc6J0JhcnYnLCdcXHUyMkJEJzonYmFydmVlJywnXFx1MjMwNSc6J2JhcndlZCcsJ1xcdTIzMDYnOidCYXJ3ZWQnLCdcXHUyM0I1JzonYmJyaycsJ1xcdTIzQjYnOidiYnJrdGJyaycsJ1xcdTA0MTEnOidCY3knLCdcXHUwNDMxJzonYmN5JywnXFx1MjAxRSc6J2JkcXVvJywnXFx1MjIzNSc6J2JlY2F1cycsJ1xcdTI5QjAnOidiZW1wdHl2JywnXFx1MjEyQyc6J0JzY3InLCdcXHUwMzkyJzonQmV0YScsJ1xcdTAzQjInOidiZXRhJywnXFx1MjEzNic6J2JldGgnLCdcXHUyMjZDJzondHdpeHQnLCdcXHVEODM1XFx1REQwNSc6J0JmcicsJ1xcdUQ4MzVcXHVERDFGJzonYmZyJywnXFx1MjJDMic6J3hjYXAnLCdcXHUyNUVGJzoneGNpcmMnLCdcXHUyMkMzJzoneGN1cCcsJ1xcdTJBMDAnOid4b2RvdCcsJ1xcdTJBMDEnOid4b3BsdXMnLCdcXHUyQTAyJzoneG90aW1lJywnXFx1MkEwNic6J3hzcWN1cCcsJ1xcdTI2MDUnOidzdGFyZicsJ1xcdTI1QkQnOid4ZHRyaScsJ1xcdTI1QjMnOid4dXRyaScsJ1xcdTJBMDQnOid4dXBsdXMnLCdcXHUyMkMxJzonVmVlJywnXFx1MjJDMCc6J1dlZGdlJywnXFx1MjkwRCc6J3JiYXJyJywnXFx1MjlFQic6J2xvemYnLCdcXHUyNUFBJzonc3F1ZicsJ1xcdTI1QjQnOid1dHJpZicsJ1xcdTI1QkUnOidkdHJpZicsJ1xcdTI1QzInOidsdHJpZicsJ1xcdTI1QjgnOidydHJpZicsJ1xcdTI0MjMnOidibGFuaycsJ1xcdTI1OTInOidibGsxMicsJ1xcdTI1OTEnOidibGsxNCcsJ1xcdTI1OTMnOidibGszNCcsJ1xcdTI1ODgnOidibG9jaycsJz1cXHUyMEU1JzonYm5lJywnXFx1MjI2MVxcdTIwRTUnOidibmVxdWl2JywnXFx1MkFFRCc6J2JOb3QnLCdcXHUyMzEwJzonYm5vdCcsJ1xcdUQ4MzVcXHVERDM5JzonQm9wZicsJ1xcdUQ4MzVcXHVERDUzJzonYm9wZicsJ1xcdTIyQTUnOidib3QnLCdcXHUyMkM4JzonYm93dGllJywnXFx1MjlDOSc6J2JveGJveCcsJ1xcdTI1MTAnOidib3hkbCcsJ1xcdTI1NTUnOidib3hkTCcsJ1xcdTI1NTYnOidib3hEbCcsJ1xcdTI1NTcnOidib3hETCcsJ1xcdTI1MEMnOidib3hkcicsJ1xcdTI1NTInOidib3hkUicsJ1xcdTI1NTMnOidib3hEcicsJ1xcdTI1NTQnOidib3hEUicsJ1xcdTI1MDAnOidib3hoJywnXFx1MjU1MCc6J2JveEgnLCdcXHUyNTJDJzonYm94aGQnLCdcXHUyNTY0JzonYm94SGQnLCdcXHUyNTY1JzonYm94aEQnLCdcXHUyNTY2JzonYm94SEQnLCdcXHUyNTM0JzonYm94aHUnLCdcXHUyNTY3JzonYm94SHUnLCdcXHUyNTY4JzonYm94aFUnLCdcXHUyNTY5JzonYm94SFUnLCdcXHUyMjlGJzonbWludXNiJywnXFx1MjI5RSc6J3BsdXNiJywnXFx1MjJBMCc6J3RpbWVzYicsJ1xcdTI1MTgnOidib3h1bCcsJ1xcdTI1NUInOidib3h1TCcsJ1xcdTI1NUMnOidib3hVbCcsJ1xcdTI1NUQnOidib3hVTCcsJ1xcdTI1MTQnOidib3h1cicsJ1xcdTI1NTgnOidib3h1UicsJ1xcdTI1NTknOidib3hVcicsJ1xcdTI1NUEnOidib3hVUicsJ1xcdTI1MDInOidib3h2JywnXFx1MjU1MSc6J2JveFYnLCdcXHUyNTNDJzonYm94dmgnLCdcXHUyNTZBJzonYm94dkgnLCdcXHUyNTZCJzonYm94VmgnLCdcXHUyNTZDJzonYm94VkgnLCdcXHUyNTI0JzonYm94dmwnLCdcXHUyNTYxJzonYm94dkwnLCdcXHUyNTYyJzonYm94VmwnLCdcXHUyNTYzJzonYm94VkwnLCdcXHUyNTFDJzonYm94dnInLCdcXHUyNTVFJzonYm94dlInLCdcXHUyNTVGJzonYm94VnInLCdcXHUyNTYwJzonYm94VlInLCdcXHUwMkQ4JzonYnJldmUnLCdcXHhBNic6J2JydmJhcicsJ1xcdUQ4MzVcXHVEQ0I3JzonYnNjcicsJ1xcdTIwNEYnOidic2VtaScsJ1xcdTI5QzUnOidic29sYicsJ1xcXFwnOidic29sJywnXFx1MjdDOCc6J2Jzb2xoc3ViJywnXFx1MjAyMic6J2J1bGwnLCdcXHUyMjRFJzonYnVtcCcsJ1xcdTJBQUUnOididW1wRScsJ1xcdTIyNEYnOididW1wZScsJ1xcdTAxMDYnOidDYWN1dGUnLCdcXHUwMTA3JzonY2FjdXRlJywnXFx1MkE0NCc6J2NhcGFuZCcsJ1xcdTJBNDknOidjYXBicmN1cCcsJ1xcdTJBNEInOidjYXBjYXAnLCdcXHUyMjI5JzonY2FwJywnXFx1MjJEMic6J0NhcCcsJ1xcdTJBNDcnOidjYXBjdXAnLCdcXHUyQTQwJzonY2FwZG90JywnXFx1MjE0NSc6J0REJywnXFx1MjIyOVxcdUZFMDAnOidjYXBzJywnXFx1MjA0MSc6J2NhcmV0JywnXFx1MDJDNyc6J2Nhcm9uJywnXFx1MjEyRCc6J0NmcicsJ1xcdTJBNEQnOidjY2FwcycsJ1xcdTAxMEMnOidDY2Fyb24nLCdcXHUwMTBEJzonY2Nhcm9uJywnXFx4QzcnOidDY2VkaWwnLCdcXHhFNyc6J2NjZWRpbCcsJ1xcdTAxMDgnOidDY2lyYycsJ1xcdTAxMDknOidjY2lyYycsJ1xcdTIyMzAnOidDY29uaW50JywnXFx1MkE0Qyc6J2NjdXBzJywnXFx1MkE1MCc6J2NjdXBzc20nLCdcXHUwMTBBJzonQ2RvdCcsJ1xcdTAxMEInOidjZG90JywnXFx4QjgnOidjZWRpbCcsJ1xcdTI5QjInOidjZW1wdHl2JywnXFx4QTInOidjZW50JywnXFx4QjcnOidtaWRkb3QnLCdcXHVEODM1XFx1REQyMCc6J2NmcicsJ1xcdTA0MjcnOidDSGN5JywnXFx1MDQ0Nyc6J2NoY3knLCdcXHUyNzEzJzonY2hlY2snLCdcXHUwM0E3JzonQ2hpJywnXFx1MDNDNyc6J2NoaScsJ1xcdTAyQzYnOidjaXJjJywnXFx1MjI1Nyc6J2NpcmUnLCdcXHUyMUJBJzonb2xhcnInLCdcXHUyMUJCJzonb3JhcnInLCdcXHUyMjlCJzonb2FzdCcsJ1xcdTIyOUEnOidvY2lyJywnXFx1MjI5RCc6J29kYXNoJywnXFx1MjI5OSc6J29kb3QnLCdcXHhBRSc6J3JlZycsJ1xcdTI0QzgnOidvUycsJ1xcdTIyOTYnOidvbWludXMnLCdcXHUyMjk1Jzonb3BsdXMnLCdcXHUyMjk3Jzonb3RpbWVzJywnXFx1MjVDQic6J2NpcicsJ1xcdTI5QzMnOidjaXJFJywnXFx1MkExMCc6J2NpcmZuaW50JywnXFx1MkFFRic6J2Npcm1pZCcsJ1xcdTI5QzInOidjaXJzY2lyJywnXFx1MjIzMic6J2N3Y29uaW50JywnXFx1MjAxRCc6J3JkcXVvJywnXFx1MjAxOSc6J3JzcXVvJywnXFx1MjY2Myc6J2NsdWJzJywnOic6J2NvbG9uJywnXFx1MjIzNyc6J0NvbG9uJywnXFx1MkE3NCc6J0NvbG9uZScsJywnOidjb21tYScsJ0AnOidjb21tYXQnLCdcXHUyMjAxJzonY29tcCcsJ1xcdTIyMTgnOidjb21wZm4nLCdcXHUyMTAyJzonQ29wZicsJ1xcdTIyNDUnOidjb25nJywnXFx1MkE2RCc6J2Nvbmdkb3QnLCdcXHUyMjYxJzonZXF1aXYnLCdcXHUyMjJFJzonb2ludCcsJ1xcdTIyMkYnOidDb25pbnQnLCdcXHVEODM1XFx1REQ1NCc6J2NvcGYnLCdcXHUyMjEwJzonY29wcm9kJywnXFx4QTknOidjb3B5JywnXFx1MjExNyc6J2NvcHlzcicsJ1xcdTIxQjUnOidjcmFycicsJ1xcdTI3MTcnOidjcm9zcycsJ1xcdTJBMkYnOidDcm9zcycsJ1xcdUQ4MzVcXHVEQzlFJzonQ3NjcicsJ1xcdUQ4MzVcXHVEQ0I4JzonY3NjcicsJ1xcdTJBQ0YnOidjc3ViJywnXFx1MkFEMSc6J2NzdWJlJywnXFx1MkFEMCc6J2NzdXAnLCdcXHUyQUQyJzonY3N1cGUnLCdcXHUyMkVGJzonY3Rkb3QnLCdcXHUyOTM4JzonY3VkYXJybCcsJ1xcdTI5MzUnOidjdWRhcnJyJywnXFx1MjJERSc6J2N1ZXByJywnXFx1MjJERic6J2N1ZXNjJywnXFx1MjFCNic6J2N1bGFycicsJ1xcdTI5M0QnOidjdWxhcnJwJywnXFx1MkE0OCc6J2N1cGJyY2FwJywnXFx1MkE0Nic6J2N1cGNhcCcsJ1xcdTIyMkEnOidjdXAnLCdcXHUyMkQzJzonQ3VwJywnXFx1MkE0QSc6J2N1cGN1cCcsJ1xcdTIyOEQnOidjdXBkb3QnLCdcXHUyQTQ1JzonY3Vwb3InLCdcXHUyMjJBXFx1RkUwMCc6J2N1cHMnLCdcXHUyMUI3JzonY3VyYXJyJywnXFx1MjkzQyc6J2N1cmFycm0nLCdcXHUyMkNFJzonY3V2ZWUnLCdcXHUyMkNGJzonY3V3ZWQnLCdcXHhBNCc6J2N1cnJlbicsJ1xcdTIyMzEnOidjd2ludCcsJ1xcdTIzMkQnOidjeWxjdHknLCdcXHUyMDIwJzonZGFnZ2VyJywnXFx1MjAyMSc6J0RhZ2dlcicsJ1xcdTIxMzgnOidkYWxldGgnLCdcXHUyMTkzJzonZGFycicsJ1xcdTIxQTEnOidEYXJyJywnXFx1MjFEMyc6J2RBcnInLCdcXHUyMDEwJzonZGFzaCcsJ1xcdTJBRTQnOidEYXNodicsJ1xcdTIyQTMnOidkYXNodicsJ1xcdTI5MEYnOidyQmFycicsJ1xcdTAyREQnOidkYmxhYycsJ1xcdTAxMEUnOidEY2Fyb24nLCdcXHUwMTBGJzonZGNhcm9uJywnXFx1MDQxNCc6J0RjeScsJ1xcdTA0MzQnOidkY3knLCdcXHUyMUNBJzonZGRhcnInLCdcXHUyMTQ2JzonZGQnLCdcXHUyOTExJzonRERvdHJhaGQnLCdcXHUyQTc3JzonZUREb3QnLCdcXHhCMCc6J2RlZycsJ1xcdTIyMDcnOidEZWwnLCdcXHUwMzk0JzonRGVsdGEnLCdcXHUwM0I0JzonZGVsdGEnLCdcXHUyOUIxJzonZGVtcHR5dicsJ1xcdTI5N0YnOidkZmlzaHQnLCdcXHVEODM1XFx1REQwNyc6J0RmcicsJ1xcdUQ4MzVcXHVERDIxJzonZGZyJywnXFx1Mjk2NSc6J2RIYXInLCdcXHUyMUMzJzonZGhhcmwnLCdcXHUyMUMyJzonZGhhcnInLCdcXHUwMkQ5JzonZG90JywnYCc6J2dyYXZlJywnXFx1MDJEQyc6J3RpbGRlJywnXFx1MjJDNCc6J2RpYW0nLCdcXHUyNjY2JzonZGlhbXMnLCdcXHhBOCc6J2RpZScsJ1xcdTAzREQnOidnYW1tYWQnLCdcXHUyMkYyJzonZGlzaW4nLCdcXHhGNyc6J2RpdicsJ1xcdTIyQzcnOidkaXZvbngnLCdcXHUwNDAyJzonREpjeScsJ1xcdTA0NTInOidkamN5JywnXFx1MjMxRSc6J2RsY29ybicsJ1xcdTIzMEQnOidkbGNyb3AnLCckJzonZG9sbGFyJywnXFx1RDgzNVxcdUREM0InOidEb3BmJywnXFx1RDgzNVxcdURENTUnOidkb3BmJywnXFx1MjBEQyc6J0RvdERvdCcsJ1xcdTIyNTAnOidkb3RlcScsJ1xcdTIyNTEnOidlRG90JywnXFx1MjIzOCc6J21pbnVzZCcsJ1xcdTIyMTQnOidwbHVzZG8nLCdcXHUyMkExJzonc2RvdGInLCdcXHUyMUQwJzonbEFycicsJ1xcdTIxRDQnOidpZmYnLCdcXHUyN0Y4JzoneGxBcnInLCdcXHUyN0ZBJzoneGhBcnInLCdcXHUyN0Y5JzoneHJBcnInLCdcXHUyMUQyJzonckFycicsJ1xcdTIyQTgnOid2RGFzaCcsJ1xcdTIxRDEnOid1QXJyJywnXFx1MjFENSc6J3ZBcnInLCdcXHUyMjI1JzoncGFyJywnXFx1MjkxMyc6J0Rvd25BcnJvd0JhcicsJ1xcdTIxRjUnOidkdWFycicsJ1xcdTAzMTEnOidEb3duQnJldmUnLCdcXHUyOTUwJzonRG93bkxlZnRSaWdodFZlY3RvcicsJ1xcdTI5NUUnOidEb3duTGVmdFRlZVZlY3RvcicsJ1xcdTI5NTYnOidEb3duTGVmdFZlY3RvckJhcicsJ1xcdTIxQkQnOidsaGFyZCcsJ1xcdTI5NUYnOidEb3duUmlnaHRUZWVWZWN0b3InLCdcXHUyOTU3JzonRG93blJpZ2h0VmVjdG9yQmFyJywnXFx1MjFDMSc6J3JoYXJkJywnXFx1MjFBNyc6J21hcHN0b2Rvd24nLCdcXHUyMkE0JzondG9wJywnXFx1MjkxMCc6J1JCYXJyJywnXFx1MjMxRic6J2RyY29ybicsJ1xcdTIzMEMnOidkcmNyb3AnLCdcXHVEODM1XFx1REM5Ric6J0RzY3InLCdcXHVEODM1XFx1RENCOSc6J2RzY3InLCdcXHUwNDA1JzonRFNjeScsJ1xcdTA0NTUnOidkc2N5JywnXFx1MjlGNic6J2Rzb2wnLCdcXHUwMTEwJzonRHN0cm9rJywnXFx1MDExMSc6J2RzdHJvaycsJ1xcdTIyRjEnOidkdGRvdCcsJ1xcdTI1QkYnOidkdHJpJywnXFx1Mjk2Ric6J2R1aGFyJywnXFx1MjlBNic6J2R3YW5nbGUnLCdcXHUwNDBGJzonRFpjeScsJ1xcdTA0NUYnOidkemN5JywnXFx1MjdGRic6J2R6aWdyYXJyJywnXFx4QzknOidFYWN1dGUnLCdcXHhFOSc6J2VhY3V0ZScsJ1xcdTJBNkUnOidlYXN0ZXInLCdcXHUwMTFBJzonRWNhcm9uJywnXFx1MDExQic6J2VjYXJvbicsJ1xceENBJzonRWNpcmMnLCdcXHhFQSc6J2VjaXJjJywnXFx1MjI1Nic6J2VjaXInLCdcXHUyMjU1JzonZWNvbG9uJywnXFx1MDQyRCc6J0VjeScsJ1xcdTA0NEQnOidlY3knLCdcXHUwMTE2JzonRWRvdCcsJ1xcdTAxMTcnOidlZG90JywnXFx1MjE0Nyc6J2VlJywnXFx1MjI1Mic6J2VmRG90JywnXFx1RDgzNVxcdUREMDgnOidFZnInLCdcXHVEODM1XFx1REQyMic6J2VmcicsJ1xcdTJBOUEnOidlZycsJ1xceEM4JzonRWdyYXZlJywnXFx4RTgnOidlZ3JhdmUnLCdcXHUyQTk2JzonZWdzJywnXFx1MkE5OCc6J2Vnc2RvdCcsJ1xcdTJBOTknOidlbCcsJ1xcdTIyMDgnOidpbicsJ1xcdTIzRTcnOidlbGludGVycycsJ1xcdTIxMTMnOidlbGwnLCdcXHUyQTk1JzonZWxzJywnXFx1MkE5Nyc6J2Vsc2RvdCcsJ1xcdTAxMTInOidFbWFjcicsJ1xcdTAxMTMnOidlbWFjcicsJ1xcdTIyMDUnOidlbXB0eScsJ1xcdTI1RkInOidFbXB0eVNtYWxsU3F1YXJlJywnXFx1MjVBQic6J0VtcHR5VmVyeVNtYWxsU3F1YXJlJywnXFx1MjAwNCc6J2Vtc3AxMycsJ1xcdTIwMDUnOidlbXNwMTQnLCdcXHUyMDAzJzonZW1zcCcsJ1xcdTAxNEEnOidFTkcnLCdcXHUwMTRCJzonZW5nJywnXFx1MjAwMic6J2Vuc3AnLCdcXHUwMTE4JzonRW9nb24nLCdcXHUwMTE5JzonZW9nb24nLCdcXHVEODM1XFx1REQzQyc6J0VvcGYnLCdcXHVEODM1XFx1REQ1Nic6J2VvcGYnLCdcXHUyMkQ1JzonZXBhcicsJ1xcdTI5RTMnOidlcGFyc2wnLCdcXHUyQTcxJzonZXBsdXMnLCdcXHUwM0I1JzonZXBzaScsJ1xcdTAzOTUnOidFcHNpbG9uJywnXFx1MDNGNSc6J2Vwc2l2JywnXFx1MjI0Mic6J2VzaW0nLCdcXHUyQTc1JzonRXF1YWwnLCc9JzonZXF1YWxzJywnXFx1MjI1Ric6J2VxdWVzdCcsJ1xcdTIxQ0MnOidybGhhcicsJ1xcdTJBNzgnOidlcXVpdkREJywnXFx1MjlFNSc6J2VxdnBhcnNsJywnXFx1Mjk3MSc6J2VyYXJyJywnXFx1MjI1Myc6J2VyRG90JywnXFx1MjEyRic6J2VzY3InLCdcXHUyMTMwJzonRXNjcicsJ1xcdTJBNzMnOidFc2ltJywnXFx1MDM5Nyc6J0V0YScsJ1xcdTAzQjcnOidldGEnLCdcXHhEMCc6J0VUSCcsJ1xceEYwJzonZXRoJywnXFx4Q0InOidFdW1sJywnXFx4RUInOidldW1sJywnXFx1MjBBQyc6J2V1cm8nLCchJzonZXhjbCcsJ1xcdTIyMDMnOidleGlzdCcsJ1xcdTA0MjQnOidGY3knLCdcXHUwNDQ0JzonZmN5JywnXFx1MjY0MCc6J2ZlbWFsZScsJ1xcdUZCMDMnOidmZmlsaWcnLCdcXHVGQjAwJzonZmZsaWcnLCdcXHVGQjA0JzonZmZsbGlnJywnXFx1RDgzNVxcdUREMDknOidGZnInLCdcXHVEODM1XFx1REQyMyc6J2ZmcicsJ1xcdUZCMDEnOidmaWxpZycsJ1xcdTI1RkMnOidGaWxsZWRTbWFsbFNxdWFyZScsJ2ZqJzonZmpsaWcnLCdcXHUyNjZEJzonZmxhdCcsJ1xcdUZCMDInOidmbGxpZycsJ1xcdTI1QjEnOidmbHRucycsJ1xcdTAxOTInOidmbm9mJywnXFx1RDgzNVxcdUREM0QnOidGb3BmJywnXFx1RDgzNVxcdURENTcnOidmb3BmJywnXFx1MjIwMCc6J2ZvcmFsbCcsJ1xcdTIyRDQnOidmb3JrJywnXFx1MkFEOSc6J2Zvcmt2JywnXFx1MjEzMSc6J0ZzY3InLCdcXHUyQTBEJzonZnBhcnRpbnQnLCdcXHhCRCc6J2hhbGYnLCdcXHUyMTUzJzonZnJhYzEzJywnXFx4QkMnOidmcmFjMTQnLCdcXHUyMTU1JzonZnJhYzE1JywnXFx1MjE1OSc6J2ZyYWMxNicsJ1xcdTIxNUInOidmcmFjMTgnLCdcXHUyMTU0JzonZnJhYzIzJywnXFx1MjE1Nic6J2ZyYWMyNScsJ1xceEJFJzonZnJhYzM0JywnXFx1MjE1Nyc6J2ZyYWMzNScsJ1xcdTIxNUMnOidmcmFjMzgnLCdcXHUyMTU4JzonZnJhYzQ1JywnXFx1MjE1QSc6J2ZyYWM1NicsJ1xcdTIxNUQnOidmcmFjNTgnLCdcXHUyMTVFJzonZnJhYzc4JywnXFx1MjA0NCc6J2ZyYXNsJywnXFx1MjMyMic6J2Zyb3duJywnXFx1RDgzNVxcdURDQkInOidmc2NyJywnXFx1MDFGNSc6J2dhY3V0ZScsJ1xcdTAzOTMnOidHYW1tYScsJ1xcdTAzQjMnOidnYW1tYScsJ1xcdTAzREMnOidHYW1tYWQnLCdcXHUyQTg2JzonZ2FwJywnXFx1MDExRSc6J0dicmV2ZScsJ1xcdTAxMUYnOidnYnJldmUnLCdcXHUwMTIyJzonR2NlZGlsJywnXFx1MDExQyc6J0djaXJjJywnXFx1MDExRCc6J2djaXJjJywnXFx1MDQxMyc6J0djeScsJ1xcdTA0MzMnOidnY3knLCdcXHUwMTIwJzonR2RvdCcsJ1xcdTAxMjEnOidnZG90JywnXFx1MjI2NSc6J2dlJywnXFx1MjI2Nyc6J2dFJywnXFx1MkE4Qyc6J2dFbCcsJ1xcdTIyREInOidnZWwnLCdcXHUyQTdFJzonZ2VzJywnXFx1MkFBOSc6J2dlc2NjJywnXFx1MkE4MCc6J2dlc2RvdCcsJ1xcdTJBODInOidnZXNkb3RvJywnXFx1MkE4NCc6J2dlc2RvdG9sJywnXFx1MjJEQlxcdUZFMDAnOidnZXNsJywnXFx1MkE5NCc6J2dlc2xlcycsJ1xcdUQ4MzVcXHVERDBBJzonR2ZyJywnXFx1RDgzNVxcdUREMjQnOidnZnInLCdcXHUyMjZCJzonZ2cnLCdcXHUyMkQ5JzonR2cnLCdcXHUyMTM3JzonZ2ltZWwnLCdcXHUwNDAzJzonR0pjeScsJ1xcdTA0NTMnOidnamN5JywnXFx1MkFBNSc6J2dsYScsJ1xcdTIyNzcnOidnbCcsJ1xcdTJBOTInOidnbEUnLCdcXHUyQUE0JzonZ2xqJywnXFx1MkE4QSc6J2duYXAnLCdcXHUyQTg4JzonZ25lJywnXFx1MjI2OSc6J2duRScsJ1xcdTIyRTcnOidnbnNpbScsJ1xcdUQ4MzVcXHVERDNFJzonR29wZicsJ1xcdUQ4MzVcXHVERDU4JzonZ29wZicsJ1xcdTJBQTInOidHcmVhdGVyR3JlYXRlcicsJ1xcdTIyNzMnOidnc2ltJywnXFx1RDgzNVxcdURDQTInOidHc2NyJywnXFx1MjEwQSc6J2dzY3InLCdcXHUyQThFJzonZ3NpbWUnLCdcXHUyQTkwJzonZ3NpbWwnLCdcXHUyQUE3JzonZ3RjYycsJ1xcdTJBN0EnOidndGNpcicsJz4nOidndCcsJ1xcdTIyRDcnOidndGRvdCcsJ1xcdTI5OTUnOidndGxQYXInLCdcXHUyQTdDJzonZ3RxdWVzdCcsJ1xcdTI5NzgnOidndHJhcnInLCdcXHUyMjY5XFx1RkUwMCc6J2d2bkUnLCdcXHUyMDBBJzonaGFpcnNwJywnXFx1MjEwQic6J0hzY3InLCdcXHUwNDJBJzonSEFSRGN5JywnXFx1MDQ0QSc6J2hhcmRjeScsJ1xcdTI5NDgnOidoYXJyY2lyJywnXFx1MjE5NCc6J2hhcnInLCdcXHUyMUFEJzonaGFycncnLCdeJzonSGF0JywnXFx1MjEwRic6J2hiYXInLCdcXHUwMTI0JzonSGNpcmMnLCdcXHUwMTI1JzonaGNpcmMnLCdcXHUyNjY1JzonaGVhcnRzJywnXFx1MjAyNic6J21sZHInLCdcXHUyMkI5JzonaGVyY29uJywnXFx1RDgzNVxcdUREMjUnOidoZnInLCdcXHUyMTBDJzonSGZyJywnXFx1MjkyNSc6J3NlYXJoaycsJ1xcdTI5MjYnOidzd2FyaGsnLCdcXHUyMUZGJzonaG9hcnInLCdcXHUyMjNCJzonaG9tdGh0JywnXFx1MjFBOSc6J2xhcnJoaycsJ1xcdTIxQUEnOidyYXJyaGsnLCdcXHVEODM1XFx1REQ1OSc6J2hvcGYnLCdcXHUyMTBEJzonSG9wZicsJ1xcdTIwMTUnOidob3JiYXInLCdcXHVEODM1XFx1RENCRCc6J2hzY3InLCdcXHUwMTI2JzonSHN0cm9rJywnXFx1MDEyNyc6J2hzdHJvaycsJ1xcdTIwNDMnOidoeWJ1bGwnLCdcXHhDRCc6J0lhY3V0ZScsJ1xceEVEJzonaWFjdXRlJywnXFx1MjA2Myc6J2ljJywnXFx4Q0UnOidJY2lyYycsJ1xceEVFJzonaWNpcmMnLCdcXHUwNDE4JzonSWN5JywnXFx1MDQzOCc6J2ljeScsJ1xcdTAxMzAnOidJZG90JywnXFx1MDQxNSc6J0lFY3knLCdcXHUwNDM1JzonaWVjeScsJ1xceEExJzonaWV4Y2wnLCdcXHVEODM1XFx1REQyNic6J2lmcicsJ1xcdTIxMTEnOidJbScsJ1xceENDJzonSWdyYXZlJywnXFx4RUMnOidpZ3JhdmUnLCdcXHUyMTQ4JzonaWknLCdcXHUyQTBDJzoncWludCcsJ1xcdTIyMkQnOid0aW50JywnXFx1MjlEQyc6J2lpbmZpbicsJ1xcdTIxMjknOidpaW90YScsJ1xcdTAxMzInOidJSmxpZycsJ1xcdTAxMzMnOidpamxpZycsJ1xcdTAxMkEnOidJbWFjcicsJ1xcdTAxMkInOidpbWFjcicsJ1xcdTIxMTAnOidJc2NyJywnXFx1MDEzMSc6J2ltYXRoJywnXFx1MjJCNyc6J2ltb2YnLCdcXHUwMUI1JzonaW1wZWQnLCdcXHUyMTA1JzonaW5jYXJlJywnXFx1MjIxRSc6J2luZmluJywnXFx1MjlERCc6J2luZmludGllJywnXFx1MjJCQSc6J2ludGNhbCcsJ1xcdTIyMkInOidpbnQnLCdcXHUyMjJDJzonSW50JywnXFx1MjEyNCc6J1pvcGYnLCdcXHUyQTE3JzonaW50bGFyaGsnLCdcXHUyQTNDJzonaXByb2QnLCdcXHUyMDYyJzonaXQnLCdcXHUwNDAxJzonSU9jeScsJ1xcdTA0NTEnOidpb2N5JywnXFx1MDEyRSc6J0lvZ29uJywnXFx1MDEyRic6J2lvZ29uJywnXFx1RDgzNVxcdURENDAnOidJb3BmJywnXFx1RDgzNVxcdURENUEnOidpb3BmJywnXFx1MDM5OSc6J0lvdGEnLCdcXHUwM0I5JzonaW90YScsJ1xceEJGJzonaXF1ZXN0JywnXFx1RDgzNVxcdURDQkUnOidpc2NyJywnXFx1MjJGNSc6J2lzaW5kb3QnLCdcXHUyMkY5JzonaXNpbkUnLCdcXHUyMkY0JzonaXNpbnMnLCdcXHUyMkYzJzonaXNpbnN2JywnXFx1MDEyOCc6J0l0aWxkZScsJ1xcdTAxMjknOidpdGlsZGUnLCdcXHUwNDA2JzonSXVrY3knLCdcXHUwNDU2JzonaXVrY3knLCdcXHhDRic6J0l1bWwnLCdcXHhFRic6J2l1bWwnLCdcXHUwMTM0JzonSmNpcmMnLCdcXHUwMTM1JzonamNpcmMnLCdcXHUwNDE5JzonSmN5JywnXFx1MDQzOSc6J2pjeScsJ1xcdUQ4MzVcXHVERDBEJzonSmZyJywnXFx1RDgzNVxcdUREMjcnOidqZnInLCdcXHUwMjM3Jzonam1hdGgnLCdcXHVEODM1XFx1REQ0MSc6J0pvcGYnLCdcXHVEODM1XFx1REQ1Qic6J2pvcGYnLCdcXHVEODM1XFx1RENBNSc6J0pzY3InLCdcXHVEODM1XFx1RENCRic6J2pzY3InLCdcXHUwNDA4JzonSnNlcmN5JywnXFx1MDQ1OCc6J2pzZXJjeScsJ1xcdTA0MDQnOidKdWtjeScsJ1xcdTA0NTQnOidqdWtjeScsJ1xcdTAzOUEnOidLYXBwYScsJ1xcdTAzQkEnOidrYXBwYScsJ1xcdTAzRjAnOidrYXBwYXYnLCdcXHUwMTM2JzonS2NlZGlsJywnXFx1MDEzNyc6J2tjZWRpbCcsJ1xcdTA0MUEnOidLY3knLCdcXHUwNDNBJzona2N5JywnXFx1RDgzNVxcdUREMEUnOidLZnInLCdcXHVEODM1XFx1REQyOCc6J2tmcicsJ1xcdTAxMzgnOidrZ3JlZW4nLCdcXHUwNDI1JzonS0hjeScsJ1xcdTA0NDUnOidraGN5JywnXFx1MDQwQyc6J0tKY3knLCdcXHUwNDVDJzona2pjeScsJ1xcdUQ4MzVcXHVERDQyJzonS29wZicsJ1xcdUQ4MzVcXHVERDVDJzona29wZicsJ1xcdUQ4MzVcXHVEQ0E2JzonS3NjcicsJ1xcdUQ4MzVcXHVEQ0MwJzona3NjcicsJ1xcdTIxREEnOidsQWFycicsJ1xcdTAxMzknOidMYWN1dGUnLCdcXHUwMTNBJzonbGFjdXRlJywnXFx1MjlCNCc6J2xhZW1wdHl2JywnXFx1MjExMic6J0xzY3InLCdcXHUwMzlCJzonTGFtYmRhJywnXFx1MDNCQic6J2xhbWJkYScsJ1xcdTI3RTgnOidsYW5nJywnXFx1MjdFQSc6J0xhbmcnLCdcXHUyOTkxJzonbGFuZ2QnLCdcXHUyQTg1JzonbGFwJywnXFx4QUInOidsYXF1bycsJ1xcdTIxRTQnOidsYXJyYicsJ1xcdTI5MUYnOidsYXJyYmZzJywnXFx1MjE5MCc6J2xhcnInLCdcXHUyMTlFJzonTGFycicsJ1xcdTI5MUQnOidsYXJyZnMnLCdcXHUyMUFCJzonbGFycmxwJywnXFx1MjkzOSc6J2xhcnJwbCcsJ1xcdTI5NzMnOidsYXJyc2ltJywnXFx1MjFBMic6J2xhcnJ0bCcsJ1xcdTI5MTknOidsYXRhaWwnLCdcXHUyOTFCJzonbEF0YWlsJywnXFx1MkFBQic6J2xhdCcsJ1xcdTJBQUQnOidsYXRlJywnXFx1MkFBRFxcdUZFMDAnOidsYXRlcycsJ1xcdTI5MEMnOidsYmFycicsJ1xcdTI5MEUnOidsQmFycicsJ1xcdTI3NzInOidsYmJyaycsJ3snOidsY3ViJywnWyc6J2xzcWInLCdcXHUyOThCJzonbGJya2UnLCdcXHUyOThGJzonbGJya3NsZCcsJ1xcdTI5OEQnOidsYnJrc2x1JywnXFx1MDEzRCc6J0xjYXJvbicsJ1xcdTAxM0UnOidsY2Fyb24nLCdcXHUwMTNCJzonTGNlZGlsJywnXFx1MDEzQyc6J2xjZWRpbCcsJ1xcdTIzMDgnOidsY2VpbCcsJ1xcdTA0MUInOidMY3knLCdcXHUwNDNCJzonbGN5JywnXFx1MjkzNic6J2xkY2EnLCdcXHUyMDFDJzonbGRxdW8nLCdcXHUyOTY3JzonbGRyZGhhcicsJ1xcdTI5NEInOidsZHJ1c2hhcicsJ1xcdTIxQjInOidsZHNoJywnXFx1MjI2NCc6J2xlJywnXFx1MjI2Nic6J2xFJywnXFx1MjFDNic6J2xyYXJyJywnXFx1MjdFNic6J2xvYnJrJywnXFx1Mjk2MSc6J0xlZnREb3duVGVlVmVjdG9yJywnXFx1Mjk1OSc6J0xlZnREb3duVmVjdG9yQmFyJywnXFx1MjMwQSc6J2xmbG9vcicsJ1xcdTIxQkMnOidsaGFydScsJ1xcdTIxQzcnOidsbGFycicsJ1xcdTIxQ0InOidscmhhcicsJ1xcdTI5NEUnOidMZWZ0UmlnaHRWZWN0b3InLCdcXHUyMUE0JzonbWFwc3RvbGVmdCcsJ1xcdTI5NUEnOidMZWZ0VGVlVmVjdG9yJywnXFx1MjJDQic6J2x0aHJlZScsJ1xcdTI5Q0YnOidMZWZ0VHJpYW5nbGVCYXInLCdcXHUyMkIyJzondmx0cmknLCdcXHUyMkI0JzonbHRyaWUnLCdcXHUyOTUxJzonTGVmdFVwRG93blZlY3RvcicsJ1xcdTI5NjAnOidMZWZ0VXBUZWVWZWN0b3InLCdcXHUyOTU4JzonTGVmdFVwVmVjdG9yQmFyJywnXFx1MjFCRic6J3VoYXJsJywnXFx1Mjk1Mic6J0xlZnRWZWN0b3JCYXInLCdcXHUyQThCJzonbEVnJywnXFx1MjJEQSc6J2xlZycsJ1xcdTJBN0QnOidsZXMnLCdcXHUyQUE4JzonbGVzY2MnLCdcXHUyQTdGJzonbGVzZG90JywnXFx1MkE4MSc6J2xlc2RvdG8nLCdcXHUyQTgzJzonbGVzZG90b3InLCdcXHUyMkRBXFx1RkUwMCc6J2xlc2cnLCdcXHUyQTkzJzonbGVzZ2VzJywnXFx1MjJENic6J2x0ZG90JywnXFx1MjI3Nic6J2xnJywnXFx1MkFBMSc6J0xlc3NMZXNzJywnXFx1MjI3Mic6J2xzaW0nLCdcXHUyOTdDJzonbGZpc2h0JywnXFx1RDgzNVxcdUREMEYnOidMZnInLCdcXHVEODM1XFx1REQyOSc6J2xmcicsJ1xcdTJBOTEnOidsZ0UnLCdcXHUyOTYyJzonbEhhcicsJ1xcdTI5NkEnOidsaGFydWwnLCdcXHUyNTg0JzonbGhibGsnLCdcXHUwNDA5JzonTEpjeScsJ1xcdTA0NTknOidsamN5JywnXFx1MjI2QSc6J2xsJywnXFx1MjJEOCc6J0xsJywnXFx1Mjk2Qic6J2xsaGFyZCcsJ1xcdTI1RkEnOidsbHRyaScsJ1xcdTAxM0YnOidMbWlkb3QnLCdcXHUwMTQwJzonbG1pZG90JywnXFx1MjNCMCc6J2xtb3VzdCcsJ1xcdTJBODknOidsbmFwJywnXFx1MkE4Nyc6J2xuZScsJ1xcdTIyNjgnOidsbkUnLCdcXHUyMkU2JzonbG5zaW0nLCdcXHUyN0VDJzonbG9hbmcnLCdcXHUyMUZEJzonbG9hcnInLCdcXHUyN0Y1JzoneGxhcnInLCdcXHUyN0Y3JzoneGhhcnInLCdcXHUyN0ZDJzoneG1hcCcsJ1xcdTI3RjYnOid4cmFycicsJ1xcdTIxQUMnOidyYXJybHAnLCdcXHUyOTg1JzonbG9wYXInLCdcXHVEODM1XFx1REQ0Myc6J0xvcGYnLCdcXHVEODM1XFx1REQ1RCc6J2xvcGYnLCdcXHUyQTJEJzonbG9wbHVzJywnXFx1MkEzNCc6J2xvdGltZXMnLCdcXHUyMjE3JzonbG93YXN0JywnXyc6J2xvd2JhcicsJ1xcdTIxOTknOidzd2FycicsJ1xcdTIxOTgnOidzZWFycicsJ1xcdTI1Q0EnOidsb3onLCcoJzonbHBhcicsJ1xcdTI5OTMnOidscGFybHQnLCdcXHUyOTZEJzonbHJoYXJkJywnXFx1MjAwRSc6J2xybScsJ1xcdTIyQkYnOidscnRyaScsJ1xcdTIwMzknOidsc2FxdW8nLCdcXHVEODM1XFx1RENDMSc6J2xzY3InLCdcXHUyMUIwJzonbHNoJywnXFx1MkE4RCc6J2xzaW1lJywnXFx1MkE4Ric6J2xzaW1nJywnXFx1MjAxOCc6J2xzcXVvJywnXFx1MjAxQSc6J3NicXVvJywnXFx1MDE0MSc6J0xzdHJvaycsJ1xcdTAxNDInOidsc3Ryb2snLCdcXHUyQUE2JzonbHRjYycsJ1xcdTJBNzknOidsdGNpcicsJzwnOidsdCcsJ1xcdTIyQzknOidsdGltZXMnLCdcXHUyOTc2JzonbHRsYXJyJywnXFx1MkE3Qic6J2x0cXVlc3QnLCdcXHUyNUMzJzonbHRyaScsJ1xcdTI5OTYnOidsdHJQYXInLCdcXHUyOTRBJzonbHVyZHNoYXInLCdcXHUyOTY2JzonbHVydWhhcicsJ1xcdTIyNjhcXHVGRTAwJzonbHZuRScsJ1xceEFGJzonbWFjcicsJ1xcdTI2NDInOidtYWxlJywnXFx1MjcyMCc6J21hbHQnLCdcXHUyOTA1JzonTWFwJywnXFx1MjFBNic6J21hcCcsJ1xcdTIxQTUnOidtYXBzdG91cCcsJ1xcdTI1QUUnOidtYXJrZXInLCdcXHUyQTI5JzonbWNvbW1hJywnXFx1MDQxQyc6J01jeScsJ1xcdTA0M0MnOidtY3knLCdcXHUyMDE0JzonbWRhc2gnLCdcXHUyMjNBJzonbUREb3QnLCdcXHUyMDVGJzonTWVkaXVtU3BhY2UnLCdcXHUyMTMzJzonTXNjcicsJ1xcdUQ4MzVcXHVERDEwJzonTWZyJywnXFx1RDgzNVxcdUREMkEnOidtZnInLCdcXHUyMTI3JzonbWhvJywnXFx4QjUnOidtaWNybycsJ1xcdTJBRjAnOidtaWRjaXInLCdcXHUyMjIzJzonbWlkJywnXFx1MjIxMic6J21pbnVzJywnXFx1MkEyQSc6J21pbnVzZHUnLCdcXHUyMjEzJzonbXAnLCdcXHUyQURCJzonbWxjcCcsJ1xcdTIyQTcnOidtb2RlbHMnLCdcXHVEODM1XFx1REQ0NCc6J01vcGYnLCdcXHVEODM1XFx1REQ1RSc6J21vcGYnLCdcXHVEODM1XFx1RENDMic6J21zY3InLCdcXHUwMzlDJzonTXUnLCdcXHUwM0JDJzonbXUnLCdcXHUyMkI4JzonbXVtYXAnLCdcXHUwMTQzJzonTmFjdXRlJywnXFx1MDE0NCc6J25hY3V0ZScsJ1xcdTIyMjBcXHUyMEQyJzonbmFuZycsJ1xcdTIyNDknOiduYXAnLCdcXHUyQTcwXFx1MDMzOCc6J25hcEUnLCdcXHUyMjRCXFx1MDMzOCc6J25hcGlkJywnXFx1MDE0OSc6J25hcG9zJywnXFx1MjY2RSc6J25hdHVyJywnXFx1MjExNSc6J05vcGYnLCdcXHhBMCc6J25ic3AnLCdcXHUyMjRFXFx1MDMzOCc6J25idW1wJywnXFx1MjI0RlxcdTAzMzgnOiduYnVtcGUnLCdcXHUyQTQzJzonbmNhcCcsJ1xcdTAxNDcnOidOY2Fyb24nLCdcXHUwMTQ4JzonbmNhcm9uJywnXFx1MDE0NSc6J05jZWRpbCcsJ1xcdTAxNDYnOiduY2VkaWwnLCdcXHUyMjQ3JzonbmNvbmcnLCdcXHUyQTZEXFx1MDMzOCc6J25jb25nZG90JywnXFx1MkE0Mic6J25jdXAnLCdcXHUwNDFEJzonTmN5JywnXFx1MDQzRCc6J25jeScsJ1xcdTIwMTMnOiduZGFzaCcsJ1xcdTI5MjQnOiduZWFyaGsnLCdcXHUyMTk3JzonbmVhcnInLCdcXHUyMUQ3JzonbmVBcnInLCdcXHUyMjYwJzonbmUnLCdcXHUyMjUwXFx1MDMzOCc6J25lZG90JywnXFx1MjAwQic6J1plcm9XaWR0aFNwYWNlJywnXFx1MjI2Mic6J25lcXVpdicsJ1xcdTI5MjgnOid0b2VhJywnXFx1MjI0MlxcdTAzMzgnOiduZXNpbScsJ1xcbic6J05ld0xpbmUnLCdcXHUyMjA0JzonbmV4aXN0JywnXFx1RDgzNVxcdUREMTEnOidOZnInLCdcXHVEODM1XFx1REQyQic6J25mcicsJ1xcdTIyNjdcXHUwMzM4JzonbmdFJywnXFx1MjI3MSc6J25nZScsJ1xcdTJBN0VcXHUwMzM4JzonbmdlcycsJ1xcdTIyRDlcXHUwMzM4JzonbkdnJywnXFx1MjI3NSc6J25nc2ltJywnXFx1MjI2QlxcdTIwRDInOiduR3QnLCdcXHUyMjZGJzonbmd0JywnXFx1MjI2QlxcdTAzMzgnOiduR3R2JywnXFx1MjFBRSc6J25oYXJyJywnXFx1MjFDRSc6J25oQXJyJywnXFx1MkFGMic6J25ocGFyJywnXFx1MjIwQic6J25pJywnXFx1MjJGQyc6J25pcycsJ1xcdTIyRkEnOiduaXNkJywnXFx1MDQwQSc6J05KY3knLCdcXHUwNDVBJzonbmpjeScsJ1xcdTIxOUEnOidubGFycicsJ1xcdTIxQ0QnOidubEFycicsJ1xcdTIwMjUnOidubGRyJywnXFx1MjI2NlxcdTAzMzgnOidubEUnLCdcXHUyMjcwJzonbmxlJywnXFx1MkE3RFxcdTAzMzgnOidubGVzJywnXFx1MjI2RSc6J25sdCcsJ1xcdTIyRDhcXHUwMzM4JzonbkxsJywnXFx1MjI3NCc6J25sc2ltJywnXFx1MjI2QVxcdTIwRDInOiduTHQnLCdcXHUyMkVBJzonbmx0cmknLCdcXHUyMkVDJzonbmx0cmllJywnXFx1MjI2QVxcdTAzMzgnOiduTHR2JywnXFx1MjIyNCc6J25taWQnLCdcXHUyMDYwJzonTm9CcmVhaycsJ1xcdUQ4MzVcXHVERDVGJzonbm9wZicsJ1xcdTJBRUMnOidOb3QnLCdcXHhBQyc6J25vdCcsJ1xcdTIyNkQnOidOb3RDdXBDYXAnLCdcXHUyMjI2JzonbnBhcicsJ1xcdTIyMDknOidub3RpbicsJ1xcdTIyNzknOidudGdsJywnXFx1MjJGNVxcdTAzMzgnOidub3RpbmRvdCcsJ1xcdTIyRjlcXHUwMzM4Jzonbm90aW5FJywnXFx1MjJGNyc6J25vdGludmInLCdcXHUyMkY2Jzonbm90aW52YycsJ1xcdTI5Q0ZcXHUwMzM4JzonTm90TGVmdFRyaWFuZ2xlQmFyJywnXFx1MjI3OCc6J250bGcnLCdcXHUyQUEyXFx1MDMzOCc6J05vdE5lc3RlZEdyZWF0ZXJHcmVhdGVyJywnXFx1MkFBMVxcdTAzMzgnOidOb3ROZXN0ZWRMZXNzTGVzcycsJ1xcdTIyMEMnOidub3RuaScsJ1xcdTIyRkUnOidub3RuaXZiJywnXFx1MjJGRCc6J25vdG5pdmMnLCdcXHUyMjgwJzonbnByJywnXFx1MkFBRlxcdTAzMzgnOiducHJlJywnXFx1MjJFMCc6J25wcmN1ZScsJ1xcdTI5RDBcXHUwMzM4JzonTm90UmlnaHRUcmlhbmdsZUJhcicsJ1xcdTIyRUInOiducnRyaScsJ1xcdTIyRUQnOiducnRyaWUnLCdcXHUyMjhGXFx1MDMzOCc6J05vdFNxdWFyZVN1YnNldCcsJ1xcdTIyRTInOiduc3FzdWJlJywnXFx1MjI5MFxcdTAzMzgnOidOb3RTcXVhcmVTdXBlcnNldCcsJ1xcdTIyRTMnOiduc3FzdXBlJywnXFx1MjI4MlxcdTIwRDInOid2bnN1YicsJ1xcdTIyODgnOiduc3ViZScsJ1xcdTIyODEnOiduc2MnLCdcXHUyQUIwXFx1MDMzOCc6J25zY2UnLCdcXHUyMkUxJzonbnNjY3VlJywnXFx1MjI3RlxcdTAzMzgnOidOb3RTdWNjZWVkc1RpbGRlJywnXFx1MjI4M1xcdTIwRDInOid2bnN1cCcsJ1xcdTIyODknOiduc3VwZScsJ1xcdTIyNDEnOiduc2ltJywnXFx1MjI0NCc6J25zaW1lJywnXFx1MkFGRFxcdTIwRTUnOiducGFyc2wnLCdcXHUyMjAyXFx1MDMzOCc6J25wYXJ0JywnXFx1MkExNCc6J25wb2xpbnQnLCdcXHUyOTMzXFx1MDMzOCc6J25yYXJyYycsJ1xcdTIxOUInOiducmFycicsJ1xcdTIxQ0YnOiduckFycicsJ1xcdTIxOURcXHUwMzM4JzonbnJhcnJ3JywnXFx1RDgzNVxcdURDQTknOidOc2NyJywnXFx1RDgzNVxcdURDQzMnOiduc2NyJywnXFx1MjI4NCc6J25zdWInLCdcXHUyQUM1XFx1MDMzOCc6J25zdWJFJywnXFx1MjI4NSc6J25zdXAnLCdcXHUyQUM2XFx1MDMzOCc6J25zdXBFJywnXFx4RDEnOidOdGlsZGUnLCdcXHhGMSc6J250aWxkZScsJ1xcdTAzOUQnOidOdScsJ1xcdTAzQkQnOidudScsJyMnOidudW0nLCdcXHUyMTE2JzonbnVtZXJvJywnXFx1MjAwNyc6J251bXNwJywnXFx1MjI0RFxcdTIwRDInOidudmFwJywnXFx1MjJBQyc6J252ZGFzaCcsJ1xcdTIyQUQnOidudkRhc2gnLCdcXHUyMkFFJzonblZkYXNoJywnXFx1MjJBRic6J25WRGFzaCcsJ1xcdTIyNjVcXHUyMEQyJzonbnZnZScsJz5cXHUyMEQyJzonbnZndCcsJ1xcdTI5MDQnOidudkhhcnInLCdcXHUyOURFJzonbnZpbmZpbicsJ1xcdTI5MDInOidudmxBcnInLCdcXHUyMjY0XFx1MjBEMic6J252bGUnLCc8XFx1MjBEMic6J252bHQnLCdcXHUyMkI0XFx1MjBEMic6J252bHRyaWUnLCdcXHUyOTAzJzonbnZyQXJyJywnXFx1MjJCNVxcdTIwRDInOidudnJ0cmllJywnXFx1MjIzQ1xcdTIwRDInOidudnNpbScsJ1xcdTI5MjMnOidud2FyaGsnLCdcXHUyMTk2JzonbndhcnInLCdcXHUyMUQ2JzonbndBcnInLCdcXHUyOTI3JzonbnduZWFyJywnXFx4RDMnOidPYWN1dGUnLCdcXHhGMyc6J29hY3V0ZScsJ1xceEQ0JzonT2NpcmMnLCdcXHhGNCc6J29jaXJjJywnXFx1MDQxRSc6J09jeScsJ1xcdTA0M0UnOidvY3knLCdcXHUwMTUwJzonT2RibGFjJywnXFx1MDE1MSc6J29kYmxhYycsJ1xcdTJBMzgnOidvZGl2JywnXFx1MjlCQyc6J29kc29sZCcsJ1xcdTAxNTInOidPRWxpZycsJ1xcdTAxNTMnOidvZWxpZycsJ1xcdTI5QkYnOidvZmNpcicsJ1xcdUQ4MzVcXHVERDEyJzonT2ZyJywnXFx1RDgzNVxcdUREMkMnOidvZnInLCdcXHUwMkRCJzonb2dvbicsJ1xceEQyJzonT2dyYXZlJywnXFx4RjInOidvZ3JhdmUnLCdcXHUyOUMxJzonb2d0JywnXFx1MjlCNSc6J29oYmFyJywnXFx1MDNBOSc6J29obScsJ1xcdTI5QkUnOidvbGNpcicsJ1xcdTI5QkInOidvbGNyb3NzJywnXFx1MjAzRSc6J29saW5lJywnXFx1MjlDMCc6J29sdCcsJ1xcdTAxNEMnOidPbWFjcicsJ1xcdTAxNEQnOidvbWFjcicsJ1xcdTAzQzknOidvbWVnYScsJ1xcdTAzOUYnOidPbWljcm9uJywnXFx1MDNCRic6J29taWNyb24nLCdcXHUyOUI2Jzonb21pZCcsJ1xcdUQ4MzVcXHVERDQ2JzonT29wZicsJ1xcdUQ4MzVcXHVERDYwJzonb29wZicsJ1xcdTI5QjcnOidvcGFyJywnXFx1MjlCOSc6J29wZXJwJywnXFx1MkE1NCc6J09yJywnXFx1MjIyOCc6J29yJywnXFx1MkE1RCc6J29yZCcsJ1xcdTIxMzQnOidvc2NyJywnXFx4QUEnOidvcmRmJywnXFx4QkEnOidvcmRtJywnXFx1MjJCNic6J29yaWdvZicsJ1xcdTJBNTYnOidvcm9yJywnXFx1MkE1Nyc6J29yc2xvcGUnLCdcXHUyQTVCJzonb3J2JywnXFx1RDgzNVxcdURDQUEnOidPc2NyJywnXFx4RDgnOidPc2xhc2gnLCdcXHhGOCc6J29zbGFzaCcsJ1xcdTIyOTgnOidvc29sJywnXFx4RDUnOidPdGlsZGUnLCdcXHhGNSc6J290aWxkZScsJ1xcdTJBMzYnOidvdGltZXNhcycsJ1xcdTJBMzcnOidPdGltZXMnLCdcXHhENic6J091bWwnLCdcXHhGNic6J291bWwnLCdcXHUyMzNEJzonb3ZiYXInLCdcXHUyM0RFJzonT3ZlckJyYWNlJywnXFx1MjNCNCc6J3RicmsnLCdcXHUyM0RDJzonT3ZlclBhcmVudGhlc2lzJywnXFx4QjYnOidwYXJhJywnXFx1MkFGMyc6J3BhcnNpbScsJ1xcdTJBRkQnOidwYXJzbCcsJ1xcdTIyMDInOidwYXJ0JywnXFx1MDQxRic6J1BjeScsJ1xcdTA0M0YnOidwY3knLCclJzoncGVyY250JywnLic6J3BlcmlvZCcsJ1xcdTIwMzAnOidwZXJtaWwnLCdcXHUyMDMxJzoncGVydGVuaycsJ1xcdUQ4MzVcXHVERDEzJzonUGZyJywnXFx1RDgzNVxcdUREMkQnOidwZnInLCdcXHUwM0E2JzonUGhpJywnXFx1MDNDNic6J3BoaScsJ1xcdTAzRDUnOidwaGl2JywnXFx1MjYwRSc6J3Bob25lJywnXFx1MDNBMCc6J1BpJywnXFx1MDNDMCc6J3BpJywnXFx1MDNENic6J3BpdicsJ1xcdTIxMEUnOidwbGFuY2toJywnXFx1MkEyMyc6J3BsdXNhY2lyJywnXFx1MkEyMic6J3BsdXNjaXInLCcrJzoncGx1cycsJ1xcdTJBMjUnOidwbHVzZHUnLCdcXHUyQTcyJzoncGx1c2UnLCdcXHhCMSc6J3BtJywnXFx1MkEyNic6J3BsdXNzaW0nLCdcXHUyQTI3JzoncGx1c3R3bycsJ1xcdTJBMTUnOidwb2ludGludCcsJ1xcdUQ4MzVcXHVERDYxJzoncG9wZicsJ1xcdTIxMTknOidQb3BmJywnXFx4QTMnOidwb3VuZCcsJ1xcdTJBQjcnOidwcmFwJywnXFx1MkFCQic6J1ByJywnXFx1MjI3QSc6J3ByJywnXFx1MjI3Qyc6J3ByY3VlJywnXFx1MkFBRic6J3ByZScsJ1xcdTIyN0UnOidwcnNpbScsJ1xcdTJBQjknOidwcm5hcCcsJ1xcdTJBQjUnOidwcm5FJywnXFx1MjJFOCc6J3BybnNpbScsJ1xcdTJBQjMnOidwckUnLCdcXHUyMDMyJzoncHJpbWUnLCdcXHUyMDMzJzonUHJpbWUnLCdcXHUyMjBGJzoncHJvZCcsJ1xcdTIzMkUnOidwcm9mYWxhcicsJ1xcdTIzMTInOidwcm9mbGluZScsJ1xcdTIzMTMnOidwcm9mc3VyZicsJ1xcdTIyMUQnOidwcm9wJywnXFx1MjJCMCc6J3BydXJlbCcsJ1xcdUQ4MzVcXHVEQ0FCJzonUHNjcicsJ1xcdUQ4MzVcXHVEQ0M1JzoncHNjcicsJ1xcdTAzQTgnOidQc2knLCdcXHUwM0M4JzoncHNpJywnXFx1MjAwOCc6J3B1bmNzcCcsJ1xcdUQ4MzVcXHVERDE0JzonUWZyJywnXFx1RDgzNVxcdUREMkUnOidxZnInLCdcXHVEODM1XFx1REQ2Mic6J3FvcGYnLCdcXHUyMTFBJzonUW9wZicsJ1xcdTIwNTcnOidxcHJpbWUnLCdcXHVEODM1XFx1RENBQyc6J1FzY3InLCdcXHVEODM1XFx1RENDNic6J3FzY3InLCdcXHUyQTE2JzoncXVhdGludCcsJz8nOidxdWVzdCcsJ1wiJzoncXVvdCcsJ1xcdTIxREInOidyQWFycicsJ1xcdTIyM0RcXHUwMzMxJzoncmFjZScsJ1xcdTAxNTQnOidSYWN1dGUnLCdcXHUwMTU1JzoncmFjdXRlJywnXFx1MjIxQSc6J1NxcnQnLCdcXHUyOUIzJzoncmFlbXB0eXYnLCdcXHUyN0U5JzoncmFuZycsJ1xcdTI3RUInOidSYW5nJywnXFx1Mjk5Mic6J3JhbmdkJywnXFx1MjlBNSc6J3JhbmdlJywnXFx4QkInOidyYXF1bycsJ1xcdTI5NzUnOidyYXJyYXAnLCdcXHUyMUU1JzoncmFycmInLCdcXHUyOTIwJzoncmFycmJmcycsJ1xcdTI5MzMnOidyYXJyYycsJ1xcdTIxOTInOidyYXJyJywnXFx1MjFBMCc6J1JhcnInLCdcXHUyOTFFJzoncmFycmZzJywnXFx1Mjk0NSc6J3JhcnJwbCcsJ1xcdTI5NzQnOidyYXJyc2ltJywnXFx1MjkxNic6J1JhcnJ0bCcsJ1xcdTIxQTMnOidyYXJydGwnLCdcXHUyMTlEJzoncmFycncnLCdcXHUyOTFBJzoncmF0YWlsJywnXFx1MjkxQyc6J3JBdGFpbCcsJ1xcdTIyMzYnOidyYXRpbycsJ1xcdTI3NzMnOidyYmJyaycsJ30nOidyY3ViJywnXSc6J3JzcWInLCdcXHUyOThDJzoncmJya2UnLCdcXHUyOThFJzoncmJya3NsZCcsJ1xcdTI5OTAnOidyYnJrc2x1JywnXFx1MDE1OCc6J1JjYXJvbicsJ1xcdTAxNTknOidyY2Fyb24nLCdcXHUwMTU2JzonUmNlZGlsJywnXFx1MDE1Nyc6J3JjZWRpbCcsJ1xcdTIzMDknOidyY2VpbCcsJ1xcdTA0MjAnOidSY3knLCdcXHUwNDQwJzoncmN5JywnXFx1MjkzNyc6J3JkY2EnLCdcXHUyOTY5JzoncmRsZGhhcicsJ1xcdTIxQjMnOidyZHNoJywnXFx1MjExQyc6J1JlJywnXFx1MjExQic6J1JzY3InLCdcXHUyMTFEJzonUm9wZicsJ1xcdTI1QUQnOidyZWN0JywnXFx1Mjk3RCc6J3JmaXNodCcsJ1xcdTIzMEInOidyZmxvb3InLCdcXHVEODM1XFx1REQyRic6J3JmcicsJ1xcdTI5NjQnOidySGFyJywnXFx1MjFDMCc6J3JoYXJ1JywnXFx1Mjk2Qyc6J3JoYXJ1bCcsJ1xcdTAzQTEnOidSaG8nLCdcXHUwM0MxJzoncmhvJywnXFx1MDNGMSc6J3Job3YnLCdcXHUyMUM0JzoncmxhcnInLCdcXHUyN0U3Jzoncm9icmsnLCdcXHUyOTVEJzonUmlnaHREb3duVGVlVmVjdG9yJywnXFx1Mjk1NSc6J1JpZ2h0RG93blZlY3RvckJhcicsJ1xcdTIxQzknOidycmFycicsJ1xcdTIyQTInOid2ZGFzaCcsJ1xcdTI5NUInOidSaWdodFRlZVZlY3RvcicsJ1xcdTIyQ0MnOidydGhyZWUnLCdcXHUyOUQwJzonUmlnaHRUcmlhbmdsZUJhcicsJ1xcdTIyQjMnOid2cnRyaScsJ1xcdTIyQjUnOidydHJpZScsJ1xcdTI5NEYnOidSaWdodFVwRG93blZlY3RvcicsJ1xcdTI5NUMnOidSaWdodFVwVGVlVmVjdG9yJywnXFx1Mjk1NCc6J1JpZ2h0VXBWZWN0b3JCYXInLCdcXHUyMUJFJzondWhhcnInLCdcXHUyOTUzJzonUmlnaHRWZWN0b3JCYXInLCdcXHUwMkRBJzoncmluZycsJ1xcdTIwMEYnOidybG0nLCdcXHUyM0IxJzoncm1vdXN0JywnXFx1MkFFRSc6J3JubWlkJywnXFx1MjdFRCc6J3JvYW5nJywnXFx1MjFGRSc6J3JvYXJyJywnXFx1Mjk4Nic6J3JvcGFyJywnXFx1RDgzNVxcdURENjMnOidyb3BmJywnXFx1MkEyRSc6J3JvcGx1cycsJ1xcdTJBMzUnOidyb3RpbWVzJywnXFx1Mjk3MCc6J1JvdW5kSW1wbGllcycsJyknOidycGFyJywnXFx1Mjk5NCc6J3JwYXJndCcsJ1xcdTJBMTInOidycHBvbGludCcsJ1xcdTIwM0EnOidyc2FxdW8nLCdcXHVEODM1XFx1RENDNyc6J3JzY3InLCdcXHUyMUIxJzoncnNoJywnXFx1MjJDQSc6J3J0aW1lcycsJ1xcdTI1QjknOidydHJpJywnXFx1MjlDRSc6J3J0cmlsdHJpJywnXFx1MjlGNCc6J1J1bGVEZWxheWVkJywnXFx1Mjk2OCc6J3J1bHVoYXInLCdcXHUyMTFFJzoncngnLCdcXHUwMTVBJzonU2FjdXRlJywnXFx1MDE1Qic6J3NhY3V0ZScsJ1xcdTJBQjgnOidzY2FwJywnXFx1MDE2MCc6J1NjYXJvbicsJ1xcdTAxNjEnOidzY2Fyb24nLCdcXHUyQUJDJzonU2MnLCdcXHUyMjdCJzonc2MnLCdcXHUyMjdEJzonc2NjdWUnLCdcXHUyQUIwJzonc2NlJywnXFx1MkFCNCc6J3NjRScsJ1xcdTAxNUUnOidTY2VkaWwnLCdcXHUwMTVGJzonc2NlZGlsJywnXFx1MDE1Qyc6J1NjaXJjJywnXFx1MDE1RCc6J3NjaXJjJywnXFx1MkFCQSc6J3NjbmFwJywnXFx1MkFCNic6J3NjbkUnLCdcXHUyMkU5Jzonc2Nuc2ltJywnXFx1MkExMyc6J3NjcG9saW50JywnXFx1MjI3Ric6J3Njc2ltJywnXFx1MDQyMSc6J1NjeScsJ1xcdTA0NDEnOidzY3knLCdcXHUyMkM1Jzonc2RvdCcsJ1xcdTJBNjYnOidzZG90ZScsJ1xcdTIxRDgnOidzZUFycicsJ1xceEE3Jzonc2VjdCcsJzsnOidzZW1pJywnXFx1MjkyOSc6J3Rvc2EnLCdcXHUyNzM2Jzonc2V4dCcsJ1xcdUQ4MzVcXHVERDE2JzonU2ZyJywnXFx1RDgzNVxcdUREMzAnOidzZnInLCdcXHUyNjZGJzonc2hhcnAnLCdcXHUwNDI5JzonU0hDSGN5JywnXFx1MDQ0OSc6J3NoY2hjeScsJ1xcdTA0MjgnOidTSGN5JywnXFx1MDQ0OCc6J3NoY3knLCdcXHUyMTkxJzondWFycicsJ1xceEFEJzonc2h5JywnXFx1MDNBMyc6J1NpZ21hJywnXFx1MDNDMyc6J3NpZ21hJywnXFx1MDNDMic6J3NpZ21hZicsJ1xcdTIyM0MnOidzaW0nLCdcXHUyQTZBJzonc2ltZG90JywnXFx1MjI0Myc6J3NpbWUnLCdcXHUyQTlFJzonc2ltZycsJ1xcdTJBQTAnOidzaW1nRScsJ1xcdTJBOUQnOidzaW1sJywnXFx1MkE5Ric6J3NpbWxFJywnXFx1MjI0Nic6J3NpbW5lJywnXFx1MkEyNCc6J3NpbXBsdXMnLCdcXHUyOTcyJzonc2ltcmFycicsJ1xcdTJBMzMnOidzbWFzaHAnLCdcXHUyOUU0Jzonc21lcGFyc2wnLCdcXHUyMzIzJzonc21pbGUnLCdcXHUyQUFBJzonc210JywnXFx1MkFBQyc6J3NtdGUnLCdcXHUyQUFDXFx1RkUwMCc6J3NtdGVzJywnXFx1MDQyQyc6J1NPRlRjeScsJ1xcdTA0NEMnOidzb2Z0Y3knLCdcXHUyMzNGJzonc29sYmFyJywnXFx1MjlDNCc6J3NvbGInLCcvJzonc29sJywnXFx1RDgzNVxcdURENEEnOidTb3BmJywnXFx1RDgzNVxcdURENjQnOidzb3BmJywnXFx1MjY2MCc6J3NwYWRlcycsJ1xcdTIyOTMnOidzcWNhcCcsJ1xcdTIyOTNcXHVGRTAwJzonc3FjYXBzJywnXFx1MjI5NCc6J3NxY3VwJywnXFx1MjI5NFxcdUZFMDAnOidzcWN1cHMnLCdcXHUyMjhGJzonc3FzdWInLCdcXHUyMjkxJzonc3FzdWJlJywnXFx1MjI5MCc6J3Nxc3VwJywnXFx1MjI5Mic6J3Nxc3VwZScsJ1xcdTI1QTEnOidzcXUnLCdcXHVEODM1XFx1RENBRSc6J1NzY3InLCdcXHVEODM1XFx1RENDOCc6J3NzY3InLCdcXHUyMkM2JzonU3RhcicsJ1xcdTI2MDYnOidzdGFyJywnXFx1MjI4Mic6J3N1YicsJ1xcdTIyRDAnOidTdWInLCdcXHUyQUJEJzonc3ViZG90JywnXFx1MkFDNSc6J3N1YkUnLCdcXHUyMjg2Jzonc3ViZScsJ1xcdTJBQzMnOidzdWJlZG90JywnXFx1MkFDMSc6J3N1Ym11bHQnLCdcXHUyQUNCJzonc3VibkUnLCdcXHUyMjhBJzonc3VibmUnLCdcXHUyQUJGJzonc3VicGx1cycsJ1xcdTI5NzknOidzdWJyYXJyJywnXFx1MkFDNyc6J3N1YnNpbScsJ1xcdTJBRDUnOidzdWJzdWInLCdcXHUyQUQzJzonc3Vic3VwJywnXFx1MjIxMSc6J3N1bScsJ1xcdTI2NkEnOidzdW5nJywnXFx4QjknOidzdXAxJywnXFx4QjInOidzdXAyJywnXFx4QjMnOidzdXAzJywnXFx1MjI4Myc6J3N1cCcsJ1xcdTIyRDEnOidTdXAnLCdcXHUyQUJFJzonc3VwZG90JywnXFx1MkFEOCc6J3N1cGRzdWInLCdcXHUyQUM2Jzonc3VwRScsJ1xcdTIyODcnOidzdXBlJywnXFx1MkFDNCc6J3N1cGVkb3QnLCdcXHUyN0M5Jzonc3VwaHNvbCcsJ1xcdTJBRDcnOidzdXBoc3ViJywnXFx1Mjk3Qic6J3N1cGxhcnInLCdcXHUyQUMyJzonc3VwbXVsdCcsJ1xcdTJBQ0MnOidzdXBuRScsJ1xcdTIyOEInOidzdXBuZScsJ1xcdTJBQzAnOidzdXBwbHVzJywnXFx1MkFDOCc6J3N1cHNpbScsJ1xcdTJBRDQnOidzdXBzdWInLCdcXHUyQUQ2Jzonc3Vwc3VwJywnXFx1MjFEOSc6J3N3QXJyJywnXFx1MjkyQSc6J3N3bndhcicsJ1xceERGJzonc3psaWcnLCdcXHQnOidUYWInLCdcXHUyMzE2JzondGFyZ2V0JywnXFx1MDNBNCc6J1RhdScsJ1xcdTAzQzQnOid0YXUnLCdcXHUwMTY0JzonVGNhcm9uJywnXFx1MDE2NSc6J3RjYXJvbicsJ1xcdTAxNjInOidUY2VkaWwnLCdcXHUwMTYzJzondGNlZGlsJywnXFx1MDQyMic6J1RjeScsJ1xcdTA0NDInOid0Y3knLCdcXHUyMERCJzondGRvdCcsJ1xcdTIzMTUnOid0ZWxyZWMnLCdcXHVEODM1XFx1REQxNyc6J1RmcicsJ1xcdUQ4MzVcXHVERDMxJzondGZyJywnXFx1MjIzNCc6J3RoZXJlNCcsJ1xcdTAzOTgnOidUaGV0YScsJ1xcdTAzQjgnOid0aGV0YScsJ1xcdTAzRDEnOid0aGV0YXYnLCdcXHUyMDVGXFx1MjAwQSc6J1RoaWNrU3BhY2UnLCdcXHUyMDA5JzondGhpbnNwJywnXFx4REUnOidUSE9STicsJ1xceEZFJzondGhvcm4nLCdcXHUyQTMxJzondGltZXNiYXInLCdcXHhENyc6J3RpbWVzJywnXFx1MkEzMCc6J3RpbWVzZCcsJ1xcdTIzMzYnOid0b3Bib3QnLCdcXHUyQUYxJzondG9wY2lyJywnXFx1RDgzNVxcdURENEInOidUb3BmJywnXFx1RDgzNVxcdURENjUnOid0b3BmJywnXFx1MkFEQSc6J3RvcGZvcmsnLCdcXHUyMDM0JzondHByaW1lJywnXFx1MjEyMic6J3RyYWRlJywnXFx1MjVCNSc6J3V0cmknLCdcXHUyMjVDJzondHJpZScsJ1xcdTI1RUMnOid0cmlkb3QnLCdcXHUyQTNBJzondHJpbWludXMnLCdcXHUyQTM5JzondHJpcGx1cycsJ1xcdTI5Q0QnOid0cmlzYicsJ1xcdTJBM0InOid0cml0aW1lJywnXFx1MjNFMic6J3RycGV6aXVtJywnXFx1RDgzNVxcdURDQUYnOidUc2NyJywnXFx1RDgzNVxcdURDQzknOid0c2NyJywnXFx1MDQyNic6J1RTY3knLCdcXHUwNDQ2JzondHNjeScsJ1xcdTA0MEInOidUU0hjeScsJ1xcdTA0NUInOid0c2hjeScsJ1xcdTAxNjYnOidUc3Ryb2snLCdcXHUwMTY3JzondHN0cm9rJywnXFx4REEnOidVYWN1dGUnLCdcXHhGQSc6J3VhY3V0ZScsJ1xcdTIxOUYnOidVYXJyJywnXFx1Mjk0OSc6J1VhcnJvY2lyJywnXFx1MDQwRSc6J1VicmN5JywnXFx1MDQ1RSc6J3VicmN5JywnXFx1MDE2Qyc6J1VicmV2ZScsJ1xcdTAxNkQnOid1YnJldmUnLCdcXHhEQic6J1VjaXJjJywnXFx4RkInOid1Y2lyYycsJ1xcdTA0MjMnOidVY3knLCdcXHUwNDQzJzondWN5JywnXFx1MjFDNSc6J3VkYXJyJywnXFx1MDE3MCc6J1VkYmxhYycsJ1xcdTAxNzEnOid1ZGJsYWMnLCdcXHUyOTZFJzondWRoYXInLCdcXHUyOTdFJzondWZpc2h0JywnXFx1RDgzNVxcdUREMTgnOidVZnInLCdcXHVEODM1XFx1REQzMic6J3VmcicsJ1xceEQ5JzonVWdyYXZlJywnXFx4RjknOid1Z3JhdmUnLCdcXHUyOTYzJzondUhhcicsJ1xcdTI1ODAnOid1aGJsaycsJ1xcdTIzMUMnOid1bGNvcm4nLCdcXHUyMzBGJzondWxjcm9wJywnXFx1MjVGOCc6J3VsdHJpJywnXFx1MDE2QSc6J1VtYWNyJywnXFx1MDE2Qic6J3VtYWNyJywnXFx1MjNERic6J1VuZGVyQnJhY2UnLCdcXHUyM0REJzonVW5kZXJQYXJlbnRoZXNpcycsJ1xcdTIyOEUnOid1cGx1cycsJ1xcdTAxNzInOidVb2dvbicsJ1xcdTAxNzMnOid1b2dvbicsJ1xcdUQ4MzVcXHVERDRDJzonVW9wZicsJ1xcdUQ4MzVcXHVERDY2JzondW9wZicsJ1xcdTI5MTInOidVcEFycm93QmFyJywnXFx1MjE5NSc6J3ZhcnInLCdcXHUwM0M1JzondXBzaScsJ1xcdTAzRDInOidVcHNpJywnXFx1MDNBNSc6J1Vwc2lsb24nLCdcXHUyMUM4JzondXVhcnInLCdcXHUyMzFEJzondXJjb3JuJywnXFx1MjMwRSc6J3VyY3JvcCcsJ1xcdTAxNkUnOidVcmluZycsJ1xcdTAxNkYnOid1cmluZycsJ1xcdTI1RjknOid1cnRyaScsJ1xcdUQ4MzVcXHVEQ0IwJzonVXNjcicsJ1xcdUQ4MzVcXHVEQ0NBJzondXNjcicsJ1xcdTIyRjAnOid1dGRvdCcsJ1xcdTAxNjgnOidVdGlsZGUnLCdcXHUwMTY5JzondXRpbGRlJywnXFx4REMnOidVdW1sJywnXFx4RkMnOid1dW1sJywnXFx1MjlBNyc6J3V3YW5nbGUnLCdcXHUyOTlDJzondmFuZ3J0JywnXFx1MjI4QVxcdUZFMDAnOid2c3VibmUnLCdcXHUyQUNCXFx1RkUwMCc6J3ZzdWJuRScsJ1xcdTIyOEJcXHVGRTAwJzondnN1cG5lJywnXFx1MkFDQ1xcdUZFMDAnOid2c3VwbkUnLCdcXHUyQUU4JzondkJhcicsJ1xcdTJBRUInOidWYmFyJywnXFx1MkFFOSc6J3ZCYXJ2JywnXFx1MDQxMic6J1ZjeScsJ1xcdTA0MzInOid2Y3knLCdcXHUyMkE5JzonVmRhc2gnLCdcXHUyMkFCJzonVkRhc2gnLCdcXHUyQUU2JzonVmRhc2hsJywnXFx1MjJCQic6J3ZlZWJhcicsJ1xcdTIyNUEnOid2ZWVlcScsJ1xcdTIyRUUnOid2ZWxsaXAnLCd8JzondmVydCcsJ1xcdTIwMTYnOidWZXJ0JywnXFx1Mjc1OCc6J1ZlcnRpY2FsU2VwYXJhdG9yJywnXFx1MjI0MCc6J3dyJywnXFx1RDgzNVxcdUREMTknOidWZnInLCdcXHVEODM1XFx1REQzMyc6J3ZmcicsJ1xcdUQ4MzVcXHVERDREJzonVm9wZicsJ1xcdUQ4MzVcXHVERDY3Jzondm9wZicsJ1xcdUQ4MzVcXHVEQ0IxJzonVnNjcicsJ1xcdUQ4MzVcXHVEQ0NCJzondnNjcicsJ1xcdTIyQUEnOidWdmRhc2gnLCdcXHUyOTlBJzondnppZ3phZycsJ1xcdTAxNzQnOidXY2lyYycsJ1xcdTAxNzUnOid3Y2lyYycsJ1xcdTJBNUYnOid3ZWRiYXInLCdcXHUyMjU5Jzond2VkZ2VxJywnXFx1MjExOCc6J3dwJywnXFx1RDgzNVxcdUREMUEnOidXZnInLCdcXHVEODM1XFx1REQzNCc6J3dmcicsJ1xcdUQ4MzVcXHVERDRFJzonV29wZicsJ1xcdUQ4MzVcXHVERDY4Jzond29wZicsJ1xcdUQ4MzVcXHVEQ0IyJzonV3NjcicsJ1xcdUQ4MzVcXHVEQ0NDJzond3NjcicsJ1xcdUQ4MzVcXHVERDFCJzonWGZyJywnXFx1RDgzNVxcdUREMzUnOid4ZnInLCdcXHUwMzlFJzonWGknLCdcXHUwM0JFJzoneGknLCdcXHUyMkZCJzoneG5pcycsJ1xcdUQ4MzVcXHVERDRGJzonWG9wZicsJ1xcdUQ4MzVcXHVERDY5JzoneG9wZicsJ1xcdUQ4MzVcXHVEQ0IzJzonWHNjcicsJ1xcdUQ4MzVcXHVEQ0NEJzoneHNjcicsJ1xceEREJzonWWFjdXRlJywnXFx4RkQnOid5YWN1dGUnLCdcXHUwNDJGJzonWUFjeScsJ1xcdTA0NEYnOid5YWN5JywnXFx1MDE3Nic6J1ljaXJjJywnXFx1MDE3Nyc6J3ljaXJjJywnXFx1MDQyQic6J1ljeScsJ1xcdTA0NEInOid5Y3knLCdcXHhBNSc6J3llbicsJ1xcdUQ4MzVcXHVERDFDJzonWWZyJywnXFx1RDgzNVxcdUREMzYnOid5ZnInLCdcXHUwNDA3JzonWUljeScsJ1xcdTA0NTcnOid5aWN5JywnXFx1RDgzNVxcdURENTAnOidZb3BmJywnXFx1RDgzNVxcdURENkEnOid5b3BmJywnXFx1RDgzNVxcdURDQjQnOidZc2NyJywnXFx1RDgzNVxcdURDQ0UnOid5c2NyJywnXFx1MDQyRSc6J1lVY3knLCdcXHUwNDRFJzoneXVjeScsJ1xceEZGJzoneXVtbCcsJ1xcdTAxNzgnOidZdW1sJywnXFx1MDE3OSc6J1phY3V0ZScsJ1xcdTAxN0EnOid6YWN1dGUnLCdcXHUwMTdEJzonWmNhcm9uJywnXFx1MDE3RSc6J3pjYXJvbicsJ1xcdTA0MTcnOidaY3knLCdcXHUwNDM3JzonemN5JywnXFx1MDE3Qic6J1pkb3QnLCdcXHUwMTdDJzonemRvdCcsJ1xcdTIxMjgnOidaZnInLCdcXHUwMzk2JzonWmV0YScsJ1xcdTAzQjYnOid6ZXRhJywnXFx1RDgzNVxcdUREMzcnOid6ZnInLCdcXHUwNDE2JzonWkhjeScsJ1xcdTA0MzYnOid6aGN5JywnXFx1MjFERCc6J3ppZ3JhcnInLCdcXHVEODM1XFx1REQ2Qic6J3pvcGYnLCdcXHVEODM1XFx1RENCNSc6J1pzY3InLCdcXHVEODM1XFx1RENDRic6J3pzY3InLCdcXHUyMDBEJzonendqJywnXFx1MjAwQyc6J3p3bmonfTtcblxuXHR2YXIgcmVnZXhFc2NhcGUgPSAvW1wiJic8PmBdL2c7XG5cdHZhciBlc2NhcGVNYXAgPSB7XG5cdFx0J1wiJzogJyZxdW90OycsXG5cdFx0JyYnOiAnJmFtcDsnLFxuXHRcdCdcXCcnOiAnJiN4Mjc7Jyxcblx0XHQnPCc6ICcmbHQ7Jyxcblx0XHQvLyBTZWUgaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2FtYmlndW91cy1hbXBlcnNhbmRzOiBpbiBIVE1MLCB0aGVcblx0XHQvLyBmb2xsb3dpbmcgaXMgbm90IHN0cmljdGx5IG5lY2Vzc2FyeSB1bmxlc3MgaXTigJlzIHBhcnQgb2YgYSB0YWcgb3IgYW5cblx0XHQvLyB1bnF1b3RlZCBhdHRyaWJ1dGUgdmFsdWUuIFdl4oCZcmUgb25seSBlc2NhcGluZyBpdCB0byBzdXBwb3J0IHRob3NlXG5cdFx0Ly8gc2l0dWF0aW9ucywgYW5kIGZvciBYTUwgc3VwcG9ydC5cblx0XHQnPic6ICcmZ3Q7Jyxcblx0XHQvLyBJbiBJbnRlcm5ldCBFeHBsb3JlciDiiaQgOCwgdGhlIGJhY2t0aWNrIGNoYXJhY3RlciBjYW4gYmUgdXNlZFxuXHRcdC8vIHRvIGJyZWFrIG91dCBvZiAodW4pcXVvdGVkIGF0dHJpYnV0ZSB2YWx1ZXMgb3IgSFRNTCBjb21tZW50cy5cblx0XHQvLyBTZWUgaHR0cDovL2h0bWw1c2VjLm9yZy8jMTAyLCBodHRwOi8vaHRtbDVzZWMub3JnLyMxMDgsIGFuZFxuXHRcdC8vIGh0dHA6Ly9odG1sNXNlYy5vcmcvIzEzMy5cblx0XHQnYCc6ICcmI3g2MDsnXG5cdH07XG5cblx0dmFyIHJlZ2V4SW52YWxpZEVudGl0eSA9IC8mIyg/Olt4WF1bXmEtZkEtRjAtOV18W14wLTl4WF0pLztcblx0dmFyIHJlZ2V4SW52YWxpZFJhd0NvZGVQb2ludCA9IC9bXFwwLVxceDA4XFx4MEJcXHgwRS1cXHgxRlxceDdGLVxceDlGXFx1RkREMC1cXHVGREVGXFx1RkZGRVxcdUZGRkZdfFtcXHVEODNGXFx1RDg3RlxcdUQ4QkZcXHVEOEZGXFx1RDkzRlxcdUQ5N0ZcXHVEOUJGXFx1RDlGRlxcdURBM0ZcXHVEQTdGXFx1REFCRlxcdURBRkZcXHVEQjNGXFx1REI3RlxcdURCQkZcXHVEQkZGXVtcXHVERkZFXFx1REZGRl18W1xcdUQ4MDAtXFx1REJGRl0oPyFbXFx1REMwMC1cXHVERkZGXSl8KD86W15cXHVEODAwLVxcdURCRkZdfF4pW1xcdURDMDAtXFx1REZGRl0vO1xuXHR2YXIgcmVnZXhEZWNvZGUgPSAvJiMoWzAtOV0rKSg7Pyl8JiNbeFhdKFthLWZBLUYwLTldKykoOz8pfCYoWzAtOWEtekEtWl0rKTt8JihBYWN1dGV8aWFjdXRlfFVhY3V0ZXxwbHVzbW58b3RpbGRlfE90aWxkZXxBZ3JhdmV8YWdyYXZlfHlhY3V0ZXxZYWN1dGV8b3NsYXNofE9zbGFzaHxBdGlsZGV8YXRpbGRlfGJydmJhcnxDY2VkaWx8Y2NlZGlsfG9ncmF2ZXxjdXJyZW58ZGl2aWRlfEVhY3V0ZXxlYWN1dGV8T2dyYXZlfG9hY3V0ZXxFZ3JhdmV8ZWdyYXZlfHVncmF2ZXxmcmFjMTJ8ZnJhYzE0fGZyYWMzNHxVZ3JhdmV8T2FjdXRlfElhY3V0ZXxudGlsZGV8TnRpbGRlfHVhY3V0ZXxtaWRkb3R8SWdyYXZlfGlncmF2ZXxpcXVlc3R8YWFjdXRlfGxhcXVvfFRIT1JOfG1pY3JvfGlleGNsfGljaXJjfEljaXJjfEFjaXJjfHVjaXJjfGVjaXJjfE9jaXJjfG9jaXJjfEVjaXJjfFVjaXJjfGFyaW5nfEFyaW5nfGFlbGlnfEFFbGlnfGFjdXRlfHBvdW5kfHJhcXVvfGFjaXJjfHRpbWVzfHRob3JufHN6bGlnfGNlZGlsfENPUFl8QXVtbHxvcmRmfG9yZG18dXVtbHxtYWNyfFV1bWx8YXVtbHxPdW1sfG91bWx8cGFyYXxuYnNwfEV1bWx8cXVvdHxRVU9UfGV1bWx8eXVtbHxjZW50fHNlY3R8Y29weXxzdXAxfHN1cDJ8c3VwM3xJdW1sfGl1bWx8c2h5fGV0aHxyZWd8bm90fHllbnxhbXB8QU1QfFJFR3x1bWx8RVRIfGRlZ3xndHxHVHxMVHxsdCkoWz1hLXpBLVowLTldKT8vZztcblx0dmFyIGRlY29kZU1hcCA9IHsnQWFjdXRlJzonXFx4QzEnLCdhYWN1dGUnOidcXHhFMScsJ0FicmV2ZSc6J1xcdTAxMDInLCdhYnJldmUnOidcXHUwMTAzJywnYWMnOidcXHUyMjNFJywnYWNkJzonXFx1MjIzRicsJ2FjRSc6J1xcdTIyM0VcXHUwMzMzJywnQWNpcmMnOidcXHhDMicsJ2FjaXJjJzonXFx4RTInLCdhY3V0ZSc6J1xceEI0JywnQWN5JzonXFx1MDQxMCcsJ2FjeSc6J1xcdTA0MzAnLCdBRWxpZyc6J1xceEM2JywnYWVsaWcnOidcXHhFNicsJ2FmJzonXFx1MjA2MScsJ0Fmcic6J1xcdUQ4MzVcXHVERDA0JywnYWZyJzonXFx1RDgzNVxcdUREMUUnLCdBZ3JhdmUnOidcXHhDMCcsJ2FncmF2ZSc6J1xceEUwJywnYWxlZnN5bSc6J1xcdTIxMzUnLCdhbGVwaCc6J1xcdTIxMzUnLCdBbHBoYSc6J1xcdTAzOTEnLCdhbHBoYSc6J1xcdTAzQjEnLCdBbWFjcic6J1xcdTAxMDAnLCdhbWFjcic6J1xcdTAxMDEnLCdhbWFsZyc6J1xcdTJBM0YnLCdhbXAnOicmJywnQU1QJzonJicsJ2FuZGFuZCc6J1xcdTJBNTUnLCdBbmQnOidcXHUyQTUzJywnYW5kJzonXFx1MjIyNycsJ2FuZGQnOidcXHUyQTVDJywnYW5kc2xvcGUnOidcXHUyQTU4JywnYW5kdic6J1xcdTJBNUEnLCdhbmcnOidcXHUyMjIwJywnYW5nZSc6J1xcdTI5QTQnLCdhbmdsZSc6J1xcdTIyMjAnLCdhbmdtc2RhYSc6J1xcdTI5QTgnLCdhbmdtc2RhYic6J1xcdTI5QTknLCdhbmdtc2RhYyc6J1xcdTI5QUEnLCdhbmdtc2RhZCc6J1xcdTI5QUInLCdhbmdtc2RhZSc6J1xcdTI5QUMnLCdhbmdtc2RhZic6J1xcdTI5QUQnLCdhbmdtc2RhZyc6J1xcdTI5QUUnLCdhbmdtc2RhaCc6J1xcdTI5QUYnLCdhbmdtc2QnOidcXHUyMjIxJywnYW5ncnQnOidcXHUyMjFGJywnYW5ncnR2Yic6J1xcdTIyQkUnLCdhbmdydHZiZCc6J1xcdTI5OUQnLCdhbmdzcGgnOidcXHUyMjIyJywnYW5nc3QnOidcXHhDNScsJ2FuZ3phcnInOidcXHUyMzdDJywnQW9nb24nOidcXHUwMTA0JywnYW9nb24nOidcXHUwMTA1JywnQW9wZic6J1xcdUQ4MzVcXHVERDM4JywnYW9wZic6J1xcdUQ4MzVcXHVERDUyJywnYXBhY2lyJzonXFx1MkE2RicsJ2FwJzonXFx1MjI0OCcsJ2FwRSc6J1xcdTJBNzAnLCdhcGUnOidcXHUyMjRBJywnYXBpZCc6J1xcdTIyNEInLCdhcG9zJzonXFwnJywnQXBwbHlGdW5jdGlvbic6J1xcdTIwNjEnLCdhcHByb3gnOidcXHUyMjQ4JywnYXBwcm94ZXEnOidcXHUyMjRBJywnQXJpbmcnOidcXHhDNScsJ2FyaW5nJzonXFx4RTUnLCdBc2NyJzonXFx1RDgzNVxcdURDOUMnLCdhc2NyJzonXFx1RDgzNVxcdURDQjYnLCdBc3NpZ24nOidcXHUyMjU0JywnYXN0JzonKicsJ2FzeW1wJzonXFx1MjI0OCcsJ2FzeW1wZXEnOidcXHUyMjREJywnQXRpbGRlJzonXFx4QzMnLCdhdGlsZGUnOidcXHhFMycsJ0F1bWwnOidcXHhDNCcsJ2F1bWwnOidcXHhFNCcsJ2F3Y29uaW50JzonXFx1MjIzMycsJ2F3aW50JzonXFx1MkExMScsJ2JhY2tjb25nJzonXFx1MjI0QycsJ2JhY2tlcHNpbG9uJzonXFx1MDNGNicsJ2JhY2twcmltZSc6J1xcdTIwMzUnLCdiYWNrc2ltJzonXFx1MjIzRCcsJ2JhY2tzaW1lcSc6J1xcdTIyQ0QnLCdCYWNrc2xhc2gnOidcXHUyMjE2JywnQmFydic6J1xcdTJBRTcnLCdiYXJ2ZWUnOidcXHUyMkJEJywnYmFyd2VkJzonXFx1MjMwNScsJ0JhcndlZCc6J1xcdTIzMDYnLCdiYXJ3ZWRnZSc6J1xcdTIzMDUnLCdiYnJrJzonXFx1MjNCNScsJ2Jicmt0YnJrJzonXFx1MjNCNicsJ2Jjb25nJzonXFx1MjI0QycsJ0JjeSc6J1xcdTA0MTEnLCdiY3knOidcXHUwNDMxJywnYmRxdW8nOidcXHUyMDFFJywnYmVjYXVzJzonXFx1MjIzNScsJ2JlY2F1c2UnOidcXHUyMjM1JywnQmVjYXVzZSc6J1xcdTIyMzUnLCdiZW1wdHl2JzonXFx1MjlCMCcsJ2JlcHNpJzonXFx1MDNGNicsJ2Jlcm5vdSc6J1xcdTIxMkMnLCdCZXJub3VsbGlzJzonXFx1MjEyQycsJ0JldGEnOidcXHUwMzkyJywnYmV0YSc6J1xcdTAzQjInLCdiZXRoJzonXFx1MjEzNicsJ2JldHdlZW4nOidcXHUyMjZDJywnQmZyJzonXFx1RDgzNVxcdUREMDUnLCdiZnInOidcXHVEODM1XFx1REQxRicsJ2JpZ2NhcCc6J1xcdTIyQzInLCdiaWdjaXJjJzonXFx1MjVFRicsJ2JpZ2N1cCc6J1xcdTIyQzMnLCdiaWdvZG90JzonXFx1MkEwMCcsJ2JpZ29wbHVzJzonXFx1MkEwMScsJ2JpZ290aW1lcyc6J1xcdTJBMDInLCdiaWdzcWN1cCc6J1xcdTJBMDYnLCdiaWdzdGFyJzonXFx1MjYwNScsJ2JpZ3RyaWFuZ2xlZG93bic6J1xcdTI1QkQnLCdiaWd0cmlhbmdsZXVwJzonXFx1MjVCMycsJ2JpZ3VwbHVzJzonXFx1MkEwNCcsJ2JpZ3ZlZSc6J1xcdTIyQzEnLCdiaWd3ZWRnZSc6J1xcdTIyQzAnLCdia2Fyb3cnOidcXHUyOTBEJywnYmxhY2tsb3plbmdlJzonXFx1MjlFQicsJ2JsYWNrc3F1YXJlJzonXFx1MjVBQScsJ2JsYWNrdHJpYW5nbGUnOidcXHUyNUI0JywnYmxhY2t0cmlhbmdsZWRvd24nOidcXHUyNUJFJywnYmxhY2t0cmlhbmdsZWxlZnQnOidcXHUyNUMyJywnYmxhY2t0cmlhbmdsZXJpZ2h0JzonXFx1MjVCOCcsJ2JsYW5rJzonXFx1MjQyMycsJ2JsazEyJzonXFx1MjU5MicsJ2JsazE0JzonXFx1MjU5MScsJ2JsazM0JzonXFx1MjU5MycsJ2Jsb2NrJzonXFx1MjU4OCcsJ2JuZSc6Jz1cXHUyMEU1JywnYm5lcXVpdic6J1xcdTIyNjFcXHUyMEU1JywnYk5vdCc6J1xcdTJBRUQnLCdibm90JzonXFx1MjMxMCcsJ0JvcGYnOidcXHVEODM1XFx1REQzOScsJ2JvcGYnOidcXHVEODM1XFx1REQ1MycsJ2JvdCc6J1xcdTIyQTUnLCdib3R0b20nOidcXHUyMkE1JywnYm93dGllJzonXFx1MjJDOCcsJ2JveGJveCc6J1xcdTI5QzknLCdib3hkbCc6J1xcdTI1MTAnLCdib3hkTCc6J1xcdTI1NTUnLCdib3hEbCc6J1xcdTI1NTYnLCdib3hETCc6J1xcdTI1NTcnLCdib3hkcic6J1xcdTI1MEMnLCdib3hkUic6J1xcdTI1NTInLCdib3hEcic6J1xcdTI1NTMnLCdib3hEUic6J1xcdTI1NTQnLCdib3hoJzonXFx1MjUwMCcsJ2JveEgnOidcXHUyNTUwJywnYm94aGQnOidcXHUyNTJDJywnYm94SGQnOidcXHUyNTY0JywnYm94aEQnOidcXHUyNTY1JywnYm94SEQnOidcXHUyNTY2JywnYm94aHUnOidcXHUyNTM0JywnYm94SHUnOidcXHUyNTY3JywnYm94aFUnOidcXHUyNTY4JywnYm94SFUnOidcXHUyNTY5JywnYm94bWludXMnOidcXHUyMjlGJywnYm94cGx1cyc6J1xcdTIyOUUnLCdib3h0aW1lcyc6J1xcdTIyQTAnLCdib3h1bCc6J1xcdTI1MTgnLCdib3h1TCc6J1xcdTI1NUInLCdib3hVbCc6J1xcdTI1NUMnLCdib3hVTCc6J1xcdTI1NUQnLCdib3h1cic6J1xcdTI1MTQnLCdib3h1Uic6J1xcdTI1NTgnLCdib3hVcic6J1xcdTI1NTknLCdib3hVUic6J1xcdTI1NUEnLCdib3h2JzonXFx1MjUwMicsJ2JveFYnOidcXHUyNTUxJywnYm94dmgnOidcXHUyNTNDJywnYm94dkgnOidcXHUyNTZBJywnYm94VmgnOidcXHUyNTZCJywnYm94VkgnOidcXHUyNTZDJywnYm94dmwnOidcXHUyNTI0JywnYm94dkwnOidcXHUyNTYxJywnYm94VmwnOidcXHUyNTYyJywnYm94VkwnOidcXHUyNTYzJywnYm94dnInOidcXHUyNTFDJywnYm94dlInOidcXHUyNTVFJywnYm94VnInOidcXHUyNTVGJywnYm94VlInOidcXHUyNTYwJywnYnByaW1lJzonXFx1MjAzNScsJ2JyZXZlJzonXFx1MDJEOCcsJ0JyZXZlJzonXFx1MDJEOCcsJ2JydmJhcic6J1xceEE2JywnYnNjcic6J1xcdUQ4MzVcXHVEQ0I3JywnQnNjcic6J1xcdTIxMkMnLCdic2VtaSc6J1xcdTIwNEYnLCdic2ltJzonXFx1MjIzRCcsJ2JzaW1lJzonXFx1MjJDRCcsJ2Jzb2xiJzonXFx1MjlDNScsJ2Jzb2wnOidcXFxcJywnYnNvbGhzdWInOidcXHUyN0M4JywnYnVsbCc6J1xcdTIwMjInLCdidWxsZXQnOidcXHUyMDIyJywnYnVtcCc6J1xcdTIyNEUnLCdidW1wRSc6J1xcdTJBQUUnLCdidW1wZSc6J1xcdTIyNEYnLCdCdW1wZXEnOidcXHUyMjRFJywnYnVtcGVxJzonXFx1MjI0RicsJ0NhY3V0ZSc6J1xcdTAxMDYnLCdjYWN1dGUnOidcXHUwMTA3JywnY2FwYW5kJzonXFx1MkE0NCcsJ2NhcGJyY3VwJzonXFx1MkE0OScsJ2NhcGNhcCc6J1xcdTJBNEInLCdjYXAnOidcXHUyMjI5JywnQ2FwJzonXFx1MjJEMicsJ2NhcGN1cCc6J1xcdTJBNDcnLCdjYXBkb3QnOidcXHUyQTQwJywnQ2FwaXRhbERpZmZlcmVudGlhbEQnOidcXHUyMTQ1JywnY2Fwcyc6J1xcdTIyMjlcXHVGRTAwJywnY2FyZXQnOidcXHUyMDQxJywnY2Fyb24nOidcXHUwMkM3JywnQ2F5bGV5cyc6J1xcdTIxMkQnLCdjY2Fwcyc6J1xcdTJBNEQnLCdDY2Fyb24nOidcXHUwMTBDJywnY2Nhcm9uJzonXFx1MDEwRCcsJ0NjZWRpbCc6J1xceEM3JywnY2NlZGlsJzonXFx4RTcnLCdDY2lyYyc6J1xcdTAxMDgnLCdjY2lyYyc6J1xcdTAxMDknLCdDY29uaW50JzonXFx1MjIzMCcsJ2NjdXBzJzonXFx1MkE0QycsJ2NjdXBzc20nOidcXHUyQTUwJywnQ2RvdCc6J1xcdTAxMEEnLCdjZG90JzonXFx1MDEwQicsJ2NlZGlsJzonXFx4QjgnLCdDZWRpbGxhJzonXFx4QjgnLCdjZW1wdHl2JzonXFx1MjlCMicsJ2NlbnQnOidcXHhBMicsJ2NlbnRlcmRvdCc6J1xceEI3JywnQ2VudGVyRG90JzonXFx4QjcnLCdjZnInOidcXHVEODM1XFx1REQyMCcsJ0Nmcic6J1xcdTIxMkQnLCdDSGN5JzonXFx1MDQyNycsJ2NoY3knOidcXHUwNDQ3JywnY2hlY2snOidcXHUyNzEzJywnY2hlY2ttYXJrJzonXFx1MjcxMycsJ0NoaSc6J1xcdTAzQTcnLCdjaGknOidcXHUwM0M3JywnY2lyYyc6J1xcdTAyQzYnLCdjaXJjZXEnOidcXHUyMjU3JywnY2lyY2xlYXJyb3dsZWZ0JzonXFx1MjFCQScsJ2NpcmNsZWFycm93cmlnaHQnOidcXHUyMUJCJywnY2lyY2xlZGFzdCc6J1xcdTIyOUInLCdjaXJjbGVkY2lyYyc6J1xcdTIyOUEnLCdjaXJjbGVkZGFzaCc6J1xcdTIyOUQnLCdDaXJjbGVEb3QnOidcXHUyMjk5JywnY2lyY2xlZFInOidcXHhBRScsJ2NpcmNsZWRTJzonXFx1MjRDOCcsJ0NpcmNsZU1pbnVzJzonXFx1MjI5NicsJ0NpcmNsZVBsdXMnOidcXHUyMjk1JywnQ2lyY2xlVGltZXMnOidcXHUyMjk3JywnY2lyJzonXFx1MjVDQicsJ2NpckUnOidcXHUyOUMzJywnY2lyZSc6J1xcdTIyNTcnLCdjaXJmbmludCc6J1xcdTJBMTAnLCdjaXJtaWQnOidcXHUyQUVGJywnY2lyc2Npcic6J1xcdTI5QzInLCdDbG9ja3dpc2VDb250b3VySW50ZWdyYWwnOidcXHUyMjMyJywnQ2xvc2VDdXJseURvdWJsZVF1b3RlJzonXFx1MjAxRCcsJ0Nsb3NlQ3VybHlRdW90ZSc6J1xcdTIwMTknLCdjbHVicyc6J1xcdTI2NjMnLCdjbHVic3VpdCc6J1xcdTI2NjMnLCdjb2xvbic6JzonLCdDb2xvbic6J1xcdTIyMzcnLCdDb2xvbmUnOidcXHUyQTc0JywnY29sb25lJzonXFx1MjI1NCcsJ2NvbG9uZXEnOidcXHUyMjU0JywnY29tbWEnOicsJywnY29tbWF0JzonQCcsJ2NvbXAnOidcXHUyMjAxJywnY29tcGZuJzonXFx1MjIxOCcsJ2NvbXBsZW1lbnQnOidcXHUyMjAxJywnY29tcGxleGVzJzonXFx1MjEwMicsJ2NvbmcnOidcXHUyMjQ1JywnY29uZ2RvdCc6J1xcdTJBNkQnLCdDb25ncnVlbnQnOidcXHUyMjYxJywnY29uaW50JzonXFx1MjIyRScsJ0NvbmludCc6J1xcdTIyMkYnLCdDb250b3VySW50ZWdyYWwnOidcXHUyMjJFJywnY29wZic6J1xcdUQ4MzVcXHVERDU0JywnQ29wZic6J1xcdTIxMDInLCdjb3Byb2QnOidcXHUyMjEwJywnQ29wcm9kdWN0JzonXFx1MjIxMCcsJ2NvcHknOidcXHhBOScsJ0NPUFknOidcXHhBOScsJ2NvcHlzcic6J1xcdTIxMTcnLCdDb3VudGVyQ2xvY2t3aXNlQ29udG91ckludGVncmFsJzonXFx1MjIzMycsJ2NyYXJyJzonXFx1MjFCNScsJ2Nyb3NzJzonXFx1MjcxNycsJ0Nyb3NzJzonXFx1MkEyRicsJ0NzY3InOidcXHVEODM1XFx1REM5RScsJ2NzY3InOidcXHVEODM1XFx1RENCOCcsJ2NzdWInOidcXHUyQUNGJywnY3N1YmUnOidcXHUyQUQxJywnY3N1cCc6J1xcdTJBRDAnLCdjc3VwZSc6J1xcdTJBRDInLCdjdGRvdCc6J1xcdTIyRUYnLCdjdWRhcnJsJzonXFx1MjkzOCcsJ2N1ZGFycnInOidcXHUyOTM1JywnY3VlcHInOidcXHUyMkRFJywnY3Vlc2MnOidcXHUyMkRGJywnY3VsYXJyJzonXFx1MjFCNicsJ2N1bGFycnAnOidcXHUyOTNEJywnY3VwYnJjYXAnOidcXHUyQTQ4JywnY3VwY2FwJzonXFx1MkE0NicsJ0N1cENhcCc6J1xcdTIyNEQnLCdjdXAnOidcXHUyMjJBJywnQ3VwJzonXFx1MjJEMycsJ2N1cGN1cCc6J1xcdTJBNEEnLCdjdXBkb3QnOidcXHUyMjhEJywnY3Vwb3InOidcXHUyQTQ1JywnY3Vwcyc6J1xcdTIyMkFcXHVGRTAwJywnY3VyYXJyJzonXFx1MjFCNycsJ2N1cmFycm0nOidcXHUyOTNDJywnY3VybHllcXByZWMnOidcXHUyMkRFJywnY3VybHllcXN1Y2MnOidcXHUyMkRGJywnY3VybHl2ZWUnOidcXHUyMkNFJywnY3VybHl3ZWRnZSc6J1xcdTIyQ0YnLCdjdXJyZW4nOidcXHhBNCcsJ2N1cnZlYXJyb3dsZWZ0JzonXFx1MjFCNicsJ2N1cnZlYXJyb3dyaWdodCc6J1xcdTIxQjcnLCdjdXZlZSc6J1xcdTIyQ0UnLCdjdXdlZCc6J1xcdTIyQ0YnLCdjd2NvbmludCc6J1xcdTIyMzInLCdjd2ludCc6J1xcdTIyMzEnLCdjeWxjdHknOidcXHUyMzJEJywnZGFnZ2VyJzonXFx1MjAyMCcsJ0RhZ2dlcic6J1xcdTIwMjEnLCdkYWxldGgnOidcXHUyMTM4JywnZGFycic6J1xcdTIxOTMnLCdEYXJyJzonXFx1MjFBMScsJ2RBcnInOidcXHUyMUQzJywnZGFzaCc6J1xcdTIwMTAnLCdEYXNodic6J1xcdTJBRTQnLCdkYXNodic6J1xcdTIyQTMnLCdkYmthcm93JzonXFx1MjkwRicsJ2RibGFjJzonXFx1MDJERCcsJ0RjYXJvbic6J1xcdTAxMEUnLCdkY2Fyb24nOidcXHUwMTBGJywnRGN5JzonXFx1MDQxNCcsJ2RjeSc6J1xcdTA0MzQnLCdkZGFnZ2VyJzonXFx1MjAyMScsJ2RkYXJyJzonXFx1MjFDQScsJ0REJzonXFx1MjE0NScsJ2RkJzonXFx1MjE0NicsJ0REb3RyYWhkJzonXFx1MjkxMScsJ2Rkb3RzZXEnOidcXHUyQTc3JywnZGVnJzonXFx4QjAnLCdEZWwnOidcXHUyMjA3JywnRGVsdGEnOidcXHUwMzk0JywnZGVsdGEnOidcXHUwM0I0JywnZGVtcHR5dic6J1xcdTI5QjEnLCdkZmlzaHQnOidcXHUyOTdGJywnRGZyJzonXFx1RDgzNVxcdUREMDcnLCdkZnInOidcXHVEODM1XFx1REQyMScsJ2RIYXInOidcXHUyOTY1JywnZGhhcmwnOidcXHUyMUMzJywnZGhhcnInOidcXHUyMUMyJywnRGlhY3JpdGljYWxBY3V0ZSc6J1xceEI0JywnRGlhY3JpdGljYWxEb3QnOidcXHUwMkQ5JywnRGlhY3JpdGljYWxEb3VibGVBY3V0ZSc6J1xcdTAyREQnLCdEaWFjcml0aWNhbEdyYXZlJzonYCcsJ0RpYWNyaXRpY2FsVGlsZGUnOidcXHUwMkRDJywnZGlhbSc6J1xcdTIyQzQnLCdkaWFtb25kJzonXFx1MjJDNCcsJ0RpYW1vbmQnOidcXHUyMkM0JywnZGlhbW9uZHN1aXQnOidcXHUyNjY2JywnZGlhbXMnOidcXHUyNjY2JywnZGllJzonXFx4QTgnLCdEaWZmZXJlbnRpYWxEJzonXFx1MjE0NicsJ2RpZ2FtbWEnOidcXHUwM0REJywnZGlzaW4nOidcXHUyMkYyJywnZGl2JzonXFx4RjcnLCdkaXZpZGUnOidcXHhGNycsJ2RpdmlkZW9udGltZXMnOidcXHUyMkM3JywnZGl2b254JzonXFx1MjJDNycsJ0RKY3knOidcXHUwNDAyJywnZGpjeSc6J1xcdTA0NTInLCdkbGNvcm4nOidcXHUyMzFFJywnZGxjcm9wJzonXFx1MjMwRCcsJ2RvbGxhcic6JyQnLCdEb3BmJzonXFx1RDgzNVxcdUREM0InLCdkb3BmJzonXFx1RDgzNVxcdURENTUnLCdEb3QnOidcXHhBOCcsJ2RvdCc6J1xcdTAyRDknLCdEb3REb3QnOidcXHUyMERDJywnZG90ZXEnOidcXHUyMjUwJywnZG90ZXFkb3QnOidcXHUyMjUxJywnRG90RXF1YWwnOidcXHUyMjUwJywnZG90bWludXMnOidcXHUyMjM4JywnZG90cGx1cyc6J1xcdTIyMTQnLCdkb3RzcXVhcmUnOidcXHUyMkExJywnZG91YmxlYmFyd2VkZ2UnOidcXHUyMzA2JywnRG91YmxlQ29udG91ckludGVncmFsJzonXFx1MjIyRicsJ0RvdWJsZURvdCc6J1xceEE4JywnRG91YmxlRG93bkFycm93JzonXFx1MjFEMycsJ0RvdWJsZUxlZnRBcnJvdyc6J1xcdTIxRDAnLCdEb3VibGVMZWZ0UmlnaHRBcnJvdyc6J1xcdTIxRDQnLCdEb3VibGVMZWZ0VGVlJzonXFx1MkFFNCcsJ0RvdWJsZUxvbmdMZWZ0QXJyb3cnOidcXHUyN0Y4JywnRG91YmxlTG9uZ0xlZnRSaWdodEFycm93JzonXFx1MjdGQScsJ0RvdWJsZUxvbmdSaWdodEFycm93JzonXFx1MjdGOScsJ0RvdWJsZVJpZ2h0QXJyb3cnOidcXHUyMUQyJywnRG91YmxlUmlnaHRUZWUnOidcXHUyMkE4JywnRG91YmxlVXBBcnJvdyc6J1xcdTIxRDEnLCdEb3VibGVVcERvd25BcnJvdyc6J1xcdTIxRDUnLCdEb3VibGVWZXJ0aWNhbEJhcic6J1xcdTIyMjUnLCdEb3duQXJyb3dCYXInOidcXHUyOTEzJywnZG93bmFycm93JzonXFx1MjE5MycsJ0Rvd25BcnJvdyc6J1xcdTIxOTMnLCdEb3duYXJyb3cnOidcXHUyMUQzJywnRG93bkFycm93VXBBcnJvdyc6J1xcdTIxRjUnLCdEb3duQnJldmUnOidcXHUwMzExJywnZG93bmRvd25hcnJvd3MnOidcXHUyMUNBJywnZG93bmhhcnBvb25sZWZ0JzonXFx1MjFDMycsJ2Rvd25oYXJwb29ucmlnaHQnOidcXHUyMUMyJywnRG93bkxlZnRSaWdodFZlY3Rvcic6J1xcdTI5NTAnLCdEb3duTGVmdFRlZVZlY3Rvcic6J1xcdTI5NUUnLCdEb3duTGVmdFZlY3RvckJhcic6J1xcdTI5NTYnLCdEb3duTGVmdFZlY3Rvcic6J1xcdTIxQkQnLCdEb3duUmlnaHRUZWVWZWN0b3InOidcXHUyOTVGJywnRG93blJpZ2h0VmVjdG9yQmFyJzonXFx1Mjk1NycsJ0Rvd25SaWdodFZlY3Rvcic6J1xcdTIxQzEnLCdEb3duVGVlQXJyb3cnOidcXHUyMUE3JywnRG93blRlZSc6J1xcdTIyQTQnLCdkcmJrYXJvdyc6J1xcdTI5MTAnLCdkcmNvcm4nOidcXHUyMzFGJywnZHJjcm9wJzonXFx1MjMwQycsJ0RzY3InOidcXHVEODM1XFx1REM5RicsJ2RzY3InOidcXHVEODM1XFx1RENCOScsJ0RTY3knOidcXHUwNDA1JywnZHNjeSc6J1xcdTA0NTUnLCdkc29sJzonXFx1MjlGNicsJ0RzdHJvayc6J1xcdTAxMTAnLCdkc3Ryb2snOidcXHUwMTExJywnZHRkb3QnOidcXHUyMkYxJywnZHRyaSc6J1xcdTI1QkYnLCdkdHJpZic6J1xcdTI1QkUnLCdkdWFycic6J1xcdTIxRjUnLCdkdWhhcic6J1xcdTI5NkYnLCdkd2FuZ2xlJzonXFx1MjlBNicsJ0RaY3knOidcXHUwNDBGJywnZHpjeSc6J1xcdTA0NUYnLCdkemlncmFycic6J1xcdTI3RkYnLCdFYWN1dGUnOidcXHhDOScsJ2VhY3V0ZSc6J1xceEU5JywnZWFzdGVyJzonXFx1MkE2RScsJ0VjYXJvbic6J1xcdTAxMUEnLCdlY2Fyb24nOidcXHUwMTFCJywnRWNpcmMnOidcXHhDQScsJ2VjaXJjJzonXFx4RUEnLCdlY2lyJzonXFx1MjI1NicsJ2Vjb2xvbic6J1xcdTIyNTUnLCdFY3knOidcXHUwNDJEJywnZWN5JzonXFx1MDQ0RCcsJ2VERG90JzonXFx1MkE3NycsJ0Vkb3QnOidcXHUwMTE2JywnZWRvdCc6J1xcdTAxMTcnLCdlRG90JzonXFx1MjI1MScsJ2VlJzonXFx1MjE0NycsJ2VmRG90JzonXFx1MjI1MicsJ0Vmcic6J1xcdUQ4MzVcXHVERDA4JywnZWZyJzonXFx1RDgzNVxcdUREMjInLCdlZyc6J1xcdTJBOUEnLCdFZ3JhdmUnOidcXHhDOCcsJ2VncmF2ZSc6J1xceEU4JywnZWdzJzonXFx1MkE5NicsJ2Vnc2RvdCc6J1xcdTJBOTgnLCdlbCc6J1xcdTJBOTknLCdFbGVtZW50JzonXFx1MjIwOCcsJ2VsaW50ZXJzJzonXFx1MjNFNycsJ2VsbCc6J1xcdTIxMTMnLCdlbHMnOidcXHUyQTk1JywnZWxzZG90JzonXFx1MkE5NycsJ0VtYWNyJzonXFx1MDExMicsJ2VtYWNyJzonXFx1MDExMycsJ2VtcHR5JzonXFx1MjIwNScsJ2VtcHR5c2V0JzonXFx1MjIwNScsJ0VtcHR5U21hbGxTcXVhcmUnOidcXHUyNUZCJywnZW1wdHl2JzonXFx1MjIwNScsJ0VtcHR5VmVyeVNtYWxsU3F1YXJlJzonXFx1MjVBQicsJ2Vtc3AxMyc6J1xcdTIwMDQnLCdlbXNwMTQnOidcXHUyMDA1JywnZW1zcCc6J1xcdTIwMDMnLCdFTkcnOidcXHUwMTRBJywnZW5nJzonXFx1MDE0QicsJ2Vuc3AnOidcXHUyMDAyJywnRW9nb24nOidcXHUwMTE4JywnZW9nb24nOidcXHUwMTE5JywnRW9wZic6J1xcdUQ4MzVcXHVERDNDJywnZW9wZic6J1xcdUQ4MzVcXHVERDU2JywnZXBhcic6J1xcdTIyRDUnLCdlcGFyc2wnOidcXHUyOUUzJywnZXBsdXMnOidcXHUyQTcxJywnZXBzaSc6J1xcdTAzQjUnLCdFcHNpbG9uJzonXFx1MDM5NScsJ2Vwc2lsb24nOidcXHUwM0I1JywnZXBzaXYnOidcXHUwM0Y1JywnZXFjaXJjJzonXFx1MjI1NicsJ2VxY29sb24nOidcXHUyMjU1JywnZXFzaW0nOidcXHUyMjQyJywnZXFzbGFudGd0cic6J1xcdTJBOTYnLCdlcXNsYW50bGVzcyc6J1xcdTJBOTUnLCdFcXVhbCc6J1xcdTJBNzUnLCdlcXVhbHMnOic9JywnRXF1YWxUaWxkZSc6J1xcdTIyNDInLCdlcXVlc3QnOidcXHUyMjVGJywnRXF1aWxpYnJpdW0nOidcXHUyMUNDJywnZXF1aXYnOidcXHUyMjYxJywnZXF1aXZERCc6J1xcdTJBNzgnLCdlcXZwYXJzbCc6J1xcdTI5RTUnLCdlcmFycic6J1xcdTI5NzEnLCdlckRvdCc6J1xcdTIyNTMnLCdlc2NyJzonXFx1MjEyRicsJ0VzY3InOidcXHUyMTMwJywnZXNkb3QnOidcXHUyMjUwJywnRXNpbSc6J1xcdTJBNzMnLCdlc2ltJzonXFx1MjI0MicsJ0V0YSc6J1xcdTAzOTcnLCdldGEnOidcXHUwM0I3JywnRVRIJzonXFx4RDAnLCdldGgnOidcXHhGMCcsJ0V1bWwnOidcXHhDQicsJ2V1bWwnOidcXHhFQicsJ2V1cm8nOidcXHUyMEFDJywnZXhjbCc6JyEnLCdleGlzdCc6J1xcdTIyMDMnLCdFeGlzdHMnOidcXHUyMjAzJywnZXhwZWN0YXRpb24nOidcXHUyMTMwJywnZXhwb25lbnRpYWxlJzonXFx1MjE0NycsJ0V4cG9uZW50aWFsRSc6J1xcdTIxNDcnLCdmYWxsaW5nZG90c2VxJzonXFx1MjI1MicsJ0ZjeSc6J1xcdTA0MjQnLCdmY3knOidcXHUwNDQ0JywnZmVtYWxlJzonXFx1MjY0MCcsJ2ZmaWxpZyc6J1xcdUZCMDMnLCdmZmxpZyc6J1xcdUZCMDAnLCdmZmxsaWcnOidcXHVGQjA0JywnRmZyJzonXFx1RDgzNVxcdUREMDknLCdmZnInOidcXHVEODM1XFx1REQyMycsJ2ZpbGlnJzonXFx1RkIwMScsJ0ZpbGxlZFNtYWxsU3F1YXJlJzonXFx1MjVGQycsJ0ZpbGxlZFZlcnlTbWFsbFNxdWFyZSc6J1xcdTI1QUEnLCdmamxpZyc6J2ZqJywnZmxhdCc6J1xcdTI2NkQnLCdmbGxpZyc6J1xcdUZCMDInLCdmbHRucyc6J1xcdTI1QjEnLCdmbm9mJzonXFx1MDE5MicsJ0ZvcGYnOidcXHVEODM1XFx1REQzRCcsJ2ZvcGYnOidcXHVEODM1XFx1REQ1NycsJ2ZvcmFsbCc6J1xcdTIyMDAnLCdGb3JBbGwnOidcXHUyMjAwJywnZm9yayc6J1xcdTIyRDQnLCdmb3Jrdic6J1xcdTJBRDknLCdGb3VyaWVydHJmJzonXFx1MjEzMScsJ2ZwYXJ0aW50JzonXFx1MkEwRCcsJ2ZyYWMxMic6J1xceEJEJywnZnJhYzEzJzonXFx1MjE1MycsJ2ZyYWMxNCc6J1xceEJDJywnZnJhYzE1JzonXFx1MjE1NScsJ2ZyYWMxNic6J1xcdTIxNTknLCdmcmFjMTgnOidcXHUyMTVCJywnZnJhYzIzJzonXFx1MjE1NCcsJ2ZyYWMyNSc6J1xcdTIxNTYnLCdmcmFjMzQnOidcXHhCRScsJ2ZyYWMzNSc6J1xcdTIxNTcnLCdmcmFjMzgnOidcXHUyMTVDJywnZnJhYzQ1JzonXFx1MjE1OCcsJ2ZyYWM1Nic6J1xcdTIxNUEnLCdmcmFjNTgnOidcXHUyMTVEJywnZnJhYzc4JzonXFx1MjE1RScsJ2ZyYXNsJzonXFx1MjA0NCcsJ2Zyb3duJzonXFx1MjMyMicsJ2ZzY3InOidcXHVEODM1XFx1RENCQicsJ0ZzY3InOidcXHUyMTMxJywnZ2FjdXRlJzonXFx1MDFGNScsJ0dhbW1hJzonXFx1MDM5MycsJ2dhbW1hJzonXFx1MDNCMycsJ0dhbW1hZCc6J1xcdTAzREMnLCdnYW1tYWQnOidcXHUwM0REJywnZ2FwJzonXFx1MkE4NicsJ0dicmV2ZSc6J1xcdTAxMUUnLCdnYnJldmUnOidcXHUwMTFGJywnR2NlZGlsJzonXFx1MDEyMicsJ0djaXJjJzonXFx1MDExQycsJ2djaXJjJzonXFx1MDExRCcsJ0djeSc6J1xcdTA0MTMnLCdnY3knOidcXHUwNDMzJywnR2RvdCc6J1xcdTAxMjAnLCdnZG90JzonXFx1MDEyMScsJ2dlJzonXFx1MjI2NScsJ2dFJzonXFx1MjI2NycsJ2dFbCc6J1xcdTJBOEMnLCdnZWwnOidcXHUyMkRCJywnZ2VxJzonXFx1MjI2NScsJ2dlcXEnOidcXHUyMjY3JywnZ2Vxc2xhbnQnOidcXHUyQTdFJywnZ2VzY2MnOidcXHUyQUE5JywnZ2VzJzonXFx1MkE3RScsJ2dlc2RvdCc6J1xcdTJBODAnLCdnZXNkb3RvJzonXFx1MkE4MicsJ2dlc2RvdG9sJzonXFx1MkE4NCcsJ2dlc2wnOidcXHUyMkRCXFx1RkUwMCcsJ2dlc2xlcyc6J1xcdTJBOTQnLCdHZnInOidcXHVEODM1XFx1REQwQScsJ2dmcic6J1xcdUQ4MzVcXHVERDI0JywnZ2cnOidcXHUyMjZCJywnR2cnOidcXHUyMkQ5JywnZ2dnJzonXFx1MjJEOScsJ2dpbWVsJzonXFx1MjEzNycsJ0dKY3knOidcXHUwNDAzJywnZ2pjeSc6J1xcdTA0NTMnLCdnbGEnOidcXHUyQUE1JywnZ2wnOidcXHUyMjc3JywnZ2xFJzonXFx1MkE5MicsJ2dsaic6J1xcdTJBQTQnLCdnbmFwJzonXFx1MkE4QScsJ2duYXBwcm94JzonXFx1MkE4QScsJ2duZSc6J1xcdTJBODgnLCdnbkUnOidcXHUyMjY5JywnZ25lcSc6J1xcdTJBODgnLCdnbmVxcSc6J1xcdTIyNjknLCdnbnNpbSc6J1xcdTIyRTcnLCdHb3BmJzonXFx1RDgzNVxcdUREM0UnLCdnb3BmJzonXFx1RDgzNVxcdURENTgnLCdncmF2ZSc6J2AnLCdHcmVhdGVyRXF1YWwnOidcXHUyMjY1JywnR3JlYXRlckVxdWFsTGVzcyc6J1xcdTIyREInLCdHcmVhdGVyRnVsbEVxdWFsJzonXFx1MjI2NycsJ0dyZWF0ZXJHcmVhdGVyJzonXFx1MkFBMicsJ0dyZWF0ZXJMZXNzJzonXFx1MjI3NycsJ0dyZWF0ZXJTbGFudEVxdWFsJzonXFx1MkE3RScsJ0dyZWF0ZXJUaWxkZSc6J1xcdTIyNzMnLCdHc2NyJzonXFx1RDgzNVxcdURDQTInLCdnc2NyJzonXFx1MjEwQScsJ2dzaW0nOidcXHUyMjczJywnZ3NpbWUnOidcXHUyQThFJywnZ3NpbWwnOidcXHUyQTkwJywnZ3RjYyc6J1xcdTJBQTcnLCdndGNpcic6J1xcdTJBN0EnLCdndCc6Jz4nLCdHVCc6Jz4nLCdHdCc6J1xcdTIyNkInLCdndGRvdCc6J1xcdTIyRDcnLCdndGxQYXInOidcXHUyOTk1JywnZ3RxdWVzdCc6J1xcdTJBN0MnLCdndHJhcHByb3gnOidcXHUyQTg2JywnZ3RyYXJyJzonXFx1Mjk3OCcsJ2d0cmRvdCc6J1xcdTIyRDcnLCdndHJlcWxlc3MnOidcXHUyMkRCJywnZ3RyZXFxbGVzcyc6J1xcdTJBOEMnLCdndHJsZXNzJzonXFx1MjI3NycsJ2d0cnNpbSc6J1xcdTIyNzMnLCdndmVydG5lcXEnOidcXHUyMjY5XFx1RkUwMCcsJ2d2bkUnOidcXHUyMjY5XFx1RkUwMCcsJ0hhY2VrJzonXFx1MDJDNycsJ2hhaXJzcCc6J1xcdTIwMEEnLCdoYWxmJzonXFx4QkQnLCdoYW1pbHQnOidcXHUyMTBCJywnSEFSRGN5JzonXFx1MDQyQScsJ2hhcmRjeSc6J1xcdTA0NEEnLCdoYXJyY2lyJzonXFx1Mjk0OCcsJ2hhcnInOidcXHUyMTk0JywnaEFycic6J1xcdTIxRDQnLCdoYXJydyc6J1xcdTIxQUQnLCdIYXQnOideJywnaGJhcic6J1xcdTIxMEYnLCdIY2lyYyc6J1xcdTAxMjQnLCdoY2lyYyc6J1xcdTAxMjUnLCdoZWFydHMnOidcXHUyNjY1JywnaGVhcnRzdWl0JzonXFx1MjY2NScsJ2hlbGxpcCc6J1xcdTIwMjYnLCdoZXJjb24nOidcXHUyMkI5JywnaGZyJzonXFx1RDgzNVxcdUREMjUnLCdIZnInOidcXHUyMTBDJywnSGlsYmVydFNwYWNlJzonXFx1MjEwQicsJ2hrc2Vhcm93JzonXFx1MjkyNScsJ2hrc3dhcm93JzonXFx1MjkyNicsJ2hvYXJyJzonXFx1MjFGRicsJ2hvbXRodCc6J1xcdTIyM0InLCdob29rbGVmdGFycm93JzonXFx1MjFBOScsJ2hvb2tyaWdodGFycm93JzonXFx1MjFBQScsJ2hvcGYnOidcXHVEODM1XFx1REQ1OScsJ0hvcGYnOidcXHUyMTBEJywnaG9yYmFyJzonXFx1MjAxNScsJ0hvcml6b250YWxMaW5lJzonXFx1MjUwMCcsJ2hzY3InOidcXHVEODM1XFx1RENCRCcsJ0hzY3InOidcXHUyMTBCJywnaHNsYXNoJzonXFx1MjEwRicsJ0hzdHJvayc6J1xcdTAxMjYnLCdoc3Ryb2snOidcXHUwMTI3JywnSHVtcERvd25IdW1wJzonXFx1MjI0RScsJ0h1bXBFcXVhbCc6J1xcdTIyNEYnLCdoeWJ1bGwnOidcXHUyMDQzJywnaHlwaGVuJzonXFx1MjAxMCcsJ0lhY3V0ZSc6J1xceENEJywnaWFjdXRlJzonXFx4RUQnLCdpYyc6J1xcdTIwNjMnLCdJY2lyYyc6J1xceENFJywnaWNpcmMnOidcXHhFRScsJ0ljeSc6J1xcdTA0MTgnLCdpY3knOidcXHUwNDM4JywnSWRvdCc6J1xcdTAxMzAnLCdJRWN5JzonXFx1MDQxNScsJ2llY3knOidcXHUwNDM1JywnaWV4Y2wnOidcXHhBMScsJ2lmZic6J1xcdTIxRDQnLCdpZnInOidcXHVEODM1XFx1REQyNicsJ0lmcic6J1xcdTIxMTEnLCdJZ3JhdmUnOidcXHhDQycsJ2lncmF2ZSc6J1xceEVDJywnaWknOidcXHUyMTQ4JywnaWlpaW50JzonXFx1MkEwQycsJ2lpaW50JzonXFx1MjIyRCcsJ2lpbmZpbic6J1xcdTI5REMnLCdpaW90YSc6J1xcdTIxMjknLCdJSmxpZyc6J1xcdTAxMzInLCdpamxpZyc6J1xcdTAxMzMnLCdJbWFjcic6J1xcdTAxMkEnLCdpbWFjcic6J1xcdTAxMkInLCdpbWFnZSc6J1xcdTIxMTEnLCdJbWFnaW5hcnlJJzonXFx1MjE0OCcsJ2ltYWdsaW5lJzonXFx1MjExMCcsJ2ltYWdwYXJ0JzonXFx1MjExMScsJ2ltYXRoJzonXFx1MDEzMScsJ0ltJzonXFx1MjExMScsJ2ltb2YnOidcXHUyMkI3JywnaW1wZWQnOidcXHUwMUI1JywnSW1wbGllcyc6J1xcdTIxRDInLCdpbmNhcmUnOidcXHUyMTA1JywnaW4nOidcXHUyMjA4JywnaW5maW4nOidcXHUyMjFFJywnaW5maW50aWUnOidcXHUyOUREJywnaW5vZG90JzonXFx1MDEzMScsJ2ludGNhbCc6J1xcdTIyQkEnLCdpbnQnOidcXHUyMjJCJywnSW50JzonXFx1MjIyQycsJ2ludGVnZXJzJzonXFx1MjEyNCcsJ0ludGVncmFsJzonXFx1MjIyQicsJ2ludGVyY2FsJzonXFx1MjJCQScsJ0ludGVyc2VjdGlvbic6J1xcdTIyQzInLCdpbnRsYXJoayc6J1xcdTJBMTcnLCdpbnRwcm9kJzonXFx1MkEzQycsJ0ludmlzaWJsZUNvbW1hJzonXFx1MjA2MycsJ0ludmlzaWJsZVRpbWVzJzonXFx1MjA2MicsJ0lPY3knOidcXHUwNDAxJywnaW9jeSc6J1xcdTA0NTEnLCdJb2dvbic6J1xcdTAxMkUnLCdpb2dvbic6J1xcdTAxMkYnLCdJb3BmJzonXFx1RDgzNVxcdURENDAnLCdpb3BmJzonXFx1RDgzNVxcdURENUEnLCdJb3RhJzonXFx1MDM5OScsJ2lvdGEnOidcXHUwM0I5JywnaXByb2QnOidcXHUyQTNDJywnaXF1ZXN0JzonXFx4QkYnLCdpc2NyJzonXFx1RDgzNVxcdURDQkUnLCdJc2NyJzonXFx1MjExMCcsJ2lzaW4nOidcXHUyMjA4JywnaXNpbmRvdCc6J1xcdTIyRjUnLCdpc2luRSc6J1xcdTIyRjknLCdpc2lucyc6J1xcdTIyRjQnLCdpc2luc3YnOidcXHUyMkYzJywnaXNpbnYnOidcXHUyMjA4JywnaXQnOidcXHUyMDYyJywnSXRpbGRlJzonXFx1MDEyOCcsJ2l0aWxkZSc6J1xcdTAxMjknLCdJdWtjeSc6J1xcdTA0MDYnLCdpdWtjeSc6J1xcdTA0NTYnLCdJdW1sJzonXFx4Q0YnLCdpdW1sJzonXFx4RUYnLCdKY2lyYyc6J1xcdTAxMzQnLCdqY2lyYyc6J1xcdTAxMzUnLCdKY3knOidcXHUwNDE5JywnamN5JzonXFx1MDQzOScsJ0pmcic6J1xcdUQ4MzVcXHVERDBEJywnamZyJzonXFx1RDgzNVxcdUREMjcnLCdqbWF0aCc6J1xcdTAyMzcnLCdKb3BmJzonXFx1RDgzNVxcdURENDEnLCdqb3BmJzonXFx1RDgzNVxcdURENUInLCdKc2NyJzonXFx1RDgzNVxcdURDQTUnLCdqc2NyJzonXFx1RDgzNVxcdURDQkYnLCdKc2VyY3knOidcXHUwNDA4JywnanNlcmN5JzonXFx1MDQ1OCcsJ0p1a2N5JzonXFx1MDQwNCcsJ2p1a2N5JzonXFx1MDQ1NCcsJ0thcHBhJzonXFx1MDM5QScsJ2thcHBhJzonXFx1MDNCQScsJ2thcHBhdic6J1xcdTAzRjAnLCdLY2VkaWwnOidcXHUwMTM2Jywna2NlZGlsJzonXFx1MDEzNycsJ0tjeSc6J1xcdTA0MUEnLCdrY3knOidcXHUwNDNBJywnS2ZyJzonXFx1RDgzNVxcdUREMEUnLCdrZnInOidcXHVEODM1XFx1REQyOCcsJ2tncmVlbic6J1xcdTAxMzgnLCdLSGN5JzonXFx1MDQyNScsJ2toY3knOidcXHUwNDQ1JywnS0pjeSc6J1xcdTA0MEMnLCdramN5JzonXFx1MDQ1QycsJ0tvcGYnOidcXHVEODM1XFx1REQ0MicsJ2tvcGYnOidcXHVEODM1XFx1REQ1QycsJ0tzY3InOidcXHVEODM1XFx1RENBNicsJ2tzY3InOidcXHVEODM1XFx1RENDMCcsJ2xBYXJyJzonXFx1MjFEQScsJ0xhY3V0ZSc6J1xcdTAxMzknLCdsYWN1dGUnOidcXHUwMTNBJywnbGFlbXB0eXYnOidcXHUyOUI0JywnbGFncmFuJzonXFx1MjExMicsJ0xhbWJkYSc6J1xcdTAzOUInLCdsYW1iZGEnOidcXHUwM0JCJywnbGFuZyc6J1xcdTI3RTgnLCdMYW5nJzonXFx1MjdFQScsJ2xhbmdkJzonXFx1Mjk5MScsJ2xhbmdsZSc6J1xcdTI3RTgnLCdsYXAnOidcXHUyQTg1JywnTGFwbGFjZXRyZic6J1xcdTIxMTInLCdsYXF1byc6J1xceEFCJywnbGFycmInOidcXHUyMUU0JywnbGFycmJmcyc6J1xcdTI5MUYnLCdsYXJyJzonXFx1MjE5MCcsJ0xhcnInOidcXHUyMTlFJywnbEFycic6J1xcdTIxRDAnLCdsYXJyZnMnOidcXHUyOTFEJywnbGFycmhrJzonXFx1MjFBOScsJ2xhcnJscCc6J1xcdTIxQUInLCdsYXJycGwnOidcXHUyOTM5JywnbGFycnNpbSc6J1xcdTI5NzMnLCdsYXJydGwnOidcXHUyMUEyJywnbGF0YWlsJzonXFx1MjkxOScsJ2xBdGFpbCc6J1xcdTI5MUInLCdsYXQnOidcXHUyQUFCJywnbGF0ZSc6J1xcdTJBQUQnLCdsYXRlcyc6J1xcdTJBQURcXHVGRTAwJywnbGJhcnInOidcXHUyOTBDJywnbEJhcnInOidcXHUyOTBFJywnbGJicmsnOidcXHUyNzcyJywnbGJyYWNlJzoneycsJ2xicmFjayc6J1snLCdsYnJrZSc6J1xcdTI5OEInLCdsYnJrc2xkJzonXFx1Mjk4RicsJ2xicmtzbHUnOidcXHUyOThEJywnTGNhcm9uJzonXFx1MDEzRCcsJ2xjYXJvbic6J1xcdTAxM0UnLCdMY2VkaWwnOidcXHUwMTNCJywnbGNlZGlsJzonXFx1MDEzQycsJ2xjZWlsJzonXFx1MjMwOCcsJ2xjdWInOid7JywnTGN5JzonXFx1MDQxQicsJ2xjeSc6J1xcdTA0M0InLCdsZGNhJzonXFx1MjkzNicsJ2xkcXVvJzonXFx1MjAxQycsJ2xkcXVvcic6J1xcdTIwMUUnLCdsZHJkaGFyJzonXFx1Mjk2NycsJ2xkcnVzaGFyJzonXFx1Mjk0QicsJ2xkc2gnOidcXHUyMUIyJywnbGUnOidcXHUyMjY0JywnbEUnOidcXHUyMjY2JywnTGVmdEFuZ2xlQnJhY2tldCc6J1xcdTI3RTgnLCdMZWZ0QXJyb3dCYXInOidcXHUyMUU0JywnbGVmdGFycm93JzonXFx1MjE5MCcsJ0xlZnRBcnJvdyc6J1xcdTIxOTAnLCdMZWZ0YXJyb3cnOidcXHUyMUQwJywnTGVmdEFycm93UmlnaHRBcnJvdyc6J1xcdTIxQzYnLCdsZWZ0YXJyb3d0YWlsJzonXFx1MjFBMicsJ0xlZnRDZWlsaW5nJzonXFx1MjMwOCcsJ0xlZnREb3VibGVCcmFja2V0JzonXFx1MjdFNicsJ0xlZnREb3duVGVlVmVjdG9yJzonXFx1Mjk2MScsJ0xlZnREb3duVmVjdG9yQmFyJzonXFx1Mjk1OScsJ0xlZnREb3duVmVjdG9yJzonXFx1MjFDMycsJ0xlZnRGbG9vcic6J1xcdTIzMEEnLCdsZWZ0aGFycG9vbmRvd24nOidcXHUyMUJEJywnbGVmdGhhcnBvb251cCc6J1xcdTIxQkMnLCdsZWZ0bGVmdGFycm93cyc6J1xcdTIxQzcnLCdsZWZ0cmlnaHRhcnJvdyc6J1xcdTIxOTQnLCdMZWZ0UmlnaHRBcnJvdyc6J1xcdTIxOTQnLCdMZWZ0cmlnaHRhcnJvdyc6J1xcdTIxRDQnLCdsZWZ0cmlnaHRhcnJvd3MnOidcXHUyMUM2JywnbGVmdHJpZ2h0aGFycG9vbnMnOidcXHUyMUNCJywnbGVmdHJpZ2h0c3F1aWdhcnJvdyc6J1xcdTIxQUQnLCdMZWZ0UmlnaHRWZWN0b3InOidcXHUyOTRFJywnTGVmdFRlZUFycm93JzonXFx1MjFBNCcsJ0xlZnRUZWUnOidcXHUyMkEzJywnTGVmdFRlZVZlY3Rvcic6J1xcdTI5NUEnLCdsZWZ0dGhyZWV0aW1lcyc6J1xcdTIyQ0InLCdMZWZ0VHJpYW5nbGVCYXInOidcXHUyOUNGJywnTGVmdFRyaWFuZ2xlJzonXFx1MjJCMicsJ0xlZnRUcmlhbmdsZUVxdWFsJzonXFx1MjJCNCcsJ0xlZnRVcERvd25WZWN0b3InOidcXHUyOTUxJywnTGVmdFVwVGVlVmVjdG9yJzonXFx1Mjk2MCcsJ0xlZnRVcFZlY3RvckJhcic6J1xcdTI5NTgnLCdMZWZ0VXBWZWN0b3InOidcXHUyMUJGJywnTGVmdFZlY3RvckJhcic6J1xcdTI5NTInLCdMZWZ0VmVjdG9yJzonXFx1MjFCQycsJ2xFZyc6J1xcdTJBOEInLCdsZWcnOidcXHUyMkRBJywnbGVxJzonXFx1MjI2NCcsJ2xlcXEnOidcXHUyMjY2JywnbGVxc2xhbnQnOidcXHUyQTdEJywnbGVzY2MnOidcXHUyQUE4JywnbGVzJzonXFx1MkE3RCcsJ2xlc2RvdCc6J1xcdTJBN0YnLCdsZXNkb3RvJzonXFx1MkE4MScsJ2xlc2RvdG9yJzonXFx1MkE4MycsJ2xlc2cnOidcXHUyMkRBXFx1RkUwMCcsJ2xlc2dlcyc6J1xcdTJBOTMnLCdsZXNzYXBwcm94JzonXFx1MkE4NScsJ2xlc3Nkb3QnOidcXHUyMkQ2JywnbGVzc2VxZ3RyJzonXFx1MjJEQScsJ2xlc3NlcXFndHInOidcXHUyQThCJywnTGVzc0VxdWFsR3JlYXRlcic6J1xcdTIyREEnLCdMZXNzRnVsbEVxdWFsJzonXFx1MjI2NicsJ0xlc3NHcmVhdGVyJzonXFx1MjI3NicsJ2xlc3NndHInOidcXHUyMjc2JywnTGVzc0xlc3MnOidcXHUyQUExJywnbGVzc3NpbSc6J1xcdTIyNzInLCdMZXNzU2xhbnRFcXVhbCc6J1xcdTJBN0QnLCdMZXNzVGlsZGUnOidcXHUyMjcyJywnbGZpc2h0JzonXFx1Mjk3QycsJ2xmbG9vcic6J1xcdTIzMEEnLCdMZnInOidcXHVEODM1XFx1REQwRicsJ2xmcic6J1xcdUQ4MzVcXHVERDI5JywnbGcnOidcXHUyMjc2JywnbGdFJzonXFx1MkE5MScsJ2xIYXInOidcXHUyOTYyJywnbGhhcmQnOidcXHUyMUJEJywnbGhhcnUnOidcXHUyMUJDJywnbGhhcnVsJzonXFx1Mjk2QScsJ2xoYmxrJzonXFx1MjU4NCcsJ0xKY3knOidcXHUwNDA5JywnbGpjeSc6J1xcdTA0NTknLCdsbGFycic6J1xcdTIxQzcnLCdsbCc6J1xcdTIyNkEnLCdMbCc6J1xcdTIyRDgnLCdsbGNvcm5lcic6J1xcdTIzMUUnLCdMbGVmdGFycm93JzonXFx1MjFEQScsJ2xsaGFyZCc6J1xcdTI5NkInLCdsbHRyaSc6J1xcdTI1RkEnLCdMbWlkb3QnOidcXHUwMTNGJywnbG1pZG90JzonXFx1MDE0MCcsJ2xtb3VzdGFjaGUnOidcXHUyM0IwJywnbG1vdXN0JzonXFx1MjNCMCcsJ2xuYXAnOidcXHUyQTg5JywnbG5hcHByb3gnOidcXHUyQTg5JywnbG5lJzonXFx1MkE4NycsJ2xuRSc6J1xcdTIyNjgnLCdsbmVxJzonXFx1MkE4NycsJ2xuZXFxJzonXFx1MjI2OCcsJ2xuc2ltJzonXFx1MjJFNicsJ2xvYW5nJzonXFx1MjdFQycsJ2xvYXJyJzonXFx1MjFGRCcsJ2xvYnJrJzonXFx1MjdFNicsJ2xvbmdsZWZ0YXJyb3cnOidcXHUyN0Y1JywnTG9uZ0xlZnRBcnJvdyc6J1xcdTI3RjUnLCdMb25nbGVmdGFycm93JzonXFx1MjdGOCcsJ2xvbmdsZWZ0cmlnaHRhcnJvdyc6J1xcdTI3RjcnLCdMb25nTGVmdFJpZ2h0QXJyb3cnOidcXHUyN0Y3JywnTG9uZ2xlZnRyaWdodGFycm93JzonXFx1MjdGQScsJ2xvbmdtYXBzdG8nOidcXHUyN0ZDJywnbG9uZ3JpZ2h0YXJyb3cnOidcXHUyN0Y2JywnTG9uZ1JpZ2h0QXJyb3cnOidcXHUyN0Y2JywnTG9uZ3JpZ2h0YXJyb3cnOidcXHUyN0Y5JywnbG9vcGFycm93bGVmdCc6J1xcdTIxQUInLCdsb29wYXJyb3dyaWdodCc6J1xcdTIxQUMnLCdsb3Bhcic6J1xcdTI5ODUnLCdMb3BmJzonXFx1RDgzNVxcdURENDMnLCdsb3BmJzonXFx1RDgzNVxcdURENUQnLCdsb3BsdXMnOidcXHUyQTJEJywnbG90aW1lcyc6J1xcdTJBMzQnLCdsb3dhc3QnOidcXHUyMjE3JywnbG93YmFyJzonXycsJ0xvd2VyTGVmdEFycm93JzonXFx1MjE5OScsJ0xvd2VyUmlnaHRBcnJvdyc6J1xcdTIxOTgnLCdsb3onOidcXHUyNUNBJywnbG96ZW5nZSc6J1xcdTI1Q0EnLCdsb3pmJzonXFx1MjlFQicsJ2xwYXInOicoJywnbHBhcmx0JzonXFx1Mjk5MycsJ2xyYXJyJzonXFx1MjFDNicsJ2xyY29ybmVyJzonXFx1MjMxRicsJ2xyaGFyJzonXFx1MjFDQicsJ2xyaGFyZCc6J1xcdTI5NkQnLCdscm0nOidcXHUyMDBFJywnbHJ0cmknOidcXHUyMkJGJywnbHNhcXVvJzonXFx1MjAzOScsJ2xzY3InOidcXHVEODM1XFx1RENDMScsJ0xzY3InOidcXHUyMTEyJywnbHNoJzonXFx1MjFCMCcsJ0xzaCc6J1xcdTIxQjAnLCdsc2ltJzonXFx1MjI3MicsJ2xzaW1lJzonXFx1MkE4RCcsJ2xzaW1nJzonXFx1MkE4RicsJ2xzcWInOidbJywnbHNxdW8nOidcXHUyMDE4JywnbHNxdW9yJzonXFx1MjAxQScsJ0xzdHJvayc6J1xcdTAxNDEnLCdsc3Ryb2snOidcXHUwMTQyJywnbHRjYyc6J1xcdTJBQTYnLCdsdGNpcic6J1xcdTJBNzknLCdsdCc6JzwnLCdMVCc6JzwnLCdMdCc6J1xcdTIyNkEnLCdsdGRvdCc6J1xcdTIyRDYnLCdsdGhyZWUnOidcXHUyMkNCJywnbHRpbWVzJzonXFx1MjJDOScsJ2x0bGFycic6J1xcdTI5NzYnLCdsdHF1ZXN0JzonXFx1MkE3QicsJ2x0cmknOidcXHUyNUMzJywnbHRyaWUnOidcXHUyMkI0JywnbHRyaWYnOidcXHUyNUMyJywnbHRyUGFyJzonXFx1Mjk5NicsJ2x1cmRzaGFyJzonXFx1Mjk0QScsJ2x1cnVoYXInOidcXHUyOTY2JywnbHZlcnRuZXFxJzonXFx1MjI2OFxcdUZFMDAnLCdsdm5FJzonXFx1MjI2OFxcdUZFMDAnLCdtYWNyJzonXFx4QUYnLCdtYWxlJzonXFx1MjY0MicsJ21hbHQnOidcXHUyNzIwJywnbWFsdGVzZSc6J1xcdTI3MjAnLCdNYXAnOidcXHUyOTA1JywnbWFwJzonXFx1MjFBNicsJ21hcHN0byc6J1xcdTIxQTYnLCdtYXBzdG9kb3duJzonXFx1MjFBNycsJ21hcHN0b2xlZnQnOidcXHUyMUE0JywnbWFwc3RvdXAnOidcXHUyMUE1JywnbWFya2VyJzonXFx1MjVBRScsJ21jb21tYSc6J1xcdTJBMjknLCdNY3knOidcXHUwNDFDJywnbWN5JzonXFx1MDQzQycsJ21kYXNoJzonXFx1MjAxNCcsJ21ERG90JzonXFx1MjIzQScsJ21lYXN1cmVkYW5nbGUnOidcXHUyMjIxJywnTWVkaXVtU3BhY2UnOidcXHUyMDVGJywnTWVsbGludHJmJzonXFx1MjEzMycsJ01mcic6J1xcdUQ4MzVcXHVERDEwJywnbWZyJzonXFx1RDgzNVxcdUREMkEnLCdtaG8nOidcXHUyMTI3JywnbWljcm8nOidcXHhCNScsJ21pZGFzdCc6JyonLCdtaWRjaXInOidcXHUyQUYwJywnbWlkJzonXFx1MjIyMycsJ21pZGRvdCc6J1xceEI3JywnbWludXNiJzonXFx1MjI5RicsJ21pbnVzJzonXFx1MjIxMicsJ21pbnVzZCc6J1xcdTIyMzgnLCdtaW51c2R1JzonXFx1MkEyQScsJ01pbnVzUGx1cyc6J1xcdTIyMTMnLCdtbGNwJzonXFx1MkFEQicsJ21sZHInOidcXHUyMDI2JywnbW5wbHVzJzonXFx1MjIxMycsJ21vZGVscyc6J1xcdTIyQTcnLCdNb3BmJzonXFx1RDgzNVxcdURENDQnLCdtb3BmJzonXFx1RDgzNVxcdURENUUnLCdtcCc6J1xcdTIyMTMnLCdtc2NyJzonXFx1RDgzNVxcdURDQzInLCdNc2NyJzonXFx1MjEzMycsJ21zdHBvcyc6J1xcdTIyM0UnLCdNdSc6J1xcdTAzOUMnLCdtdSc6J1xcdTAzQkMnLCdtdWx0aW1hcCc6J1xcdTIyQjgnLCdtdW1hcCc6J1xcdTIyQjgnLCduYWJsYSc6J1xcdTIyMDcnLCdOYWN1dGUnOidcXHUwMTQzJywnbmFjdXRlJzonXFx1MDE0NCcsJ25hbmcnOidcXHUyMjIwXFx1MjBEMicsJ25hcCc6J1xcdTIyNDknLCduYXBFJzonXFx1MkE3MFxcdTAzMzgnLCduYXBpZCc6J1xcdTIyNEJcXHUwMzM4JywnbmFwb3MnOidcXHUwMTQ5JywnbmFwcHJveCc6J1xcdTIyNDknLCduYXR1cmFsJzonXFx1MjY2RScsJ25hdHVyYWxzJzonXFx1MjExNScsJ25hdHVyJzonXFx1MjY2RScsJ25ic3AnOidcXHhBMCcsJ25idW1wJzonXFx1MjI0RVxcdTAzMzgnLCduYnVtcGUnOidcXHUyMjRGXFx1MDMzOCcsJ25jYXAnOidcXHUyQTQzJywnTmNhcm9uJzonXFx1MDE0NycsJ25jYXJvbic6J1xcdTAxNDgnLCdOY2VkaWwnOidcXHUwMTQ1JywnbmNlZGlsJzonXFx1MDE0NicsJ25jb25nJzonXFx1MjI0NycsJ25jb25nZG90JzonXFx1MkE2RFxcdTAzMzgnLCduY3VwJzonXFx1MkE0MicsJ05jeSc6J1xcdTA0MUQnLCduY3knOidcXHUwNDNEJywnbmRhc2gnOidcXHUyMDEzJywnbmVhcmhrJzonXFx1MjkyNCcsJ25lYXJyJzonXFx1MjE5NycsJ25lQXJyJzonXFx1MjFENycsJ25lYXJyb3cnOidcXHUyMTk3JywnbmUnOidcXHUyMjYwJywnbmVkb3QnOidcXHUyMjUwXFx1MDMzOCcsJ05lZ2F0aXZlTWVkaXVtU3BhY2UnOidcXHUyMDBCJywnTmVnYXRpdmVUaGlja1NwYWNlJzonXFx1MjAwQicsJ05lZ2F0aXZlVGhpblNwYWNlJzonXFx1MjAwQicsJ05lZ2F0aXZlVmVyeVRoaW5TcGFjZSc6J1xcdTIwMEInLCduZXF1aXYnOidcXHUyMjYyJywnbmVzZWFyJzonXFx1MjkyOCcsJ25lc2ltJzonXFx1MjI0MlxcdTAzMzgnLCdOZXN0ZWRHcmVhdGVyR3JlYXRlcic6J1xcdTIyNkInLCdOZXN0ZWRMZXNzTGVzcyc6J1xcdTIyNkEnLCdOZXdMaW5lJzonXFxuJywnbmV4aXN0JzonXFx1MjIwNCcsJ25leGlzdHMnOidcXHUyMjA0JywnTmZyJzonXFx1RDgzNVxcdUREMTEnLCduZnInOidcXHVEODM1XFx1REQyQicsJ25nRSc6J1xcdTIyNjdcXHUwMzM4JywnbmdlJzonXFx1MjI3MScsJ25nZXEnOidcXHUyMjcxJywnbmdlcXEnOidcXHUyMjY3XFx1MDMzOCcsJ25nZXFzbGFudCc6J1xcdTJBN0VcXHUwMzM4Jywnbmdlcyc6J1xcdTJBN0VcXHUwMzM4JywnbkdnJzonXFx1MjJEOVxcdTAzMzgnLCduZ3NpbSc6J1xcdTIyNzUnLCduR3QnOidcXHUyMjZCXFx1MjBEMicsJ25ndCc6J1xcdTIyNkYnLCduZ3RyJzonXFx1MjI2RicsJ25HdHYnOidcXHUyMjZCXFx1MDMzOCcsJ25oYXJyJzonXFx1MjFBRScsJ25oQXJyJzonXFx1MjFDRScsJ25ocGFyJzonXFx1MkFGMicsJ25pJzonXFx1MjIwQicsJ25pcyc6J1xcdTIyRkMnLCduaXNkJzonXFx1MjJGQScsJ25pdic6J1xcdTIyMEInLCdOSmN5JzonXFx1MDQwQScsJ25qY3knOidcXHUwNDVBJywnbmxhcnInOidcXHUyMTlBJywnbmxBcnInOidcXHUyMUNEJywnbmxkcic6J1xcdTIwMjUnLCdubEUnOidcXHUyMjY2XFx1MDMzOCcsJ25sZSc6J1xcdTIyNzAnLCdubGVmdGFycm93JzonXFx1MjE5QScsJ25MZWZ0YXJyb3cnOidcXHUyMUNEJywnbmxlZnRyaWdodGFycm93JzonXFx1MjFBRScsJ25MZWZ0cmlnaHRhcnJvdyc6J1xcdTIxQ0UnLCdubGVxJzonXFx1MjI3MCcsJ25sZXFxJzonXFx1MjI2NlxcdTAzMzgnLCdubGVxc2xhbnQnOidcXHUyQTdEXFx1MDMzOCcsJ25sZXMnOidcXHUyQTdEXFx1MDMzOCcsJ25sZXNzJzonXFx1MjI2RScsJ25MbCc6J1xcdTIyRDhcXHUwMzM4JywnbmxzaW0nOidcXHUyMjc0Jywnbkx0JzonXFx1MjI2QVxcdTIwRDInLCdubHQnOidcXHUyMjZFJywnbmx0cmknOidcXHUyMkVBJywnbmx0cmllJzonXFx1MjJFQycsJ25MdHYnOidcXHUyMjZBXFx1MDMzOCcsJ25taWQnOidcXHUyMjI0JywnTm9CcmVhayc6J1xcdTIwNjAnLCdOb25CcmVha2luZ1NwYWNlJzonXFx4QTAnLCdub3BmJzonXFx1RDgzNVxcdURENUYnLCdOb3BmJzonXFx1MjExNScsJ05vdCc6J1xcdTJBRUMnLCdub3QnOidcXHhBQycsJ05vdENvbmdydWVudCc6J1xcdTIyNjInLCdOb3RDdXBDYXAnOidcXHUyMjZEJywnTm90RG91YmxlVmVydGljYWxCYXInOidcXHUyMjI2JywnTm90RWxlbWVudCc6J1xcdTIyMDknLCdOb3RFcXVhbCc6J1xcdTIyNjAnLCdOb3RFcXVhbFRpbGRlJzonXFx1MjI0MlxcdTAzMzgnLCdOb3RFeGlzdHMnOidcXHUyMjA0JywnTm90R3JlYXRlcic6J1xcdTIyNkYnLCdOb3RHcmVhdGVyRXF1YWwnOidcXHUyMjcxJywnTm90R3JlYXRlckZ1bGxFcXVhbCc6J1xcdTIyNjdcXHUwMzM4JywnTm90R3JlYXRlckdyZWF0ZXInOidcXHUyMjZCXFx1MDMzOCcsJ05vdEdyZWF0ZXJMZXNzJzonXFx1MjI3OScsJ05vdEdyZWF0ZXJTbGFudEVxdWFsJzonXFx1MkE3RVxcdTAzMzgnLCdOb3RHcmVhdGVyVGlsZGUnOidcXHUyMjc1JywnTm90SHVtcERvd25IdW1wJzonXFx1MjI0RVxcdTAzMzgnLCdOb3RIdW1wRXF1YWwnOidcXHUyMjRGXFx1MDMzOCcsJ25vdGluJzonXFx1MjIwOScsJ25vdGluZG90JzonXFx1MjJGNVxcdTAzMzgnLCdub3RpbkUnOidcXHUyMkY5XFx1MDMzOCcsJ25vdGludmEnOidcXHUyMjA5Jywnbm90aW52Yic6J1xcdTIyRjcnLCdub3RpbnZjJzonXFx1MjJGNicsJ05vdExlZnRUcmlhbmdsZUJhcic6J1xcdTI5Q0ZcXHUwMzM4JywnTm90TGVmdFRyaWFuZ2xlJzonXFx1MjJFQScsJ05vdExlZnRUcmlhbmdsZUVxdWFsJzonXFx1MjJFQycsJ05vdExlc3MnOidcXHUyMjZFJywnTm90TGVzc0VxdWFsJzonXFx1MjI3MCcsJ05vdExlc3NHcmVhdGVyJzonXFx1MjI3OCcsJ05vdExlc3NMZXNzJzonXFx1MjI2QVxcdTAzMzgnLCdOb3RMZXNzU2xhbnRFcXVhbCc6J1xcdTJBN0RcXHUwMzM4JywnTm90TGVzc1RpbGRlJzonXFx1MjI3NCcsJ05vdE5lc3RlZEdyZWF0ZXJHcmVhdGVyJzonXFx1MkFBMlxcdTAzMzgnLCdOb3ROZXN0ZWRMZXNzTGVzcyc6J1xcdTJBQTFcXHUwMzM4Jywnbm90bmknOidcXHUyMjBDJywnbm90bml2YSc6J1xcdTIyMEMnLCdub3RuaXZiJzonXFx1MjJGRScsJ25vdG5pdmMnOidcXHUyMkZEJywnTm90UHJlY2VkZXMnOidcXHUyMjgwJywnTm90UHJlY2VkZXNFcXVhbCc6J1xcdTJBQUZcXHUwMzM4JywnTm90UHJlY2VkZXNTbGFudEVxdWFsJzonXFx1MjJFMCcsJ05vdFJldmVyc2VFbGVtZW50JzonXFx1MjIwQycsJ05vdFJpZ2h0VHJpYW5nbGVCYXInOidcXHUyOUQwXFx1MDMzOCcsJ05vdFJpZ2h0VHJpYW5nbGUnOidcXHUyMkVCJywnTm90UmlnaHRUcmlhbmdsZUVxdWFsJzonXFx1MjJFRCcsJ05vdFNxdWFyZVN1YnNldCc6J1xcdTIyOEZcXHUwMzM4JywnTm90U3F1YXJlU3Vic2V0RXF1YWwnOidcXHUyMkUyJywnTm90U3F1YXJlU3VwZXJzZXQnOidcXHUyMjkwXFx1MDMzOCcsJ05vdFNxdWFyZVN1cGVyc2V0RXF1YWwnOidcXHUyMkUzJywnTm90U3Vic2V0JzonXFx1MjI4MlxcdTIwRDInLCdOb3RTdWJzZXRFcXVhbCc6J1xcdTIyODgnLCdOb3RTdWNjZWVkcyc6J1xcdTIyODEnLCdOb3RTdWNjZWVkc0VxdWFsJzonXFx1MkFCMFxcdTAzMzgnLCdOb3RTdWNjZWVkc1NsYW50RXF1YWwnOidcXHUyMkUxJywnTm90U3VjY2VlZHNUaWxkZSc6J1xcdTIyN0ZcXHUwMzM4JywnTm90U3VwZXJzZXQnOidcXHUyMjgzXFx1MjBEMicsJ05vdFN1cGVyc2V0RXF1YWwnOidcXHUyMjg5JywnTm90VGlsZGUnOidcXHUyMjQxJywnTm90VGlsZGVFcXVhbCc6J1xcdTIyNDQnLCdOb3RUaWxkZUZ1bGxFcXVhbCc6J1xcdTIyNDcnLCdOb3RUaWxkZVRpbGRlJzonXFx1MjI0OScsJ05vdFZlcnRpY2FsQmFyJzonXFx1MjIyNCcsJ25wYXJhbGxlbCc6J1xcdTIyMjYnLCducGFyJzonXFx1MjIyNicsJ25wYXJzbCc6J1xcdTJBRkRcXHUyMEU1JywnbnBhcnQnOidcXHUyMjAyXFx1MDMzOCcsJ25wb2xpbnQnOidcXHUyQTE0JywnbnByJzonXFx1MjI4MCcsJ25wcmN1ZSc6J1xcdTIyRTAnLCducHJlYyc6J1xcdTIyODAnLCducHJlY2VxJzonXFx1MkFBRlxcdTAzMzgnLCducHJlJzonXFx1MkFBRlxcdTAzMzgnLCducmFycmMnOidcXHUyOTMzXFx1MDMzOCcsJ25yYXJyJzonXFx1MjE5QicsJ25yQXJyJzonXFx1MjFDRicsJ25yYXJydyc6J1xcdTIxOURcXHUwMzM4JywnbnJpZ2h0YXJyb3cnOidcXHUyMTlCJywnblJpZ2h0YXJyb3cnOidcXHUyMUNGJywnbnJ0cmknOidcXHUyMkVCJywnbnJ0cmllJzonXFx1MjJFRCcsJ25zYyc6J1xcdTIyODEnLCduc2NjdWUnOidcXHUyMkUxJywnbnNjZSc6J1xcdTJBQjBcXHUwMzM4JywnTnNjcic6J1xcdUQ4MzVcXHVEQ0E5JywnbnNjcic6J1xcdUQ4MzVcXHVEQ0MzJywnbnNob3J0bWlkJzonXFx1MjIyNCcsJ25zaG9ydHBhcmFsbGVsJzonXFx1MjIyNicsJ25zaW0nOidcXHUyMjQxJywnbnNpbWUnOidcXHUyMjQ0JywnbnNpbWVxJzonXFx1MjI0NCcsJ25zbWlkJzonXFx1MjIyNCcsJ25zcGFyJzonXFx1MjIyNicsJ25zcXN1YmUnOidcXHUyMkUyJywnbnNxc3VwZSc6J1xcdTIyRTMnLCduc3ViJzonXFx1MjI4NCcsJ25zdWJFJzonXFx1MkFDNVxcdTAzMzgnLCduc3ViZSc6J1xcdTIyODgnLCduc3Vic2V0JzonXFx1MjI4MlxcdTIwRDInLCduc3Vic2V0ZXEnOidcXHUyMjg4JywnbnN1YnNldGVxcSc6J1xcdTJBQzVcXHUwMzM4JywnbnN1Y2MnOidcXHUyMjgxJywnbnN1Y2NlcSc6J1xcdTJBQjBcXHUwMzM4JywnbnN1cCc6J1xcdTIyODUnLCduc3VwRSc6J1xcdTJBQzZcXHUwMzM4JywnbnN1cGUnOidcXHUyMjg5JywnbnN1cHNldCc6J1xcdTIyODNcXHUyMEQyJywnbnN1cHNldGVxJzonXFx1MjI4OScsJ25zdXBzZXRlcXEnOidcXHUyQUM2XFx1MDMzOCcsJ250Z2wnOidcXHUyMjc5JywnTnRpbGRlJzonXFx4RDEnLCdudGlsZGUnOidcXHhGMScsJ250bGcnOidcXHUyMjc4JywnbnRyaWFuZ2xlbGVmdCc6J1xcdTIyRUEnLCdudHJpYW5nbGVsZWZ0ZXEnOidcXHUyMkVDJywnbnRyaWFuZ2xlcmlnaHQnOidcXHUyMkVCJywnbnRyaWFuZ2xlcmlnaHRlcSc6J1xcdTIyRUQnLCdOdSc6J1xcdTAzOUQnLCdudSc6J1xcdTAzQkQnLCdudW0nOicjJywnbnVtZXJvJzonXFx1MjExNicsJ251bXNwJzonXFx1MjAwNycsJ252YXAnOidcXHUyMjREXFx1MjBEMicsJ252ZGFzaCc6J1xcdTIyQUMnLCdudkRhc2gnOidcXHUyMkFEJywnblZkYXNoJzonXFx1MjJBRScsJ25WRGFzaCc6J1xcdTIyQUYnLCdudmdlJzonXFx1MjI2NVxcdTIwRDInLCdudmd0JzonPlxcdTIwRDInLCdudkhhcnInOidcXHUyOTA0JywnbnZpbmZpbic6J1xcdTI5REUnLCdudmxBcnInOidcXHUyOTAyJywnbnZsZSc6J1xcdTIyNjRcXHUyMEQyJywnbnZsdCc6JzxcXHUyMEQyJywnbnZsdHJpZSc6J1xcdTIyQjRcXHUyMEQyJywnbnZyQXJyJzonXFx1MjkwMycsJ252cnRyaWUnOidcXHUyMkI1XFx1MjBEMicsJ252c2ltJzonXFx1MjIzQ1xcdTIwRDInLCdud2FyaGsnOidcXHUyOTIzJywnbndhcnInOidcXHUyMTk2JywnbndBcnInOidcXHUyMUQ2JywnbndhcnJvdyc6J1xcdTIxOTYnLCdud25lYXInOidcXHUyOTI3JywnT2FjdXRlJzonXFx4RDMnLCdvYWN1dGUnOidcXHhGMycsJ29hc3QnOidcXHUyMjlCJywnT2NpcmMnOidcXHhENCcsJ29jaXJjJzonXFx4RjQnLCdvY2lyJzonXFx1MjI5QScsJ09jeSc6J1xcdTA0MUUnLCdvY3knOidcXHUwNDNFJywnb2Rhc2gnOidcXHUyMjlEJywnT2RibGFjJzonXFx1MDE1MCcsJ29kYmxhYyc6J1xcdTAxNTEnLCdvZGl2JzonXFx1MkEzOCcsJ29kb3QnOidcXHUyMjk5Jywnb2Rzb2xkJzonXFx1MjlCQycsJ09FbGlnJzonXFx1MDE1MicsJ29lbGlnJzonXFx1MDE1MycsJ29mY2lyJzonXFx1MjlCRicsJ09mcic6J1xcdUQ4MzVcXHVERDEyJywnb2ZyJzonXFx1RDgzNVxcdUREMkMnLCdvZ29uJzonXFx1MDJEQicsJ09ncmF2ZSc6J1xceEQyJywnb2dyYXZlJzonXFx4RjInLCdvZ3QnOidcXHUyOUMxJywnb2hiYXInOidcXHUyOUI1Jywnb2htJzonXFx1MDNBOScsJ29pbnQnOidcXHUyMjJFJywnb2xhcnInOidcXHUyMUJBJywnb2xjaXInOidcXHUyOUJFJywnb2xjcm9zcyc6J1xcdTI5QkInLCdvbGluZSc6J1xcdTIwM0UnLCdvbHQnOidcXHUyOUMwJywnT21hY3InOidcXHUwMTRDJywnb21hY3InOidcXHUwMTREJywnT21lZ2EnOidcXHUwM0E5Jywnb21lZ2EnOidcXHUwM0M5JywnT21pY3Jvbic6J1xcdTAzOUYnLCdvbWljcm9uJzonXFx1MDNCRicsJ29taWQnOidcXHUyOUI2Jywnb21pbnVzJzonXFx1MjI5NicsJ09vcGYnOidcXHVEODM1XFx1REQ0NicsJ29vcGYnOidcXHVEODM1XFx1REQ2MCcsJ29wYXInOidcXHUyOUI3JywnT3BlbkN1cmx5RG91YmxlUXVvdGUnOidcXHUyMDFDJywnT3BlbkN1cmx5UXVvdGUnOidcXHUyMDE4Jywnb3BlcnAnOidcXHUyOUI5Jywnb3BsdXMnOidcXHUyMjk1Jywnb3JhcnInOidcXHUyMUJCJywnT3InOidcXHUyQTU0Jywnb3InOidcXHUyMjI4Jywnb3JkJzonXFx1MkE1RCcsJ29yZGVyJzonXFx1MjEzNCcsJ29yZGVyb2YnOidcXHUyMTM0Jywnb3JkZic6J1xceEFBJywnb3JkbSc6J1xceEJBJywnb3JpZ29mJzonXFx1MjJCNicsJ29yb3InOidcXHUyQTU2Jywnb3JzbG9wZSc6J1xcdTJBNTcnLCdvcnYnOidcXHUyQTVCJywnb1MnOidcXHUyNEM4JywnT3Njcic6J1xcdUQ4MzVcXHVEQ0FBJywnb3Njcic6J1xcdTIxMzQnLCdPc2xhc2gnOidcXHhEOCcsJ29zbGFzaCc6J1xceEY4Jywnb3NvbCc6J1xcdTIyOTgnLCdPdGlsZGUnOidcXHhENScsJ290aWxkZSc6J1xceEY1Jywnb3RpbWVzYXMnOidcXHUyQTM2JywnT3RpbWVzJzonXFx1MkEzNycsJ290aW1lcyc6J1xcdTIyOTcnLCdPdW1sJzonXFx4RDYnLCdvdW1sJzonXFx4RjYnLCdvdmJhcic6J1xcdTIzM0QnLCdPdmVyQmFyJzonXFx1MjAzRScsJ092ZXJCcmFjZSc6J1xcdTIzREUnLCdPdmVyQnJhY2tldCc6J1xcdTIzQjQnLCdPdmVyUGFyZW50aGVzaXMnOidcXHUyM0RDJywncGFyYSc6J1xceEI2JywncGFyYWxsZWwnOidcXHUyMjI1JywncGFyJzonXFx1MjIyNScsJ3BhcnNpbSc6J1xcdTJBRjMnLCdwYXJzbCc6J1xcdTJBRkQnLCdwYXJ0JzonXFx1MjIwMicsJ1BhcnRpYWxEJzonXFx1MjIwMicsJ1BjeSc6J1xcdTA0MUYnLCdwY3knOidcXHUwNDNGJywncGVyY250JzonJScsJ3BlcmlvZCc6Jy4nLCdwZXJtaWwnOidcXHUyMDMwJywncGVycCc6J1xcdTIyQTUnLCdwZXJ0ZW5rJzonXFx1MjAzMScsJ1Bmcic6J1xcdUQ4MzVcXHVERDEzJywncGZyJzonXFx1RDgzNVxcdUREMkQnLCdQaGknOidcXHUwM0E2JywncGhpJzonXFx1MDNDNicsJ3BoaXYnOidcXHUwM0Q1JywncGhtbWF0JzonXFx1MjEzMycsJ3Bob25lJzonXFx1MjYwRScsJ1BpJzonXFx1MDNBMCcsJ3BpJzonXFx1MDNDMCcsJ3BpdGNoZm9yayc6J1xcdTIyRDQnLCdwaXYnOidcXHUwM0Q2JywncGxhbmNrJzonXFx1MjEwRicsJ3BsYW5ja2gnOidcXHUyMTBFJywncGxhbmt2JzonXFx1MjEwRicsJ3BsdXNhY2lyJzonXFx1MkEyMycsJ3BsdXNiJzonXFx1MjI5RScsJ3BsdXNjaXInOidcXHUyQTIyJywncGx1cyc6JysnLCdwbHVzZG8nOidcXHUyMjE0JywncGx1c2R1JzonXFx1MkEyNScsJ3BsdXNlJzonXFx1MkE3MicsJ1BsdXNNaW51cyc6J1xceEIxJywncGx1c21uJzonXFx4QjEnLCdwbHVzc2ltJzonXFx1MkEyNicsJ3BsdXN0d28nOidcXHUyQTI3JywncG0nOidcXHhCMScsJ1BvaW5jYXJlcGxhbmUnOidcXHUyMTBDJywncG9pbnRpbnQnOidcXHUyQTE1JywncG9wZic6J1xcdUQ4MzVcXHVERDYxJywnUG9wZic6J1xcdTIxMTknLCdwb3VuZCc6J1xceEEzJywncHJhcCc6J1xcdTJBQjcnLCdQcic6J1xcdTJBQkInLCdwcic6J1xcdTIyN0EnLCdwcmN1ZSc6J1xcdTIyN0MnLCdwcmVjYXBwcm94JzonXFx1MkFCNycsJ3ByZWMnOidcXHUyMjdBJywncHJlY2N1cmx5ZXEnOidcXHUyMjdDJywnUHJlY2VkZXMnOidcXHUyMjdBJywnUHJlY2VkZXNFcXVhbCc6J1xcdTJBQUYnLCdQcmVjZWRlc1NsYW50RXF1YWwnOidcXHUyMjdDJywnUHJlY2VkZXNUaWxkZSc6J1xcdTIyN0UnLCdwcmVjZXEnOidcXHUyQUFGJywncHJlY25hcHByb3gnOidcXHUyQUI5JywncHJlY25lcXEnOidcXHUyQUI1JywncHJlY25zaW0nOidcXHUyMkU4JywncHJlJzonXFx1MkFBRicsJ3ByRSc6J1xcdTJBQjMnLCdwcmVjc2ltJzonXFx1MjI3RScsJ3ByaW1lJzonXFx1MjAzMicsJ1ByaW1lJzonXFx1MjAzMycsJ3ByaW1lcyc6J1xcdTIxMTknLCdwcm5hcCc6J1xcdTJBQjknLCdwcm5FJzonXFx1MkFCNScsJ3BybnNpbSc6J1xcdTIyRTgnLCdwcm9kJzonXFx1MjIwRicsJ1Byb2R1Y3QnOidcXHUyMjBGJywncHJvZmFsYXInOidcXHUyMzJFJywncHJvZmxpbmUnOidcXHUyMzEyJywncHJvZnN1cmYnOidcXHUyMzEzJywncHJvcCc6J1xcdTIyMUQnLCdQcm9wb3J0aW9uYWwnOidcXHUyMjFEJywnUHJvcG9ydGlvbic6J1xcdTIyMzcnLCdwcm9wdG8nOidcXHUyMjFEJywncHJzaW0nOidcXHUyMjdFJywncHJ1cmVsJzonXFx1MjJCMCcsJ1BzY3InOidcXHVEODM1XFx1RENBQicsJ3BzY3InOidcXHVEODM1XFx1RENDNScsJ1BzaSc6J1xcdTAzQTgnLCdwc2knOidcXHUwM0M4JywncHVuY3NwJzonXFx1MjAwOCcsJ1Fmcic6J1xcdUQ4MzVcXHVERDE0JywncWZyJzonXFx1RDgzNVxcdUREMkUnLCdxaW50JzonXFx1MkEwQycsJ3FvcGYnOidcXHVEODM1XFx1REQ2MicsJ1FvcGYnOidcXHUyMTFBJywncXByaW1lJzonXFx1MjA1NycsJ1FzY3InOidcXHVEODM1XFx1RENBQycsJ3FzY3InOidcXHVEODM1XFx1RENDNicsJ3F1YXRlcm5pb25zJzonXFx1MjEwRCcsJ3F1YXRpbnQnOidcXHUyQTE2JywncXVlc3QnOic/JywncXVlc3RlcSc6J1xcdTIyNUYnLCdxdW90JzonXCInLCdRVU9UJzonXCInLCdyQWFycic6J1xcdTIxREInLCdyYWNlJzonXFx1MjIzRFxcdTAzMzEnLCdSYWN1dGUnOidcXHUwMTU0JywncmFjdXRlJzonXFx1MDE1NScsJ3JhZGljJzonXFx1MjIxQScsJ3JhZW1wdHl2JzonXFx1MjlCMycsJ3JhbmcnOidcXHUyN0U5JywnUmFuZyc6J1xcdTI3RUInLCdyYW5nZCc6J1xcdTI5OTInLCdyYW5nZSc6J1xcdTI5QTUnLCdyYW5nbGUnOidcXHUyN0U5JywncmFxdW8nOidcXHhCQicsJ3JhcnJhcCc6J1xcdTI5NzUnLCdyYXJyYic6J1xcdTIxRTUnLCdyYXJyYmZzJzonXFx1MjkyMCcsJ3JhcnJjJzonXFx1MjkzMycsJ3JhcnInOidcXHUyMTkyJywnUmFycic6J1xcdTIxQTAnLCdyQXJyJzonXFx1MjFEMicsJ3JhcnJmcyc6J1xcdTI5MUUnLCdyYXJyaGsnOidcXHUyMUFBJywncmFycmxwJzonXFx1MjFBQycsJ3JhcnJwbCc6J1xcdTI5NDUnLCdyYXJyc2ltJzonXFx1Mjk3NCcsJ1JhcnJ0bCc6J1xcdTI5MTYnLCdyYXJydGwnOidcXHUyMUEzJywncmFycncnOidcXHUyMTlEJywncmF0YWlsJzonXFx1MjkxQScsJ3JBdGFpbCc6J1xcdTI5MUMnLCdyYXRpbyc6J1xcdTIyMzYnLCdyYXRpb25hbHMnOidcXHUyMTFBJywncmJhcnInOidcXHUyOTBEJywnckJhcnInOidcXHUyOTBGJywnUkJhcnInOidcXHUyOTEwJywncmJicmsnOidcXHUyNzczJywncmJyYWNlJzonfScsJ3JicmFjayc6J10nLCdyYnJrZSc6J1xcdTI5OEMnLCdyYnJrc2xkJzonXFx1Mjk4RScsJ3JicmtzbHUnOidcXHUyOTkwJywnUmNhcm9uJzonXFx1MDE1OCcsJ3JjYXJvbic6J1xcdTAxNTknLCdSY2VkaWwnOidcXHUwMTU2JywncmNlZGlsJzonXFx1MDE1NycsJ3JjZWlsJzonXFx1MjMwOScsJ3JjdWInOid9JywnUmN5JzonXFx1MDQyMCcsJ3JjeSc6J1xcdTA0NDAnLCdyZGNhJzonXFx1MjkzNycsJ3JkbGRoYXInOidcXHUyOTY5JywncmRxdW8nOidcXHUyMDFEJywncmRxdW9yJzonXFx1MjAxRCcsJ3Jkc2gnOidcXHUyMUIzJywncmVhbCc6J1xcdTIxMUMnLCdyZWFsaW5lJzonXFx1MjExQicsJ3JlYWxwYXJ0JzonXFx1MjExQycsJ3JlYWxzJzonXFx1MjExRCcsJ1JlJzonXFx1MjExQycsJ3JlY3QnOidcXHUyNUFEJywncmVnJzonXFx4QUUnLCdSRUcnOidcXHhBRScsJ1JldmVyc2VFbGVtZW50JzonXFx1MjIwQicsJ1JldmVyc2VFcXVpbGlicml1bSc6J1xcdTIxQ0InLCdSZXZlcnNlVXBFcXVpbGlicml1bSc6J1xcdTI5NkYnLCdyZmlzaHQnOidcXHUyOTdEJywncmZsb29yJzonXFx1MjMwQicsJ3Jmcic6J1xcdUQ4MzVcXHVERDJGJywnUmZyJzonXFx1MjExQycsJ3JIYXInOidcXHUyOTY0JywncmhhcmQnOidcXHUyMUMxJywncmhhcnUnOidcXHUyMUMwJywncmhhcnVsJzonXFx1Mjk2QycsJ1Jobyc6J1xcdTAzQTEnLCdyaG8nOidcXHUwM0MxJywncmhvdic6J1xcdTAzRjEnLCdSaWdodEFuZ2xlQnJhY2tldCc6J1xcdTI3RTknLCdSaWdodEFycm93QmFyJzonXFx1MjFFNScsJ3JpZ2h0YXJyb3cnOidcXHUyMTkyJywnUmlnaHRBcnJvdyc6J1xcdTIxOTInLCdSaWdodGFycm93JzonXFx1MjFEMicsJ1JpZ2h0QXJyb3dMZWZ0QXJyb3cnOidcXHUyMUM0JywncmlnaHRhcnJvd3RhaWwnOidcXHUyMUEzJywnUmlnaHRDZWlsaW5nJzonXFx1MjMwOScsJ1JpZ2h0RG91YmxlQnJhY2tldCc6J1xcdTI3RTcnLCdSaWdodERvd25UZWVWZWN0b3InOidcXHUyOTVEJywnUmlnaHREb3duVmVjdG9yQmFyJzonXFx1Mjk1NScsJ1JpZ2h0RG93blZlY3Rvcic6J1xcdTIxQzInLCdSaWdodEZsb29yJzonXFx1MjMwQicsJ3JpZ2h0aGFycG9vbmRvd24nOidcXHUyMUMxJywncmlnaHRoYXJwb29udXAnOidcXHUyMUMwJywncmlnaHRsZWZ0YXJyb3dzJzonXFx1MjFDNCcsJ3JpZ2h0bGVmdGhhcnBvb25zJzonXFx1MjFDQycsJ3JpZ2h0cmlnaHRhcnJvd3MnOidcXHUyMUM5JywncmlnaHRzcXVpZ2Fycm93JzonXFx1MjE5RCcsJ1JpZ2h0VGVlQXJyb3cnOidcXHUyMUE2JywnUmlnaHRUZWUnOidcXHUyMkEyJywnUmlnaHRUZWVWZWN0b3InOidcXHUyOTVCJywncmlnaHR0aHJlZXRpbWVzJzonXFx1MjJDQycsJ1JpZ2h0VHJpYW5nbGVCYXInOidcXHUyOUQwJywnUmlnaHRUcmlhbmdsZSc6J1xcdTIyQjMnLCdSaWdodFRyaWFuZ2xlRXF1YWwnOidcXHUyMkI1JywnUmlnaHRVcERvd25WZWN0b3InOidcXHUyOTRGJywnUmlnaHRVcFRlZVZlY3Rvcic6J1xcdTI5NUMnLCdSaWdodFVwVmVjdG9yQmFyJzonXFx1Mjk1NCcsJ1JpZ2h0VXBWZWN0b3InOidcXHUyMUJFJywnUmlnaHRWZWN0b3JCYXInOidcXHUyOTUzJywnUmlnaHRWZWN0b3InOidcXHUyMUMwJywncmluZyc6J1xcdTAyREEnLCdyaXNpbmdkb3RzZXEnOidcXHUyMjUzJywncmxhcnInOidcXHUyMUM0JywncmxoYXInOidcXHUyMUNDJywncmxtJzonXFx1MjAwRicsJ3Jtb3VzdGFjaGUnOidcXHUyM0IxJywncm1vdXN0JzonXFx1MjNCMScsJ3JubWlkJzonXFx1MkFFRScsJ3JvYW5nJzonXFx1MjdFRCcsJ3JvYXJyJzonXFx1MjFGRScsJ3JvYnJrJzonXFx1MjdFNycsJ3JvcGFyJzonXFx1Mjk4NicsJ3JvcGYnOidcXHVEODM1XFx1REQ2MycsJ1JvcGYnOidcXHUyMTFEJywncm9wbHVzJzonXFx1MkEyRScsJ3JvdGltZXMnOidcXHUyQTM1JywnUm91bmRJbXBsaWVzJzonXFx1Mjk3MCcsJ3JwYXInOicpJywncnBhcmd0JzonXFx1Mjk5NCcsJ3JwcG9saW50JzonXFx1MkExMicsJ3JyYXJyJzonXFx1MjFDOScsJ1JyaWdodGFycm93JzonXFx1MjFEQicsJ3JzYXF1byc6J1xcdTIwM0EnLCdyc2NyJzonXFx1RDgzNVxcdURDQzcnLCdSc2NyJzonXFx1MjExQicsJ3JzaCc6J1xcdTIxQjEnLCdSc2gnOidcXHUyMUIxJywncnNxYic6J10nLCdyc3F1byc6J1xcdTIwMTknLCdyc3F1b3InOidcXHUyMDE5JywncnRocmVlJzonXFx1MjJDQycsJ3J0aW1lcyc6J1xcdTIyQ0EnLCdydHJpJzonXFx1MjVCOScsJ3J0cmllJzonXFx1MjJCNScsJ3J0cmlmJzonXFx1MjVCOCcsJ3J0cmlsdHJpJzonXFx1MjlDRScsJ1J1bGVEZWxheWVkJzonXFx1MjlGNCcsJ3J1bHVoYXInOidcXHUyOTY4JywncngnOidcXHUyMTFFJywnU2FjdXRlJzonXFx1MDE1QScsJ3NhY3V0ZSc6J1xcdTAxNUInLCdzYnF1byc6J1xcdTIwMUEnLCdzY2FwJzonXFx1MkFCOCcsJ1NjYXJvbic6J1xcdTAxNjAnLCdzY2Fyb24nOidcXHUwMTYxJywnU2MnOidcXHUyQUJDJywnc2MnOidcXHUyMjdCJywnc2NjdWUnOidcXHUyMjdEJywnc2NlJzonXFx1MkFCMCcsJ3NjRSc6J1xcdTJBQjQnLCdTY2VkaWwnOidcXHUwMTVFJywnc2NlZGlsJzonXFx1MDE1RicsJ1NjaXJjJzonXFx1MDE1QycsJ3NjaXJjJzonXFx1MDE1RCcsJ3NjbmFwJzonXFx1MkFCQScsJ3NjbkUnOidcXHUyQUI2Jywnc2Nuc2ltJzonXFx1MjJFOScsJ3NjcG9saW50JzonXFx1MkExMycsJ3Njc2ltJzonXFx1MjI3RicsJ1NjeSc6J1xcdTA0MjEnLCdzY3knOidcXHUwNDQxJywnc2RvdGInOidcXHUyMkExJywnc2RvdCc6J1xcdTIyQzUnLCdzZG90ZSc6J1xcdTJBNjYnLCdzZWFyaGsnOidcXHUyOTI1Jywnc2VhcnInOidcXHUyMTk4Jywnc2VBcnInOidcXHUyMUQ4Jywnc2VhcnJvdyc6J1xcdTIxOTgnLCdzZWN0JzonXFx4QTcnLCdzZW1pJzonOycsJ3Nlc3dhcic6J1xcdTI5MjknLCdzZXRtaW51cyc6J1xcdTIyMTYnLCdzZXRtbic6J1xcdTIyMTYnLCdzZXh0JzonXFx1MjczNicsJ1Nmcic6J1xcdUQ4MzVcXHVERDE2Jywnc2ZyJzonXFx1RDgzNVxcdUREMzAnLCdzZnJvd24nOidcXHUyMzIyJywnc2hhcnAnOidcXHUyNjZGJywnU0hDSGN5JzonXFx1MDQyOScsJ3NoY2hjeSc6J1xcdTA0NDknLCdTSGN5JzonXFx1MDQyOCcsJ3NoY3knOidcXHUwNDQ4JywnU2hvcnREb3duQXJyb3cnOidcXHUyMTkzJywnU2hvcnRMZWZ0QXJyb3cnOidcXHUyMTkwJywnc2hvcnRtaWQnOidcXHUyMjIzJywnc2hvcnRwYXJhbGxlbCc6J1xcdTIyMjUnLCdTaG9ydFJpZ2h0QXJyb3cnOidcXHUyMTkyJywnU2hvcnRVcEFycm93JzonXFx1MjE5MScsJ3NoeSc6J1xceEFEJywnU2lnbWEnOidcXHUwM0EzJywnc2lnbWEnOidcXHUwM0MzJywnc2lnbWFmJzonXFx1MDNDMicsJ3NpZ21hdic6J1xcdTAzQzInLCdzaW0nOidcXHUyMjNDJywnc2ltZG90JzonXFx1MkE2QScsJ3NpbWUnOidcXHUyMjQzJywnc2ltZXEnOidcXHUyMjQzJywnc2ltZyc6J1xcdTJBOUUnLCdzaW1nRSc6J1xcdTJBQTAnLCdzaW1sJzonXFx1MkE5RCcsJ3NpbWxFJzonXFx1MkE5RicsJ3NpbW5lJzonXFx1MjI0NicsJ3NpbXBsdXMnOidcXHUyQTI0Jywnc2ltcmFycic6J1xcdTI5NzInLCdzbGFycic6J1xcdTIxOTAnLCdTbWFsbENpcmNsZSc6J1xcdTIyMTgnLCdzbWFsbHNldG1pbnVzJzonXFx1MjIxNicsJ3NtYXNocCc6J1xcdTJBMzMnLCdzbWVwYXJzbCc6J1xcdTI5RTQnLCdzbWlkJzonXFx1MjIyMycsJ3NtaWxlJzonXFx1MjMyMycsJ3NtdCc6J1xcdTJBQUEnLCdzbXRlJzonXFx1MkFBQycsJ3NtdGVzJzonXFx1MkFBQ1xcdUZFMDAnLCdTT0ZUY3knOidcXHUwNDJDJywnc29mdGN5JzonXFx1MDQ0QycsJ3NvbGJhcic6J1xcdTIzM0YnLCdzb2xiJzonXFx1MjlDNCcsJ3NvbCc6Jy8nLCdTb3BmJzonXFx1RDgzNVxcdURENEEnLCdzb3BmJzonXFx1RDgzNVxcdURENjQnLCdzcGFkZXMnOidcXHUyNjYwJywnc3BhZGVzdWl0JzonXFx1MjY2MCcsJ3NwYXInOidcXHUyMjI1Jywnc3FjYXAnOidcXHUyMjkzJywnc3FjYXBzJzonXFx1MjI5M1xcdUZFMDAnLCdzcWN1cCc6J1xcdTIyOTQnLCdzcWN1cHMnOidcXHUyMjk0XFx1RkUwMCcsJ1NxcnQnOidcXHUyMjFBJywnc3FzdWInOidcXHUyMjhGJywnc3FzdWJlJzonXFx1MjI5MScsJ3Nxc3Vic2V0JzonXFx1MjI4RicsJ3Nxc3Vic2V0ZXEnOidcXHUyMjkxJywnc3FzdXAnOidcXHUyMjkwJywnc3FzdXBlJzonXFx1MjI5MicsJ3Nxc3Vwc2V0JzonXFx1MjI5MCcsJ3Nxc3Vwc2V0ZXEnOidcXHUyMjkyJywnc3F1YXJlJzonXFx1MjVBMScsJ1NxdWFyZSc6J1xcdTI1QTEnLCdTcXVhcmVJbnRlcnNlY3Rpb24nOidcXHUyMjkzJywnU3F1YXJlU3Vic2V0JzonXFx1MjI4RicsJ1NxdWFyZVN1YnNldEVxdWFsJzonXFx1MjI5MScsJ1NxdWFyZVN1cGVyc2V0JzonXFx1MjI5MCcsJ1NxdWFyZVN1cGVyc2V0RXF1YWwnOidcXHUyMjkyJywnU3F1YXJlVW5pb24nOidcXHUyMjk0Jywnc3F1YXJmJzonXFx1MjVBQScsJ3NxdSc6J1xcdTI1QTEnLCdzcXVmJzonXFx1MjVBQScsJ3NyYXJyJzonXFx1MjE5MicsJ1NzY3InOidcXHVEODM1XFx1RENBRScsJ3NzY3InOidcXHVEODM1XFx1RENDOCcsJ3NzZXRtbic6J1xcdTIyMTYnLCdzc21pbGUnOidcXHUyMzIzJywnc3N0YXJmJzonXFx1MjJDNicsJ1N0YXInOidcXHUyMkM2Jywnc3Rhcic6J1xcdTI2MDYnLCdzdGFyZic6J1xcdTI2MDUnLCdzdHJhaWdodGVwc2lsb24nOidcXHUwM0Y1Jywnc3RyYWlnaHRwaGknOidcXHUwM0Q1Jywnc3RybnMnOidcXHhBRicsJ3N1Yic6J1xcdTIyODInLCdTdWInOidcXHUyMkQwJywnc3ViZG90JzonXFx1MkFCRCcsJ3N1YkUnOidcXHUyQUM1Jywnc3ViZSc6J1xcdTIyODYnLCdzdWJlZG90JzonXFx1MkFDMycsJ3N1Ym11bHQnOidcXHUyQUMxJywnc3VibkUnOidcXHUyQUNCJywnc3VibmUnOidcXHUyMjhBJywnc3VicGx1cyc6J1xcdTJBQkYnLCdzdWJyYXJyJzonXFx1Mjk3OScsJ3N1YnNldCc6J1xcdTIyODInLCdTdWJzZXQnOidcXHUyMkQwJywnc3Vic2V0ZXEnOidcXHUyMjg2Jywnc3Vic2V0ZXFxJzonXFx1MkFDNScsJ1N1YnNldEVxdWFsJzonXFx1MjI4NicsJ3N1YnNldG5lcSc6J1xcdTIyOEEnLCdzdWJzZXRuZXFxJzonXFx1MkFDQicsJ3N1YnNpbSc6J1xcdTJBQzcnLCdzdWJzdWInOidcXHUyQUQ1Jywnc3Vic3VwJzonXFx1MkFEMycsJ3N1Y2NhcHByb3gnOidcXHUyQUI4Jywnc3VjYyc6J1xcdTIyN0InLCdzdWNjY3VybHllcSc6J1xcdTIyN0QnLCdTdWNjZWVkcyc6J1xcdTIyN0InLCdTdWNjZWVkc0VxdWFsJzonXFx1MkFCMCcsJ1N1Y2NlZWRzU2xhbnRFcXVhbCc6J1xcdTIyN0QnLCdTdWNjZWVkc1RpbGRlJzonXFx1MjI3RicsJ3N1Y2NlcSc6J1xcdTJBQjAnLCdzdWNjbmFwcHJveCc6J1xcdTJBQkEnLCdzdWNjbmVxcSc6J1xcdTJBQjYnLCdzdWNjbnNpbSc6J1xcdTIyRTknLCdzdWNjc2ltJzonXFx1MjI3RicsJ1N1Y2hUaGF0JzonXFx1MjIwQicsJ3N1bSc6J1xcdTIyMTEnLCdTdW0nOidcXHUyMjExJywnc3VuZyc6J1xcdTI2NkEnLCdzdXAxJzonXFx4QjknLCdzdXAyJzonXFx4QjInLCdzdXAzJzonXFx4QjMnLCdzdXAnOidcXHUyMjgzJywnU3VwJzonXFx1MjJEMScsJ3N1cGRvdCc6J1xcdTJBQkUnLCdzdXBkc3ViJzonXFx1MkFEOCcsJ3N1cEUnOidcXHUyQUM2Jywnc3VwZSc6J1xcdTIyODcnLCdzdXBlZG90JzonXFx1MkFDNCcsJ1N1cGVyc2V0JzonXFx1MjI4MycsJ1N1cGVyc2V0RXF1YWwnOidcXHUyMjg3Jywnc3VwaHNvbCc6J1xcdTI3QzknLCdzdXBoc3ViJzonXFx1MkFENycsJ3N1cGxhcnInOidcXHUyOTdCJywnc3VwbXVsdCc6J1xcdTJBQzInLCdzdXBuRSc6J1xcdTJBQ0MnLCdzdXBuZSc6J1xcdTIyOEInLCdzdXBwbHVzJzonXFx1MkFDMCcsJ3N1cHNldCc6J1xcdTIyODMnLCdTdXBzZXQnOidcXHUyMkQxJywnc3Vwc2V0ZXEnOidcXHUyMjg3Jywnc3Vwc2V0ZXFxJzonXFx1MkFDNicsJ3N1cHNldG5lcSc6J1xcdTIyOEInLCdzdXBzZXRuZXFxJzonXFx1MkFDQycsJ3N1cHNpbSc6J1xcdTJBQzgnLCdzdXBzdWInOidcXHUyQUQ0Jywnc3Vwc3VwJzonXFx1MkFENicsJ3N3YXJoayc6J1xcdTI5MjYnLCdzd2Fycic6J1xcdTIxOTknLCdzd0Fycic6J1xcdTIxRDknLCdzd2Fycm93JzonXFx1MjE5OScsJ3N3bndhcic6J1xcdTI5MkEnLCdzemxpZyc6J1xceERGJywnVGFiJzonXFx0JywndGFyZ2V0JzonXFx1MjMxNicsJ1RhdSc6J1xcdTAzQTQnLCd0YXUnOidcXHUwM0M0JywndGJyayc6J1xcdTIzQjQnLCdUY2Fyb24nOidcXHUwMTY0JywndGNhcm9uJzonXFx1MDE2NScsJ1RjZWRpbCc6J1xcdTAxNjInLCd0Y2VkaWwnOidcXHUwMTYzJywnVGN5JzonXFx1MDQyMicsJ3RjeSc6J1xcdTA0NDInLCd0ZG90JzonXFx1MjBEQicsJ3RlbHJlYyc6J1xcdTIzMTUnLCdUZnInOidcXHVEODM1XFx1REQxNycsJ3Rmcic6J1xcdUQ4MzVcXHVERDMxJywndGhlcmU0JzonXFx1MjIzNCcsJ3RoZXJlZm9yZSc6J1xcdTIyMzQnLCdUaGVyZWZvcmUnOidcXHUyMjM0JywnVGhldGEnOidcXHUwMzk4JywndGhldGEnOidcXHUwM0I4JywndGhldGFzeW0nOidcXHUwM0QxJywndGhldGF2JzonXFx1MDNEMScsJ3RoaWNrYXBwcm94JzonXFx1MjI0OCcsJ3RoaWNrc2ltJzonXFx1MjIzQycsJ1RoaWNrU3BhY2UnOidcXHUyMDVGXFx1MjAwQScsJ1RoaW5TcGFjZSc6J1xcdTIwMDknLCd0aGluc3AnOidcXHUyMDA5JywndGhrYXAnOidcXHUyMjQ4JywndGhrc2ltJzonXFx1MjIzQycsJ1RIT1JOJzonXFx4REUnLCd0aG9ybic6J1xceEZFJywndGlsZGUnOidcXHUwMkRDJywnVGlsZGUnOidcXHUyMjNDJywnVGlsZGVFcXVhbCc6J1xcdTIyNDMnLCdUaWxkZUZ1bGxFcXVhbCc6J1xcdTIyNDUnLCdUaWxkZVRpbGRlJzonXFx1MjI0OCcsJ3RpbWVzYmFyJzonXFx1MkEzMScsJ3RpbWVzYic6J1xcdTIyQTAnLCd0aW1lcyc6J1xceEQ3JywndGltZXNkJzonXFx1MkEzMCcsJ3RpbnQnOidcXHUyMjJEJywndG9lYSc6J1xcdTI5MjgnLCd0b3Bib3QnOidcXHUyMzM2JywndG9wY2lyJzonXFx1MkFGMScsJ3RvcCc6J1xcdTIyQTQnLCdUb3BmJzonXFx1RDgzNVxcdURENEInLCd0b3BmJzonXFx1RDgzNVxcdURENjUnLCd0b3Bmb3JrJzonXFx1MkFEQScsJ3Rvc2EnOidcXHUyOTI5JywndHByaW1lJzonXFx1MjAzNCcsJ3RyYWRlJzonXFx1MjEyMicsJ1RSQURFJzonXFx1MjEyMicsJ3RyaWFuZ2xlJzonXFx1MjVCNScsJ3RyaWFuZ2xlZG93bic6J1xcdTI1QkYnLCd0cmlhbmdsZWxlZnQnOidcXHUyNUMzJywndHJpYW5nbGVsZWZ0ZXEnOidcXHUyMkI0JywndHJpYW5nbGVxJzonXFx1MjI1QycsJ3RyaWFuZ2xlcmlnaHQnOidcXHUyNUI5JywndHJpYW5nbGVyaWdodGVxJzonXFx1MjJCNScsJ3RyaWRvdCc6J1xcdTI1RUMnLCd0cmllJzonXFx1MjI1QycsJ3RyaW1pbnVzJzonXFx1MkEzQScsJ1RyaXBsZURvdCc6J1xcdTIwREInLCd0cmlwbHVzJzonXFx1MkEzOScsJ3RyaXNiJzonXFx1MjlDRCcsJ3RyaXRpbWUnOidcXHUyQTNCJywndHJwZXppdW0nOidcXHUyM0UyJywnVHNjcic6J1xcdUQ4MzVcXHVEQ0FGJywndHNjcic6J1xcdUQ4MzVcXHVEQ0M5JywnVFNjeSc6J1xcdTA0MjYnLCd0c2N5JzonXFx1MDQ0NicsJ1RTSGN5JzonXFx1MDQwQicsJ3RzaGN5JzonXFx1MDQ1QicsJ1RzdHJvayc6J1xcdTAxNjYnLCd0c3Ryb2snOidcXHUwMTY3JywndHdpeHQnOidcXHUyMjZDJywndHdvaGVhZGxlZnRhcnJvdyc6J1xcdTIxOUUnLCd0d29oZWFkcmlnaHRhcnJvdyc6J1xcdTIxQTAnLCdVYWN1dGUnOidcXHhEQScsJ3VhY3V0ZSc6J1xceEZBJywndWFycic6J1xcdTIxOTEnLCdVYXJyJzonXFx1MjE5RicsJ3VBcnInOidcXHUyMUQxJywnVWFycm9jaXInOidcXHUyOTQ5JywnVWJyY3knOidcXHUwNDBFJywndWJyY3knOidcXHUwNDVFJywnVWJyZXZlJzonXFx1MDE2QycsJ3VicmV2ZSc6J1xcdTAxNkQnLCdVY2lyYyc6J1xceERCJywndWNpcmMnOidcXHhGQicsJ1VjeSc6J1xcdTA0MjMnLCd1Y3knOidcXHUwNDQzJywndWRhcnInOidcXHUyMUM1JywnVWRibGFjJzonXFx1MDE3MCcsJ3VkYmxhYyc6J1xcdTAxNzEnLCd1ZGhhcic6J1xcdTI5NkUnLCd1ZmlzaHQnOidcXHUyOTdFJywnVWZyJzonXFx1RDgzNVxcdUREMTgnLCd1ZnInOidcXHVEODM1XFx1REQzMicsJ1VncmF2ZSc6J1xceEQ5JywndWdyYXZlJzonXFx4RjknLCd1SGFyJzonXFx1Mjk2MycsJ3VoYXJsJzonXFx1MjFCRicsJ3VoYXJyJzonXFx1MjFCRScsJ3VoYmxrJzonXFx1MjU4MCcsJ3VsY29ybic6J1xcdTIzMUMnLCd1bGNvcm5lcic6J1xcdTIzMUMnLCd1bGNyb3AnOidcXHUyMzBGJywndWx0cmknOidcXHUyNUY4JywnVW1hY3InOidcXHUwMTZBJywndW1hY3InOidcXHUwMTZCJywndW1sJzonXFx4QTgnLCdVbmRlckJhcic6J18nLCdVbmRlckJyYWNlJzonXFx1MjNERicsJ1VuZGVyQnJhY2tldCc6J1xcdTIzQjUnLCdVbmRlclBhcmVudGhlc2lzJzonXFx1MjNERCcsJ1VuaW9uJzonXFx1MjJDMycsJ1VuaW9uUGx1cyc6J1xcdTIyOEUnLCdVb2dvbic6J1xcdTAxNzInLCd1b2dvbic6J1xcdTAxNzMnLCdVb3BmJzonXFx1RDgzNVxcdURENEMnLCd1b3BmJzonXFx1RDgzNVxcdURENjYnLCdVcEFycm93QmFyJzonXFx1MjkxMicsJ3VwYXJyb3cnOidcXHUyMTkxJywnVXBBcnJvdyc6J1xcdTIxOTEnLCdVcGFycm93JzonXFx1MjFEMScsJ1VwQXJyb3dEb3duQXJyb3cnOidcXHUyMUM1JywndXBkb3duYXJyb3cnOidcXHUyMTk1JywnVXBEb3duQXJyb3cnOidcXHUyMTk1JywnVXBkb3duYXJyb3cnOidcXHUyMUQ1JywnVXBFcXVpbGlicml1bSc6J1xcdTI5NkUnLCd1cGhhcnBvb25sZWZ0JzonXFx1MjFCRicsJ3VwaGFycG9vbnJpZ2h0JzonXFx1MjFCRScsJ3VwbHVzJzonXFx1MjI4RScsJ1VwcGVyTGVmdEFycm93JzonXFx1MjE5NicsJ1VwcGVyUmlnaHRBcnJvdyc6J1xcdTIxOTcnLCd1cHNpJzonXFx1MDNDNScsJ1Vwc2knOidcXHUwM0QyJywndXBzaWgnOidcXHUwM0QyJywnVXBzaWxvbic6J1xcdTAzQTUnLCd1cHNpbG9uJzonXFx1MDNDNScsJ1VwVGVlQXJyb3cnOidcXHUyMUE1JywnVXBUZWUnOidcXHUyMkE1JywndXB1cGFycm93cyc6J1xcdTIxQzgnLCd1cmNvcm4nOidcXHUyMzFEJywndXJjb3JuZXInOidcXHUyMzFEJywndXJjcm9wJzonXFx1MjMwRScsJ1VyaW5nJzonXFx1MDE2RScsJ3VyaW5nJzonXFx1MDE2RicsJ3VydHJpJzonXFx1MjVGOScsJ1VzY3InOidcXHVEODM1XFx1RENCMCcsJ3VzY3InOidcXHVEODM1XFx1RENDQScsJ3V0ZG90JzonXFx1MjJGMCcsJ1V0aWxkZSc6J1xcdTAxNjgnLCd1dGlsZGUnOidcXHUwMTY5JywndXRyaSc6J1xcdTI1QjUnLCd1dHJpZic6J1xcdTI1QjQnLCd1dWFycic6J1xcdTIxQzgnLCdVdW1sJzonXFx4REMnLCd1dW1sJzonXFx4RkMnLCd1d2FuZ2xlJzonXFx1MjlBNycsJ3ZhbmdydCc6J1xcdTI5OUMnLCd2YXJlcHNpbG9uJzonXFx1MDNGNScsJ3ZhcmthcHBhJzonXFx1MDNGMCcsJ3Zhcm5vdGhpbmcnOidcXHUyMjA1JywndmFycGhpJzonXFx1MDNENScsJ3ZhcnBpJzonXFx1MDNENicsJ3ZhcnByb3B0byc6J1xcdTIyMUQnLCd2YXJyJzonXFx1MjE5NScsJ3ZBcnInOidcXHUyMUQ1JywndmFycmhvJzonXFx1MDNGMScsJ3ZhcnNpZ21hJzonXFx1MDNDMicsJ3ZhcnN1YnNldG5lcSc6J1xcdTIyOEFcXHVGRTAwJywndmFyc3Vic2V0bmVxcSc6J1xcdTJBQ0JcXHVGRTAwJywndmFyc3Vwc2V0bmVxJzonXFx1MjI4QlxcdUZFMDAnLCd2YXJzdXBzZXRuZXFxJzonXFx1MkFDQ1xcdUZFMDAnLCd2YXJ0aGV0YSc6J1xcdTAzRDEnLCd2YXJ0cmlhbmdsZWxlZnQnOidcXHUyMkIyJywndmFydHJpYW5nbGVyaWdodCc6J1xcdTIyQjMnLCd2QmFyJzonXFx1MkFFOCcsJ1ZiYXInOidcXHUyQUVCJywndkJhcnYnOidcXHUyQUU5JywnVmN5JzonXFx1MDQxMicsJ3ZjeSc6J1xcdTA0MzInLCd2ZGFzaCc6J1xcdTIyQTInLCd2RGFzaCc6J1xcdTIyQTgnLCdWZGFzaCc6J1xcdTIyQTknLCdWRGFzaCc6J1xcdTIyQUInLCdWZGFzaGwnOidcXHUyQUU2JywndmVlYmFyJzonXFx1MjJCQicsJ3ZlZSc6J1xcdTIyMjgnLCdWZWUnOidcXHUyMkMxJywndmVlZXEnOidcXHUyMjVBJywndmVsbGlwJzonXFx1MjJFRScsJ3ZlcmJhcic6J3wnLCdWZXJiYXInOidcXHUyMDE2JywndmVydCc6J3wnLCdWZXJ0JzonXFx1MjAxNicsJ1ZlcnRpY2FsQmFyJzonXFx1MjIyMycsJ1ZlcnRpY2FsTGluZSc6J3wnLCdWZXJ0aWNhbFNlcGFyYXRvcic6J1xcdTI3NTgnLCdWZXJ0aWNhbFRpbGRlJzonXFx1MjI0MCcsJ1ZlcnlUaGluU3BhY2UnOidcXHUyMDBBJywnVmZyJzonXFx1RDgzNVxcdUREMTknLCd2ZnInOidcXHVEODM1XFx1REQzMycsJ3ZsdHJpJzonXFx1MjJCMicsJ3Zuc3ViJzonXFx1MjI4MlxcdTIwRDInLCd2bnN1cCc6J1xcdTIyODNcXHUyMEQyJywnVm9wZic6J1xcdUQ4MzVcXHVERDREJywndm9wZic6J1xcdUQ4MzVcXHVERDY3JywndnByb3AnOidcXHUyMjFEJywndnJ0cmknOidcXHUyMkIzJywnVnNjcic6J1xcdUQ4MzVcXHVEQ0IxJywndnNjcic6J1xcdUQ4MzVcXHVEQ0NCJywndnN1Ym5FJzonXFx1MkFDQlxcdUZFMDAnLCd2c3VibmUnOidcXHUyMjhBXFx1RkUwMCcsJ3ZzdXBuRSc6J1xcdTJBQ0NcXHVGRTAwJywndnN1cG5lJzonXFx1MjI4QlxcdUZFMDAnLCdWdmRhc2gnOidcXHUyMkFBJywndnppZ3phZyc6J1xcdTI5OUEnLCdXY2lyYyc6J1xcdTAxNzQnLCd3Y2lyYyc6J1xcdTAxNzUnLCd3ZWRiYXInOidcXHUyQTVGJywnd2VkZ2UnOidcXHUyMjI3JywnV2VkZ2UnOidcXHUyMkMwJywnd2VkZ2VxJzonXFx1MjI1OScsJ3dlaWVycCc6J1xcdTIxMTgnLCdXZnInOidcXHVEODM1XFx1REQxQScsJ3dmcic6J1xcdUQ4MzVcXHVERDM0JywnV29wZic6J1xcdUQ4MzVcXHVERDRFJywnd29wZic6J1xcdUQ4MzVcXHVERDY4Jywnd3AnOidcXHUyMTE4Jywnd3InOidcXHUyMjQwJywnd3JlYXRoJzonXFx1MjI0MCcsJ1dzY3InOidcXHVEODM1XFx1RENCMicsJ3dzY3InOidcXHVEODM1XFx1RENDQycsJ3hjYXAnOidcXHUyMkMyJywneGNpcmMnOidcXHUyNUVGJywneGN1cCc6J1xcdTIyQzMnLCd4ZHRyaSc6J1xcdTI1QkQnLCdYZnInOidcXHVEODM1XFx1REQxQicsJ3hmcic6J1xcdUQ4MzVcXHVERDM1JywneGhhcnInOidcXHUyN0Y3JywneGhBcnInOidcXHUyN0ZBJywnWGknOidcXHUwMzlFJywneGknOidcXHUwM0JFJywneGxhcnInOidcXHUyN0Y1JywneGxBcnInOidcXHUyN0Y4JywneG1hcCc6J1xcdTI3RkMnLCd4bmlzJzonXFx1MjJGQicsJ3hvZG90JzonXFx1MkEwMCcsJ1hvcGYnOidcXHVEODM1XFx1REQ0RicsJ3hvcGYnOidcXHVEODM1XFx1REQ2OScsJ3hvcGx1cyc6J1xcdTJBMDEnLCd4b3RpbWUnOidcXHUyQTAyJywneHJhcnInOidcXHUyN0Y2JywneHJBcnInOidcXHUyN0Y5JywnWHNjcic6J1xcdUQ4MzVcXHVEQ0IzJywneHNjcic6J1xcdUQ4MzVcXHVEQ0NEJywneHNxY3VwJzonXFx1MkEwNicsJ3h1cGx1cyc6J1xcdTJBMDQnLCd4dXRyaSc6J1xcdTI1QjMnLCd4dmVlJzonXFx1MjJDMScsJ3h3ZWRnZSc6J1xcdTIyQzAnLCdZYWN1dGUnOidcXHhERCcsJ3lhY3V0ZSc6J1xceEZEJywnWUFjeSc6J1xcdTA0MkYnLCd5YWN5JzonXFx1MDQ0RicsJ1ljaXJjJzonXFx1MDE3NicsJ3ljaXJjJzonXFx1MDE3NycsJ1ljeSc6J1xcdTA0MkInLCd5Y3knOidcXHUwNDRCJywneWVuJzonXFx4QTUnLCdZZnInOidcXHVEODM1XFx1REQxQycsJ3lmcic6J1xcdUQ4MzVcXHVERDM2JywnWUljeSc6J1xcdTA0MDcnLCd5aWN5JzonXFx1MDQ1NycsJ1lvcGYnOidcXHVEODM1XFx1REQ1MCcsJ3lvcGYnOidcXHVEODM1XFx1REQ2QScsJ1lzY3InOidcXHVEODM1XFx1RENCNCcsJ3lzY3InOidcXHVEODM1XFx1RENDRScsJ1lVY3knOidcXHUwNDJFJywneXVjeSc6J1xcdTA0NEUnLCd5dW1sJzonXFx4RkYnLCdZdW1sJzonXFx1MDE3OCcsJ1phY3V0ZSc6J1xcdTAxNzknLCd6YWN1dGUnOidcXHUwMTdBJywnWmNhcm9uJzonXFx1MDE3RCcsJ3pjYXJvbic6J1xcdTAxN0UnLCdaY3knOidcXHUwNDE3JywnemN5JzonXFx1MDQzNycsJ1pkb3QnOidcXHUwMTdCJywnemRvdCc6J1xcdTAxN0MnLCd6ZWV0cmYnOidcXHUyMTI4JywnWmVyb1dpZHRoU3BhY2UnOidcXHUyMDBCJywnWmV0YSc6J1xcdTAzOTYnLCd6ZXRhJzonXFx1MDNCNicsJ3pmcic6J1xcdUQ4MzVcXHVERDM3JywnWmZyJzonXFx1MjEyOCcsJ1pIY3knOidcXHUwNDE2JywnemhjeSc6J1xcdTA0MzYnLCd6aWdyYXJyJzonXFx1MjFERCcsJ3pvcGYnOidcXHVEODM1XFx1REQ2QicsJ1pvcGYnOidcXHUyMTI0JywnWnNjcic6J1xcdUQ4MzVcXHVEQ0I1JywnenNjcic6J1xcdUQ4MzVcXHVEQ0NGJywnendqJzonXFx1MjAwRCcsJ3p3bmonOidcXHUyMDBDJ307XG5cdHZhciBkZWNvZGVNYXBMZWdhY3kgPSB7J0FhY3V0ZSc6J1xceEMxJywnYWFjdXRlJzonXFx4RTEnLCdBY2lyYyc6J1xceEMyJywnYWNpcmMnOidcXHhFMicsJ2FjdXRlJzonXFx4QjQnLCdBRWxpZyc6J1xceEM2JywnYWVsaWcnOidcXHhFNicsJ0FncmF2ZSc6J1xceEMwJywnYWdyYXZlJzonXFx4RTAnLCdhbXAnOicmJywnQU1QJzonJicsJ0FyaW5nJzonXFx4QzUnLCdhcmluZyc6J1xceEU1JywnQXRpbGRlJzonXFx4QzMnLCdhdGlsZGUnOidcXHhFMycsJ0F1bWwnOidcXHhDNCcsJ2F1bWwnOidcXHhFNCcsJ2JydmJhcic6J1xceEE2JywnQ2NlZGlsJzonXFx4QzcnLCdjY2VkaWwnOidcXHhFNycsJ2NlZGlsJzonXFx4QjgnLCdjZW50JzonXFx4QTInLCdjb3B5JzonXFx4QTknLCdDT1BZJzonXFx4QTknLCdjdXJyZW4nOidcXHhBNCcsJ2RlZyc6J1xceEIwJywnZGl2aWRlJzonXFx4RjcnLCdFYWN1dGUnOidcXHhDOScsJ2VhY3V0ZSc6J1xceEU5JywnRWNpcmMnOidcXHhDQScsJ2VjaXJjJzonXFx4RUEnLCdFZ3JhdmUnOidcXHhDOCcsJ2VncmF2ZSc6J1xceEU4JywnRVRIJzonXFx4RDAnLCdldGgnOidcXHhGMCcsJ0V1bWwnOidcXHhDQicsJ2V1bWwnOidcXHhFQicsJ2ZyYWMxMic6J1xceEJEJywnZnJhYzE0JzonXFx4QkMnLCdmcmFjMzQnOidcXHhCRScsJ2d0JzonPicsJ0dUJzonPicsJ0lhY3V0ZSc6J1xceENEJywnaWFjdXRlJzonXFx4RUQnLCdJY2lyYyc6J1xceENFJywnaWNpcmMnOidcXHhFRScsJ2lleGNsJzonXFx4QTEnLCdJZ3JhdmUnOidcXHhDQycsJ2lncmF2ZSc6J1xceEVDJywnaXF1ZXN0JzonXFx4QkYnLCdJdW1sJzonXFx4Q0YnLCdpdW1sJzonXFx4RUYnLCdsYXF1byc6J1xceEFCJywnbHQnOic8JywnTFQnOic8JywnbWFjcic6J1xceEFGJywnbWljcm8nOidcXHhCNScsJ21pZGRvdCc6J1xceEI3JywnbmJzcCc6J1xceEEwJywnbm90JzonXFx4QUMnLCdOdGlsZGUnOidcXHhEMScsJ250aWxkZSc6J1xceEYxJywnT2FjdXRlJzonXFx4RDMnLCdvYWN1dGUnOidcXHhGMycsJ09jaXJjJzonXFx4RDQnLCdvY2lyYyc6J1xceEY0JywnT2dyYXZlJzonXFx4RDInLCdvZ3JhdmUnOidcXHhGMicsJ29yZGYnOidcXHhBQScsJ29yZG0nOidcXHhCQScsJ09zbGFzaCc6J1xceEQ4Jywnb3NsYXNoJzonXFx4RjgnLCdPdGlsZGUnOidcXHhENScsJ290aWxkZSc6J1xceEY1JywnT3VtbCc6J1xceEQ2Jywnb3VtbCc6J1xceEY2JywncGFyYSc6J1xceEI2JywncGx1c21uJzonXFx4QjEnLCdwb3VuZCc6J1xceEEzJywncXVvdCc6J1wiJywnUVVPVCc6J1wiJywncmFxdW8nOidcXHhCQicsJ3JlZyc6J1xceEFFJywnUkVHJzonXFx4QUUnLCdzZWN0JzonXFx4QTcnLCdzaHknOidcXHhBRCcsJ3N1cDEnOidcXHhCOScsJ3N1cDInOidcXHhCMicsJ3N1cDMnOidcXHhCMycsJ3N6bGlnJzonXFx4REYnLCdUSE9STic6J1xceERFJywndGhvcm4nOidcXHhGRScsJ3RpbWVzJzonXFx4RDcnLCdVYWN1dGUnOidcXHhEQScsJ3VhY3V0ZSc6J1xceEZBJywnVWNpcmMnOidcXHhEQicsJ3VjaXJjJzonXFx4RkInLCdVZ3JhdmUnOidcXHhEOScsJ3VncmF2ZSc6J1xceEY5JywndW1sJzonXFx4QTgnLCdVdW1sJzonXFx4REMnLCd1dW1sJzonXFx4RkMnLCdZYWN1dGUnOidcXHhERCcsJ3lhY3V0ZSc6J1xceEZEJywneWVuJzonXFx4QTUnLCd5dW1sJzonXFx4RkYnfTtcblx0dmFyIGRlY29kZU1hcE51bWVyaWMgPSB7JzAnOidcXHVGRkZEJywnMTI4JzonXFx1MjBBQycsJzEzMCc6J1xcdTIwMUEnLCcxMzEnOidcXHUwMTkyJywnMTMyJzonXFx1MjAxRScsJzEzMyc6J1xcdTIwMjYnLCcxMzQnOidcXHUyMDIwJywnMTM1JzonXFx1MjAyMScsJzEzNic6J1xcdTAyQzYnLCcxMzcnOidcXHUyMDMwJywnMTM4JzonXFx1MDE2MCcsJzEzOSc6J1xcdTIwMzknLCcxNDAnOidcXHUwMTUyJywnMTQyJzonXFx1MDE3RCcsJzE0NSc6J1xcdTIwMTgnLCcxNDYnOidcXHUyMDE5JywnMTQ3JzonXFx1MjAxQycsJzE0OCc6J1xcdTIwMUQnLCcxNDknOidcXHUyMDIyJywnMTUwJzonXFx1MjAxMycsJzE1MSc6J1xcdTIwMTQnLCcxNTInOidcXHUwMkRDJywnMTUzJzonXFx1MjEyMicsJzE1NCc6J1xcdTAxNjEnLCcxNTUnOidcXHUyMDNBJywnMTU2JzonXFx1MDE1MycsJzE1OCc6J1xcdTAxN0UnLCcxNTknOidcXHUwMTc4J307XG5cdHZhciBpbnZhbGlkUmVmZXJlbmNlQ29kZVBvaW50cyA9IFsxLDIsMyw0LDUsNiw3LDgsMTEsMTMsMTQsMTUsMTYsMTcsMTgsMTksMjAsMjEsMjIsMjMsMjQsMjUsMjYsMjcsMjgsMjksMzAsMzEsMTI3LDEyOCwxMjksMTMwLDEzMSwxMzIsMTMzLDEzNCwxMzUsMTM2LDEzNywxMzgsMTM5LDE0MCwxNDEsMTQyLDE0MywxNDQsMTQ1LDE0NiwxNDcsMTQ4LDE0OSwxNTAsMTUxLDE1MiwxNTMsMTU0LDE1NSwxNTYsMTU3LDE1OCwxNTksNjQ5NzYsNjQ5NzcsNjQ5NzgsNjQ5NzksNjQ5ODAsNjQ5ODEsNjQ5ODIsNjQ5ODMsNjQ5ODQsNjQ5ODUsNjQ5ODYsNjQ5ODcsNjQ5ODgsNjQ5ODksNjQ5OTAsNjQ5OTEsNjQ5OTIsNjQ5OTMsNjQ5OTQsNjQ5OTUsNjQ5OTYsNjQ5OTcsNjQ5OTgsNjQ5OTksNjUwMDAsNjUwMDEsNjUwMDIsNjUwMDMsNjUwMDQsNjUwMDUsNjUwMDYsNjUwMDcsNjU1MzQsNjU1MzUsMTMxMDcwLDEzMTA3MSwxOTY2MDYsMTk2NjA3LDI2MjE0MiwyNjIxNDMsMzI3Njc4LDMyNzY3OSwzOTMyMTQsMzkzMjE1LDQ1ODc1MCw0NTg3NTEsNTI0Mjg2LDUyNDI4Nyw1ODk4MjIsNTg5ODIzLDY1NTM1OCw2NTUzNTksNzIwODk0LDcyMDg5NSw3ODY0MzAsNzg2NDMxLDg1MTk2Niw4NTE5NjcsOTE3NTAyLDkxNzUwMyw5ODMwMzgsOTgzMDM5LDEwNDg1NzQsMTA0ODU3NSwxMTE0MTEwLDExMTQxMTFdO1xuXG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdHZhciBzdHJpbmdGcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuXG5cdHZhciBvYmplY3QgPSB7fTtcblx0dmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0Lmhhc093blByb3BlcnR5O1xuXHR2YXIgaGFzID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eU5hbWUpIHtcblx0XHRyZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5TmFtZSk7XG5cdH07XG5cblx0dmFyIGNvbnRhaW5zID0gZnVuY3Rpb24oYXJyYXksIHZhbHVlKSB7XG5cdFx0dmFyIGluZGV4ID0gLTE7XG5cdFx0dmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblx0XHR3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuXHRcdFx0aWYgKGFycmF5W2luZGV4XSA9PSB2YWx1ZSkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xuXG5cdHZhciBtZXJnZSA9IGZ1bmN0aW9uKG9wdGlvbnMsIGRlZmF1bHRzKSB7XG5cdFx0aWYgKCFvcHRpb25zKSB7XG5cdFx0XHRyZXR1cm4gZGVmYXVsdHM7XG5cdFx0fVxuXHRcdHZhciByZXN1bHQgPSB7fTtcblx0XHR2YXIga2V5O1xuXHRcdGZvciAoa2V5IGluIGRlZmF1bHRzKSB7XG5cdFx0XHQvLyBBIGBoYXNPd25Qcm9wZXJ0eWAgY2hlY2sgaXMgbm90IG5lZWRlZCBoZXJlLCBzaW5jZSBvbmx5IHJlY29nbml6ZWRcblx0XHRcdC8vIG9wdGlvbiBuYW1lcyBhcmUgdXNlZCBhbnl3YXkuIEFueSBvdGhlcnMgYXJlIGlnbm9yZWQuXG5cdFx0XHRyZXN1bHRba2V5XSA9IGhhcyhvcHRpb25zLCBrZXkpID8gb3B0aW9uc1trZXldIDogZGVmYXVsdHNba2V5XTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHQvLyBNb2RpZmllZCB2ZXJzaW9uIG9mIGB1Y3MyZW5jb2RlYDsgc2VlIGh0dHA6Ly9tdGhzLmJlL3B1bnljb2RlLlxuXHR2YXIgY29kZVBvaW50VG9TeW1ib2wgPSBmdW5jdGlvbihjb2RlUG9pbnQsIHN0cmljdCkge1xuXHRcdHZhciBvdXRwdXQgPSAnJztcblx0XHRpZiAoKGNvZGVQb2ludCA+PSAweEQ4MDAgJiYgY29kZVBvaW50IDw9IDB4REZGRikgfHwgY29kZVBvaW50ID4gMHgxMEZGRkYpIHtcblx0XHRcdC8vIFNlZSBpc3N1ZSAjNDpcblx0XHRcdC8vIOKAnE90aGVyd2lzZSwgaWYgdGhlIG51bWJlciBpcyBpbiB0aGUgcmFuZ2UgMHhEODAwIHRvIDB4REZGRiBvciBpc1xuXHRcdFx0Ly8gZ3JlYXRlciB0aGFuIDB4MTBGRkZGLCB0aGVuIHRoaXMgaXMgYSBwYXJzZSBlcnJvci4gUmV0dXJuIGEgVStGRkZEXG5cdFx0XHQvLyBSRVBMQUNFTUVOVCBDSEFSQUNURVIu4oCdXG5cdFx0XHRpZiAoc3RyaWN0KSB7XG5cdFx0XHRcdHBhcnNlRXJyb3IoJ2NoYXJhY3RlciByZWZlcmVuY2Ugb3V0c2lkZSB0aGUgcGVybWlzc2libGUgVW5pY29kZSByYW5nZScpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuICdcXHVGRkZEJztcblx0XHR9XG5cdFx0aWYgKGhhcyhkZWNvZGVNYXBOdW1lcmljLCBjb2RlUG9pbnQpKSB7XG5cdFx0XHRpZiAoc3RyaWN0KSB7XG5cdFx0XHRcdHBhcnNlRXJyb3IoJ2Rpc2FsbG93ZWQgY2hhcmFjdGVyIHJlZmVyZW5jZScpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGRlY29kZU1hcE51bWVyaWNbY29kZVBvaW50XTtcblx0XHR9XG5cdFx0aWYgKHN0cmljdCAmJiBjb250YWlucyhpbnZhbGlkUmVmZXJlbmNlQ29kZVBvaW50cywgY29kZVBvaW50KSkge1xuXHRcdFx0cGFyc2VFcnJvcignZGlzYWxsb3dlZCBjaGFyYWN0ZXIgcmVmZXJlbmNlJyk7XG5cdFx0fVxuXHRcdGlmIChjb2RlUG9pbnQgPiAweEZGRkYpIHtcblx0XHRcdGNvZGVQb2ludCAtPSAweDEwMDAwO1xuXHRcdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZShjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApO1xuXHRcdFx0Y29kZVBvaW50ID0gMHhEQzAwIHwgY29kZVBvaW50ICYgMHgzRkY7XG5cdFx0fVxuXHRcdG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUoY29kZVBvaW50KTtcblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9O1xuXG5cdHZhciBoZXhFc2NhcGUgPSBmdW5jdGlvbihzeW1ib2wpIHtcblx0XHRyZXR1cm4gJyYjeCcgKyBzeW1ib2wuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSArICc7Jztcblx0fTtcblxuXHR2YXIgcGFyc2VFcnJvciA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcblx0XHR0aHJvdyBFcnJvcignUGFyc2UgZXJyb3I6ICcgKyBtZXNzYWdlKTtcblx0fTtcblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHR2YXIgZW5jb2RlID0gZnVuY3Rpb24oc3RyaW5nLCBvcHRpb25zKSB7XG5cdFx0b3B0aW9ucyA9IG1lcmdlKG9wdGlvbnMsIGVuY29kZS5vcHRpb25zKTtcblx0XHR2YXIgc3RyaWN0ID0gb3B0aW9ucy5zdHJpY3Q7XG5cdFx0aWYgKHN0cmljdCAmJiByZWdleEludmFsaWRSYXdDb2RlUG9pbnQudGVzdChzdHJpbmcpKSB7XG5cdFx0XHRwYXJzZUVycm9yKCdmb3JiaWRkZW4gY29kZSBwb2ludCcpO1xuXHRcdH1cblx0XHR2YXIgZW5jb2RlRXZlcnl0aGluZyA9IG9wdGlvbnMuZW5jb2RlRXZlcnl0aGluZztcblx0XHR2YXIgdXNlTmFtZWRSZWZlcmVuY2VzID0gb3B0aW9ucy51c2VOYW1lZFJlZmVyZW5jZXM7XG5cdFx0dmFyIGFsbG93VW5zYWZlU3ltYm9scyA9IG9wdGlvbnMuYWxsb3dVbnNhZmVTeW1ib2xzO1xuXHRcdGlmIChlbmNvZGVFdmVyeXRoaW5nKSB7XG5cdFx0XHQvLyBFbmNvZGUgQVNDSUkgc3ltYm9scy5cblx0XHRcdHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJlZ2V4QXNjaWlXaGl0ZWxpc3QsIGZ1bmN0aW9uKHN5bWJvbCkge1xuXHRcdFx0XHQvLyBVc2UgbmFtZWQgcmVmZXJlbmNlcyBpZiByZXF1ZXN0ZWQgJiBwb3NzaWJsZS5cblx0XHRcdFx0aWYgKHVzZU5hbWVkUmVmZXJlbmNlcyAmJiBoYXMoZW5jb2RlTWFwLCBzeW1ib2wpKSB7XG5cdFx0XHRcdFx0cmV0dXJuICcmJyArIGVuY29kZU1hcFtzeW1ib2xdICsgJzsnO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBoZXhFc2NhcGUoc3ltYm9sKTtcblx0XHRcdH0pO1xuXHRcdFx0Ly8gU2hvcnRlbiBhIGZldyBlc2NhcGVzIHRoYXQgcmVwcmVzZW50IHR3byBzeW1ib2xzLCBvZiB3aGljaCBhdCBsZWFzdCBvbmVcblx0XHRcdC8vIGlzIHdpdGhpbiB0aGUgQVNDSUkgcmFuZ2UuXG5cdFx0XHRpZiAodXNlTmFtZWRSZWZlcmVuY2VzKSB7XG5cdFx0XHRcdHN0cmluZyA9IHN0cmluZ1xuXHRcdFx0XHRcdC5yZXBsYWNlKC8mZ3Q7XFx1MjBEMi9nLCAnJm52Z3Q7Jylcblx0XHRcdFx0XHQucmVwbGFjZSgvJmx0O1xcdTIwRDIvZywgJyZudmx0OycpXG5cdFx0XHRcdFx0LnJlcGxhY2UoLyYjeDY2OyYjeDZBOy9nLCAnJmZqbGlnOycpO1xuXHRcdFx0fVxuXHRcdFx0Ly8gRW5jb2RlIG5vbi1BU0NJSSBzeW1ib2xzLlxuXHRcdFx0aWYgKHVzZU5hbWVkUmVmZXJlbmNlcykge1xuXHRcdFx0XHQvLyBFbmNvZGUgbm9uLUFTQ0lJIHN5bWJvbHMgdGhhdCBjYW4gYmUgcmVwbGFjZWQgd2l0aCBhIG5hbWVkIHJlZmVyZW5jZS5cblx0XHRcdFx0c3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocmVnZXhFbmNvZGVOb25Bc2NpaSwgZnVuY3Rpb24oc3RyaW5nKSB7XG5cdFx0XHRcdFx0Ly8gTm90ZTogdGhlcmUgaXMgbm8gbmVlZCB0byBjaGVjayBgaGFzKGVuY29kZU1hcCwgc3RyaW5nKWAgaGVyZS5cblx0XHRcdFx0XHRyZXR1cm4gJyYnICsgZW5jb2RlTWFwW3N0cmluZ10gKyAnOyc7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdFx0Ly8gTm90ZTogYW55IHJlbWFpbmluZyBub24tQVNDSUkgc3ltYm9scyBhcmUgaGFuZGxlZCBvdXRzaWRlIG9mIHRoZSBgaWZgLlxuXHRcdH0gZWxzZSBpZiAodXNlTmFtZWRSZWZlcmVuY2VzKSB7XG5cdFx0XHQvLyBBcHBseSBuYW1lZCBjaGFyYWN0ZXIgcmVmZXJlbmNlcy5cblx0XHRcdC8vIEVuY29kZSBgPD5cIicmYCB1c2luZyBuYW1lZCBjaGFyYWN0ZXIgcmVmZXJlbmNlcy5cblx0XHRcdGlmICghYWxsb3dVbnNhZmVTeW1ib2xzKSB7XG5cdFx0XHRcdHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJlZ2V4RXNjYXBlLCBmdW5jdGlvbihzdHJpbmcpIHtcblx0XHRcdFx0XHRyZXR1cm4gJyYnICsgZW5jb2RlTWFwW3N0cmluZ10gKyAnOyc7IC8vIG5vIG5lZWQgdG8gY2hlY2sgYGhhcygpYCBoZXJlXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdFx0Ly8gU2hvcnRlbiBlc2NhcGVzIHRoYXQgcmVwcmVzZW50IHR3byBzeW1ib2xzLCBvZiB3aGljaCBhdCBsZWFzdCBvbmUgaXNcblx0XHRcdC8vIGA8PlwiJyZgLlxuXHRcdFx0c3RyaW5nID0gc3RyaW5nXG5cdFx0XHRcdC5yZXBsYWNlKC8mZ3Q7XFx1MjBEMi9nLCAnJm52Z3Q7Jylcblx0XHRcdFx0LnJlcGxhY2UoLyZsdDtcXHUyMEQyL2csICcmbnZsdDsnKTtcblx0XHRcdC8vIEVuY29kZSBub24tQVNDSUkgc3ltYm9scyB0aGF0IGNhbiBiZSByZXBsYWNlZCB3aXRoIGEgbmFtZWQgcmVmZXJlbmNlLlxuXHRcdFx0c3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocmVnZXhFbmNvZGVOb25Bc2NpaSwgZnVuY3Rpb24oc3RyaW5nKSB7XG5cdFx0XHRcdC8vIE5vdGU6IHRoZXJlIGlzIG5vIG5lZWQgdG8gY2hlY2sgYGhhcyhlbmNvZGVNYXAsIHN0cmluZylgIGhlcmUuXG5cdFx0XHRcdHJldHVybiAnJicgKyBlbmNvZGVNYXBbc3RyaW5nXSArICc7Jztcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSBpZiAoIWFsbG93VW5zYWZlU3ltYm9scykge1xuXHRcdFx0Ly8gRW5jb2RlIGA8PlwiJyZgIHVzaW5nIGhleGFkZWNpbWFsIGVzY2FwZXMsIG5vdyB0aGF0IHRoZXnigJlyZSBub3QgaGFuZGxlZFxuXHRcdFx0Ly8gdXNpbmcgbmFtZWQgY2hhcmFjdGVyIHJlZmVyZW5jZXMuXG5cdFx0XHRzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShyZWdleEVzY2FwZSwgaGV4RXNjYXBlKTtcblx0XHR9XG5cdFx0cmV0dXJuIHN0cmluZ1xuXHRcdFx0Ly8gRW5jb2RlIGFzdHJhbCBzeW1ib2xzLlxuXHRcdFx0LnJlcGxhY2UocmVnZXhBc3RyYWxTeW1ib2xzLCBmdW5jdGlvbigkMCkge1xuXHRcdFx0XHQvLyBodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZyNzdXJyb2dhdGUtZm9ybXVsYWVcblx0XHRcdFx0dmFyIGhpZ2ggPSAkMC5jaGFyQ29kZUF0KDApO1xuXHRcdFx0XHR2YXIgbG93ID0gJDAuY2hhckNvZGVBdCgxKTtcblx0XHRcdFx0dmFyIGNvZGVQb2ludCA9IChoaWdoIC0gMHhEODAwKSAqIDB4NDAwICsgbG93IC0gMHhEQzAwICsgMHgxMDAwMDtcblx0XHRcdFx0cmV0dXJuICcmI3gnICsgY29kZVBvaW50LnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpICsgJzsnO1xuXHRcdFx0fSlcblx0XHRcdC8vIEVuY29kZSBhbnkgcmVtYWluaW5nIEJNUCBzeW1ib2xzIHRoYXQgYXJlIG5vdCBwcmludGFibGUgQVNDSUkgc3ltYm9sc1xuXHRcdFx0Ly8gdXNpbmcgYSBoZXhhZGVjaW1hbCBlc2NhcGUuXG5cdFx0XHQucmVwbGFjZShyZWdleEJtcFdoaXRlbGlzdCwgaGV4RXNjYXBlKTtcblx0fTtcblx0Ly8gRXhwb3NlIGRlZmF1bHQgb3B0aW9ucyAoc28gdGhleSBjYW4gYmUgb3ZlcnJpZGRlbiBnbG9iYWxseSkuXG5cdGVuY29kZS5vcHRpb25zID0ge1xuXHRcdCdhbGxvd1Vuc2FmZVN5bWJvbHMnOiBmYWxzZSxcblx0XHQnZW5jb2RlRXZlcnl0aGluZyc6IGZhbHNlLFxuXHRcdCdzdHJpY3QnOiBmYWxzZSxcblx0XHQndXNlTmFtZWRSZWZlcmVuY2VzJzogZmFsc2Vcblx0fTtcblxuXHR2YXIgZGVjb2RlID0gZnVuY3Rpb24oaHRtbCwgb3B0aW9ucykge1xuXHRcdG9wdGlvbnMgPSBtZXJnZShvcHRpb25zLCBkZWNvZGUub3B0aW9ucyk7XG5cdFx0dmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0O1xuXHRcdGlmIChzdHJpY3QgJiYgcmVnZXhJbnZhbGlkRW50aXR5LnRlc3QoaHRtbCkpIHtcblx0XHRcdHBhcnNlRXJyb3IoJ21hbGZvcm1lZCBjaGFyYWN0ZXIgcmVmZXJlbmNlJyk7XG5cdFx0fVxuXHRcdHJldHVybiBodG1sLnJlcGxhY2UocmVnZXhEZWNvZGUsIGZ1bmN0aW9uKCQwLCAkMSwgJDIsICQzLCAkNCwgJDUsICQ2LCAkNykge1xuXHRcdFx0dmFyIGNvZGVQb2ludDtcblx0XHRcdHZhciBzZW1pY29sb247XG5cdFx0XHR2YXIgaGV4RGlnaXRzO1xuXHRcdFx0dmFyIHJlZmVyZW5jZTtcblx0XHRcdHZhciBuZXh0O1xuXHRcdFx0aWYgKCQxKSB7XG5cdFx0XHRcdC8vIERlY29kZSBkZWNpbWFsIGVzY2FwZXMsIGUuZy4gYCYjMTE5NTU4O2AuXG5cdFx0XHRcdGNvZGVQb2ludCA9ICQxO1xuXHRcdFx0XHRzZW1pY29sb24gPSAkMjtcblx0XHRcdFx0aWYgKHN0cmljdCAmJiAhc2VtaWNvbG9uKSB7XG5cdFx0XHRcdFx0cGFyc2VFcnJvcignY2hhcmFjdGVyIHJlZmVyZW5jZSB3YXMgbm90IHRlcm1pbmF0ZWQgYnkgYSBzZW1pY29sb24nKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gY29kZVBvaW50VG9TeW1ib2woY29kZVBvaW50LCBzdHJpY3QpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCQzKSB7XG5cdFx0XHRcdC8vIERlY29kZSBoZXhhZGVjaW1hbCBlc2NhcGVzLCBlLmcuIGAmI3gxRDMwNjtgLlxuXHRcdFx0XHRoZXhEaWdpdHMgPSAkMztcblx0XHRcdFx0c2VtaWNvbG9uID0gJDQ7XG5cdFx0XHRcdGlmIChzdHJpY3QgJiYgIXNlbWljb2xvbikge1xuXHRcdFx0XHRcdHBhcnNlRXJyb3IoJ2NoYXJhY3RlciByZWZlcmVuY2Ugd2FzIG5vdCB0ZXJtaW5hdGVkIGJ5IGEgc2VtaWNvbG9uJyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29kZVBvaW50ID0gcGFyc2VJbnQoaGV4RGlnaXRzLCAxNik7XG5cdFx0XHRcdHJldHVybiBjb2RlUG9pbnRUb1N5bWJvbChjb2RlUG9pbnQsIHN0cmljdCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoJDUpIHtcblx0XHRcdFx0Ly8gRGVjb2RlIG5hbWVkIGNoYXJhY3RlciByZWZlcmVuY2VzIHdpdGggdHJhaWxpbmcgYDtgLCBlLmcuIGAmY29weTtgLlxuXHRcdFx0XHRyZWZlcmVuY2UgPSAkNTtcblx0XHRcdFx0aWYgKGhhcyhkZWNvZGVNYXAsIHJlZmVyZW5jZSkpIHtcblx0XHRcdFx0XHRyZXR1cm4gZGVjb2RlTWFwW3JlZmVyZW5jZV07XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gQW1iaWd1b3VzIGFtcGVyc2FuZDsgc2VlIGh0dHA6Ly9tdGhzLmJlL25vdGVzL2FtYmlndW91cy1hbXBlcnNhbmRzLlxuXHRcdFx0XHRcdGlmIChzdHJpY3QpIHtcblx0XHRcdFx0XHRcdHBhcnNlRXJyb3IoXG5cdFx0XHRcdFx0XHRcdCduYW1lZCBjaGFyYWN0ZXIgcmVmZXJlbmNlIHdhcyBub3QgdGVybWluYXRlZCBieSBhIHNlbWljb2xvbidcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiAkMDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0Ly8gSWYgd2XigJlyZSBzdGlsbCBoZXJlLCBpdOKAmXMgYSBsZWdhY3kgcmVmZXJlbmNlIGZvciBzdXJlLiBObyBuZWVkIGZvciBhblxuXHRcdFx0Ly8gZXh0cmEgYGlmYCBjaGVjay5cblx0XHRcdC8vIERlY29kZSBuYW1lZCBjaGFyYWN0ZXIgcmVmZXJlbmNlcyB3aXRob3V0IHRyYWlsaW5nIGA7YCwgZS5nLiBgJmFtcGBcblx0XHRcdC8vIFRoaXMgaXMgb25seSBhIHBhcnNlIGVycm9yIGlmIGl0IGdldHMgY29udmVydGVkIHRvIGAmYCwgb3IgaWYgaXQgaXNcblx0XHRcdC8vIGZvbGxvd2VkIGJ5IGA9YCBpbiBhbiBhdHRyaWJ1dGUgY29udGV4dC5cblx0XHRcdHJlZmVyZW5jZSA9ICQ2O1xuXHRcdFx0bmV4dCA9ICQ3O1xuXHRcdFx0aWYgKG5leHQgJiYgb3B0aW9ucy5pc0F0dHJpYnV0ZVZhbHVlKSB7XG5cdFx0XHRcdGlmIChzdHJpY3QgJiYgbmV4dCA9PSAnPScpIHtcblx0XHRcdFx0XHRwYXJzZUVycm9yKCdgJmAgZGlkIG5vdCBzdGFydCBhIGNoYXJhY3RlciByZWZlcmVuY2UnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gJDA7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAoc3RyaWN0KSB7XG5cdFx0XHRcdFx0cGFyc2VFcnJvcihcblx0XHRcdFx0XHRcdCduYW1lZCBjaGFyYWN0ZXIgcmVmZXJlbmNlIHdhcyBub3QgdGVybWluYXRlZCBieSBhIHNlbWljb2xvbidcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIE5vdGU6IHRoZXJlIGlzIG5vIG5lZWQgdG8gY2hlY2sgYGhhcyhkZWNvZGVNYXBMZWdhY3ksIHJlZmVyZW5jZSlgLlxuXHRcdFx0XHRyZXR1cm4gZGVjb2RlTWFwTGVnYWN5W3JlZmVyZW5jZV0gKyAobmV4dCB8fCAnJyk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH07XG5cdC8vIEV4cG9zZSBkZWZhdWx0IG9wdGlvbnMgKHNvIHRoZXkgY2FuIGJlIG92ZXJyaWRkZW4gZ2xvYmFsbHkpLlxuXHRkZWNvZGUub3B0aW9ucyA9IHtcblx0XHQnaXNBdHRyaWJ1dGVWYWx1ZSc6IGZhbHNlLFxuXHRcdCdzdHJpY3QnOiBmYWxzZVxuXHR9O1xuXG5cdHZhciBlc2NhcGUgPSBmdW5jdGlvbihzdHJpbmcpIHtcblx0XHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UocmVnZXhFc2NhcGUsIGZ1bmN0aW9uKCQwKSB7XG5cdFx0XHQvLyBOb3RlOiB0aGVyZSBpcyBubyBuZWVkIHRvIGNoZWNrIGBoYXMoZXNjYXBlTWFwLCAkMClgIGhlcmUuXG5cdFx0XHRyZXR1cm4gZXNjYXBlTWFwWyQwXTtcblx0XHR9KTtcblx0fTtcblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHR2YXIgaGUgPSB7XG5cdFx0J3ZlcnNpb24nOiAnMC41LjAnLFxuXHRcdCdlbmNvZGUnOiBlbmNvZGUsXG5cdFx0J2RlY29kZSc6IGRlY29kZSxcblx0XHQnZXNjYXBlJzogZXNjYXBlLFxuXHRcdCd1bmVzY2FwZSc6IGRlY29kZVxuXHR9O1xuXG5cdC8vIFNvbWUgQU1EIGJ1aWxkIG9wdGltaXplcnMsIGxpa2Ugci5qcywgY2hlY2sgZm9yIHNwZWNpZmljIGNvbmRpdGlvbiBwYXR0ZXJuc1xuXHQvLyBsaWtlIHRoZSBmb2xsb3dpbmc6XG5cdGlmIChcblx0XHR0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiZcblx0XHR0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJlxuXHRcdGRlZmluZS5hbWRcblx0KSB7XG5cdFx0ZGVmaW5lKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGhlO1xuXHRcdH0pO1xuXHR9XHRlbHNlIGlmIChmcmVlRXhwb3J0cyAmJiAhZnJlZUV4cG9ydHMubm9kZVR5cGUpIHtcblx0XHRpZiAoZnJlZU1vZHVsZSkgeyAvLyBpbiBOb2RlLmpzIG9yIFJpbmdvSlMgdjAuOC4wK1xuXHRcdFx0ZnJlZU1vZHVsZS5leHBvcnRzID0gaGU7XG5cdFx0fSBlbHNlIHsgLy8gaW4gTmFyd2hhbCBvciBSaW5nb0pTIHYwLjcuMC1cblx0XHRcdGZvciAodmFyIGtleSBpbiBoZSkge1xuXHRcdFx0XHRoYXMoaGUsIGtleSkgJiYgKGZyZWVFeHBvcnRzW2tleV0gPSBoZVtrZXldKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSB7IC8vIGluIFJoaW5vIG9yIGEgd2ViIGJyb3dzZXJcblx0XHRyb290LmhlID0gaGU7XG5cdH1cblxufSh0aGlzKSk7XG5cbn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OW9aUzlvWlM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdktpRWdhSFIwY0RvdkwyMTBhSE11WW1VdmFHVWdkakF1TlM0d0lHSjVJRUJ0WVhSb2FXRnpJSHdnVFVsVUlHeHBZMlZ1YzJVZ0tpOWNianNvWm5WdVkzUnBiMjRvY205dmRDa2dlMXh1WEc1Y2RDOHZJRVJsZEdWamRDQm1jbVZsSUhaaGNtbGhZbXhsY3lCZ1pYaHdiM0owYzJBdVhHNWNkSFpoY2lCbWNtVmxSWGh3YjNKMGN5QTlJSFI1Y0dWdlppQmxlSEJ2Y25SeklEMDlJQ2R2WW1wbFkzUW5JQ1ltSUdWNGNHOXlkSE03WEc1Y2JseDBMeThnUkdWMFpXTjBJR1p5WldVZ2RtRnlhV0ZpYkdVZ1lHMXZaSFZzWldBdVhHNWNkSFpoY2lCbWNtVmxUVzlrZFd4bElEMGdkSGx3Wlc5bUlHMXZaSFZzWlNBOVBTQW5iMkpxWldOMEp5QW1KaUJ0YjJSMWJHVWdKaVpjYmx4MFhIUnRiMlIxYkdVdVpYaHdiM0owY3lBOVBTQm1jbVZsUlhod2IzSjBjeUFtSmlCdGIyUjFiR1U3WEc1Y2JseDBMeThnUkdWMFpXTjBJR1p5WldVZ2RtRnlhV0ZpYkdVZ1lHZHNiMkpoYkdBc0lHWnliMjBnVG05a1pTNXFjeUJ2Y2lCQ2NtOTNjMlZ5YVdacFpXUWdZMjlrWlN4Y2JseDBMeThnWVc1a0lIVnpaU0JwZENCaGN5QmdjbTl2ZEdBdVhHNWNkSFpoY2lCbWNtVmxSMnh2WW1Gc0lEMGdkSGx3Wlc5bUlHZHNiMkpoYkNBOVBTQW5iMkpxWldOMEp5QW1KaUJuYkc5aVlXdzdYRzVjZEdsbUlDaG1jbVZsUjJ4dlltRnNMbWRzYjJKaGJDQTlQVDBnWm5KbFpVZHNiMkpoYkNCOGZDQm1jbVZsUjJ4dlltRnNMbmRwYm1SdmR5QTlQVDBnWm5KbFpVZHNiMkpoYkNrZ2UxeHVYSFJjZEhKdmIzUWdQU0JtY21WbFIyeHZZbUZzTzF4dVhIUjlYRzVjYmx4MEx5b3RMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMU292WEc1Y2JseDBMeThnUVd4c0lHRnpkSEpoYkNCemVXMWliMnh6TGx4dVhIUjJZWElnY21WblpYaEJjM1J5WVd4VGVXMWliMnh6SUQwZ0wxdGNYSFZFT0RBd0xWeGNkVVJDUmtaZFcxeGNkVVJETURBdFhGeDFSRVpHUmwwdlp6dGNibHgwTHk4Z1FXeHNJRUZUUTBsSklITjViV0p2YkhNZ0tHNXZkQ0JxZFhOMElIQnlhVzUwWVdKc1pTQkJVME5KU1NrZ1pYaGpaWEIwSUhSb2IzTmxJR3hwYzNSbFpDQnBiaUIwYUdWY2JseDBMeThnWm1seWMzUWdZMjlzZFcxdUlHOW1JSFJvWlNCdmRtVnljbWxrWlhNZ2RHRmliR1V1WEc1Y2RDOHZJR2gwZEhBNkx5OTNhR0YwZDJjdWIzSm5MMmgwYld3dmRHOXJaVzVwZW1GMGFXOXVMbWgwYld3amRHRmliR1V0WTJoaGNuSmxaaTF2ZG1WeWNtbGtaWE5jYmx4MGRtRnlJSEpsWjJWNFFYTmphV2xYYUdsMFpXeHBjM1FnUFNBdlcxeGNlREF4TFZ4Y2VEZEdYUzluTzF4dVhIUXZMeUJCYkd3Z1FrMVFJSE41YldKdmJITWdkR2hoZENCaGNtVWdibTkwSUVGVFEwbEpJRzVsZDJ4cGJtVnpMQ0J3Y21sdWRHRmliR1VnUVZORFNVa2djM2x0WW05c2N5d2diM0pjYmx4MEx5OGdZMjlrWlNCd2IybHVkSE1nYkdsemRHVmtJR2x1SUhSb1pTQm1hWEp6ZENCamIyeDFiVzRnYjJZZ2RHaGxJRzkyWlhKeWFXUmxjeUIwWVdKc1pTQnZibHh1WEhRdkx5Qm9kSFJ3T2k4dmQyaGhkSGRuTG05eVp5OW9kRzFzTDNSdmEyVnVhWHBoZEdsdmJpNW9kRzFzSTNSaFlteGxMV05vWVhKeVpXWXRiM1psY25KcFpHVnpMbHh1WEhSMllYSWdjbVZuWlhoQ2JYQlhhR2wwWld4cGMzUWdQU0F2VzF4Y2VEQXhMVnhjZEZ4Y2VEQkNYRnhtWEZ4NE1FVXRYRng0TVVaY1hIZzNSbHhjZURneFhGeDRPRVJjWEhnNFJseGNlRGt3WEZ4NE9VUmNYSGhCTUMxY1hIVkdSa1pHWFM5bk8xeHVYRzVjZEhaaGNpQnlaV2RsZUVWdVkyOWtaVTV2YmtGelkybHBJRDBnTHp4Y1hIVXlNRVF5ZkQxY1hIVXlNRVUxZkQ1Y1hIVXlNRVF5ZkZ4Y2RUSXdOVVpjWEhVeU1EQkJmRnhjZFRJeE9VUmNYSFV3TXpNNGZGeGNkVEl5TURKY1hIVXdNek00ZkZ4Y2RUSXlNakJjWEhVeU1FUXlmRnhjZFRJeU1qbGNYSFZHUlRBd2ZGeGNkVEl5TWtGY1hIVkdSVEF3ZkZ4Y2RUSXlNME5jWEhVeU1FUXlmRnhjZFRJeU0wUmNYSFV3TXpNeGZGeGNkVEl5TTBWY1hIVXdNek16ZkZ4Y2RUSXlOREpjWEhVd016TTRmRnhjZFRJeU5FSmNYSFV3TXpNNGZGeGNkVEl5TkVSY1hIVXlNRVF5ZkZ4Y2RUSXlORVZjWEhVd016TTRmRnhjZFRJeU5FWmNYSFV3TXpNNGZGeGNkVEl5TlRCY1hIVXdNek00ZkZ4Y2RUSXlOakZjWEhVeU1FVTFmRnhjZFRJeU5qUmNYSFV5TUVReWZGeGNkVEl5TmpWY1hIVXlNRVF5ZkZ4Y2RUSXlOalpjWEhVd016TTRmRnhjZFRJeU5qZGNYSFV3TXpNNGZGeGNkVEl5TmpoY1hIVkdSVEF3ZkZ4Y2RUSXlOamxjWEhWR1JUQXdmRnhjZFRJeU5rRmNYSFV3TXpNNGZGeGNkVEl5TmtGY1hIVXlNRVF5ZkZ4Y2RUSXlOa0pjWEhVd016TTRmRnhjZFRJeU5rSmNYSFV5TUVReWZGeGNkVEl5TjBaY1hIVXdNek00ZkZ4Y2RUSXlPREpjWEhVeU1FUXlmRnhjZFRJeU9ETmNYSFV5TUVReWZGeGNkVEl5T0VGY1hIVkdSVEF3ZkZ4Y2RUSXlPRUpjWEhWR1JUQXdmRnhjZFRJeU9FWmNYSFV3TXpNNGZGeGNkVEl5T1RCY1hIVXdNek00ZkZ4Y2RUSXlPVE5jWEhWR1JUQXdmRnhjZFRJeU9UUmNYSFZHUlRBd2ZGeGNkVEl5UWpSY1hIVXlNRVF5ZkZ4Y2RUSXlRalZjWEhVeU1FUXlmRnhjZFRJeVJEaGNYSFV3TXpNNGZGeGNkVEl5UkRsY1hIVXdNek00ZkZ4Y2RUSXlSRUZjWEhWR1JUQXdmRnhjZFRJeVJFSmNYSFZHUlRBd2ZGeGNkVEl5UmpWY1hIVXdNek00ZkZ4Y2RUSXlSamxjWEhVd016TTRmRnhjZFRJNU16TmNYSFV3TXpNNGZGeGNkVEk1UTBaY1hIVXdNek00ZkZ4Y2RUSTVSREJjWEhVd016TTRmRnhjZFRKQk5rUmNYSFV3TXpNNGZGeGNkVEpCTnpCY1hIVXdNek00ZkZ4Y2RUSkJOMFJjWEhVd016TTRmRnhjZFRKQk4wVmNYSFV3TXpNNGZGeGNkVEpCUVRGY1hIVXdNek00ZkZ4Y2RUSkJRVEpjWEhVd016TTRmRnhjZFRKQlFVTmNYSFZHUlRBd2ZGeGNkVEpCUVVSY1hIVkdSVEF3ZkZ4Y2RUSkJRVVpjWEhVd016TTRmRnhjZFRKQlFqQmNYSFV3TXpNNGZGeGNkVEpCUXpWY1hIVXdNek00ZkZ4Y2RUSkJRelpjWEhVd016TTRmRnhjZFRKQlEwSmNYSFZHUlRBd2ZGeGNkVEpCUTBOY1hIVkdSVEF3ZkZ4Y2RUSkJSa1JjWEhVeU1FVTFmRnRjWEhoQk1DMWNYSFV3TVRFelhGeDFNREV4TmkxY1hIVXdNVEl5WEZ4MU1ERXlOQzFjWEhVd01USkNYRngxTURFeVJTMWNYSFV3TVRSRVhGeDFNREUxTUMxY1hIVXdNVGRGWEZ4MU1ERTVNbHhjZFRBeFFqVmNYSFV3TVVZMVhGeDFNREl6TjF4Y2RUQXlRelpjWEhVd01rTTNYRngxTURKRU9DMWNYSFV3TWtSRVhGeDFNRE14TVZ4Y2RUQXpPVEV0WEZ4MU1ETkJNVnhjZFRBelFUTXRYRngxTUROQk9WeGNkVEF6UWpFdFhGeDFNRE5ET1Z4Y2RUQXpSREZjWEhVd00wUXlYRngxTURORU5WeGNkVEF6UkRaY1hIVXdNMFJEWEZ4MU1ETkVSRnhjZFRBelJqQmNYSFV3TTBZeFhGeDFNRE5HTlZ4Y2RUQXpSalpjWEhVd05EQXhMVnhjZFRBME1FTmNYSFV3TkRCRkxWeGNkVEEwTkVaY1hIVXdORFV4TFZ4Y2RUQTBOVU5jWEhVd05EVkZYRngxTURRMVJseGNkVEl3TURJdFhGeDFNakF3TlZ4Y2RUSXdNRGN0WEZ4MU1qQXhNRnhjZFRJd01UTXRYRngxTWpBeE5seGNkVEl3TVRndFhGeDFNakF4UVZ4Y2RUSXdNVU10WEZ4MU1qQXhSVnhjZFRJd01qQXRYRngxTWpBeU1seGNkVEl3TWpWY1hIVXlNREkyWEZ4MU1qQXpNQzFjWEhVeU1ETTFYRngxTWpBek9WeGNkVEl3TTBGY1hIVXlNRE5GWEZ4MU1qQTBNVnhjZFRJd05ETmNYSFV5TURRMFhGeDFNakEwUmx4Y2RUSXdOVGRjWEhVeU1EVkdMVnhjZFRJd05qTmNYSFV5TUVGRFhGeDFNakJFUWx4Y2RUSXdSRU5jWEhVeU1UQXlYRngxTWpFd05WeGNkVEl4TUVFdFhGeDFNakV4TTF4Y2RUSXhNVFV0WEZ4MU1qRXhSVnhjZFRJeE1qSmNYSFV5TVRJMFhGeDFNakV5TnkxY1hIVXlNVEk1WEZ4MU1qRXlRMXhjZFRJeE1rUmNYSFV5TVRKR0xWeGNkVEl4TXpGY1hIVXlNVE16TFZ4Y2RUSXhNemhjWEhVeU1UUTFMVnhjZFRJeE5EaGNYSFV5TVRVekxWeGNkVEl4TlVWY1hIVXlNVGt3TFZ4Y2RUSXhPVUpjWEhVeU1UbEVMVnhjZFRJeFFUZGNYSFV5TVVFNUxWeGNkVEl4UVVWY1hIVXlNVUl3TFZ4Y2RUSXhRak5jWEhVeU1VSTFMVnhjZFRJeFFqZGNYSFV5TVVKQkxWeGNkVEl4UkVKY1hIVXlNVVJFWEZ4MU1qRkZORnhjZFRJeFJUVmNYSFV5TVVZMVhGeDFNakZHUkMxY1hIVXlNakExWEZ4MU1qSXdOeTFjWEhVeU1qQTVYRngxTWpJd1FseGNkVEl5TUVOY1hIVXlNakJHTFZ4Y2RUSXlNVFJjWEhVeU1qRTJMVnhjZFRJeU1UaGNYSFV5TWpGQlhGeDFNakl4UkMxY1hIVXlNak00WEZ4MU1qSXpRUzFjWEhVeU1qVTNYRngxTWpJMU9WeGNkVEl5TlVGY1hIVXlNalZEWEZ4MU1qSTFSaTFjWEhVeU1qWXlYRngxTWpJMk5DMWNYSFV5TWpoQ1hGeDFNakk0UkMxY1hIVXlNamxDWEZ4MU1qSTVSQzFjWEhVeU1rRTFYRngxTWpKQk55MWNYSFV5TWtJd1hGeDFNakpDTWkxY1hIVXlNa0pDWEZ4MU1qSkNSQzFjWEhVeU1rUkNYRngxTWpKRVJTMWNYSFV5TWtVelhGeDFNakpGTmkxY1hIVXlNa1kzWEZ4MU1qSkdPUzFjWEhVeU1rWkZYRngxTWpNd05WeGNkVEl6TURaY1hIVXlNekE0TFZ4Y2RUSXpNVEJjWEhVeU16RXlYRngxTWpNeE0xeGNkVEl6TVRWY1hIVXlNekUyWEZ4MU1qTXhReTFjWEhVeU16RkdYRngxTWpNeU1seGNkVEl6TWpOY1hIVXlNekpFWEZ4MU1qTXlSVnhjZFRJek16WmNYSFV5TXpORVhGeDFNak16Umx4Y2RUSXpOME5jWEhVeU0wSXdYRngxTWpOQ01WeGNkVEl6UWpRdFhGeDFNak5DTmx4Y2RUSXpSRU10WEZ4MU1qTkVSbHhjZFRJelJUSmNYSFV5TTBVM1hGeDFNalF5TTF4Y2RUSTBRemhjWEhVeU5UQXdYRngxTWpVd01seGNkVEkxTUVOY1hIVXlOVEV3WEZ4MU1qVXhORnhjZFRJMU1UaGNYSFV5TlRGRFhGeDFNalV5TkZ4Y2RUSTFNa05jWEhVeU5UTTBYRngxTWpVelExeGNkVEkxTlRBdFhGeDFNalUyUTF4Y2RUSTFPREJjWEhVeU5UZzBYRngxTWpVNE9GeGNkVEkxT1RFdFhGeDFNalU1TTF4Y2RUSTFRVEZjWEhVeU5VRkJYRngxTWpWQlFseGNkVEkxUVVSY1hIVXlOVUZGWEZ4MU1qVkNNVnhjZFRJMVFqTXRYRngxTWpWQ05WeGNkVEkxUWpoY1hIVXlOVUk1WEZ4MU1qVkNSQzFjWEhVeU5VSkdYRngxTWpWRE1seGNkVEkxUXpOY1hIVXlOVU5CWEZ4MU1qVkRRbHhjZFRJMVJVTmNYSFV5TlVWR1hGeDFNalZHT0MxY1hIVXlOVVpEWEZ4MU1qWXdOVnhjZFRJMk1EWmNYSFV5TmpCRlhGeDFNalkwTUZ4Y2RUSTJOREpjWEhVeU5qWXdYRngxTWpZMk0xeGNkVEkyTmpWY1hIVXlOalkyWEZ4MU1qWTJRVnhjZFRJMk5rUXRYRngxTWpZMlJseGNkVEkzTVROY1hIVXlOekUzWEZ4MU1qY3lNRnhjZFRJM016WmNYSFV5TnpVNFhGeDFNamMzTWx4Y2RUSTNOek5jWEhVeU4wTTRYRngxTWpkRE9WeGNkVEkzUlRZdFhGeDFNamRGUkZ4Y2RUSTNSalV0WEZ4MU1qZEdRVnhjZFRJM1JrTmNYSFV5TjBaR1hGeDFNamt3TWkxY1hIVXlPVEExWEZ4MU1qa3dReTFjWEhVeU9URXpYRngxTWpreE5seGNkVEk1TVRrdFhGeDFNamt5TUZ4Y2RUSTVNak10WEZ4MU1qa3lRVnhjZFRJNU16TmNYSFV5T1RNMUxWeGNkVEk1TXpsY1hIVXlPVE5EWEZ4MU1qa3pSRnhjZFRJNU5EVmNYSFV5T1RRNExWeGNkVEk1TkVKY1hIVXlPVFJGTFZ4Y2RUSTVOelpjWEhVeU9UYzRYRngxTWprM09WeGNkVEk1TjBJdFhGeDFNamszUmx4Y2RUSTVPRFZjWEhVeU9UZzJYRngxTWprNFFpMWNYSFV5T1RrMlhGeDFNams1UVZ4Y2RUSTVPVU5jWEhVeU9UbEVYRngxTWpsQk5DMWNYSFV5T1VJM1hGeDFNamxDT1Z4Y2RUSTVRa0pjWEhVeU9VSkRYRngxTWpsQ1JTMWNYSFV5T1VNMVhGeDFNamxET1Z4Y2RUSTVRMFF0WEZ4MU1qbEVNRnhjZFRJNVJFTXRYRngxTWpsRVJWeGNkVEk1UlRNdFhGeDFNamxGTlZ4Y2RUSTVSVUpjWEhVeU9VWTBYRngxTWpsR05seGNkVEpCTURBdFhGeDFNa0V3TWx4Y2RUSkJNRFJjWEhVeVFUQTJYRngxTWtFd1ExeGNkVEpCTUVSY1hIVXlRVEV3TFZ4Y2RUSkJNVGRjWEhVeVFUSXlMVnhjZFRKQk1qZGNYSFV5UVRJNVhGeDFNa0V5UVZ4Y2RUSkJNa1F0WEZ4MU1rRXpNVnhjZFRKQk16TXRYRngxTWtFelExeGNkVEpCTTBaY1hIVXlRVFF3WEZ4MU1rRTBNaTFjWEhVeVFUUkVYRngxTWtFMU1GeGNkVEpCTlRNdFhGeDFNa0UxT0Z4Y2RUSkJOVUV0WEZ4MU1rRTFSRnhjZFRKQk5VWmNYSFV5UVRZMlhGeDFNa0UyUVZ4Y2RUSkJOa1F0WEZ4MU1rRTNOVnhjZFRKQk56Y3RYRngxTWtFNVFWeGNkVEpCT1VRdFhGeDFNa0ZCTWx4Y2RUSkJRVFF0WEZ4MU1rRkNNRnhjZFRKQlFqTXRYRngxTWtGRE9GeGNkVEpCUTBKY1hIVXlRVU5EWEZ4MU1rRkRSaTFjWEhVeVFVUkNYRngxTWtGRk5GeGNkVEpCUlRZdFhGeDFNa0ZGT1Z4Y2RUSkJSVUl0WEZ4MU1rRkdNMXhjZFRKQlJrUmNYSFZHUWpBd0xWeGNkVVpDTURSZGZGeGNkVVE0TXpWYlhGeDFSRU01UTF4Y2RVUkRPVVZjWEhWRVF6bEdYRngxUkVOQk1seGNkVVJEUVRWY1hIVkVRMEUyWEZ4MVJFTkJPUzFjWEhWRVEwRkRYRngxUkVOQlJTMWNYSFZFUTBJNVhGeDFSRU5DUWx4Y2RVUkRRa1F0WEZ4MVJFTkRNMXhjZFVSRFF6VXRYRngxUkVORFJseGNkVVJFTURSY1hIVkVSREExWEZ4MVJFUXdOeTFjWEhWRVJEQkJYRngxUkVRd1JDMWNYSFZFUkRFMFhGeDFSRVF4TmkxY1hIVkVSREZEWEZ4MVJFUXhSUzFjWEhWRVJETTVYRngxUkVRelFpMWNYSFZFUkRORlhGeDFSRVEwTUMxY1hIVkVSRFEwWEZ4MVJFUTBObHhjZFVSRU5FRXRYRngxUkVRMU1GeGNkVVJFTlRJdFhGeDFSRVEyUWwwdlp6dGNibHgwZG1GeUlHVnVZMjlrWlUxaGNDQTlJSHNuWEZ4NFF6RW5PaWRCWVdOMWRHVW5MQ2RjWEhoRk1TYzZKMkZoWTNWMFpTY3NKMXhjZFRBeE1ESW5PaWRCWW5KbGRtVW5MQ2RjWEhVd01UQXpKem9uWVdKeVpYWmxKeXduWEZ4MU1qSXpSU2M2SjJGakp5d25YRngxTWpJelJpYzZKMkZqWkNjc0oxeGNkVEl5TTBWY1hIVXdNek16SnpvbllXTkZKeXduWEZ4NFF6SW5PaWRCWTJseVl5Y3NKMXhjZUVVeUp6b25ZV05wY21NbkxDZGNYSGhDTkNjNkoyRmpkWFJsSnl3blhGeDFNRFF4TUNjNkowRmplU2NzSjF4Y2RUQTBNekFuT2lkaFkza25MQ2RjWEhoRE5pYzZKMEZGYkdsbkp5d25YRng0UlRZbk9pZGhaV3hwWnljc0oxeGNkVEl3TmpFbk9pZGhaaWNzSjF4Y2RVUTRNelZjWEhWRVJEQTBKem9uUVdaeUp5d25YRngxUkRnek5WeGNkVVJFTVVVbk9pZGhabkluTENkY1hIaERNQ2M2SjBGbmNtRjJaU2NzSjF4Y2VFVXdKem9uWVdkeVlYWmxKeXduWEZ4MU1qRXpOU2M2SjJGc1pYQm9KeXduWEZ4MU1ETTVNU2M2SjBGc2NHaGhKeXduWEZ4MU1ETkNNU2M2SjJGc2NHaGhKeXduWEZ4MU1ERXdNQ2M2SjBGdFlXTnlKeXduWEZ4MU1ERXdNU2M2SjJGdFlXTnlKeXduWEZ4MU1rRXpSaWM2SjJGdFlXeG5KeXduSmljNkoyRnRjQ2NzSjF4Y2RUSkJOVFVuT2lkaGJtUmhibVFuTENkY1hIVXlRVFV6SnpvblFXNWtKeXduWEZ4MU1qSXlOeWM2SjJGdVpDY3NKMXhjZFRKQk5VTW5PaWRoYm1Sa0p5d25YRngxTWtFMU9DYzZKMkZ1WkhOc2IzQmxKeXduWEZ4MU1rRTFRU2M2SjJGdVpIWW5MQ2RjWEhVeU1qSXdKem9uWVc1bkp5d25YRngxTWpsQk5DYzZKMkZ1WjJVbkxDZGNYSFV5T1VFNEp6b25ZVzVuYlhOa1lXRW5MQ2RjWEhVeU9VRTVKem9uWVc1bmJYTmtZV0luTENkY1hIVXlPVUZCSnpvbllXNW5iWE5rWVdNbkxDZGNYSFV5T1VGQ0p6b25ZVzVuYlhOa1lXUW5MQ2RjWEhVeU9VRkRKem9uWVc1bmJYTmtZV1VuTENkY1hIVXlPVUZFSnpvbllXNW5iWE5rWVdZbkxDZGNYSFV5T1VGRkp6b25ZVzVuYlhOa1lXY25MQ2RjWEhVeU9VRkdKem9uWVc1bmJYTmtZV2duTENkY1hIVXlNakl4SnpvbllXNW5iWE5rSnl3blhGeDFNakl4UmljNkoyRnVaM0owSnl3blhGeDFNakpDUlNjNkoyRnVaM0owZG1JbkxDZGNYSFV5T1RsRUp6b25ZVzVuY25SMlltUW5MQ2RjWEhVeU1qSXlKem9uWVc1bmMzQm9KeXduWEZ4NFF6VW5PaWRoYm1kemRDY3NKMXhjZFRJek4wTW5PaWRoYm1kNllYSnlKeXduWEZ4MU1ERXdOQ2M2SjBGdloyOXVKeXduWEZ4MU1ERXdOU2M2SjJGdloyOXVKeXduWEZ4MVJEZ3pOVnhjZFVSRU16Z25PaWRCYjNCbUp5d25YRngxUkRnek5WeGNkVVJFTlRJbk9pZGhiM0JtSnl3blhGeDFNa0UyUmljNkoyRndZV05wY2ljc0oxeGNkVEl5TkRnbk9pZGhjQ2NzSjF4Y2RUSkJOekFuT2lkaGNFVW5MQ2RjWEhVeU1qUkJKem9uWVhCbEp5d25YRngxTWpJMFFpYzZKMkZ3YVdRbkxDZGNYQ2NuT2lkaGNHOXpKeXduWEZ4NFJUVW5PaWRoY21sdVp5Y3NKMXhjZFVRNE16VmNYSFZFUXpsREp6b25RWE5qY2ljc0oxeGNkVVE0TXpWY1hIVkVRMEkySnpvbllYTmpjaWNzSjF4Y2RUSXlOVFFuT2lkamIyeHZibVVuTENjcUp6b25ZWE4wSnl3blhGeDFNakkwUkNjNkowTjFjRU5oY0Njc0oxeGNlRU16SnpvblFYUnBiR1JsSnl3blhGeDRSVE1uT2lkaGRHbHNaR1VuTENkY1hIaEROQ2M2SjBGMWJXd25MQ2RjWEhoRk5DYzZKMkYxYld3bkxDZGNYSFV5TWpNekp6b25ZWGRqYjI1cGJuUW5MQ2RjWEhVeVFURXhKem9uWVhkcGJuUW5MQ2RjWEhVeU1qUkRKem9uWW1OdmJtY25MQ2RjWEhVd00wWTJKem9uWW1Wd2Mya25MQ2RjWEhVeU1ETTFKem9uWW5CeWFXMWxKeXduWEZ4MU1qSXpSQ2M2SjJKemFXMG5MQ2RjWEhVeU1rTkVKem9uWW5OcGJXVW5MQ2RjWEhVeU1qRTJKem9uYzJWMGJXNG5MQ2RjWEhVeVFVVTNKem9uUW1GeWRpY3NKMXhjZFRJeVFrUW5PaWRpWVhKMlpXVW5MQ2RjWEhVeU16QTFKem9uWW1GeWQyVmtKeXduWEZ4MU1qTXdOaWM2SjBKaGNuZGxaQ2NzSjF4Y2RUSXpRalVuT2lkaVluSnJKeXduWEZ4MU1qTkNOaWM2SjJKaWNtdDBZbkpySnl3blhGeDFNRFF4TVNjNkowSmplU2NzSjF4Y2RUQTBNekVuT2lkaVkza25MQ2RjWEhVeU1ERkZKem9uWW1SeGRXOG5MQ2RjWEhVeU1qTTFKem9uWW1WallYVnpKeXduWEZ4MU1qbENNQ2M2SjJKbGJYQjBlWFluTENkY1hIVXlNVEpESnpvblFuTmpjaWNzSjF4Y2RUQXpPVEluT2lkQ1pYUmhKeXduWEZ4MU1ETkNNaWM2SjJKbGRHRW5MQ2RjWEhVeU1UTTJKem9uWW1WMGFDY3NKMXhjZFRJeU5rTW5PaWQwZDJsNGRDY3NKMXhjZFVRNE16VmNYSFZFUkRBMUp6b25RbVp5Snl3blhGeDFSRGd6TlZ4Y2RVUkVNVVluT2lkaVpuSW5MQ2RjWEhVeU1rTXlKem9uZUdOaGNDY3NKMXhjZFRJMVJVWW5PaWQ0WTJseVl5Y3NKMXhjZFRJeVF6TW5PaWQ0WTNWd0p5d25YRngxTWtFd01DYzZKM2h2Wkc5MEp5d25YRngxTWtFd01TYzZKM2h2Y0d4MWN5Y3NKMXhjZFRKQk1ESW5PaWQ0YjNScGJXVW5MQ2RjWEhVeVFUQTJKem9uZUhOeFkzVndKeXduWEZ4MU1qWXdOU2M2SjNOMFlYSm1KeXduWEZ4MU1qVkNSQ2M2SjNoa2RISnBKeXduWEZ4MU1qVkNNeWM2SjNoMWRISnBKeXduWEZ4MU1rRXdOQ2M2SjNoMWNHeDFjeWNzSjF4Y2RUSXlRekVuT2lkV1pXVW5MQ2RjWEhVeU1rTXdKem9uVjJWa1oyVW5MQ2RjWEhVeU9UQkVKem9uY21KaGNuSW5MQ2RjWEhVeU9VVkNKem9uYkc5NlppY3NKMXhjZFRJMVFVRW5PaWR6Y1hWbUp5d25YRngxTWpWQ05DYzZKM1YwY21sbUp5d25YRngxTWpWQ1JTYzZKMlIwY21sbUp5d25YRngxTWpWRE1pYzZKMngwY21sbUp5d25YRngxTWpWQ09DYzZKM0owY21sbUp5d25YRngxTWpReU15YzZKMkpzWVc1ckp5d25YRngxTWpVNU1pYzZKMkpzYXpFeUp5d25YRngxTWpVNU1TYzZKMkpzYXpFMEp5d25YRngxTWpVNU15YzZKMkpzYXpNMEp5d25YRngxTWpVNE9DYzZKMkpzYjJOckp5d25QVnhjZFRJd1JUVW5PaWRpYm1VbkxDZGNYSFV5TWpZeFhGeDFNakJGTlNjNkoySnVaWEYxYVhZbkxDZGNYSFV5UVVWRUp6b25ZazV2ZENjc0oxeGNkVEl6TVRBbk9pZGlibTkwSnl3blhGeDFSRGd6TlZ4Y2RVUkVNemtuT2lkQ2IzQm1KeXduWEZ4MVJEZ3pOVnhjZFVSRU5UTW5PaWRpYjNCbUp5d25YRngxTWpKQk5TYzZKMkp2ZENjc0oxeGNkVEl5UXpnbk9pZGliM2QwYVdVbkxDZGNYSFV5T1VNNUp6b25ZbTk0WW05NEp5d25YRngxTWpVeE1DYzZKMkp2ZUdSc0p5d25YRngxTWpVMU5TYzZKMkp2ZUdSTUp5d25YRngxTWpVMU5pYzZKMkp2ZUVSc0p5d25YRngxTWpVMU55YzZKMkp2ZUVSTUp5d25YRngxTWpVd1F5YzZKMkp2ZUdSeUp5d25YRngxTWpVMU1pYzZKMkp2ZUdSU0p5d25YRngxTWpVMU15YzZKMkp2ZUVSeUp5d25YRngxTWpVMU5DYzZKMkp2ZUVSU0p5d25YRngxTWpVd01DYzZKMkp2ZUdnbkxDZGNYSFV5TlRVd0p6b25ZbTk0U0Njc0oxeGNkVEkxTWtNbk9pZGliM2hvWkNjc0oxeGNkVEkxTmpRbk9pZGliM2hJWkNjc0oxeGNkVEkxTmpVbk9pZGliM2hvUkNjc0oxeGNkVEkxTmpZbk9pZGliM2hJUkNjc0oxeGNkVEkxTXpRbk9pZGliM2hvZFNjc0oxeGNkVEkxTmpjbk9pZGliM2hJZFNjc0oxeGNkVEkxTmpnbk9pZGliM2hvVlNjc0oxeGNkVEkxTmprbk9pZGliM2hJVlNjc0oxeGNkVEl5T1VZbk9pZHRhVzUxYzJJbkxDZGNYSFV5TWpsRkp6b25jR3gxYzJJbkxDZGNYSFV5TWtFd0p6b25kR2x0WlhOaUp5d25YRngxTWpVeE9DYzZKMkp2ZUhWc0p5d25YRngxTWpVMVFpYzZKMkp2ZUhWTUp5d25YRngxTWpVMVF5YzZKMkp2ZUZWc0p5d25YRngxTWpVMVJDYzZKMkp2ZUZWTUp5d25YRngxTWpVeE5DYzZKMkp2ZUhWeUp5d25YRngxTWpVMU9DYzZKMkp2ZUhWU0p5d25YRngxTWpVMU9TYzZKMkp2ZUZWeUp5d25YRngxTWpVMVFTYzZKMkp2ZUZWU0p5d25YRngxTWpVd01pYzZKMkp2ZUhZbkxDZGNYSFV5TlRVeEp6b25ZbTk0Vmljc0oxeGNkVEkxTTBNbk9pZGliM2gyYUNjc0oxeGNkVEkxTmtFbk9pZGliM2gyU0Njc0oxeGNkVEkxTmtJbk9pZGliM2hXYUNjc0oxeGNkVEkxTmtNbk9pZGliM2hXU0Njc0oxeGNkVEkxTWpRbk9pZGliM2gyYkNjc0oxeGNkVEkxTmpFbk9pZGliM2gyVENjc0oxeGNkVEkxTmpJbk9pZGliM2hXYkNjc0oxeGNkVEkxTmpNbk9pZGliM2hXVENjc0oxeGNkVEkxTVVNbk9pZGliM2gyY2ljc0oxeGNkVEkxTlVVbk9pZGliM2gyVWljc0oxeGNkVEkxTlVZbk9pZGliM2hXY2ljc0oxeGNkVEkxTmpBbk9pZGliM2hXVWljc0oxeGNkVEF5UkRnbk9pZGljbVYyWlNjc0oxeGNlRUUySnpvblluSjJZbUZ5Snl3blhGeDFSRGd6TlZ4Y2RVUkRRamNuT2lkaWMyTnlKeXduWEZ4MU1qQTBSaWM2SjJKelpXMXBKeXduWEZ4MU1qbEROU2M2SjJKemIyeGlKeXduWEZ4Y1hDYzZKMkp6YjJ3bkxDZGNYSFV5TjBNNEp6b25Zbk52YkdoemRXSW5MQ2RjWEhVeU1ESXlKem9uWW5Wc2JDY3NKMXhjZFRJeU5FVW5PaWRpZFcxd0p5d25YRngxTWtGQlJTYzZKMkoxYlhCRkp5d25YRngxTWpJMFJpYzZKMkoxYlhCbEp5d25YRngxTURFd05pYzZKME5oWTNWMFpTY3NKMXhjZFRBeE1EY25PaWRqWVdOMWRHVW5MQ2RjWEhVeVFUUTBKem9uWTJGd1lXNWtKeXduWEZ4MU1rRTBPU2M2SjJOaGNHSnlZM1Z3Snl3blhGeDFNa0UwUWljNkoyTmhjR05oY0Njc0oxeGNkVEl5TWprbk9pZGpZWEFuTENkY1hIVXlNa1F5SnpvblEyRndKeXduWEZ4MU1rRTBOeWM2SjJOaGNHTjFjQ2NzSjF4Y2RUSkJOREFuT2lkallYQmtiM1FuTENkY1hIVXlNVFExSnpvblJFUW5MQ2RjWEhVeU1qSTVYRngxUmtVd01DYzZKMk5oY0hNbkxDZGNYSFV5TURReEp6b25ZMkZ5WlhRbkxDZGNYSFV3TWtNM0p6b25ZMkZ5YjI0bkxDZGNYSFV5TVRKRUp6b25RMlp5Snl3blhGeDFNa0UwUkNjNkoyTmpZWEJ6Snl3blhGeDFNREV3UXljNkowTmpZWEp2Ymljc0oxeGNkVEF4TUVRbk9pZGpZMkZ5YjI0bkxDZGNYSGhETnljNkowTmpaV1JwYkNjc0oxeGNlRVUzSnpvblkyTmxaR2xzSnl3blhGeDFNREV3T0NjNkowTmphWEpqSnl3blhGeDFNREV3T1NjNkoyTmphWEpqSnl3blhGeDFNakl6TUNjNkowTmpiMjVwYm5RbkxDZGNYSFV5UVRSREp6b25ZMk4xY0hNbkxDZGNYSFV5UVRVd0p6b25ZMk4xY0hOemJTY3NKMXhjZFRBeE1FRW5PaWREWkc5MEp5d25YRngxTURFd1FpYzZKMk5rYjNRbkxDZGNYSGhDT0NjNkoyTmxaR2xzSnl3blhGeDFNamxDTWljNkoyTmxiWEIwZVhZbkxDZGNYSGhCTWljNkoyTmxiblFuTENkY1hIaENOeWM2SjIxcFpHUnZkQ2NzSjF4Y2RVUTRNelZjWEhWRVJESXdKem9uWTJaeUp5d25YRngxTURReU55YzZKME5JWTNrbkxDZGNYSFV3TkRRM0p6b25ZMmhqZVNjc0oxeGNkVEkzTVRNbk9pZGphR1ZqYXljc0oxeGNkVEF6UVRjbk9pZERhR2tuTENkY1hIVXdNME0zSnpvblkyaHBKeXduWEZ4MU1ESkROaWM2SjJOcGNtTW5MQ2RjWEhVeU1qVTNKem9uWTJseVpTY3NKMXhjZFRJeFFrRW5PaWR2YkdGeWNpY3NKMXhjZFRJeFFrSW5PaWR2Y21GeWNpY3NKMXhjZFRJeU9VSW5PaWR2WVhOMEp5d25YRngxTWpJNVFTYzZKMjlqYVhJbkxDZGNYSFV5TWpsRUp6b25iMlJoYzJnbkxDZGNYSFV5TWprNUp6b25iMlJ2ZENjc0oxeGNlRUZGSnpvbmNtVm5KeXduWEZ4MU1qUkRPQ2M2SjI5VEp5d25YRngxTWpJNU5pYzZKMjl0YVc1MWN5Y3NKMXhjZFRJeU9UVW5PaWR2Y0d4MWN5Y3NKMXhjZFRJeU9UY25PaWR2ZEdsdFpYTW5MQ2RjWEhVeU5VTkNKem9uWTJseUp5d25YRngxTWpsRE15YzZKMk5wY2tVbkxDZGNYSFV5UVRFd0p6b25ZMmx5Wm01cGJuUW5MQ2RjWEhVeVFVVkdKem9uWTJseWJXbGtKeXduWEZ4MU1qbERNaWM2SjJOcGNuTmphWEluTENkY1hIVXlNak15SnpvblkzZGpiMjVwYm5RbkxDZGNYSFV5TURGRUp6b25jbVJ4ZFc4bkxDZGNYSFV5TURFNUp6b25jbk54ZFc4bkxDZGNYSFV5TmpZekp6b25ZMngxWW5NbkxDYzZKem9uWTI5c2IyNG5MQ2RjWEhVeU1qTTNKem9uUTI5c2IyNG5MQ2RjWEhVeVFUYzBKem9uUTI5c2IyNWxKeXduTENjNkoyTnZiVzFoSnl3blFDYzZKMk52YlcxaGRDY3NKMXhjZFRJeU1ERW5PaWRqYjIxd0p5d25YRngxTWpJeE9DYzZKMk52YlhCbWJpY3NKMXhjZFRJeE1ESW5PaWREYjNCbUp5d25YRngxTWpJME5TYzZKMk52Ym1jbkxDZGNYSFV5UVRaRUp6b25ZMjl1WjJSdmRDY3NKMXhjZFRJeU5qRW5PaWRsY1hWcGRpY3NKMXhjZFRJeU1rVW5PaWR2YVc1MEp5d25YRngxTWpJeVJpYzZKME52Ym1sdWRDY3NKMXhjZFVRNE16VmNYSFZFUkRVMEp6b25ZMjl3Wmljc0oxeGNkVEl5TVRBbk9pZGpiM0J5YjJRbkxDZGNYSGhCT1NjNkoyTnZjSGtuTENkY1hIVXlNVEUzSnpvblkyOXdlWE55Snl3blhGeDFNakZDTlNjNkoyTnlZWEp5Snl3blhGeDFNamN4TnljNkoyTnliM056Snl3blhGeDFNa0V5UmljNkowTnliM056Snl3blhGeDFSRGd6TlZ4Y2RVUkRPVVVuT2lkRGMyTnlKeXduWEZ4MVJEZ3pOVnhjZFVSRFFqZ25PaWRqYzJOeUp5d25YRngxTWtGRFJpYzZKMk56ZFdJbkxDZGNYSFV5UVVReEp6b25ZM04xWW1VbkxDZGNYSFV5UVVRd0p6b25ZM04xY0Njc0oxeGNkVEpCUkRJbk9pZGpjM1Z3WlNjc0oxeGNkVEl5UlVZbk9pZGpkR1J2ZENjc0oxeGNkVEk1TXpnbk9pZGpkV1JoY25Kc0p5d25YRngxTWprek5TYzZKMk4xWkdGeWNuSW5MQ2RjWEhVeU1rUkZKem9uWTNWbGNISW5MQ2RjWEhVeU1rUkdKem9uWTNWbGMyTW5MQ2RjWEhVeU1VSTJKem9uWTNWc1lYSnlKeXduWEZ4MU1qa3pSQ2M2SjJOMWJHRnljbkFuTENkY1hIVXlRVFE0SnpvblkzVndZbkpqWVhBbkxDZGNYSFV5UVRRMkp6b25ZM1Z3WTJGd0p5d25YRngxTWpJeVFTYzZKMk4xY0Njc0oxeGNkVEl5UkRNbk9pZERkWEFuTENkY1hIVXlRVFJCSnpvblkzVndZM1Z3Snl3blhGeDFNakk0UkNjNkoyTjFjR1J2ZENjc0oxeGNkVEpCTkRVbk9pZGpkWEJ2Y2ljc0oxeGNkVEl5TWtGY1hIVkdSVEF3SnpvblkzVndjeWNzSjF4Y2RUSXhRamNuT2lkamRYSmhjbkluTENkY1hIVXlPVE5ESnpvblkzVnlZWEp5YlNjc0oxeGNkVEl5UTBVbk9pZGpkWFpsWlNjc0oxeGNkVEl5UTBZbk9pZGpkWGRsWkNjc0oxeGNlRUUwSnpvblkzVnljbVZ1Snl3blhGeDFNakl6TVNjNkoyTjNhVzUwSnl3blhGeDFNak15UkNjNkoyTjViR04wZVNjc0oxeGNkVEl3TWpBbk9pZGtZV2RuWlhJbkxDZGNYSFV5TURJeEp6b25SR0ZuWjJWeUp5d25YRngxTWpFek9DYzZKMlJoYkdWMGFDY3NKMXhjZFRJeE9UTW5PaWRrWVhKeUp5d25YRngxTWpGQk1TYzZKMFJoY25JbkxDZGNYSFV5TVVRekp6b25aRUZ5Y2ljc0oxeGNkVEl3TVRBbk9pZGtZWE5vSnl3blhGeDFNa0ZGTkNjNkowUmhjMmgySnl3blhGeDFNakpCTXljNkoyUmhjMmgySnl3blhGeDFNamt3UmljNkozSkNZWEp5Snl3blhGeDFNREpFUkNjNkoyUmliR0ZqSnl3blhGeDFNREV3UlNjNkowUmpZWEp2Ymljc0oxeGNkVEF4TUVZbk9pZGtZMkZ5YjI0bkxDZGNYSFV3TkRFMEp6b25SR041Snl3blhGeDFNRFF6TkNjNkoyUmplU2NzSjF4Y2RUSXhRMEVuT2lka1pHRnljaWNzSjF4Y2RUSXhORFluT2lka1pDY3NKMXhjZFRJNU1URW5PaWRFUkc5MGNtRm9aQ2NzSjF4Y2RUSkJOemNuT2lkbFJFUnZkQ2NzSjF4Y2VFSXdKem9uWkdWbkp5d25YRngxTWpJd055YzZKMFJsYkNjc0oxeGNkVEF6T1RRbk9pZEVaV3gwWVNjc0oxeGNkVEF6UWpRbk9pZGtaV3gwWVNjc0oxeGNkVEk1UWpFbk9pZGtaVzF3ZEhsMkp5d25YRngxTWprM1JpYzZKMlJtYVhOb2RDY3NKMXhjZFVRNE16VmNYSFZFUkRBM0p6b25SR1p5Snl3blhGeDFSRGd6TlZ4Y2RVUkVNakVuT2lka1puSW5MQ2RjWEhVeU9UWTFKem9uWkVoaGNpY3NKMXhjZFRJeFF6TW5PaWRrYUdGeWJDY3NKMXhjZFRJeFF6SW5PaWRrYUdGeWNpY3NKMXhjZFRBeVJEa25PaWRrYjNRbkxDZGdKem9uWjNKaGRtVW5MQ2RjWEhVd01rUkRKem9uZEdsc1pHVW5MQ2RjWEhVeU1rTTBKem9uWkdsaGJTY3NKMXhjZFRJMk5qWW5PaWRrYVdGdGN5Y3NKMXhjZUVFNEp6b25aR2xsSnl3blhGeDFNRE5FUkNjNkoyZGhiVzFoWkNjc0oxeGNkVEl5UmpJbk9pZGthWE5wYmljc0oxeGNlRVkzSnpvblpHbDJKeXduWEZ4MU1qSkROeWM2SjJScGRtOXVlQ2NzSjF4Y2RUQTBNREluT2lkRVNtTjVKeXduWEZ4MU1EUTFNaWM2SjJScVkza25MQ2RjWEhVeU16RkZKem9uWkd4amIzSnVKeXduWEZ4MU1qTXdSQ2M2SjJSc1kzSnZjQ2NzSnlRbk9pZGtiMnhzWVhJbkxDZGNYSFZFT0RNMVhGeDFSRVF6UWljNkowUnZjR1luTENkY1hIVkVPRE0xWEZ4MVJFUTFOU2M2SjJSdmNHWW5MQ2RjWEhVeU1FUkRKem9uUkc5MFJHOTBKeXduWEZ4MU1qSTFNQ2M2SjJSdmRHVnhKeXduWEZ4MU1qSTFNU2M2SjJWRWIzUW5MQ2RjWEhVeU1qTTRKem9uYldsdWRYTmtKeXduWEZ4MU1qSXhOQ2M2SjNCc2RYTmtieWNzSjF4Y2RUSXlRVEVuT2lkelpHOTBZaWNzSjF4Y2RUSXhSREFuT2lkc1FYSnlKeXduWEZ4MU1qRkVOQ2M2SjJsbVppY3NKMXhjZFRJM1JqZ25PaWQ0YkVGeWNpY3NKMXhjZFRJM1JrRW5PaWQ0YUVGeWNpY3NKMXhjZFRJM1Jqa25PaWQ0Y2tGeWNpY3NKMXhjZFRJeFJESW5PaWR5UVhKeUp5d25YRngxTWpKQk9DYzZKM1pFWVhOb0p5d25YRngxTWpGRU1TYzZKM1ZCY25JbkxDZGNYSFV5TVVRMUp6b25ka0Z5Y2ljc0oxeGNkVEl5TWpVbk9pZHdZWEluTENkY1hIVXlPVEV6SnpvblJHOTNia0Z5Y205M1FtRnlKeXduWEZ4MU1qRkdOU2M2SjJSMVlYSnlKeXduWEZ4MU1ETXhNU2M2SjBSdmQyNUNjbVYyWlNjc0oxeGNkVEk1TlRBbk9pZEViM2R1VEdWbWRGSnBaMmgwVm1WamRHOXlKeXduWEZ4MU1qazFSU2M2SjBSdmQyNU1aV1owVkdWbFZtVmpkRzl5Snl3blhGeDFNamsxTmljNkowUnZkMjVNWldaMFZtVmpkRzl5UW1GeUp5d25YRngxTWpGQ1JDYzZKMnhvWVhKa0p5d25YRngxTWprMVJpYzZKMFJ2ZDI1U2FXZG9kRlJsWlZabFkzUnZjaWNzSjF4Y2RUSTVOVGNuT2lkRWIzZHVVbWxuYUhSV1pXTjBiM0pDWVhJbkxDZGNYSFV5TVVNeEp6b25jbWhoY21RbkxDZGNYSFV5TVVFM0p6b25iV0Z3YzNSdlpHOTNiaWNzSjF4Y2RUSXlRVFFuT2lkMGIzQW5MQ2RjWEhVeU9URXdKem9uVWtKaGNuSW5MQ2RjWEhVeU16RkdKem9uWkhKamIzSnVKeXduWEZ4MU1qTXdReWM2SjJSeVkzSnZjQ2NzSjF4Y2RVUTRNelZjWEhWRVF6bEdKem9uUkhOamNpY3NKMXhjZFVRNE16VmNYSFZFUTBJNUp6b25aSE5qY2ljc0oxeGNkVEEwTURVbk9pZEVVMk41Snl3blhGeDFNRFExTlNjNkoyUnpZM2tuTENkY1hIVXlPVVkySnpvblpITnZiQ2NzSjF4Y2RUQXhNVEFuT2lkRWMzUnliMnNuTENkY1hIVXdNVEV4SnpvblpITjBjbTlySnl3blhGeDFNakpHTVNjNkoyUjBaRzkwSnl3blhGeDFNalZDUmljNkoyUjBjbWtuTENkY1hIVXlPVFpHSnpvblpIVm9ZWEluTENkY1hIVXlPVUUySnpvblpIZGhibWRzWlNjc0oxeGNkVEEwTUVZbk9pZEVXbU41Snl3blhGeDFNRFExUmljNkoyUjZZM2tuTENkY1hIVXlOMFpHSnpvblpIcHBaM0poY25JbkxDZGNYSGhET1NjNkowVmhZM1YwWlNjc0oxeGNlRVU1SnpvblpXRmpkWFJsSnl3blhGeDFNa0UyUlNjNkoyVmhjM1JsY2ljc0oxeGNkVEF4TVVFbk9pZEZZMkZ5YjI0bkxDZGNYSFV3TVRGQ0p6b25aV05oY205dUp5d25YRng0UTBFbk9pZEZZMmx5WXljc0oxeGNlRVZCSnpvblpXTnBjbU1uTENkY1hIVXlNalUySnpvblpXTnBjaWNzSjF4Y2RUSXlOVFVuT2lkbFkyOXNiMjRuTENkY1hIVXdOREpFSnpvblJXTjVKeXduWEZ4MU1EUTBSQ2M2SjJWamVTY3NKMXhjZFRBeE1UWW5PaWRGWkc5MEp5d25YRngxTURFeE55YzZKMlZrYjNRbkxDZGNYSFV5TVRRM0p6b25aV1VuTENkY1hIVXlNalV5SnpvblpXWkViM1FuTENkY1hIVkVPRE0xWEZ4MVJFUXdPQ2M2SjBWbWNpY3NKMXhjZFVRNE16VmNYSFZFUkRJeUp6b25aV1p5Snl3blhGeDFNa0U1UVNjNkoyVm5KeXduWEZ4NFF6Z25PaWRGWjNKaGRtVW5MQ2RjWEhoRk9DYzZKMlZuY21GMlpTY3NKMXhjZFRKQk9UWW5PaWRsWjNNbkxDZGNYSFV5UVRrNEp6b25aV2R6Wkc5MEp5d25YRngxTWtFNU9TYzZKMlZzSnl3blhGeDFNakl3T0NjNkoybHVKeXduWEZ4MU1qTkZOeWM2SjJWc2FXNTBaWEp6Snl3blhGeDFNakV4TXljNkoyVnNiQ2NzSjF4Y2RUSkJPVFVuT2lkbGJITW5MQ2RjWEhVeVFUazNKem9uWld4elpHOTBKeXduWEZ4MU1ERXhNaWM2SjBWdFlXTnlKeXduWEZ4MU1ERXhNeWM2SjJWdFlXTnlKeXduWEZ4MU1qSXdOU2M2SjJWdGNIUjVKeXduWEZ4MU1qVkdRaWM2SjBWdGNIUjVVMjFoYkd4VGNYVmhjbVVuTENkY1hIVXlOVUZDSnpvblJXMXdkSGxXWlhKNVUyMWhiR3hUY1hWaGNtVW5MQ2RjWEhVeU1EQTBKem9uWlcxemNERXpKeXduWEZ4MU1qQXdOU2M2SjJWdGMzQXhOQ2NzSjF4Y2RUSXdNRE1uT2lkbGJYTndKeXduWEZ4MU1ERTBRU2M2SjBWT1J5Y3NKMXhjZFRBeE5FSW5PaWRsYm1jbkxDZGNYSFV5TURBeUp6b25aVzV6Y0Njc0oxeGNkVEF4TVRnbk9pZEZiMmR2Ymljc0oxeGNkVEF4TVRrbk9pZGxiMmR2Ymljc0oxeGNkVVE0TXpWY1hIVkVSRE5ESnpvblJXOXdaaWNzSjF4Y2RVUTRNelZjWEhWRVJEVTJKem9uWlc5d1ppY3NKMXhjZFRJeVJEVW5PaWRsY0dGeUp5d25YRngxTWpsRk15YzZKMlZ3WVhKemJDY3NKMXhjZFRKQk56RW5PaWRsY0d4MWN5Y3NKMXhjZFRBelFqVW5PaWRsY0hOcEp5d25YRngxTURNNU5TYzZKMFZ3YzJsc2IyNG5MQ2RjWEhVd00wWTFKem9uWlhCemFYWW5MQ2RjWEhVeU1qUXlKem9uWlhOcGJTY3NKMXhjZFRKQk56VW5PaWRGY1hWaGJDY3NKejBuT2lkbGNYVmhiSE1uTENkY1hIVXlNalZHSnpvblpYRjFaWE4wSnl3blhGeDFNakZEUXljNkozSnNhR0Z5Snl3blhGeDFNa0UzT0NjNkoyVnhkV2wyUkVRbkxDZGNYSFV5T1VVMUp6b25aWEYyY0dGeWMyd25MQ2RjWEhVeU9UY3hKem9uWlhKaGNuSW5MQ2RjWEhVeU1qVXpKem9uWlhKRWIzUW5MQ2RjWEhVeU1USkdKem9uWlhOamNpY3NKMXhjZFRJeE16QW5PaWRGYzJOeUp5d25YRngxTWtFM015YzZKMFZ6YVcwbkxDZGNYSFV3TXprM0p6b25SWFJoSnl3blhGeDFNRE5DTnljNkoyVjBZU2NzSjF4Y2VFUXdKem9uUlZSSUp5d25YRng0UmpBbk9pZGxkR2duTENkY1hIaERRaWM2SjBWMWJXd25MQ2RjWEhoRlFpYzZKMlYxYld3bkxDZGNYSFV5TUVGREp6b25aWFZ5Ynljc0p5RW5PaWRsZUdOc0p5d25YRngxTWpJd015YzZKMlY0YVhOMEp5d25YRngxTURReU5DYzZKMFpqZVNjc0oxeGNkVEEwTkRRbk9pZG1ZM2tuTENkY1hIVXlOalF3SnpvblptVnRZV3hsSnl3blhGeDFSa0l3TXljNkoyWm1hV3hwWnljc0oxeGNkVVpDTURBbk9pZG1abXhwWnljc0oxeGNkVVpDTURRbk9pZG1abXhzYVdjbkxDZGNYSFZFT0RNMVhGeDFSRVF3T1NjNkowWm1jaWNzSjF4Y2RVUTRNelZjWEhWRVJESXpKem9uWm1aeUp5d25YRngxUmtJd01TYzZKMlpwYkdsbkp5d25YRngxTWpWR1F5YzZKMFpwYkd4bFpGTnRZV3hzVTNGMVlYSmxKeXduWm1vbk9pZG1hbXhwWnljc0oxeGNkVEkyTmtRbk9pZG1iR0YwSnl3blhGeDFSa0l3TWljNkoyWnNiR2xuSnl3blhGeDFNalZDTVNjNkoyWnNkRzV6Snl3blhGeDFNREU1TWljNkoyWnViMlluTENkY1hIVkVPRE0xWEZ4MVJFUXpSQ2M2SjBadmNHWW5MQ2RjWEhWRU9ETTFYRngxUkVRMU55YzZKMlp2Y0dZbkxDZGNYSFV5TWpBd0p6b25abTl5WVd4c0p5d25YRngxTWpKRU5DYzZKMlp2Y21zbkxDZGNYSFV5UVVRNUp6b25abTl5YTNZbkxDZGNYSFV5TVRNeEp6b25Sbk5qY2ljc0oxeGNkVEpCTUVRbk9pZG1jR0Z5ZEdsdWRDY3NKMXhjZUVKRUp6b25hR0ZzWmljc0oxeGNkVEl4TlRNbk9pZG1jbUZqTVRNbkxDZGNYSGhDUXljNkoyWnlZV014TkNjc0oxeGNkVEl4TlRVbk9pZG1jbUZqTVRVbkxDZGNYSFV5TVRVNUp6b25abkpoWXpFMkp5d25YRngxTWpFMVFpYzZKMlp5WVdNeE9DY3NKMXhjZFRJeE5UUW5PaWRtY21Gak1qTW5MQ2RjWEhVeU1UVTJKem9uWm5KaFl6STFKeXduWEZ4NFFrVW5PaWRtY21Gak16UW5MQ2RjWEhVeU1UVTNKem9uWm5KaFl6TTFKeXduWEZ4MU1qRTFReWM2SjJaeVlXTXpPQ2NzSjF4Y2RUSXhOVGduT2lkbWNtRmpORFVuTENkY1hIVXlNVFZCSnpvblpuSmhZelUySnl3blhGeDFNakUxUkNjNkoyWnlZV00xT0Njc0oxeGNkVEl4TlVVbk9pZG1jbUZqTnpnbkxDZGNYSFV5TURRMEp6b25abkpoYzJ3bkxDZGNYSFV5TXpJeUp6b25abkp2ZDI0bkxDZGNYSFZFT0RNMVhGeDFSRU5DUWljNkoyWnpZM0luTENkY1hIVXdNVVkxSnpvbloyRmpkWFJsSnl3blhGeDFNRE01TXljNkowZGhiVzFoSnl3blhGeDFNRE5DTXljNkoyZGhiVzFoSnl3blhGeDFNRE5FUXljNkowZGhiVzFoWkNjc0oxeGNkVEpCT0RZbk9pZG5ZWEFuTENkY1hIVXdNVEZGSnpvblIySnlaWFpsSnl3blhGeDFNREV4UmljNkoyZGljbVYyWlNjc0oxeGNkVEF4TWpJbk9pZEhZMlZrYVd3bkxDZGNYSFV3TVRGREp6b25SMk5wY21NbkxDZGNYSFV3TVRGRUp6b25aMk5wY21NbkxDZGNYSFV3TkRFekp6b25SMk41Snl3blhGeDFNRFF6TXljNkoyZGplU2NzSjF4Y2RUQXhNakFuT2lkSFpHOTBKeXduWEZ4MU1ERXlNU2M2SjJka2IzUW5MQ2RjWEhVeU1qWTFKem9uWjJVbkxDZGNYSFV5TWpZM0p6b25aMFVuTENkY1hIVXlRVGhESnpvblowVnNKeXduWEZ4MU1qSkVRaWM2SjJkbGJDY3NKMXhjZFRKQk4wVW5PaWRuWlhNbkxDZGNYSFV5UVVFNUp6b25aMlZ6WTJNbkxDZGNYSFV5UVRnd0p6b25aMlZ6Wkc5MEp5d25YRngxTWtFNE1pYzZKMmRsYzJSdmRHOG5MQ2RjWEhVeVFUZzBKem9uWjJWelpHOTBiMnduTENkY1hIVXlNa1JDWEZ4MVJrVXdNQ2M2SjJkbGMyd25MQ2RjWEhVeVFUazBKem9uWjJWemJHVnpKeXduWEZ4MVJEZ3pOVnhjZFVSRU1FRW5PaWRIWm5JbkxDZGNYSFZFT0RNMVhGeDFSRVF5TkNjNkoyZG1jaWNzSjF4Y2RUSXlOa0luT2lkblp5Y3NKMXhjZFRJeVJEa25PaWRIWnljc0oxeGNkVEl4TXpjbk9pZG5hVzFsYkNjc0oxeGNkVEEwTURNbk9pZEhTbU41Snl3blhGeDFNRFExTXljNkoyZHFZM2tuTENkY1hIVXlRVUUxSnpvbloyeGhKeXduWEZ4MU1qSTNOeWM2SjJkc0p5d25YRngxTWtFNU1pYzZKMmRzUlNjc0oxeGNkVEpCUVRRbk9pZG5iR29uTENkY1hIVXlRVGhCSnpvbloyNWhjQ2NzSjF4Y2RUSkJPRGduT2lkbmJtVW5MQ2RjWEhVeU1qWTVKem9uWjI1Rkp5d25YRngxTWpKRk55YzZKMmR1YzJsdEp5d25YRngxUkRnek5WeGNkVVJFTTBVbk9pZEhiM0JtSnl3blhGeDFSRGd6TlZ4Y2RVUkVOVGduT2lkbmIzQm1KeXduWEZ4MU1rRkJNaWM2SjBkeVpXRjBaWEpIY21WaGRHVnlKeXduWEZ4MU1qSTNNeWM2SjJkemFXMG5MQ2RjWEhWRU9ETTFYRngxUkVOQk1pYzZKMGR6WTNJbkxDZGNYSFV5TVRCQkp6b25aM05qY2ljc0oxeGNkVEpCT0VVbk9pZG5jMmx0WlNjc0oxeGNkVEpCT1RBbk9pZG5jMmx0YkNjc0oxeGNkVEpCUVRjbk9pZG5kR05qSnl3blhGeDFNa0UzUVNjNkoyZDBZMmx5Snl3blBpYzZKMmQwSnl3blhGeDFNakpFTnljNkoyZDBaRzkwSnl3blhGeDFNams1TlNjNkoyZDBiRkJoY2ljc0oxeGNkVEpCTjBNbk9pZG5kSEYxWlhOMEp5d25YRngxTWprM09DYzZKMmQwY21GeWNpY3NKMXhjZFRJeU5qbGNYSFZHUlRBd0p6b25aM1p1UlNjc0oxeGNkVEl3TUVFbk9pZG9ZV2x5YzNBbkxDZGNYSFV5TVRCQ0p6b25TSE5qY2ljc0oxeGNkVEEwTWtFbk9pZElRVkpFWTNrbkxDZGNYSFV3TkRSQkp6b25hR0Z5WkdONUp5d25YRngxTWprME9DYzZKMmhoY25KamFYSW5MQ2RjWEhVeU1UazBKem9uYUdGeWNpY3NKMXhjZFRJeFFVUW5PaWRvWVhKeWR5Y3NKMTRuT2lkSVlYUW5MQ2RjWEhVeU1UQkdKem9uYUdKaGNpY3NKMXhjZFRBeE1qUW5PaWRJWTJseVl5Y3NKMXhjZFRBeE1qVW5PaWRvWTJseVl5Y3NKMXhjZFRJMk5qVW5PaWRvWldGeWRITW5MQ2RjWEhVeU1ESTJKem9uYld4a2NpY3NKMXhjZFRJeVFqa25PaWRvWlhKamIyNG5MQ2RjWEhWRU9ETTFYRngxUkVReU5TYzZKMmhtY2ljc0oxeGNkVEl4TUVNbk9pZElabkluTENkY1hIVXlPVEkxSnpvbmMyVmhjbWhySnl3blhGeDFNamt5TmljNkozTjNZWEpvYXljc0oxeGNkVEl4UmtZbk9pZG9iMkZ5Y2ljc0oxeGNkVEl5TTBJbk9pZG9iMjEwYUhRbkxDZGNYSFV5TVVFNUp6b25iR0Z5Y21ockp5d25YRngxTWpGQlFTYzZKM0poY25Kb2F5Y3NKMXhjZFVRNE16VmNYSFZFUkRVNUp6b25hRzl3Wmljc0oxeGNkVEl4TUVRbk9pZEliM0JtSnl3blhGeDFNakF4TlNjNkoyaHZjbUpoY2ljc0oxeGNkVVE0TXpWY1hIVkVRMEpFSnpvbmFITmpjaWNzSjF4Y2RUQXhNalluT2lkSWMzUnliMnNuTENkY1hIVXdNVEkzSnpvbmFITjBjbTlySnl3blhGeDFNakEwTXljNkoyaDVZblZzYkNjc0oxeGNlRU5FSnpvblNXRmpkWFJsSnl3blhGeDRSVVFuT2lkcFlXTjFkR1VuTENkY1hIVXlNRFl6SnpvbmFXTW5MQ2RjWEhoRFJTYzZKMGxqYVhKakp5d25YRng0UlVVbk9pZHBZMmx5WXljc0oxeGNkVEEwTVRnbk9pZEpZM2tuTENkY1hIVXdORE00SnpvbmFXTjVKeXduWEZ4MU1ERXpNQ2M2SjBsa2IzUW5MQ2RjWEhVd05ERTFKem9uU1VWamVTY3NKMXhjZFRBME16VW5PaWRwWldONUp5d25YRng0UVRFbk9pZHBaWGhqYkNjc0oxeGNkVVE0TXpWY1hIVkVSREkySnpvbmFXWnlKeXduWEZ4MU1qRXhNU2M2SjBsdEp5d25YRng0UTBNbk9pZEpaM0poZG1VbkxDZGNYSGhGUXljNkoybG5jbUYyWlNjc0oxeGNkVEl4TkRnbk9pZHBhU2NzSjF4Y2RUSkJNRU1uT2lkeGFXNTBKeXduWEZ4MU1qSXlSQ2M2SjNScGJuUW5MQ2RjWEhVeU9VUkRKem9uYVdsdVptbHVKeXduWEZ4MU1qRXlPU2M2SjJscGIzUmhKeXduWEZ4MU1ERXpNaWM2SjBsS2JHbG5KeXduWEZ4MU1ERXpNeWM2SjJscWJHbG5KeXduWEZ4MU1ERXlRU2M2SjBsdFlXTnlKeXduWEZ4MU1ERXlRaWM2SjJsdFlXTnlKeXduWEZ4MU1qRXhNQ2M2SjBselkzSW5MQ2RjWEhVd01UTXhKem9uYVcxaGRHZ25MQ2RjWEhVeU1rSTNKem9uYVcxdlppY3NKMXhjZFRBeFFqVW5PaWRwYlhCbFpDY3NKMXhjZFRJeE1EVW5PaWRwYm1OaGNtVW5MQ2RjWEhVeU1qRkZKem9uYVc1bWFXNG5MQ2RjWEhVeU9VUkVKem9uYVc1bWFXNTBhV1VuTENkY1hIVXlNa0pCSnpvbmFXNTBZMkZzSnl3blhGeDFNakl5UWljNkoybHVkQ2NzSjF4Y2RUSXlNa01uT2lkSmJuUW5MQ2RjWEhVeU1USTBKem9uV205d1ppY3NKMXhjZFRKQk1UY25PaWRwYm5Sc1lYSm9heWNzSjF4Y2RUSkJNME1uT2lkcGNISnZaQ2NzSjF4Y2RUSXdOakluT2lkcGRDY3NKMXhjZFRBME1ERW5PaWRKVDJONUp5d25YRngxTURRMU1TYzZKMmx2WTNrbkxDZGNYSFV3TVRKRkp6b25TVzluYjI0bkxDZGNYSFV3TVRKR0p6b25hVzluYjI0bkxDZGNYSFZFT0RNMVhGeDFSRVEwTUNjNkowbHZjR1luTENkY1hIVkVPRE0xWEZ4MVJFUTFRU2M2SjJsdmNHWW5MQ2RjWEhVd016azVKem9uU1c5MFlTY3NKMXhjZFRBelFqa25PaWRwYjNSaEp5d25YRng0UWtZbk9pZHBjWFZsYzNRbkxDZGNYSFZFT0RNMVhGeDFSRU5DUlNjNkoybHpZM0luTENkY1hIVXlNa1kxSnpvbmFYTnBibVJ2ZENjc0oxeGNkVEl5Umprbk9pZHBjMmx1UlNjc0oxeGNkVEl5UmpRbk9pZHBjMmx1Y3ljc0oxeGNkVEl5UmpNbk9pZHBjMmx1YzNZbkxDZGNYSFV3TVRJNEp6b25TWFJwYkdSbEp5d25YRngxTURFeU9TYzZKMmwwYVd4a1pTY3NKMXhjZFRBME1EWW5PaWRKZFd0amVTY3NKMXhjZFRBME5UWW5PaWRwZFd0amVTY3NKMXhjZUVOR0p6b25TWFZ0YkNjc0oxeGNlRVZHSnpvbmFYVnRiQ2NzSjF4Y2RUQXhNelFuT2lkS1kybHlZeWNzSjF4Y2RUQXhNelVuT2lkcVkybHlZeWNzSjF4Y2RUQTBNVGtuT2lkS1kza25MQ2RjWEhVd05ETTVKem9uYW1ONUp5d25YRngxUkRnek5WeGNkVVJFTUVRbk9pZEtabkluTENkY1hIVkVPRE0xWEZ4MVJFUXlOeWM2SjJwbWNpY3NKMXhjZFRBeU16Y25PaWRxYldGMGFDY3NKMXhjZFVRNE16VmNYSFZFUkRReEp6b25TbTl3Wmljc0oxeGNkVVE0TXpWY1hIVkVSRFZDSnpvbmFtOXdaaWNzSjF4Y2RVUTRNelZjWEhWRVEwRTFKem9uU25OamNpY3NKMXhjZFVRNE16VmNYSFZFUTBKR0p6b25hbk5qY2ljc0oxeGNkVEEwTURnbk9pZEtjMlZ5WTNrbkxDZGNYSFV3TkRVNEp6b25hbk5sY21ONUp5d25YRngxTURRd05DYzZKMHAxYTJONUp5d25YRngxTURRMU5DYzZKMnAxYTJONUp5d25YRngxTURNNVFTYzZKMHRoY0hCaEp5d25YRngxTUROQ1FTYzZKMnRoY0hCaEp5d25YRngxTUROR01DYzZKMnRoY0hCaGRpY3NKMXhjZFRBeE16WW5PaWRMWTJWa2FXd25MQ2RjWEhVd01UTTNKem9uYTJObFpHbHNKeXduWEZ4MU1EUXhRU2M2SjB0amVTY3NKMXhjZFRBME0wRW5PaWRyWTNrbkxDZGNYSFZFT0RNMVhGeDFSRVF3UlNjNkowdG1jaWNzSjF4Y2RVUTRNelZjWEhWRVJESTRKem9uYTJaeUp5d25YRngxTURFek9DYzZKMnRuY21WbGJpY3NKMXhjZFRBME1qVW5PaWRMU0dONUp5d25YRngxTURRME5TYzZKMnRvWTNrbkxDZGNYSFV3TkRCREp6b25TMHBqZVNjc0oxeGNkVEEwTlVNbk9pZHJhbU41Snl3blhGeDFSRGd6TlZ4Y2RVUkVOREluT2lkTGIzQm1KeXduWEZ4MVJEZ3pOVnhjZFVSRU5VTW5PaWRyYjNCbUp5d25YRngxUkRnek5WeGNkVVJEUVRZbk9pZExjMk55Snl3blhGeDFSRGd6TlZ4Y2RVUkRRekFuT2lkcmMyTnlKeXduWEZ4MU1qRkVRU2M2SjJ4QllYSnlKeXduWEZ4MU1ERXpPU2M2SjB4aFkzVjBaU2NzSjF4Y2RUQXhNMEVuT2lkc1lXTjFkR1VuTENkY1hIVXlPVUkwSnpvbmJHRmxiWEIwZVhZbkxDZGNYSFV5TVRFeUp6b25USE5qY2ljc0oxeGNkVEF6T1VJbk9pZE1ZVzFpWkdFbkxDZGNYSFV3TTBKQ0p6b25iR0Z0WW1SaEp5d25YRngxTWpkRk9DYzZKMnhoYm1jbkxDZGNYSFV5TjBWQkp6b25UR0Z1Wnljc0oxeGNkVEk1T1RFbk9pZHNZVzVuWkNjc0oxeGNkVEpCT0RVbk9pZHNZWEFuTENkY1hIaEJRaWM2SjJ4aGNYVnZKeXduWEZ4MU1qRkZOQ2M2SjJ4aGNuSmlKeXduWEZ4MU1qa3hSaWM2SjJ4aGNuSmlabk1uTENkY1hIVXlNVGt3SnpvbmJHRnljaWNzSjF4Y2RUSXhPVVVuT2lkTVlYSnlKeXduWEZ4MU1qa3hSQ2M2SjJ4aGNuSm1jeWNzSjF4Y2RUSXhRVUluT2lkc1lYSnliSEFuTENkY1hIVXlPVE01SnpvbmJHRnljbkJzSnl3blhGeDFNamszTXljNkoyeGhjbkp6YVcwbkxDZGNYSFV5TVVFeUp6b25iR0Z5Y25Sc0p5d25YRngxTWpreE9TYzZKMnhoZEdGcGJDY3NKMXhjZFRJNU1VSW5PaWRzUVhSaGFXd25MQ2RjWEhVeVFVRkNKem9uYkdGMEp5d25YRngxTWtGQlJDYzZKMnhoZEdVbkxDZGNYSFV5UVVGRVhGeDFSa1V3TUNjNkoyeGhkR1Z6Snl3blhGeDFNamt3UXljNkoyeGlZWEp5Snl3blhGeDFNamt3UlNjNkoyeENZWEp5Snl3blhGeDFNamMzTWljNkoyeGlZbkpySnl3bmV5YzZKMnhqZFdJbkxDZGJKem9uYkhOeFlpY3NKMXhjZFRJNU9FSW5PaWRzWW5KclpTY3NKMXhjZFRJNU9FWW5PaWRzWW5KcmMyeGtKeXduWEZ4MU1qazRSQ2M2SjJ4aWNtdHpiSFVuTENkY1hIVXdNVE5FSnpvblRHTmhjbTl1Snl3blhGeDFNREV6UlNjNkoyeGpZWEp2Ymljc0oxeGNkVEF4TTBJbk9pZE1ZMlZrYVd3bkxDZGNYSFV3TVROREp6b25iR05sWkdsc0p5d25YRngxTWpNd09DYzZKMnhqWldsc0p5d25YRngxTURReFFpYzZKMHhqZVNjc0oxeGNkVEEwTTBJbk9pZHNZM2tuTENkY1hIVXlPVE0ySnpvbmJHUmpZU2NzSjF4Y2RUSXdNVU1uT2lkc1pIRjFieWNzSjF4Y2RUSTVOamNuT2lkc1pISmthR0Z5Snl3blhGeDFNamswUWljNkoyeGtjblZ6YUdGeUp5d25YRngxTWpGQ01pYzZKMnhrYzJnbkxDZGNYSFV5TWpZMEp6b25iR1VuTENkY1hIVXlNalkySnpvbmJFVW5MQ2RjWEhVeU1VTTJKem9uYkhKaGNuSW5MQ2RjWEhVeU4wVTJKem9uYkc5aWNtc25MQ2RjWEhVeU9UWXhKem9uVEdWbWRFUnZkMjVVWldWV1pXTjBiM0luTENkY1hIVXlPVFU1SnpvblRHVm1kRVJ2ZDI1V1pXTjBiM0pDWVhJbkxDZGNYSFV5TXpCQkp6b25iR1pzYjI5eUp5d25YRngxTWpGQ1F5YzZKMnhvWVhKMUp5d25YRngxTWpGRE55YzZKMnhzWVhKeUp5d25YRngxTWpGRFFpYzZKMnh5YUdGeUp5d25YRngxTWprMFJTYzZKMHhsWm5SU2FXZG9kRlpsWTNSdmNpY3NKMXhjZFRJeFFUUW5PaWR0WVhCemRHOXNaV1owSnl3blhGeDFNamsxUVNjNkoweGxablJVWldWV1pXTjBiM0luTENkY1hIVXlNa05DSnpvbmJIUm9jbVZsSnl3blhGeDFNamxEUmljNkoweGxablJVY21saGJtZHNaVUpoY2ljc0oxeGNkVEl5UWpJbk9pZDJiSFJ5YVNjc0oxeGNkVEl5UWpRbk9pZHNkSEpwWlNjc0oxeGNkVEk1TlRFbk9pZE1aV1owVlhCRWIzZHVWbVZqZEc5eUp5d25YRngxTWprMk1DYzZKMHhsWm5SVmNGUmxaVlpsWTNSdmNpY3NKMXhjZFRJNU5UZ25PaWRNWldaMFZYQldaV04wYjNKQ1lYSW5MQ2RjWEhVeU1VSkdKem9uZFdoaGNtd25MQ2RjWEhVeU9UVXlKem9uVEdWbWRGWmxZM1J2Y2tKaGNpY3NKMXhjZFRKQk9FSW5PaWRzUldjbkxDZGNYSFV5TWtSQkp6b25iR1ZuSnl3blhGeDFNa0UzUkNjNkoyeGxjeWNzSjF4Y2RUSkJRVGduT2lkc1pYTmpZeWNzSjF4Y2RUSkJOMFluT2lkc1pYTmtiM1FuTENkY1hIVXlRVGd4SnpvbmJHVnpaRzkwYnljc0oxeGNkVEpCT0RNbk9pZHNaWE5rYjNSdmNpY3NKMXhjZFRJeVJFRmNYSFZHUlRBd0p6b25iR1Z6Wnljc0oxeGNkVEpCT1RNbk9pZHNaWE5uWlhNbkxDZGNYSFV5TWtRMkp6b25iSFJrYjNRbkxDZGNYSFV5TWpjMkp6b25iR2NuTENkY1hIVXlRVUV4SnpvblRHVnpjMHhsYzNNbkxDZGNYSFV5TWpjeUp6b25iSE5wYlNjc0oxeGNkVEk1TjBNbk9pZHNabWx6YUhRbkxDZGNYSFZFT0RNMVhGeDFSRVF3UmljNkoweG1jaWNzSjF4Y2RVUTRNelZjWEhWRVJESTVKem9uYkdaeUp5d25YRngxTWtFNU1TYzZKMnhuUlNjc0oxeGNkVEk1TmpJbk9pZHNTR0Z5Snl3blhGeDFNamsyUVNjNkoyeG9ZWEoxYkNjc0oxeGNkVEkxT0RRbk9pZHNhR0pzYXljc0oxeGNkVEEwTURrbk9pZE1TbU41Snl3blhGeDFNRFExT1NjNkoyeHFZM2tuTENkY1hIVXlNalpCSnpvbmJHd25MQ2RjWEhVeU1rUTRKem9uVEd3bkxDZGNYSFV5T1RaQ0p6b25iR3hvWVhKa0p5d25YRngxTWpWR1FTYzZKMnhzZEhKcEp5d25YRngxTURFelJpYzZKMHh0YVdSdmRDY3NKMXhjZFRBeE5EQW5PaWRzYldsa2IzUW5MQ2RjWEhVeU0wSXdKem9uYkcxdmRYTjBKeXduWEZ4MU1rRTRPU2M2SjJ4dVlYQW5MQ2RjWEhVeVFUZzNKem9uYkc1bEp5d25YRngxTWpJMk9DYzZKMnh1UlNjc0oxeGNkVEl5UlRZbk9pZHNibk5wYlNjc0oxeGNkVEkzUlVNbk9pZHNiMkZ1Wnljc0oxeGNkVEl4UmtRbk9pZHNiMkZ5Y2ljc0oxeGNkVEkzUmpVbk9pZDRiR0Z5Y2ljc0oxeGNkVEkzUmpjbk9pZDRhR0Z5Y2ljc0oxeGNkVEkzUmtNbk9pZDRiV0Z3Snl3blhGeDFNamRHTmljNkozaHlZWEp5Snl3blhGeDFNakZCUXljNkozSmhjbkpzY0Njc0oxeGNkVEk1T0RVbk9pZHNiM0JoY2ljc0oxeGNkVVE0TXpWY1hIVkVSRFF6SnpvblRHOXdaaWNzSjF4Y2RVUTRNelZjWEhWRVJEVkVKem9uYkc5d1ppY3NKMXhjZFRKQk1rUW5PaWRzYjNCc2RYTW5MQ2RjWEhVeVFUTTBKem9uYkc5MGFXMWxjeWNzSjF4Y2RUSXlNVGNuT2lkc2IzZGhjM1FuTENkZkp6b25iRzkzWW1GeUp5d25YRngxTWpFNU9TYzZKM04zWVhKeUp5d25YRngxTWpFNU9DYzZKM05sWVhKeUp5d25YRngxTWpWRFFTYzZKMnh2ZWljc0p5Z25PaWRzY0dGeUp5d25YRngxTWprNU15YzZKMnh3WVhKc2RDY3NKMXhjZFRJNU5rUW5PaWRzY21oaGNtUW5MQ2RjWEhVeU1EQkZKem9uYkhKdEp5d25YRngxTWpKQ1JpYzZKMnh5ZEhKcEp5d25YRngxTWpBek9TYzZKMnh6WVhGMWJ5Y3NKMXhjZFVRNE16VmNYSFZFUTBNeEp6b25iSE5qY2ljc0oxeGNkVEl4UWpBbk9pZHNjMmduTENkY1hIVXlRVGhFSnpvbmJITnBiV1VuTENkY1hIVXlRVGhHSnpvbmJITnBiV2NuTENkY1hIVXlNREU0SnpvbmJITnhkVzhuTENkY1hIVXlNREZCSnpvbmMySnhkVzhuTENkY1hIVXdNVFF4SnpvblRITjBjbTlySnl3blhGeDFNREUwTWljNkoyeHpkSEp2YXljc0oxeGNkVEpCUVRZbk9pZHNkR05qSnl3blhGeDFNa0UzT1NjNkoyeDBZMmx5Snl3blBDYzZKMngwSnl3blhGeDFNakpET1NjNkoyeDBhVzFsY3ljc0oxeGNkVEk1TnpZbk9pZHNkR3hoY25JbkxDZGNYSFV5UVRkQ0p6b25iSFJ4ZFdWemRDY3NKMXhjZFRJMVF6TW5PaWRzZEhKcEp5d25YRngxTWprNU5pYzZKMngwY2xCaGNpY3NKMXhjZFRJNU5FRW5PaWRzZFhKa2MyaGhjaWNzSjF4Y2RUSTVOalluT2lkc2RYSjFhR0Z5Snl3blhGeDFNakkyT0Z4Y2RVWkZNREFuT2lkc2RtNUZKeXduWEZ4NFFVWW5PaWR0WVdOeUp5d25YRngxTWpZME1pYzZKMjFoYkdVbkxDZGNYSFV5TnpJd0p6b25iV0ZzZENjc0oxeGNkVEk1TURVbk9pZE5ZWEFuTENkY1hIVXlNVUUySnpvbmJXRndKeXduWEZ4MU1qRkJOU2M2SjIxaGNITjBiM1Z3Snl3blhGeDFNalZCUlNjNkoyMWhjbXRsY2ljc0oxeGNkVEpCTWprbk9pZHRZMjl0YldFbkxDZGNYSFV3TkRGREp6b25UV041Snl3blhGeDFNRFF6UXljNkoyMWplU2NzSjF4Y2RUSXdNVFFuT2lkdFpHRnphQ2NzSjF4Y2RUSXlNMEVuT2lkdFJFUnZkQ2NzSjF4Y2RUSXdOVVluT2lkTlpXUnBkVzFUY0dGalpTY3NKMXhjZFRJeE16TW5PaWROYzJOeUp5d25YRngxUkRnek5WeGNkVVJFTVRBbk9pZE5abkluTENkY1hIVkVPRE0xWEZ4MVJFUXlRU2M2SjIxbWNpY3NKMXhjZFRJeE1qY25PaWR0YUc4bkxDZGNYSGhDTlNjNkoyMXBZM0p2Snl3blhGeDFNa0ZHTUNjNkoyMXBaR05wY2ljc0oxeGNkVEl5TWpNbk9pZHRhV1FuTENkY1hIVXlNakV5SnpvbmJXbHVkWE1uTENkY1hIVXlRVEpCSnpvbmJXbHVkWE5rZFNjc0oxeGNkVEl5TVRNbk9pZHRjQ2NzSjF4Y2RUSkJSRUluT2lkdGJHTndKeXduWEZ4MU1qSkJOeWM2SjIxdlpHVnNjeWNzSjF4Y2RVUTRNelZjWEhWRVJEUTBKem9uVFc5d1ppY3NKMXhjZFVRNE16VmNYSFZFUkRWRkp6b25iVzl3Wmljc0oxeGNkVVE0TXpWY1hIVkVRME15SnpvbmJYTmpjaWNzSjF4Y2RUQXpPVU1uT2lkTmRTY3NKMXhjZFRBelFrTW5PaWR0ZFNjc0oxeGNkVEl5UWpnbk9pZHRkVzFoY0Njc0oxeGNkVEF4TkRNbk9pZE9ZV04xZEdVbkxDZGNYSFV3TVRRMEp6b25ibUZqZFhSbEp5d25YRngxTWpJeU1GeGNkVEl3UkRJbk9pZHVZVzVuSnl3blhGeDFNakkwT1NjNkoyNWhjQ2NzSjF4Y2RUSkJOekJjWEhVd016TTRKem9uYm1Gd1JTY3NKMXhjZFRJeU5FSmNYSFV3TXpNNEp6b25ibUZ3YVdRbkxDZGNYSFV3TVRRNUp6b25ibUZ3YjNNbkxDZGNYSFV5TmpaRkp6b25ibUYwZFhJbkxDZGNYSFV5TVRFMUp6b25UbTl3Wmljc0oxeGNlRUV3SnpvbmJtSnpjQ2NzSjF4Y2RUSXlORVZjWEhVd016TTRKem9uYm1KMWJYQW5MQ2RjWEhVeU1qUkdYRngxTURNek9DYzZKMjVpZFcxd1pTY3NKMXhjZFRKQk5ETW5PaWR1WTJGd0p5d25YRngxTURFME55YzZKMDVqWVhKdmJpY3NKMXhjZFRBeE5EZ25PaWR1WTJGeWIyNG5MQ2RjWEhVd01UUTFKem9uVG1ObFpHbHNKeXduWEZ4MU1ERTBOaWM2SjI1alpXUnBiQ2NzSjF4Y2RUSXlORGNuT2lkdVkyOXVaeWNzSjF4Y2RUSkJOa1JjWEhVd016TTRKem9uYm1OdmJtZGtiM1FuTENkY1hIVXlRVFF5SnpvbmJtTjFjQ2NzSjF4Y2RUQTBNVVFuT2lkT1kza25MQ2RjWEhVd05ETkVKem9uYm1ONUp5d25YRngxTWpBeE15YzZKMjVrWVhOb0p5d25YRngxTWpreU5DYzZKMjVsWVhKb2F5Y3NKMXhjZFRJeE9UY25PaWR1WldGeWNpY3NKMXhjZFRJeFJEY25PaWR1WlVGeWNpY3NKMXhjZFRJeU5qQW5PaWR1WlNjc0oxeGNkVEl5TlRCY1hIVXdNek00SnpvbmJtVmtiM1FuTENkY1hIVXlNREJDSnpvbldtVnliMWRwWkhSb1UzQmhZMlVuTENkY1hIVXlNall5SnpvbmJtVnhkV2wySnl3blhGeDFNamt5T0NjNkozUnZaV0VuTENkY1hIVXlNalF5WEZ4MU1ETXpPQ2M2SjI1bGMybHRKeXduWEZ4dUp6b25UbVYzVEdsdVpTY3NKMXhjZFRJeU1EUW5PaWR1WlhocGMzUW5MQ2RjWEhWRU9ETTFYRngxUkVReE1TYzZKMDVtY2ljc0oxeGNkVVE0TXpWY1hIVkVSREpDSnpvbmJtWnlKeXduWEZ4MU1qSTJOMXhjZFRBek16Z25PaWR1WjBVbkxDZGNYSFV5TWpjeEp6b25ibWRsSnl3blhGeDFNa0UzUlZ4Y2RUQXpNemduT2lkdVoyVnpKeXduWEZ4MU1qSkVPVnhjZFRBek16Z25PaWR1UjJjbkxDZGNYSFV5TWpjMUp6b25ibWR6YVcwbkxDZGNYSFV5TWpaQ1hGeDFNakJFTWljNkoyNUhkQ2NzSjF4Y2RUSXlOa1luT2lkdVozUW5MQ2RjWEhVeU1qWkNYRngxTURNek9DYzZKMjVIZEhZbkxDZGNYSFV5TVVGRkp6b25ibWhoY25JbkxDZGNYSFV5TVVORkp6b25ibWhCY25JbkxDZGNYSFV5UVVZeUp6b25ibWh3WVhJbkxDZGNYSFV5TWpCQ0p6b25ibWtuTENkY1hIVXlNa1pESnpvbmJtbHpKeXduWEZ4MU1qSkdRU2M2SjI1cGMyUW5MQ2RjWEhVd05EQkJKem9uVGtwamVTY3NKMXhjZFRBME5VRW5PaWR1YW1ONUp5d25YRngxTWpFNVFTYzZKMjVzWVhKeUp5d25YRngxTWpGRFJDYzZKMjVzUVhKeUp5d25YRngxTWpBeU5TYzZKMjVzWkhJbkxDZGNYSFV5TWpZMlhGeDFNRE16T0NjNkoyNXNSU2NzSjF4Y2RUSXlOekFuT2lkdWJHVW5MQ2RjWEhVeVFUZEVYRngxTURNek9DYzZKMjVzWlhNbkxDZGNYSFV5TWpaRkp6b25ibXgwSnl3blhGeDFNakpFT0Z4Y2RUQXpNemduT2lkdVRHd25MQ2RjWEhVeU1qYzBKem9uYm14emFXMG5MQ2RjWEhVeU1qWkJYRngxTWpCRU1pYzZKMjVNZENjc0oxeGNkVEl5UlVFbk9pZHViSFJ5YVNjc0oxeGNkVEl5UlVNbk9pZHViSFJ5YVdVbkxDZGNYSFV5TWpaQlhGeDFNRE16T0NjNkoyNU1kSFluTENkY1hIVXlNakkwSnpvbmJtMXBaQ2NzSjF4Y2RUSXdOakFuT2lkT2IwSnlaV0ZySnl3blhGeDFSRGd6TlZ4Y2RVUkVOVVluT2lkdWIzQm1KeXduWEZ4MU1rRkZReWM2SjA1dmRDY3NKMXhjZUVGREp6b25ibTkwSnl3blhGeDFNakkyUkNjNkowNXZkRU4xY0VOaGNDY3NKMXhjZFRJeU1qWW5PaWR1Y0dGeUp5d25YRngxTWpJd09TYzZKMjV2ZEdsdUp5d25YRngxTWpJM09TYzZKMjUwWjJ3bkxDZGNYSFV5TWtZMVhGeDFNRE16T0NjNkoyNXZkR2x1Wkc5MEp5d25YRngxTWpKR09WeGNkVEF6TXpnbk9pZHViM1JwYmtVbkxDZGNYSFV5TWtZM0p6b25ibTkwYVc1MllpY3NKMXhjZFRJeVJqWW5PaWR1YjNScGJuWmpKeXduWEZ4MU1qbERSbHhjZFRBek16Z25PaWRPYjNSTVpXWjBWSEpwWVc1bmJHVkNZWEluTENkY1hIVXlNamM0SnpvbmJuUnNaeWNzSjF4Y2RUSkJRVEpjWEhVd016TTRKem9uVG05MFRtVnpkR1ZrUjNKbFlYUmxja2R5WldGMFpYSW5MQ2RjWEhVeVFVRXhYRngxTURNek9DYzZKMDV2ZEU1bGMzUmxaRXhsYzNOTVpYTnpKeXduWEZ4MU1qSXdReWM2SjI1dmRHNXBKeXduWEZ4MU1qSkdSU2M2SjI1dmRHNXBkbUluTENkY1hIVXlNa1pFSnpvbmJtOTBibWwyWXljc0oxeGNkVEl5T0RBbk9pZHVjSEluTENkY1hIVXlRVUZHWEZ4MU1ETXpPQ2M2SjI1d2NtVW5MQ2RjWEhVeU1rVXdKem9uYm5CeVkzVmxKeXduWEZ4MU1qbEVNRnhjZFRBek16Z25PaWRPYjNSU2FXZG9kRlJ5YVdGdVoyeGxRbUZ5Snl3blhGeDFNakpGUWljNkoyNXlkSEpwSnl3blhGeDFNakpGUkNjNkoyNXlkSEpwWlNjc0oxeGNkVEl5T0VaY1hIVXdNek00SnpvblRtOTBVM0YxWVhKbFUzVmljMlYwSnl3blhGeDFNakpGTWljNkoyNXpjWE4xWW1VbkxDZGNYSFV5TWprd1hGeDFNRE16T0NjNkowNXZkRk54ZFdGeVpWTjFjR1Z5YzJWMEp5d25YRngxTWpKRk15YzZKMjV6Y1hOMWNHVW5MQ2RjWEhVeU1qZ3lYRngxTWpCRU1pYzZKM1p1YzNWaUp5d25YRngxTWpJNE9DYzZKMjV6ZFdKbEp5d25YRngxTWpJNE1TYzZKMjV6WXljc0oxeGNkVEpCUWpCY1hIVXdNek00SnpvbmJuTmpaU2NzSjF4Y2RUSXlSVEVuT2lkdWMyTmpkV1VuTENkY1hIVXlNamRHWEZ4MU1ETXpPQ2M2SjA1dmRGTjFZMk5sWldSelZHbHNaR1VuTENkY1hIVXlNamd6WEZ4MU1qQkVNaWM2SjNadWMzVndKeXduWEZ4MU1qSTRPU2M2SjI1emRYQmxKeXduWEZ4MU1qSTBNU2M2SjI1emFXMG5MQ2RjWEhVeU1qUTBKem9uYm5OcGJXVW5MQ2RjWEhVeVFVWkVYRngxTWpCRk5TYzZKMjV3WVhKemJDY3NKMXhjZFRJeU1ESmNYSFV3TXpNNEp6b25ibkJoY25RbkxDZGNYSFV5UVRFMEp6b25ibkJ2YkdsdWRDY3NKMXhjZFRJNU16TmNYSFV3TXpNNEp6b25ibkpoY25Kakp5d25YRngxTWpFNVFpYzZKMjV5WVhKeUp5d25YRngxTWpGRFJpYzZKMjV5UVhKeUp5d25YRngxTWpFNVJGeGNkVEF6TXpnbk9pZHVjbUZ5Y25jbkxDZGNYSFZFT0RNMVhGeDFSRU5CT1NjNkowNXpZM0luTENkY1hIVkVPRE0xWEZ4MVJFTkRNeWM2SjI1elkzSW5MQ2RjWEhVeU1qZzBKem9uYm5OMVlpY3NKMXhjZFRKQlF6VmNYSFV3TXpNNEp6b25ibk4xWWtVbkxDZGNYSFV5TWpnMUp6b25ibk4xY0Njc0oxeGNkVEpCUXpaY1hIVXdNek00SnpvbmJuTjFjRVVuTENkY1hIaEVNU2M2SjA1MGFXeGtaU2NzSjF4Y2VFWXhKem9uYm5ScGJHUmxKeXduWEZ4MU1ETTVSQ2M2SjA1MUp5d25YRngxTUROQ1JDYzZKMjUxSnl3bkl5YzZKMjUxYlNjc0oxeGNkVEl4TVRZbk9pZHVkVzFsY204bkxDZGNYSFV5TURBM0p6b25iblZ0YzNBbkxDZGNYSFV5TWpSRVhGeDFNakJFTWljNkoyNTJZWEFuTENkY1hIVXlNa0ZESnpvbmJuWmtZWE5vSnl3blhGeDFNakpCUkNjNkoyNTJSR0Z6YUNjc0oxeGNkVEl5UVVVbk9pZHVWbVJoYzJnbkxDZGNYSFV5TWtGR0p6b25ibFpFWVhOb0p5d25YRngxTWpJMk5WeGNkVEl3UkRJbk9pZHVkbWRsSnl3blBseGNkVEl3UkRJbk9pZHVkbWQwSnl3blhGeDFNamt3TkNjNkoyNTJTR0Z5Y2ljc0oxeGNkVEk1UkVVbk9pZHVkbWx1Wm1sdUp5d25YRngxTWprd01pYzZKMjUyYkVGeWNpY3NKMXhjZFRJeU5qUmNYSFV5TUVReUp6b25iblpzWlNjc0p6eGNYSFV5TUVReUp6b25iblpzZENjc0oxeGNkVEl5UWpSY1hIVXlNRVF5SnpvbmJuWnNkSEpwWlNjc0oxeGNkVEk1TURNbk9pZHVkbkpCY25JbkxDZGNYSFV5TWtJMVhGeDFNakJFTWljNkoyNTJjblJ5YVdVbkxDZGNYSFV5TWpORFhGeDFNakJFTWljNkoyNTJjMmx0Snl3blhGeDFNamt5TXljNkoyNTNZWEpvYXljc0oxeGNkVEl4T1RZbk9pZHVkMkZ5Y2ljc0oxeGNkVEl4UkRZbk9pZHVkMEZ5Y2ljc0oxeGNkVEk1TWpjbk9pZHVkMjVsWVhJbkxDZGNYSGhFTXljNkowOWhZM1YwWlNjc0oxeGNlRVl6SnpvbmIyRmpkWFJsSnl3blhGeDRSRFFuT2lkUFkybHlZeWNzSjF4Y2VFWTBKem9uYjJOcGNtTW5MQ2RjWEhVd05ERkZKem9uVDJONUp5d25YRngxTURRelJTYzZKMjlqZVNjc0oxeGNkVEF4TlRBbk9pZFBaR0pzWVdNbkxDZGNYSFV3TVRVeEp6b25iMlJpYkdGakp5d25YRngxTWtFek9DYzZKMjlrYVhZbkxDZGNYSFV5T1VKREp6b25iMlJ6YjJ4a0p5d25YRngxTURFMU1pYzZKMDlGYkdsbkp5d25YRngxTURFMU15YzZKMjlsYkdsbkp5d25YRngxTWpsQ1JpYzZKMjltWTJseUp5d25YRngxUkRnek5WeGNkVVJFTVRJbk9pZFBabkluTENkY1hIVkVPRE0xWEZ4MVJFUXlReWM2SjI5bWNpY3NKMXhjZFRBeVJFSW5PaWR2WjI5dUp5d25YRng0UkRJbk9pZFBaM0poZG1VbkxDZGNYSGhHTWljNkoyOW5jbUYyWlNjc0oxeGNkVEk1UXpFbk9pZHZaM1FuTENkY1hIVXlPVUkxSnpvbmIyaGlZWEluTENkY1hIVXdNMEU1SnpvbmIyaHRKeXduWEZ4MU1qbENSU2M2SjI5c1kybHlKeXduWEZ4MU1qbENRaWM2SjI5c1kzSnZjM01uTENkY1hIVXlNRE5GSnpvbmIyeHBibVVuTENkY1hIVXlPVU13SnpvbmIyeDBKeXduWEZ4MU1ERTBReWM2SjA5dFlXTnlKeXduWEZ4MU1ERTBSQ2M2SjI5dFlXTnlKeXduWEZ4MU1ETkRPU2M2SjI5dFpXZGhKeXduWEZ4MU1ETTVSaWM2SjA5dGFXTnliMjRuTENkY1hIVXdNMEpHSnpvbmIyMXBZM0p2Ymljc0oxeGNkVEk1UWpZbk9pZHZiV2xrSnl3blhGeDFSRGd6TlZ4Y2RVUkVORFluT2lkUGIzQm1KeXduWEZ4MVJEZ3pOVnhjZFVSRU5qQW5PaWR2YjNCbUp5d25YRngxTWpsQ055YzZKMjl3WVhJbkxDZGNYSFV5T1VJNUp6b25iM0JsY25BbkxDZGNYSFV5UVRVMEp6b25UM0luTENkY1hIVXlNakk0SnpvbmIzSW5MQ2RjWEhVeVFUVkVKem9uYjNKa0p5d25YRngxTWpFek5DYzZKMjl6WTNJbkxDZGNYSGhCUVNjNkoyOXlaR1luTENkY1hIaENRU2M2SjI5eVpHMG5MQ2RjWEhVeU1rSTJKem9uYjNKcFoyOW1KeXduWEZ4MU1rRTFOaWM2SjI5eWIzSW5MQ2RjWEhVeVFUVTNKem9uYjNKemJHOXdaU2NzSjF4Y2RUSkJOVUluT2lkdmNuWW5MQ2RjWEhWRU9ETTFYRngxUkVOQlFTYzZKMDl6WTNJbkxDZGNYSGhFT0NjNkowOXpiR0Z6YUNjc0oxeGNlRVk0SnpvbmIzTnNZWE5vSnl3blhGeDFNakk1T0NjNkoyOXpiMnduTENkY1hIaEVOU2M2SjA5MGFXeGtaU2NzSjF4Y2VFWTFKem9uYjNScGJHUmxKeXduWEZ4MU1rRXpOaWM2SjI5MGFXMWxjMkZ6Snl3blhGeDFNa0V6TnljNkowOTBhVzFsY3ljc0oxeGNlRVEySnpvblQzVnRiQ2NzSjF4Y2VFWTJKem9uYjNWdGJDY3NKMXhjZFRJek0wUW5PaWR2ZG1KaGNpY3NKMXhjZFRJelJFVW5PaWRQZG1WeVFuSmhZMlVuTENkY1hIVXlNMEkwSnpvbmRHSnlheWNzSjF4Y2RUSXpSRU1uT2lkUGRtVnlVR0Z5Wlc1MGFHVnphWE1uTENkY1hIaENOaWM2SjNCaGNtRW5MQ2RjWEhVeVFVWXpKem9uY0dGeWMybHRKeXduWEZ4MU1rRkdSQ2M2SjNCaGNuTnNKeXduWEZ4MU1qSXdNaWM2SjNCaGNuUW5MQ2RjWEhVd05ERkdKem9uVUdONUp5d25YRngxTURRelJpYzZKM0JqZVNjc0p5VW5PaWR3WlhKamJuUW5MQ2N1SnpvbmNHVnlhVzlrSnl3blhGeDFNakF6TUNjNkozQmxjbTFwYkNjc0oxeGNkVEl3TXpFbk9pZHdaWEowWlc1ckp5d25YRngxUkRnek5WeGNkVVJFTVRNbk9pZFFabkluTENkY1hIVkVPRE0xWEZ4MVJFUXlSQ2M2SjNCbWNpY3NKMXhjZFRBelFUWW5PaWRRYUdrbkxDZGNYSFV3TTBNMkp6b25jR2hwSnl3blhGeDFNRE5FTlNjNkozQm9hWFluTENkY1hIVXlOakJGSnpvbmNHaHZibVVuTENkY1hIVXdNMEV3SnpvblVHa25MQ2RjWEhVd00wTXdKem9uY0drbkxDZGNYSFV3TTBRMkp6b25jR2wySnl3blhGeDFNakV3UlNjNkozQnNZVzVqYTJnbkxDZGNYSFV5UVRJekp6b25jR3gxYzJGamFYSW5MQ2RjWEhVeVFUSXlKem9uY0d4MWMyTnBjaWNzSnlzbk9pZHdiSFZ6Snl3blhGeDFNa0V5TlNjNkozQnNkWE5rZFNjc0oxeGNkVEpCTnpJbk9pZHdiSFZ6WlNjc0oxeGNlRUl4SnpvbmNHMG5MQ2RjWEhVeVFUSTJKem9uY0d4MWMzTnBiU2NzSjF4Y2RUSkJNamNuT2lkd2JIVnpkSGR2Snl3blhGeDFNa0V4TlNjNkozQnZhVzUwYVc1MEp5d25YRngxUkRnek5WeGNkVVJFTmpFbk9pZHdiM0JtSnl3blhGeDFNakV4T1NjNkoxQnZjR1luTENkY1hIaEJNeWM2SjNCdmRXNWtKeXduWEZ4MU1rRkNOeWM2SjNCeVlYQW5MQ2RjWEhVeVFVSkNKem9uVUhJbkxDZGNYSFV5TWpkQkp6b25jSEluTENkY1hIVXlNamRESnpvbmNISmpkV1VuTENkY1hIVXlRVUZHSnpvbmNISmxKeXduWEZ4MU1qSTNSU2M2SjNCeWMybHRKeXduWEZ4MU1rRkNPU2M2SjNCeWJtRndKeXduWEZ4MU1rRkNOU2M2SjNCeWJrVW5MQ2RjWEhVeU1rVTRKem9uY0hKdWMybHRKeXduWEZ4MU1rRkNNeWM2SjNCeVJTY3NKMXhjZFRJd016SW5PaWR3Y21sdFpTY3NKMXhjZFRJd016TW5PaWRRY21sdFpTY3NKMXhjZFRJeU1FWW5PaWR3Y205a0p5d25YRngxTWpNeVJTYzZKM0J5YjJaaGJHRnlKeXduWEZ4MU1qTXhNaWM2SjNCeWIyWnNhVzVsSnl3blhGeDFNak14TXljNkozQnliMlp6ZFhKbUp5d25YRngxTWpJeFJDYzZKM0J5YjNBbkxDZGNYSFV5TWtJd0p6b25jSEoxY21Wc0p5d25YRngxUkRnek5WeGNkVVJEUVVJbk9pZFFjMk55Snl3blhGeDFSRGd6TlZ4Y2RVUkRRelVuT2lkd2MyTnlKeXduWEZ4MU1ETkJPQ2M2SjFCemFTY3NKMXhjZFRBelF6Z25PaWR3YzJrbkxDZGNYSFV5TURBNEp6b25jSFZ1WTNOd0p5d25YRngxUkRnek5WeGNkVVJFTVRRbk9pZFJabkluTENkY1hIVkVPRE0xWEZ4MVJFUXlSU2M2SjNGbWNpY3NKMXhjZFVRNE16VmNYSFZFUkRZeUp6b25jVzl3Wmljc0oxeGNkVEl4TVVFbk9pZFJiM0JtSnl3blhGeDFNakExTnljNkozRndjbWx0WlNjc0oxeGNkVVE0TXpWY1hIVkVRMEZESnpvblVYTmpjaWNzSjF4Y2RVUTRNelZjWEhWRVEwTTJKem9uY1hOamNpY3NKMXhjZFRKQk1UWW5PaWR4ZFdGMGFXNTBKeXduUHljNkozRjFaWE4wSnl3blhDSW5PaWR4ZFc5MEp5d25YRngxTWpGRVFpYzZKM0pCWVhKeUp5d25YRngxTWpJelJGeGNkVEF6TXpFbk9pZHlZV05sSnl3blhGeDFNREUxTkNjNkoxSmhZM1YwWlNjc0oxeGNkVEF4TlRVbk9pZHlZV04xZEdVbkxDZGNYSFV5TWpGQkp6b25VM0Z5ZENjc0oxeGNkVEk1UWpNbk9pZHlZV1Z0Y0hSNWRpY3NKMXhjZFRJM1JUa25PaWR5WVc1bkp5d25YRngxTWpkRlFpYzZKMUpoYm1jbkxDZGNYSFV5T1RreUp6b25jbUZ1WjJRbkxDZGNYSFV5T1VFMUp6b25jbUZ1WjJVbkxDZGNYSGhDUWljNkozSmhjWFZ2Snl3blhGeDFNamszTlNjNkozSmhjbkpoY0Njc0oxeGNkVEl4UlRVbk9pZHlZWEp5WWljc0oxeGNkVEk1TWpBbk9pZHlZWEp5WW1aekp5d25YRngxTWprek15YzZKM0poY25Kakp5d25YRngxTWpFNU1pYzZKM0poY25JbkxDZGNYSFV5TVVFd0p6b25VbUZ5Y2ljc0oxeGNkVEk1TVVVbk9pZHlZWEp5Wm5NbkxDZGNYSFV5T1RRMUp6b25jbUZ5Y25Cc0p5d25YRngxTWprM05DYzZKM0poY25KemFXMG5MQ2RjWEhVeU9URTJKem9uVW1GeWNuUnNKeXduWEZ4MU1qRkJNeWM2SjNKaGNuSjBiQ2NzSjF4Y2RUSXhPVVFuT2lkeVlYSnlkeWNzSjF4Y2RUSTVNVUVuT2lkeVlYUmhhV3duTENkY1hIVXlPVEZESnpvbmNrRjBZV2xzSnl3blhGeDFNakl6TmljNkozSmhkR2x2Snl3blhGeDFNamMzTXljNkozSmlZbkpySnl3bmZTYzZKM0pqZFdJbkxDZGRKem9uY25OeFlpY3NKMXhjZFRJNU9FTW5PaWR5WW5KclpTY3NKMXhjZFRJNU9FVW5PaWR5WW5KcmMyeGtKeXduWEZ4MU1qazVNQ2M2SjNKaWNtdHpiSFVuTENkY1hIVXdNVFU0SnpvblVtTmhjbTl1Snl3blhGeDFNREUxT1NjNkozSmpZWEp2Ymljc0oxeGNkVEF4TlRZbk9pZFNZMlZrYVd3bkxDZGNYSFV3TVRVM0p6b25jbU5sWkdsc0p5d25YRngxTWpNd09TYzZKM0pqWldsc0p5d25YRngxTURReU1DYzZKMUpqZVNjc0oxeGNkVEEwTkRBbk9pZHlZM2tuTENkY1hIVXlPVE0zSnpvbmNtUmpZU2NzSjF4Y2RUSTVOamtuT2lkeVpHeGthR0Z5Snl3blhGeDFNakZDTXljNkozSmtjMmduTENkY1hIVXlNVEZESnpvblVtVW5MQ2RjWEhVeU1URkNKem9uVW5OamNpY3NKMXhjZFRJeE1VUW5PaWRTYjNCbUp5d25YRngxTWpWQlJDYzZKM0psWTNRbkxDZGNYSFV5T1RkRUp6b25jbVpwYzJoMEp5d25YRngxTWpNd1FpYzZKM0ptYkc5dmNpY3NKMXhjZFVRNE16VmNYSFZFUkRKR0p6b25jbVp5Snl3blhGeDFNamsyTkNjNkozSklZWEluTENkY1hIVXlNVU13SnpvbmNtaGhjblVuTENkY1hIVXlPVFpESnpvbmNtaGhjblZzSnl3blhGeDFNRE5CTVNjNkoxSm9ieWNzSjF4Y2RUQXpRekVuT2lkeWFHOG5MQ2RjWEhVd00wWXhKem9uY21odmRpY3NKMXhjZFRJeFF6UW5PaWR5YkdGeWNpY3NKMXhjZFRJM1JUY25PaWR5YjJKeWF5Y3NKMXhjZFRJNU5VUW5PaWRTYVdkb2RFUnZkMjVVWldWV1pXTjBiM0luTENkY1hIVXlPVFUxSnpvblVtbG5hSFJFYjNkdVZtVmpkRzl5UW1GeUp5d25YRngxTWpGRE9TYzZKM0p5WVhKeUp5d25YRngxTWpKQk1pYzZKM1prWVhOb0p5d25YRngxTWprMVFpYzZKMUpwWjJoMFZHVmxWbVZqZEc5eUp5d25YRngxTWpKRFF5YzZKM0owYUhKbFpTY3NKMXhjZFRJNVJEQW5PaWRTYVdkb2RGUnlhV0Z1WjJ4bFFtRnlKeXduWEZ4MU1qSkNNeWM2SjNaeWRISnBKeXduWEZ4MU1qSkNOU2M2SjNKMGNtbGxKeXduWEZ4MU1qazBSaWM2SjFKcFoyaDBWWEJFYjNkdVZtVmpkRzl5Snl3blhGeDFNamsxUXljNkoxSnBaMmgwVlhCVVpXVldaV04wYjNJbkxDZGNYSFV5T1RVMEp6b25VbWxuYUhSVmNGWmxZM1J2Y2tKaGNpY3NKMXhjZFRJeFFrVW5PaWQxYUdGeWNpY3NKMXhjZFRJNU5UTW5PaWRTYVdkb2RGWmxZM1J2Y2tKaGNpY3NKMXhjZFRBeVJFRW5PaWR5YVc1bkp5d25YRngxTWpBd1JpYzZKM0pzYlNjc0oxeGNkVEl6UWpFbk9pZHliVzkxYzNRbkxDZGNYSFV5UVVWRkp6b25jbTV0YVdRbkxDZGNYSFV5TjBWRUp6b25jbTloYm1jbkxDZGNYSFV5TVVaRkp6b25jbTloY25JbkxDZGNYSFV5T1RnMkp6b25jbTl3WVhJbkxDZGNYSFZFT0RNMVhGeDFSRVEyTXljNkozSnZjR1luTENkY1hIVXlRVEpGSnpvbmNtOXdiSFZ6Snl3blhGeDFNa0V6TlNjNkozSnZkR2x0WlhNbkxDZGNYSFV5T1Rjd0p6b25VbTkxYm1SSmJYQnNhV1Z6Snl3bktTYzZKM0p3WVhJbkxDZGNYSFV5T1RrMEp6b25jbkJoY21kMEp5d25YRngxTWtFeE1pYzZKM0p3Y0c5c2FXNTBKeXduWEZ4MU1qQXpRU2M2SjNKellYRjFieWNzSjF4Y2RVUTRNelZjWEhWRVEwTTNKem9uY25OamNpY3NKMXhjZFRJeFFqRW5PaWR5YzJnbkxDZGNYSFV5TWtOQkp6b25jblJwYldWekp5d25YRngxTWpWQ09TYzZKM0owY21rbkxDZGNYSFV5T1VORkp6b25jblJ5YVd4MGNta25MQ2RjWEhVeU9VWTBKem9uVW5Wc1pVUmxiR0Y1WldRbkxDZGNYSFV5T1RZNEp6b25jblZzZFdoaGNpY3NKMXhjZFRJeE1VVW5PaWR5ZUNjc0oxeGNkVEF4TlVFbk9pZFRZV04xZEdVbkxDZGNYSFV3TVRWQ0p6b25jMkZqZFhSbEp5d25YRngxTWtGQ09DYzZKM05qWVhBbkxDZGNYSFV3TVRZd0p6b25VMk5oY205dUp5d25YRngxTURFMk1TYzZKM05qWVhKdmJpY3NKMXhjZFRKQlFrTW5PaWRUWXljc0oxeGNkVEl5TjBJbk9pZHpZeWNzSjF4Y2RUSXlOMFFuT2lkelkyTjFaU2NzSjF4Y2RUSkJRakFuT2lkelkyVW5MQ2RjWEhVeVFVSTBKem9uYzJORkp5d25YRngxTURFMVJTYzZKMU5qWldScGJDY3NKMXhjZFRBeE5VWW5PaWR6WTJWa2FXd25MQ2RjWEhVd01UVkRKem9uVTJOcGNtTW5MQ2RjWEhVd01UVkVKem9uYzJOcGNtTW5MQ2RjWEhVeVFVSkJKem9uYzJOdVlYQW5MQ2RjWEhVeVFVSTJKem9uYzJOdVJTY3NKMXhjZFRJeVJUa25PaWR6WTI1emFXMG5MQ2RjWEhVeVFURXpKem9uYzJOd2IyeHBiblFuTENkY1hIVXlNamRHSnpvbmMyTnphVzBuTENkY1hIVXdOREl4SnpvblUyTjVKeXduWEZ4MU1EUTBNU2M2SjNOamVTY3NKMXhjZFRJeVF6VW5PaWR6Wkc5MEp5d25YRngxTWtFMk5pYzZKM05rYjNSbEp5d25YRngxTWpGRU9DYzZKM05sUVhKeUp5d25YRng0UVRjbk9pZHpaV04wSnl3bk95YzZKM05sYldrbkxDZGNYSFV5T1RJNUp6b25kRzl6WVNjc0oxeGNkVEkzTXpZbk9pZHpaWGgwSnl3blhGeDFSRGd6TlZ4Y2RVUkVNVFluT2lkVFpuSW5MQ2RjWEhWRU9ETTFYRngxUkVRek1DYzZKM05tY2ljc0oxeGNkVEkyTmtZbk9pZHphR0Z5Y0Njc0oxeGNkVEEwTWprbk9pZFRTRU5JWTNrbkxDZGNYSFV3TkRRNUp6b25jMmhqYUdONUp5d25YRngxTURReU9DYzZKMU5JWTNrbkxDZGNYSFV3TkRRNEp6b25jMmhqZVNjc0oxeGNkVEl4T1RFbk9pZDFZWEp5Snl3blhGeDRRVVFuT2lkemFIa25MQ2RjWEhVd00wRXpKem9uVTJsbmJXRW5MQ2RjWEhVd00wTXpKem9uYzJsbmJXRW5MQ2RjWEhVd00wTXlKem9uYzJsbmJXRm1KeXduWEZ4MU1qSXpReWM2SjNOcGJTY3NKMXhjZFRKQk5rRW5PaWR6YVcxa2IzUW5MQ2RjWEhVeU1qUXpKem9uYzJsdFpTY3NKMXhjZFRKQk9VVW5PaWR6YVcxbkp5d25YRngxTWtGQk1DYzZKM05wYldkRkp5d25YRngxTWtFNVJDYzZKM05wYld3bkxDZGNYSFV5UVRsR0p6b25jMmx0YkVVbkxDZGNYSFV5TWpRMkp6b25jMmx0Ym1VbkxDZGNYSFV5UVRJMEp6b25jMmx0Y0d4MWN5Y3NKMXhjZFRJNU56SW5PaWR6YVcxeVlYSnlKeXduWEZ4MU1rRXpNeWM2SjNOdFlYTm9jQ2NzSjF4Y2RUSTVSVFFuT2lkemJXVndZWEp6YkNjc0oxeGNkVEl6TWpNbk9pZHpiV2xzWlNjc0oxeGNkVEpCUVVFbk9pZHpiWFFuTENkY1hIVXlRVUZESnpvbmMyMTBaU2NzSjF4Y2RUSkJRVU5jWEhWR1JUQXdKem9uYzIxMFpYTW5MQ2RjWEhVd05ESkRKem9uVTA5R1ZHTjVKeXduWEZ4MU1EUTBReWM2SjNOdlpuUmplU2NzSjF4Y2RUSXpNMFluT2lkemIyeGlZWEluTENkY1hIVXlPVU0wSnpvbmMyOXNZaWNzSnk4bk9pZHpiMnduTENkY1hIVkVPRE0xWEZ4MVJFUTBRU2M2SjFOdmNHWW5MQ2RjWEhWRU9ETTFYRngxUkVRMk5DYzZKM052Y0dZbkxDZGNYSFV5TmpZd0p6b25jM0JoWkdWekp5d25YRngxTWpJNU15YzZKM054WTJGd0p5d25YRngxTWpJNU0xeGNkVVpGTURBbk9pZHpjV05oY0hNbkxDZGNYSFV5TWprMEp6b25jM0ZqZFhBbkxDZGNYSFV5TWprMFhGeDFSa1V3TUNjNkozTnhZM1Z3Y3ljc0oxeGNkVEl5T0VZbk9pZHpjWE4xWWljc0oxeGNkVEl5T1RFbk9pZHpjWE4xWW1VbkxDZGNYSFV5TWprd0p6b25jM0Z6ZFhBbkxDZGNYSFV5TWpreUp6b25jM0Z6ZFhCbEp5d25YRngxTWpWQk1TYzZKM054ZFNjc0oxeGNkVVE0TXpWY1hIVkVRMEZGSnpvblUzTmpjaWNzSjF4Y2RVUTRNelZjWEhWRVEwTTRKem9uYzNOamNpY3NKMXhjZFRJeVF6WW5PaWRUZEdGeUp5d25YRngxTWpZd05pYzZKM04wWVhJbkxDZGNYSFV5TWpneUp6b25jM1ZpSnl3blhGeDFNakpFTUNjNkoxTjFZaWNzSjF4Y2RUSkJRa1FuT2lkemRXSmtiM1FuTENkY1hIVXlRVU0xSnpvbmMzVmlSU2NzSjF4Y2RUSXlPRFluT2lkemRXSmxKeXduWEZ4MU1rRkRNeWM2SjNOMVltVmtiM1FuTENkY1hIVXlRVU14SnpvbmMzVmliWFZzZENjc0oxeGNkVEpCUTBJbk9pZHpkV0p1UlNjc0oxeGNkVEl5T0VFbk9pZHpkV0p1WlNjc0oxeGNkVEpCUWtZbk9pZHpkV0p3YkhWekp5d25YRngxTWprM09TYzZKM04xWW5KaGNuSW5MQ2RjWEhVeVFVTTNKem9uYzNWaWMybHRKeXduWEZ4MU1rRkVOU2M2SjNOMVluTjFZaWNzSjF4Y2RUSkJSRE1uT2lkemRXSnpkWEFuTENkY1hIVXlNakV4SnpvbmMzVnRKeXduWEZ4MU1qWTJRU2M2SjNOMWJtY25MQ2RjWEhoQ09TYzZKM04xY0RFbkxDZGNYSGhDTWljNkozTjFjREluTENkY1hIaENNeWM2SjNOMWNETW5MQ2RjWEhVeU1qZ3pKem9uYzNWd0p5d25YRngxTWpKRU1TYzZKMU4xY0Njc0oxeGNkVEpCUWtVbk9pZHpkWEJrYjNRbkxDZGNYSFV5UVVRNEp6b25jM1Z3WkhOMVlpY3NKMXhjZFRKQlF6WW5PaWR6ZFhCRkp5d25YRngxTWpJNE55YzZKM04xY0dVbkxDZGNYSFV5UVVNMEp6b25jM1Z3WldSdmRDY3NKMXhjZFRJM1F6a25PaWR6ZFhCb2MyOXNKeXduWEZ4MU1rRkVOeWM2SjNOMWNHaHpkV0luTENkY1hIVXlPVGRDSnpvbmMzVndiR0Z5Y2ljc0oxeGNkVEpCUXpJbk9pZHpkWEJ0ZFd4MEp5d25YRngxTWtGRFF5YzZKM04xY0c1Rkp5d25YRngxTWpJNFFpYzZKM04xY0c1bEp5d25YRngxTWtGRE1DYzZKM04xY0hCc2RYTW5MQ2RjWEhVeVFVTTRKem9uYzNWd2MybHRKeXduWEZ4MU1rRkVOQ2M2SjNOMWNITjFZaWNzSjF4Y2RUSkJSRFluT2lkemRYQnpkWEFuTENkY1hIVXlNVVE1SnpvbmMzZEJjbkluTENkY1hIVXlPVEpCSnpvbmMzZHVkMkZ5Snl3blhGeDRSRVluT2lkemVteHBaeWNzSjF4Y2RDYzZKMVJoWWljc0oxeGNkVEl6TVRZbk9pZDBZWEpuWlhRbkxDZGNYSFV3TTBFMEp6b25WR0YxSnl3blhGeDFNRE5ETkNjNkozUmhkU2NzSjF4Y2RUQXhOalFuT2lkVVkyRnliMjRuTENkY1hIVXdNVFkxSnpvbmRHTmhjbTl1Snl3blhGeDFNREUyTWljNkoxUmpaV1JwYkNjc0oxeGNkVEF4TmpNbk9pZDBZMlZrYVd3bkxDZGNYSFV3TkRJeUp6b25WR041Snl3blhGeDFNRFEwTWljNkozUmplU2NzSjF4Y2RUSXdSRUluT2lkMFpHOTBKeXduWEZ4MU1qTXhOU2M2SjNSbGJISmxZeWNzSjF4Y2RVUTRNelZjWEhWRVJERTNKem9uVkdaeUp5d25YRngxUkRnek5WeGNkVVJFTXpFbk9pZDBabkluTENkY1hIVXlNak0wSnpvbmRHaGxjbVUwSnl3blhGeDFNRE01T0NjNkoxUm9aWFJoSnl3blhGeDFNRE5DT0NjNkozUm9aWFJoSnl3blhGeDFNRE5FTVNjNkozUm9aWFJoZGljc0oxeGNkVEl3TlVaY1hIVXlNREJCSnpvblZHaHBZMnRUY0dGalpTY3NKMXhjZFRJd01Ea25PaWQwYUdsdWMzQW5MQ2RjWEhoRVJTYzZKMVJJVDFKT0p5d25YRng0UmtVbk9pZDBhRzl5Ymljc0oxeGNkVEpCTXpFbk9pZDBhVzFsYzJKaGNpY3NKMXhjZUVRM0p6b25kR2x0WlhNbkxDZGNYSFV5UVRNd0p6b25kR2x0WlhOa0p5d25YRngxTWpNek5pYzZKM1J2Y0dKdmRDY3NKMXhjZFRKQlJqRW5PaWQwYjNCamFYSW5MQ2RjWEhWRU9ETTFYRngxUkVRMFFpYzZKMVJ2Y0dZbkxDZGNYSFZFT0RNMVhGeDFSRVEyTlNjNkozUnZjR1luTENkY1hIVXlRVVJCSnpvbmRHOXdabTl5YXljc0oxeGNkVEl3TXpRbk9pZDBjSEpwYldVbkxDZGNYSFV5TVRJeUp6b25kSEpoWkdVbkxDZGNYSFV5TlVJMUp6b25kWFJ5YVNjc0oxeGNkVEl5TlVNbk9pZDBjbWxsSnl3blhGeDFNalZGUXljNkozUnlhV1J2ZENjc0oxeGNkVEpCTTBFbk9pZDBjbWx0YVc1MWN5Y3NKMXhjZFRKQk16a25PaWQwY21sd2JIVnpKeXduWEZ4MU1qbERSQ2M2SjNSeWFYTmlKeXduWEZ4MU1rRXpRaWM2SjNSeWFYUnBiV1VuTENkY1hIVXlNMFV5SnpvbmRISndaWHBwZFcwbkxDZGNYSFZFT0RNMVhGeDFSRU5CUmljNkoxUnpZM0luTENkY1hIVkVPRE0xWEZ4MVJFTkRPU2M2SjNSelkzSW5MQ2RjWEhVd05ESTJKem9uVkZOamVTY3NKMXhjZFRBME5EWW5PaWQwYzJONUp5d25YRngxTURRd1FpYzZKMVJUU0dONUp5d25YRngxTURRMVFpYzZKM1J6YUdONUp5d25YRngxTURFMk5pYzZKMVJ6ZEhKdmF5Y3NKMXhjZFRBeE5qY25PaWQwYzNSeWIyc25MQ2RjWEhoRVFTYzZKMVZoWTNWMFpTY3NKMXhjZUVaQkp6b25kV0ZqZFhSbEp5d25YRngxTWpFNVJpYzZKMVZoY25JbkxDZGNYSFV5T1RRNUp6b25WV0Z5Y205amFYSW5MQ2RjWEhVd05EQkZKem9uVldKeVkza25MQ2RjWEhVd05EVkZKem9uZFdKeVkza25MQ2RjWEhVd01UWkRKem9uVldKeVpYWmxKeXduWEZ4MU1ERTJSQ2M2SjNWaWNtVjJaU2NzSjF4Y2VFUkNKem9uVldOcGNtTW5MQ2RjWEhoR1FpYzZKM1ZqYVhKakp5d25YRngxTURReU15YzZKMVZqZVNjc0oxeGNkVEEwTkRNbk9pZDFZM2tuTENkY1hIVXlNVU0xSnpvbmRXUmhjbkluTENkY1hIVXdNVGN3SnpvblZXUmliR0ZqSnl3blhGeDFNREUzTVNjNkozVmtZbXhoWXljc0oxeGNkVEk1TmtVbk9pZDFaR2hoY2ljc0oxeGNkVEk1TjBVbk9pZDFabWx6YUhRbkxDZGNYSFZFT0RNMVhGeDFSRVF4T0NjNkoxVm1jaWNzSjF4Y2RVUTRNelZjWEhWRVJETXlKem9uZFdaeUp5d25YRng0UkRrbk9pZFZaM0poZG1VbkxDZGNYSGhHT1NjNkozVm5jbUYyWlNjc0oxeGNkVEk1TmpNbk9pZDFTR0Z5Snl3blhGeDFNalU0TUNjNkozVm9ZbXhySnl3blhGeDFNak14UXljNkozVnNZMjl5Ymljc0oxeGNkVEl6TUVZbk9pZDFiR055YjNBbkxDZGNYSFV5TlVZNEp6b25kV3gwY21rbkxDZGNYSFV3TVRaQkp6b25WVzFoWTNJbkxDZGNYSFV3TVRaQ0p6b25kVzFoWTNJbkxDZGNYSFV5TTBSR0p6b25WVzVrWlhKQ2NtRmpaU2NzSjF4Y2RUSXpSRVFuT2lkVmJtUmxjbEJoY21WdWRHaGxjMmx6Snl3blhGeDFNakk0UlNjNkozVndiSFZ6Snl3blhGeDFNREUzTWljNkoxVnZaMjl1Snl3blhGeDFNREUzTXljNkozVnZaMjl1Snl3blhGeDFSRGd6TlZ4Y2RVUkVORU1uT2lkVmIzQm1KeXduWEZ4MVJEZ3pOVnhjZFVSRU5qWW5PaWQxYjNCbUp5d25YRngxTWpreE1pYzZKMVZ3UVhKeWIzZENZWEluTENkY1hIVXlNVGsxSnpvbmRtRnljaWNzSjF4Y2RUQXpRelVuT2lkMWNITnBKeXduWEZ4MU1ETkVNaWM2SjFWd2Mya25MQ2RjWEhVd00wRTFKem9uVlhCemFXeHZiaWNzSjF4Y2RUSXhRemduT2lkMWRXRnljaWNzSjF4Y2RUSXpNVVFuT2lkMWNtTnZjbTRuTENkY1hIVXlNekJGSnpvbmRYSmpjbTl3Snl3blhGeDFNREUyUlNjNkoxVnlhVzVuSnl3blhGeDFNREUyUmljNkozVnlhVzVuSnl3blhGeDFNalZHT1NjNkozVnlkSEpwSnl3blhGeDFSRGd6TlZ4Y2RVUkRRakFuT2lkVmMyTnlKeXduWEZ4MVJEZ3pOVnhjZFVSRFEwRW5PaWQxYzJOeUp5d25YRngxTWpKR01DYzZKM1YwWkc5MEp5d25YRngxTURFMk9DYzZKMVYwYVd4a1pTY3NKMXhjZFRBeE5qa25PaWQxZEdsc1pHVW5MQ2RjWEhoRVF5YzZKMVYxYld3bkxDZGNYSGhHUXljNkozVjFiV3duTENkY1hIVXlPVUUzSnpvbmRYZGhibWRzWlNjc0oxeGNkVEk1T1VNbk9pZDJZVzVuY25RbkxDZGNYSFV5TWpoQlhGeDFSa1V3TUNjNkozWnpkV0p1WlNjc0oxeGNkVEpCUTBKY1hIVkdSVEF3SnpvbmRuTjFZbTVGSnl3blhGeDFNakk0UWx4Y2RVWkZNREFuT2lkMmMzVndibVVuTENkY1hIVXlRVU5EWEZ4MVJrVXdNQ2M2SjNaemRYQnVSU2NzSjF4Y2RUSkJSVGduT2lkMlFtRnlKeXduWEZ4MU1rRkZRaWM2SjFaaVlYSW5MQ2RjWEhVeVFVVTVKem9uZGtKaGNuWW5MQ2RjWEhVd05ERXlKem9uVm1ONUp5d25YRngxTURRek1pYzZKM1pqZVNjc0oxeGNkVEl5UVRrbk9pZFdaR0Z6YUNjc0oxeGNkVEl5UVVJbk9pZFdSR0Z6YUNjc0oxeGNkVEpCUlRZbk9pZFdaR0Z6YUd3bkxDZGNYSFV5TWtKQ0p6b25kbVZsWW1GeUp5d25YRngxTWpJMVFTYzZKM1psWldWeEp5d25YRngxTWpKRlJTYzZKM1psYkd4cGNDY3NKM3duT2lkMlpYSjBKeXduWEZ4MU1qQXhOaWM2SjFabGNuUW5MQ2RjWEhVeU56VTRKem9uVm1WeWRHbGpZV3hUWlhCaGNtRjBiM0luTENkY1hIVXlNalF3SnpvbmQzSW5MQ2RjWEhWRU9ETTFYRngxUkVReE9TYzZKMVptY2ljc0oxeGNkVVE0TXpWY1hIVkVSRE16SnpvbmRtWnlKeXduWEZ4MVJEZ3pOVnhjZFVSRU5FUW5PaWRXYjNCbUp5d25YRngxUkRnek5WeGNkVVJFTmpjbk9pZDJiM0JtSnl3blhGeDFSRGd6TlZ4Y2RVUkRRakVuT2lkV2MyTnlKeXduWEZ4MVJEZ3pOVnhjZFVSRFEwSW5PaWQyYzJOeUp5d25YRngxTWpKQlFTYzZKMVoyWkdGemFDY3NKMXhjZFRJNU9VRW5PaWQyZW1sbmVtRm5KeXduWEZ4MU1ERTNOQ2M2SjFkamFYSmpKeXduWEZ4MU1ERTNOU2M2SjNkamFYSmpKeXduWEZ4MU1rRTFSaWM2SjNkbFpHSmhjaWNzSjF4Y2RUSXlOVGtuT2lkM1pXUm5aWEVuTENkY1hIVXlNVEU0SnpvbmQzQW5MQ2RjWEhWRU9ETTFYRngxUkVReFFTYzZKMWRtY2ljc0oxeGNkVVE0TXpWY1hIVkVSRE0wSnpvbmQyWnlKeXduWEZ4MVJEZ3pOVnhjZFVSRU5FVW5PaWRYYjNCbUp5d25YRngxUkRnek5WeGNkVVJFTmpnbk9pZDNiM0JtSnl3blhGeDFSRGd6TlZ4Y2RVUkRRakluT2lkWGMyTnlKeXduWEZ4MVJEZ3pOVnhjZFVSRFEwTW5PaWQzYzJOeUp5d25YRngxUkRnek5WeGNkVVJFTVVJbk9pZFlabkluTENkY1hIVkVPRE0xWEZ4MVJFUXpOU2M2SjNobWNpY3NKMXhjZFRBek9VVW5PaWRZYVNjc0oxeGNkVEF6UWtVbk9pZDRhU2NzSjF4Y2RUSXlSa0luT2lkNGJtbHpKeXduWEZ4MVJEZ3pOVnhjZFVSRU5FWW5PaWRZYjNCbUp5d25YRngxUkRnek5WeGNkVVJFTmprbk9pZDRiM0JtSnl3blhGeDFSRGd6TlZ4Y2RVUkRRak1uT2lkWWMyTnlKeXduWEZ4MVJEZ3pOVnhjZFVSRFEwUW5PaWQ0YzJOeUp5d25YRng0UkVRbk9pZFpZV04xZEdVbkxDZGNYSGhHUkNjNkozbGhZM1YwWlNjc0oxeGNkVEEwTWtZbk9pZFpRV041Snl3blhGeDFNRFEwUmljNkozbGhZM2tuTENkY1hIVXdNVGMySnpvbldXTnBjbU1uTENkY1hIVXdNVGMzSnpvbmVXTnBjbU1uTENkY1hIVXdOREpDSnpvbldXTjVKeXduWEZ4MU1EUTBRaWM2SjNsamVTY3NKMXhjZUVFMUp6b25lV1Z1Snl3blhGeDFSRGd6TlZ4Y2RVUkVNVU1uT2lkWlpuSW5MQ2RjWEhWRU9ETTFYRngxUkVRek5pYzZKM2xtY2ljc0oxeGNkVEEwTURjbk9pZFpTV041Snl3blhGeDFNRFExTnljNkozbHBZM2tuTENkY1hIVkVPRE0xWEZ4MVJFUTFNQ2M2SjFsdmNHWW5MQ2RjWEhWRU9ETTFYRngxUkVRMlFTYzZKM2x2Y0dZbkxDZGNYSFZFT0RNMVhGeDFSRU5DTkNjNkoxbHpZM0luTENkY1hIVkVPRE0xWEZ4MVJFTkRSU2M2SjNselkzSW5MQ2RjWEhVd05ESkZKem9uV1ZWamVTY3NKMXhjZFRBME5FVW5PaWQ1ZFdONUp5d25YRng0UmtZbk9pZDVkVzFzSnl3blhGeDFNREUzT0NjNkoxbDFiV3duTENkY1hIVXdNVGM1SnpvbldtRmpkWFJsSnl3blhGeDFNREUzUVNjNkozcGhZM1YwWlNjc0oxeGNkVEF4TjBRbk9pZGFZMkZ5YjI0bkxDZGNYSFV3TVRkRkp6b25lbU5oY205dUp5d25YRngxTURReE55YzZKMXBqZVNjc0oxeGNkVEEwTXpjbk9pZDZZM2tuTENkY1hIVXdNVGRDSnpvbldtUnZkQ2NzSjF4Y2RUQXhOME1uT2lkNlpHOTBKeXduWEZ4MU1qRXlPQ2M2SjFwbWNpY3NKMXhjZFRBek9UWW5PaWRhWlhSaEp5d25YRngxTUROQ05pYzZKM3BsZEdFbkxDZGNYSFZFT0RNMVhGeDFSRVF6TnljNkozcG1jaWNzSjF4Y2RUQTBNVFluT2lkYVNHTjVKeXduWEZ4MU1EUXpOaWM2SjNwb1kza25MQ2RjWEhVeU1VUkVKem9uZW1sbmNtRnljaWNzSjF4Y2RVUTRNelZjWEhWRVJEWkNKem9uZW05d1ppY3NKMXhjZFVRNE16VmNYSFZFUTBJMUp6b25Xbk5qY2ljc0oxeGNkVVE0TXpWY1hIVkVRME5HSnpvbmVuTmpjaWNzSjF4Y2RUSXdNRVFuT2lkNmQyb25MQ2RjWEhVeU1EQkRKem9uZW5kdWFpZDlPMXh1WEc1Y2RIWmhjaUJ5WldkbGVFVnpZMkZ3WlNBOUlDOWJYQ0ltSnp3K1lGMHZaenRjYmx4MGRtRnlJR1Z6WTJGd1pVMWhjQ0E5SUh0Y2JseDBYSFFuWENJbk9pQW5KbkYxYjNRN0p5eGNibHgwWEhRbkppYzZJQ2NtWVcxd095Y3NYRzVjZEZ4MEoxeGNKeWM2SUNjbUkzZ3lOenNuTEZ4dVhIUmNkQ2M4SnpvZ0p5WnNkRHNuTEZ4dVhIUmNkQzh2SUZObFpTQm9kSFJ3Y3pvdkwyMWhkR2hwWVhOaWVXNWxibk11WW1VdmJtOTBaWE12WVcxaWFXZDFiM1Z6TFdGdGNHVnljMkZ1WkhNNklHbHVJRWhVVFV3c0lIUm9aVnh1WEhSY2RDOHZJR1p2Ykd4dmQybHVaeUJwY3lCdWIzUWdjM1J5YVdOMGJIa2dibVZqWlhOellYSjVJSFZ1YkdWemN5QnBkT0tBbVhNZ2NHRnlkQ0J2WmlCaElIUmhaeUJ2Y2lCaGJseHVYSFJjZEM4dklIVnVjWFZ2ZEdWa0lHRjBkSEpwWW5WMFpTQjJZV3gxWlM0Z1YyWGlnSmx5WlNCdmJteDVJR1Z6WTJGd2FXNW5JR2wwSUhSdklITjFjSEJ2Y25RZ2RHaHZjMlZjYmx4MFhIUXZMeUJ6YVhSMVlYUnBiMjV6TENCaGJtUWdabTl5SUZoTlRDQnpkWEJ3YjNKMExseHVYSFJjZENjK0p6b2dKeVpuZERzbkxGeHVYSFJjZEM4dklFbHVJRWx1ZEdWeWJtVjBJRVY0Y0d4dmNtVnlJT0tKcENBNExDQjBhR1VnWW1GamEzUnBZMnNnWTJoaGNtRmpkR1Z5SUdOaGJpQmlaU0IxYzJWa1hHNWNkRngwTHk4Z2RHOGdZbkpsWVdzZ2IzVjBJRzltSUNoMWJpbHhkVzkwWldRZ1lYUjBjbWxpZFhSbElIWmhiSFZsY3lCdmNpQklWRTFNSUdOdmJXMWxiblJ6TGx4dVhIUmNkQzh2SUZObFpTQm9kSFJ3T2k4dmFIUnRiRFZ6WldNdWIzSm5MeU14TURJc0lHaDBkSEE2THk5b2RHMXNOWE5sWXk1dmNtY3ZJekV3T0N3Z1lXNWtYRzVjZEZ4MEx5OGdhSFIwY0RvdkwyaDBiV3cxYzJWakxtOXlaeThqTVRNekxseHVYSFJjZENkZ0p6b2dKeVlqZURZd095ZGNibHgwZlR0Y2JseHVYSFIyWVhJZ2NtVm5aWGhKYm5aaGJHbGtSVzUwYVhSNUlEMGdMeVlqS0Q4NlczaFlYVnRlWVMxbVFTMUdNQzA1WFh4YlhqQXRPWGhZWFNrdk8xeHVYSFIyWVhJZ2NtVm5aWGhKYm5aaGJHbGtVbUYzUTI5a1pWQnZhVzUwSUQwZ0wxdGNYREF0WEZ4NE1EaGNYSGd3UWx4Y2VEQkZMVnhjZURGR1hGeDROMFl0WEZ4NE9VWmNYSFZHUkVRd0xWeGNkVVpFUlVaY1hIVkdSa1pGWEZ4MVJrWkdSbDE4VzF4Y2RVUTRNMFpjWEhWRU9EZEdYRngxUkRoQ1JseGNkVVE0UmtaY1hIVkVPVE5HWEZ4MVJEazNSbHhjZFVRNVFrWmNYSFZFT1VaR1hGeDFSRUV6Umx4Y2RVUkJOMFpjWEhWRVFVSkdYRngxUkVGR1JseGNkVVJDTTBaY1hIVkVRamRHWEZ4MVJFSkNSbHhjZFVSQ1JrWmRXMXhjZFVSR1JrVmNYSFZFUmtaR1hYeGJYRngxUkRnd01DMWNYSFZFUWtaR1hTZy9JVnRjWEhWRVF6QXdMVnhjZFVSR1JrWmRLWHdvUHpwYlhseGNkVVE0TURBdFhGeDFSRUpHUmwxOFhpbGJYRngxUkVNd01DMWNYSFZFUmtaR1hTODdYRzVjZEhaaGNpQnlaV2RsZUVSbFkyOWtaU0E5SUM4bUl5aGJNQzA1WFNzcEtEcy9LWHdtSTF0NFdGMG9XMkV0WmtFdFJqQXRPVjByS1NnN1B5bDhKaWhiTUMwNVlTMTZRUzFhWFNzcE8zd21LRUZoWTNWMFpYeHBZV04xZEdWOFZXRmpkWFJsZkhCc2RYTnRibnh2ZEdsc1pHVjhUM1JwYkdSbGZFRm5jbUYyWlh4aFozSmhkbVY4ZVdGamRYUmxmRmxoWTNWMFpYeHZjMnhoYzJoOFQzTnNZWE5vZkVGMGFXeGtaWHhoZEdsc1pHVjhZbkoyWW1GeWZFTmpaV1JwYkh4alkyVmthV3g4YjJkeVlYWmxmR04xY25KbGJueGthWFpwWkdWOFJXRmpkWFJsZkdWaFkzVjBaWHhQWjNKaGRtVjhiMkZqZFhSbGZFVm5jbUYyWlh4bFozSmhkbVY4ZFdkeVlYWmxmR1p5WVdNeE1ueG1jbUZqTVRSOFpuSmhZek0wZkZWbmNtRjJaWHhQWVdOMWRHVjhTV0ZqZFhSbGZHNTBhV3hrWlh4T2RHbHNaR1Y4ZFdGamRYUmxmRzFwWkdSdmRIeEpaM0poZG1WOGFXZHlZWFpsZkdseGRXVnpkSHhoWVdOMWRHVjhiR0Z4ZFc5OFZFaFBVazU4YldsamNtOThhV1Y0WTJ4OGFXTnBjbU44U1dOcGNtTjhRV05wY21OOGRXTnBjbU44WldOcGNtTjhUMk5wY21OOGIyTnBjbU44UldOcGNtTjhWV05wY21OOFlYSnBibWQ4UVhKcGJtZDhZV1ZzYVdkOFFVVnNhV2Q4WVdOMWRHVjhjRzkxYm1SOGNtRnhkVzk4WVdOcGNtTjhkR2x0WlhOOGRHaHZjbTU4YzNwc2FXZDhZMlZrYVd4OFEwOVFXWHhCZFcxc2ZHOXlaR1o4YjNKa2JYeDFkVzFzZkcxaFkzSjhWWFZ0Ykh4aGRXMXNmRTkxYld4OGIzVnRiSHh3WVhKaGZHNWljM0I4UlhWdGJIeHhkVzkwZkZGVlQxUjhaWFZ0Ykh4NWRXMXNmR05sYm5SOGMyVmpkSHhqYjNCNWZITjFjREY4YzNWd01ueHpkWEF6ZkVsMWJXeDhhWFZ0Ykh4emFIbDhaWFJvZkhKbFozeHViM1I4ZVdWdWZHRnRjSHhCVFZCOFVrVkhmSFZ0Ykh4RlZFaDhaR1ZuZkdkMGZFZFVmRXhVZkd4MEtTaGJQV0V0ZWtFdFdqQXRPVjBwUHk5bk8xeHVYSFIyWVhJZ1pHVmpiMlJsVFdGd0lEMGdleWRCWVdOMWRHVW5PaWRjWEhoRE1TY3NKMkZoWTNWMFpTYzZKMXhjZUVVeEp5d25RV0p5WlhabEp6b25YRngxTURFd01pY3NKMkZpY21WMlpTYzZKMXhjZFRBeE1ETW5MQ2RoWXljNkoxeGNkVEl5TTBVbkxDZGhZMlFuT2lkY1hIVXlNak5HSnl3bllXTkZKem9uWEZ4MU1qSXpSVnhjZFRBek16TW5MQ2RCWTJseVl5YzZKMXhjZUVNeUp5d25ZV05wY21Nbk9pZGNYSGhGTWljc0oyRmpkWFJsSnpvblhGeDRRalFuTENkQlkza25PaWRjWEhVd05ERXdKeXduWVdONUp6b25YRngxTURRek1DY3NKMEZGYkdsbkp6b25YRng0UXpZbkxDZGhaV3hwWnljNkoxeGNlRVUySnl3bllXWW5PaWRjWEhVeU1EWXhKeXduUVdaeUp6b25YRngxUkRnek5WeGNkVVJFTURRbkxDZGhabkluT2lkY1hIVkVPRE0xWEZ4MVJFUXhSU2NzSjBGbmNtRjJaU2M2SjF4Y2VFTXdKeXduWVdkeVlYWmxKem9uWEZ4NFJUQW5MQ2RoYkdWbWMzbHRKem9uWEZ4MU1qRXpOU2NzSjJGc1pYQm9Kem9uWEZ4MU1qRXpOU2NzSjBGc2NHaGhKem9uWEZ4MU1ETTVNU2NzSjJGc2NHaGhKem9uWEZ4MU1ETkNNU2NzSjBGdFlXTnlKem9uWEZ4MU1ERXdNQ2NzSjJGdFlXTnlKem9uWEZ4MU1ERXdNU2NzSjJGdFlXeG5Kem9uWEZ4MU1rRXpSaWNzSjJGdGNDYzZKeVluTENkQlRWQW5PaWNtSnl3bllXNWtZVzVrSnpvblhGeDFNa0UxTlNjc0owRnVaQ2M2SjF4Y2RUSkJOVE1uTENkaGJtUW5PaWRjWEhVeU1qSTNKeXduWVc1a1pDYzZKMXhjZFRKQk5VTW5MQ2RoYm1SemJHOXdaU2M2SjF4Y2RUSkJOVGduTENkaGJtUjJKem9uWEZ4MU1rRTFRU2NzSjJGdVp5YzZKMXhjZFRJeU1qQW5MQ2RoYm1kbEp6b25YRngxTWpsQk5DY3NKMkZ1WjJ4bEp6b25YRngxTWpJeU1DY3NKMkZ1WjIxelpHRmhKem9uWEZ4MU1qbEJPQ2NzSjJGdVoyMXpaR0ZpSnpvblhGeDFNamxCT1Njc0oyRnVaMjF6WkdGakp6b25YRngxTWpsQlFTY3NKMkZ1WjIxelpHRmtKem9uWEZ4MU1qbEJRaWNzSjJGdVoyMXpaR0ZsSnpvblhGeDFNamxCUXljc0oyRnVaMjF6WkdGbUp6b25YRngxTWpsQlJDY3NKMkZ1WjIxelpHRm5Kem9uWEZ4MU1qbEJSU2NzSjJGdVoyMXpaR0ZvSnpvblhGeDFNamxCUmljc0oyRnVaMjF6WkNjNkoxeGNkVEl5TWpFbkxDZGhibWR5ZENjNkoxeGNkVEl5TVVZbkxDZGhibWR5ZEhaaUp6b25YRngxTWpKQ1JTY3NKMkZ1WjNKMGRtSmtKem9uWEZ4MU1qazVSQ2NzSjJGdVozTndhQ2M2SjF4Y2RUSXlNakluTENkaGJtZHpkQ2M2SjF4Y2VFTTFKeXduWVc1bmVtRnljaWM2SjF4Y2RUSXpOME1uTENkQmIyZHZiaWM2SjF4Y2RUQXhNRFFuTENkaGIyZHZiaWM2SjF4Y2RUQXhNRFVuTENkQmIzQm1Kem9uWEZ4MVJEZ3pOVnhjZFVSRU16Z25MQ2RoYjNCbUp6b25YRngxUkRnek5WeGNkVVJFTlRJbkxDZGhjR0ZqYVhJbk9pZGNYSFV5UVRaR0p5d25ZWEFuT2lkY1hIVXlNalE0Snl3bllYQkZKem9uWEZ4MU1rRTNNQ2NzSjJGd1pTYzZKMXhjZFRJeU5FRW5MQ2RoY0dsa0p6b25YRngxTWpJMFFpY3NKMkZ3YjNNbk9pZGNYQ2NuTENkQmNIQnNlVVoxYm1OMGFXOXVKem9uWEZ4MU1qQTJNU2NzSjJGd2NISnZlQ2M2SjF4Y2RUSXlORGduTENkaGNIQnliM2hsY1NjNkoxeGNkVEl5TkVFbkxDZEJjbWx1WnljNkoxeGNlRU0xSnl3bllYSnBibWNuT2lkY1hIaEZOU2NzSjBGelkzSW5PaWRjWEhWRU9ETTFYRngxUkVNNVF5Y3NKMkZ6WTNJbk9pZGNYSFZFT0RNMVhGeDFSRU5DTmljc0owRnpjMmxuYmljNkoxeGNkVEl5TlRRbkxDZGhjM1FuT2ljcUp5d25ZWE41YlhBbk9pZGNYSFV5TWpRNEp5d25ZWE41YlhCbGNTYzZKMXhjZFRJeU5FUW5MQ2RCZEdsc1pHVW5PaWRjWEhoRE15Y3NKMkYwYVd4a1pTYzZKMXhjZUVVekp5d25RWFZ0YkNjNkoxeGNlRU0wSnl3bllYVnRiQ2M2SjF4Y2VFVTBKeXduWVhkamIyNXBiblFuT2lkY1hIVXlNak16Snl3bllYZHBiblFuT2lkY1hIVXlRVEV4Snl3blltRmphMk52Ym1jbk9pZGNYSFV5TWpSREp5d25ZbUZqYTJWd2MybHNiMjRuT2lkY1hIVXdNMFkySnl3blltRmphM0J5YVcxbEp6b25YRngxTWpBek5TY3NKMkpoWTJ0emFXMG5PaWRjWEhVeU1qTkVKeXduWW1GamEzTnBiV1Z4SnpvblhGeDFNakpEUkNjc0owSmhZMnR6YkdGemFDYzZKMXhjZFRJeU1UWW5MQ2RDWVhKMkp6b25YRngxTWtGRk55Y3NKMkpoY25abFpTYzZKMXhjZFRJeVFrUW5MQ2RpWVhKM1pXUW5PaWRjWEhVeU16QTFKeXduUW1GeWQyVmtKem9uWEZ4MU1qTXdOaWNzSjJKaGNuZGxaR2RsSnpvblhGeDFNak13TlNjc0oySmljbXNuT2lkY1hIVXlNMEkxSnl3blltSnlhM1JpY21zbk9pZGNYSFV5TTBJMkp5d25ZbU52Ym1jbk9pZGNYSFV5TWpSREp5d25RbU41SnpvblhGeDFNRFF4TVNjc0oySmplU2M2SjF4Y2RUQTBNekVuTENkaVpIRjFieWM2SjF4Y2RUSXdNVVVuTENkaVpXTmhkWE1uT2lkY1hIVXlNak0xSnl3blltVmpZWFZ6WlNjNkoxeGNkVEl5TXpVbkxDZENaV05oZFhObEp6b25YRngxTWpJek5TY3NKMkpsYlhCMGVYWW5PaWRjWEhVeU9VSXdKeXduWW1Wd2Mya25PaWRjWEhVd00wWTJKeXduWW1WeWJtOTFKem9uWEZ4MU1qRXlReWNzSjBKbGNtNXZkV3hzYVhNbk9pZGNYSFV5TVRKREp5d25RbVYwWVNjNkoxeGNkVEF6T1RJbkxDZGlaWFJoSnpvblhGeDFNRE5DTWljc0oySmxkR2duT2lkY1hIVXlNVE0ySnl3blltVjBkMlZsYmljNkoxeGNkVEl5TmtNbkxDZENabkluT2lkY1hIVkVPRE0xWEZ4MVJFUXdOU2NzSjJKbWNpYzZKMXhjZFVRNE16VmNYSFZFUkRGR0p5d25ZbWxuWTJGd0p6b25YRngxTWpKRE1pY3NKMkpwWjJOcGNtTW5PaWRjWEhVeU5VVkdKeXduWW1sblkzVndKem9uWEZ4MU1qSkRNeWNzSjJKcFoyOWtiM1FuT2lkY1hIVXlRVEF3Snl3blltbG5iM0JzZFhNbk9pZGNYSFV5UVRBeEp5d25ZbWxuYjNScGJXVnpKem9uWEZ4MU1rRXdNaWNzSjJKcFozTnhZM1Z3SnpvblhGeDFNa0V3Tmljc0oySnBaM04wWVhJbk9pZGNYSFV5TmpBMUp5d25ZbWxuZEhKcFlXNW5iR1ZrYjNkdUp6b25YRngxTWpWQ1JDY3NKMkpwWjNSeWFXRnVaMnhsZFhBbk9pZGNYSFV5TlVJekp5d25ZbWxuZFhCc2RYTW5PaWRjWEhVeVFUQTBKeXduWW1sbmRtVmxKem9uWEZ4MU1qSkRNU2NzSjJKcFozZGxaR2RsSnpvblhGeDFNakpETUNjc0oySnJZWEp2ZHljNkoxeGNkVEk1TUVRbkxDZGliR0ZqYTJ4dmVtVnVaMlVuT2lkY1hIVXlPVVZDSnl3bllteGhZMnR6Y1hWaGNtVW5PaWRjWEhVeU5VRkJKeXduWW14aFkydDBjbWxoYm1kc1pTYzZKMXhjZFRJMVFqUW5MQ2RpYkdGamEzUnlhV0Z1WjJ4bFpHOTNiaWM2SjF4Y2RUSTFRa1VuTENkaWJHRmphM1J5YVdGdVoyeGxiR1ZtZENjNkoxeGNkVEkxUXpJbkxDZGliR0ZqYTNSeWFXRnVaMnhsY21sbmFIUW5PaWRjWEhVeU5VSTRKeXduWW14aGJtc25PaWRjWEhVeU5ESXpKeXduWW14ck1USW5PaWRjWEhVeU5Ua3lKeXduWW14ck1UUW5PaWRjWEhVeU5Ua3hKeXduWW14ck16UW5PaWRjWEhVeU5Ua3pKeXduWW14dlkyc25PaWRjWEhVeU5UZzRKeXduWW01bEp6b25QVnhjZFRJd1JUVW5MQ2RpYm1WeGRXbDJKem9uWEZ4MU1qSTJNVnhjZFRJd1JUVW5MQ2RpVG05MEp6b25YRngxTWtGRlJDY3NKMkp1YjNRbk9pZGNYSFV5TXpFd0p5d25RbTl3WmljNkoxeGNkVVE0TXpWY1hIVkVSRE01Snl3blltOXdaaWM2SjF4Y2RVUTRNelZjWEhWRVJEVXpKeXduWW05MEp6b25YRngxTWpKQk5TY3NKMkp2ZEhSdmJTYzZKMXhjZFRJeVFUVW5MQ2RpYjNkMGFXVW5PaWRjWEhVeU1rTTRKeXduWW05NFltOTRKem9uWEZ4MU1qbERPU2NzSjJKdmVHUnNKem9uWEZ4MU1qVXhNQ2NzSjJKdmVHUk1Kem9uWEZ4MU1qVTFOU2NzSjJKdmVFUnNKem9uWEZ4MU1qVTFOaWNzSjJKdmVFUk1Kem9uWEZ4MU1qVTFOeWNzSjJKdmVHUnlKem9uWEZ4MU1qVXdReWNzSjJKdmVHUlNKem9uWEZ4MU1qVTFNaWNzSjJKdmVFUnlKem9uWEZ4MU1qVTFNeWNzSjJKdmVFUlNKem9uWEZ4MU1qVTFOQ2NzSjJKdmVHZ25PaWRjWEhVeU5UQXdKeXduWW05NFNDYzZKMXhjZFRJMU5UQW5MQ2RpYjNob1pDYzZKMXhjZFRJMU1rTW5MQ2RpYjNoSVpDYzZKMXhjZFRJMU5qUW5MQ2RpYjNob1JDYzZKMXhjZFRJMU5qVW5MQ2RpYjNoSVJDYzZKMXhjZFRJMU5qWW5MQ2RpYjNob2RTYzZKMXhjZFRJMU16UW5MQ2RpYjNoSWRTYzZKMXhjZFRJMU5qY25MQ2RpYjNob1ZTYzZKMXhjZFRJMU5qZ25MQ2RpYjNoSVZTYzZKMXhjZFRJMU5qa25MQ2RpYjNodGFXNTFjeWM2SjF4Y2RUSXlPVVluTENkaWIzaHdiSFZ6SnpvblhGeDFNakk1UlNjc0oySnZlSFJwYldWekp6b25YRngxTWpKQk1DY3NKMkp2ZUhWc0p6b25YRngxTWpVeE9DY3NKMkp2ZUhWTUp6b25YRngxTWpVMVFpY3NKMkp2ZUZWc0p6b25YRngxTWpVMVF5Y3NKMkp2ZUZWTUp6b25YRngxTWpVMVJDY3NKMkp2ZUhWeUp6b25YRngxTWpVeE5DY3NKMkp2ZUhWU0p6b25YRngxTWpVMU9DY3NKMkp2ZUZWeUp6b25YRngxTWpVMU9TY3NKMkp2ZUZWU0p6b25YRngxTWpVMVFTY3NKMkp2ZUhZbk9pZGNYSFV5TlRBeUp5d25ZbTk0VmljNkoxeGNkVEkxTlRFbkxDZGliM2gyYUNjNkoxeGNkVEkxTTBNbkxDZGliM2gyU0NjNkoxeGNkVEkxTmtFbkxDZGliM2hXYUNjNkoxeGNkVEkxTmtJbkxDZGliM2hXU0NjNkoxeGNkVEkxTmtNbkxDZGliM2gyYkNjNkoxeGNkVEkxTWpRbkxDZGliM2gyVENjNkoxeGNkVEkxTmpFbkxDZGliM2hXYkNjNkoxeGNkVEkxTmpJbkxDZGliM2hXVENjNkoxeGNkVEkxTmpNbkxDZGliM2gyY2ljNkoxeGNkVEkxTVVNbkxDZGliM2gyVWljNkoxeGNkVEkxTlVVbkxDZGliM2hXY2ljNkoxeGNkVEkxTlVZbkxDZGliM2hXVWljNkoxeGNkVEkxTmpBbkxDZGljSEpwYldVbk9pZGNYSFV5TURNMUp5d25ZbkpsZG1Vbk9pZGNYSFV3TWtRNEp5d25RbkpsZG1Vbk9pZGNYSFV3TWtRNEp5d25ZbkoyWW1GeUp6b25YRng0UVRZbkxDZGljMk55SnpvblhGeDFSRGd6TlZ4Y2RVUkRRamNuTENkQ2MyTnlKem9uWEZ4MU1qRXlReWNzSjJKelpXMXBKem9uWEZ4MU1qQTBSaWNzSjJKemFXMG5PaWRjWEhVeU1qTkVKeXduWW5OcGJXVW5PaWRjWEhVeU1rTkVKeXduWW5OdmJHSW5PaWRjWEhVeU9VTTFKeXduWW5OdmJDYzZKMXhjWEZ3bkxDZGljMjlzYUhOMVlpYzZKMXhjZFRJM1F6Z25MQ2RpZFd4c0p6b25YRngxTWpBeU1pY3NKMkoxYkd4bGRDYzZKMXhjZFRJd01qSW5MQ2RpZFcxd0p6b25YRngxTWpJMFJTY3NKMkoxYlhCRkp6b25YRngxTWtGQlJTY3NKMkoxYlhCbEp6b25YRngxTWpJMFJpY3NKMEoxYlhCbGNTYzZKMXhjZFRJeU5FVW5MQ2RpZFcxd1pYRW5PaWRjWEhVeU1qUkdKeXduUTJGamRYUmxKem9uWEZ4MU1ERXdOaWNzSjJOaFkzVjBaU2M2SjF4Y2RUQXhNRGNuTENkallYQmhibVFuT2lkY1hIVXlRVFEwSnl3blkyRndZbkpqZFhBbk9pZGNYSFV5UVRRNUp5d25ZMkZ3WTJGd0p6b25YRngxTWtFMFFpY3NKMk5oY0NjNkoxeGNkVEl5TWprbkxDZERZWEFuT2lkY1hIVXlNa1F5Snl3blkyRndZM1Z3SnpvblhGeDFNa0UwTnljc0oyTmhjR1J2ZENjNkoxeGNkVEpCTkRBbkxDZERZWEJwZEdGc1JHbG1abVZ5Wlc1MGFXRnNSQ2M2SjF4Y2RUSXhORFVuTENkallYQnpKem9uWEZ4MU1qSXlPVnhjZFVaRk1EQW5MQ2RqWVhKbGRDYzZKMXhjZFRJd05ERW5MQ2RqWVhKdmJpYzZKMXhjZFRBeVF6Y25MQ2REWVhsc1pYbHpKem9uWEZ4MU1qRXlSQ2NzSjJOallYQnpKem9uWEZ4MU1rRTBSQ2NzSjBOallYSnZiaWM2SjF4Y2RUQXhNRU1uTENkalkyRnliMjRuT2lkY1hIVXdNVEJFSnl3blEyTmxaR2xzSnpvblhGeDRRemNuTENkalkyVmthV3duT2lkY1hIaEZOeWNzSjBOamFYSmpKem9uWEZ4MU1ERXdPQ2NzSjJOamFYSmpKem9uWEZ4MU1ERXdPU2NzSjBOamIyNXBiblFuT2lkY1hIVXlNak13Snl3blkyTjFjSE1uT2lkY1hIVXlRVFJESnl3blkyTjFjSE56YlNjNkoxeGNkVEpCTlRBbkxDZERaRzkwSnpvblhGeDFNREV3UVNjc0oyTmtiM1FuT2lkY1hIVXdNVEJDSnl3blkyVmthV3duT2lkY1hIaENPQ2NzSjBObFpHbHNiR0VuT2lkY1hIaENPQ2NzSjJObGJYQjBlWFluT2lkY1hIVXlPVUl5Snl3blkyVnVkQ2M2SjF4Y2VFRXlKeXduWTJWdWRHVnlaRzkwSnpvblhGeDRRamNuTENkRFpXNTBaWEpFYjNRbk9pZGNYSGhDTnljc0oyTm1jaWM2SjF4Y2RVUTRNelZjWEhWRVJESXdKeXduUTJaeUp6b25YRngxTWpFeVJDY3NKME5JWTNrbk9pZGNYSFV3TkRJM0p5d25ZMmhqZVNjNkoxeGNkVEEwTkRjbkxDZGphR1ZqYXljNkoxeGNkVEkzTVRNbkxDZGphR1ZqYTIxaGNtc25PaWRjWEhVeU56RXpKeXduUTJocEp6b25YRngxTUROQk55Y3NKMk5vYVNjNkoxeGNkVEF6UXpjbkxDZGphWEpqSnpvblhGeDFNREpETmljc0oyTnBjbU5sY1NjNkoxeGNkVEl5TlRjbkxDZGphWEpqYkdWaGNuSnZkMnhsWm5Rbk9pZGNYSFV5TVVKQkp5d25ZMmx5WTJ4bFlYSnliM2R5YVdkb2RDYzZKMXhjZFRJeFFrSW5MQ2RqYVhKamJHVmtZWE4wSnpvblhGeDFNakk1UWljc0oyTnBjbU5zWldSamFYSmpKem9uWEZ4MU1qSTVRU2NzSjJOcGNtTnNaV1JrWVhOb0p6b25YRngxTWpJNVJDY3NKME5wY21Oc1pVUnZkQ2M2SjF4Y2RUSXlPVGtuTENkamFYSmpiR1ZrVWljNkoxeGNlRUZGSnl3blkybHlZMnhsWkZNbk9pZGNYSFV5TkVNNEp5d25RMmx5WTJ4bFRXbHVkWE1uT2lkY1hIVXlNamsySnl3blEybHlZMnhsVUd4MWN5YzZKMXhjZFRJeU9UVW5MQ2REYVhKamJHVlVhVzFsY3ljNkoxeGNkVEl5T1RjbkxDZGphWEluT2lkY1hIVXlOVU5DSnl3blkybHlSU2M2SjF4Y2RUSTVRek1uTENkamFYSmxKem9uWEZ4MU1qSTFOeWNzSjJOcGNtWnVhVzUwSnpvblhGeDFNa0V4TUNjc0oyTnBjbTFwWkNjNkoxeGNkVEpCUlVZbkxDZGphWEp6WTJseUp6b25YRngxTWpsRE1pY3NKME5zYjJOcmQybHpaVU52Ym5SdmRYSkpiblJsWjNKaGJDYzZKMXhjZFRJeU16SW5MQ2REYkc5elpVTjFjbXg1Ukc5MVlteGxVWFZ2ZEdVbk9pZGNYSFV5TURGRUp5d25RMnh2YzJWRGRYSnNlVkYxYjNSbEp6b25YRngxTWpBeE9TY3NKMk5zZFdKekp6b25YRngxTWpZMk15Y3NKMk5zZFdKemRXbDBKem9uWEZ4MU1qWTJNeWNzSjJOdmJHOXVKem9uT2ljc0owTnZiRzl1SnpvblhGeDFNakl6Tnljc0owTnZiRzl1WlNjNkoxeGNkVEpCTnpRbkxDZGpiMnh2Ym1Vbk9pZGNYSFV5TWpVMEp5d25ZMjlzYjI1bGNTYzZKMXhjZFRJeU5UUW5MQ2RqYjIxdFlTYzZKeXduTENkamIyMXRZWFFuT2lkQUp5d25ZMjl0Y0NjNkoxeGNkVEl5TURFbkxDZGpiMjF3Wm00bk9pZGNYSFV5TWpFNEp5d25ZMjl0Y0d4bGJXVnVkQ2M2SjF4Y2RUSXlNREVuTENkamIyMXdiR1Y0WlhNbk9pZGNYSFV5TVRBeUp5d25ZMjl1WnljNkoxeGNkVEl5TkRVbkxDZGpiMjVuWkc5MEp6b25YRngxTWtFMlJDY3NKME52Ym1keWRXVnVkQ2M2SjF4Y2RUSXlOakVuTENkamIyNXBiblFuT2lkY1hIVXlNakpGSnl3blEyOXVhVzUwSnpvblhGeDFNakl5Umljc0owTnZiblJ2ZFhKSmJuUmxaM0poYkNjNkoxeGNkVEl5TWtVbkxDZGpiM0JtSnpvblhGeDFSRGd6TlZ4Y2RVUkVOVFFuTENkRGIzQm1Kem9uWEZ4MU1qRXdNaWNzSjJOdmNISnZaQ2M2SjF4Y2RUSXlNVEFuTENkRGIzQnliMlIxWTNRbk9pZGNYSFV5TWpFd0p5d25ZMjl3ZVNjNkoxeGNlRUU1Snl3blEwOVFXU2M2SjF4Y2VFRTVKeXduWTI5d2VYTnlKem9uWEZ4MU1qRXhOeWNzSjBOdmRXNTBaWEpEYkc5amEzZHBjMlZEYjI1MGIzVnlTVzUwWldkeVlXd25PaWRjWEhVeU1qTXpKeXduWTNKaGNuSW5PaWRjWEhVeU1VSTFKeXduWTNKdmMzTW5PaWRjWEhVeU56RTNKeXduUTNKdmMzTW5PaWRjWEhVeVFUSkdKeXduUTNOamNpYzZKMXhjZFVRNE16VmNYSFZFUXpsRkp5d25ZM05qY2ljNkoxeGNkVVE0TXpWY1hIVkVRMEk0Snl3blkzTjFZaWM2SjF4Y2RUSkJRMFluTENkamMzVmlaU2M2SjF4Y2RUSkJSREVuTENkamMzVndKem9uWEZ4MU1rRkVNQ2NzSjJOemRYQmxKem9uWEZ4MU1rRkVNaWNzSjJOMFpHOTBKem9uWEZ4MU1qSkZSaWNzSjJOMVpHRnljbXduT2lkY1hIVXlPVE00Snl3blkzVmtZWEp5Y2ljNkoxeGNkVEk1TXpVbkxDZGpkV1Z3Y2ljNkoxeGNkVEl5UkVVbkxDZGpkV1Z6WXljNkoxeGNkVEl5UkVZbkxDZGpkV3hoY25Jbk9pZGNYSFV5TVVJMkp5d25ZM1ZzWVhKeWNDYzZKMXhjZFRJNU0wUW5MQ2RqZFhCaWNtTmhjQ2M2SjF4Y2RUSkJORGduTENkamRYQmpZWEFuT2lkY1hIVXlRVFEySnl3blEzVndRMkZ3SnpvblhGeDFNakkwUkNjc0oyTjFjQ2M2SjF4Y2RUSXlNa0VuTENkRGRYQW5PaWRjWEhVeU1rUXpKeXduWTNWd1kzVndKem9uWEZ4MU1rRTBRU2NzSjJOMWNHUnZkQ2M2SjF4Y2RUSXlPRVFuTENkamRYQnZjaWM2SjF4Y2RUSkJORFVuTENkamRYQnpKem9uWEZ4MU1qSXlRVnhjZFVaRk1EQW5MQ2RqZFhKaGNuSW5PaWRjWEhVeU1VSTNKeXduWTNWeVlYSnliU2M2SjF4Y2RUSTVNME1uTENkamRYSnNlV1Z4Y0hKbFl5YzZKMXhjZFRJeVJFVW5MQ2RqZFhKc2VXVnhjM1ZqWXljNkoxeGNkVEl5UkVZbkxDZGpkWEpzZVhabFpTYzZKMXhjZFRJeVEwVW5MQ2RqZFhKc2VYZGxaR2RsSnpvblhGeDFNakpEUmljc0oyTjFjbkpsYmljNkoxeGNlRUUwSnl3blkzVnlkbVZoY25KdmQyeGxablFuT2lkY1hIVXlNVUkySnl3blkzVnlkbVZoY25KdmQzSnBaMmgwSnpvblhGeDFNakZDTnljc0oyTjFkbVZsSnpvblhGeDFNakpEUlNjc0oyTjFkMlZrSnpvblhGeDFNakpEUmljc0oyTjNZMjl1YVc1MEp6b25YRngxTWpJek1pY3NKMk4zYVc1MEp6b25YRngxTWpJek1TY3NKMk41YkdOMGVTYzZKMXhjZFRJek1rUW5MQ2RrWVdkblpYSW5PaWRjWEhVeU1ESXdKeXduUkdGbloyVnlKem9uWEZ4MU1qQXlNU2NzSjJSaGJHVjBhQ2M2SjF4Y2RUSXhNemduTENka1lYSnlKem9uWEZ4MU1qRTVNeWNzSjBSaGNuSW5PaWRjWEhVeU1VRXhKeXduWkVGeWNpYzZKMXhjZFRJeFJETW5MQ2RrWVhOb0p6b25YRngxTWpBeE1DY3NKMFJoYzJoMkp6b25YRngxTWtGRk5DY3NKMlJoYzJoMkp6b25YRngxTWpKQk15Y3NKMlJpYTJGeWIzY25PaWRjWEhVeU9UQkdKeXduWkdKc1lXTW5PaWRjWEhVd01rUkVKeXduUkdOaGNtOXVKem9uWEZ4MU1ERXdSU2NzSjJSallYSnZiaWM2SjF4Y2RUQXhNRVluTENkRVkza25PaWRjWEhVd05ERTBKeXduWkdONUp6b25YRngxTURRek5DY3NKMlJrWVdkblpYSW5PaWRjWEhVeU1ESXhKeXduWkdSaGNuSW5PaWRjWEhVeU1VTkJKeXduUkVRbk9pZGNYSFV5TVRRMUp5d25aR1FuT2lkY1hIVXlNVFEySnl3blJFUnZkSEpoYUdRbk9pZGNYSFV5T1RFeEp5d25aR1J2ZEhObGNTYzZKMXhjZFRKQk56Y25MQ2RrWldjbk9pZGNYSGhDTUNjc0owUmxiQ2M2SjF4Y2RUSXlNRGNuTENkRVpXeDBZU2M2SjF4Y2RUQXpPVFFuTENka1pXeDBZU2M2SjF4Y2RUQXpRalFuTENka1pXMXdkSGwySnpvblhGeDFNamxDTVNjc0oyUm1hWE5vZENjNkoxeGNkVEk1TjBZbkxDZEVabkluT2lkY1hIVkVPRE0xWEZ4MVJFUXdOeWNzSjJSbWNpYzZKMXhjZFVRNE16VmNYSFZFUkRJeEp5d25aRWhoY2ljNkoxeGNkVEk1TmpVbkxDZGthR0Z5YkNjNkoxeGNkVEl4UXpNbkxDZGthR0Z5Y2ljNkoxeGNkVEl4UXpJbkxDZEVhV0ZqY21sMGFXTmhiRUZqZFhSbEp6b25YRng0UWpRbkxDZEVhV0ZqY21sMGFXTmhiRVJ2ZENjNkoxeGNkVEF5UkRrbkxDZEVhV0ZqY21sMGFXTmhiRVJ2ZFdKc1pVRmpkWFJsSnpvblhGeDFNREpFUkNjc0owUnBZV055YVhScFkyRnNSM0poZG1Vbk9pZGdKeXduUkdsaFkzSnBkR2xqWVd4VWFXeGtaU2M2SjF4Y2RUQXlSRU1uTENka2FXRnRKem9uWEZ4MU1qSkROQ2NzSjJScFlXMXZibVFuT2lkY1hIVXlNa00wSnl3blJHbGhiVzl1WkNjNkoxeGNkVEl5UXpRbkxDZGthV0Z0YjI1a2MzVnBkQ2M2SjF4Y2RUSTJOalluTENka2FXRnRjeWM2SjF4Y2RUSTJOalluTENka2FXVW5PaWRjWEhoQk9DY3NKMFJwWm1abGNtVnVkR2xoYkVRbk9pZGNYSFV5TVRRMkp5d25aR2xuWVcxdFlTYzZKMXhjZFRBelJFUW5MQ2RrYVhOcGJpYzZKMXhjZFRJeVJqSW5MQ2RrYVhZbk9pZGNYSGhHTnljc0oyUnBkbWxrWlNjNkoxeGNlRVkzSnl3blpHbDJhV1JsYjI1MGFXMWxjeWM2SjF4Y2RUSXlRemNuTENka2FYWnZibmduT2lkY1hIVXlNa00zSnl3blJFcGplU2M2SjF4Y2RUQTBNREluTENka2FtTjVKem9uWEZ4MU1EUTFNaWNzSjJSc1kyOXliaWM2SjF4Y2RUSXpNVVVuTENka2JHTnliM0FuT2lkY1hIVXlNekJFSnl3blpHOXNiR0Z5SnpvbkpDY3NKMFJ2Y0dZbk9pZGNYSFZFT0RNMVhGeDFSRVF6UWljc0oyUnZjR1luT2lkY1hIVkVPRE0xWEZ4MVJFUTFOU2NzSjBSdmRDYzZKMXhjZUVFNEp5d25aRzkwSnpvblhGeDFNREpFT1Njc0owUnZkRVJ2ZENjNkoxeGNkVEl3UkVNbkxDZGtiM1JsY1NjNkoxeGNkVEl5TlRBbkxDZGtiM1JsY1dSdmRDYzZKMXhjZFRJeU5URW5MQ2RFYjNSRmNYVmhiQ2M2SjF4Y2RUSXlOVEFuTENka2IzUnRhVzUxY3ljNkoxeGNkVEl5TXpnbkxDZGtiM1J3YkhWekp6b25YRngxTWpJeE5DY3NKMlJ2ZEhOeGRXRnlaU2M2SjF4Y2RUSXlRVEVuTENka2IzVmliR1ZpWVhKM1pXUm5aU2M2SjF4Y2RUSXpNRFluTENkRWIzVmliR1ZEYjI1MGIzVnlTVzUwWldkeVlXd25PaWRjWEhVeU1qSkdKeXduUkc5MVlteGxSRzkwSnpvblhGeDRRVGduTENkRWIzVmliR1ZFYjNkdVFYSnliM2NuT2lkY1hIVXlNVVF6Snl3blJHOTFZbXhsVEdWbWRFRnljbTkzSnpvblhGeDFNakZFTUNjc0owUnZkV0pzWlV4bFpuUlNhV2RvZEVGeWNtOTNKem9uWEZ4MU1qRkVOQ2NzSjBSdmRXSnNaVXhsWm5SVVpXVW5PaWRjWEhVeVFVVTBKeXduUkc5MVlteGxURzl1WjB4bFpuUkJjbkp2ZHljNkoxeGNkVEkzUmpnbkxDZEViM1ZpYkdWTWIyNW5UR1ZtZEZKcFoyaDBRWEp5YjNjbk9pZGNYSFV5TjBaQkp5d25SRzkxWW14bFRHOXVaMUpwWjJoMFFYSnliM2NuT2lkY1hIVXlOMFk1Snl3blJHOTFZbXhsVW1sbmFIUkJjbkp2ZHljNkoxeGNkVEl4UkRJbkxDZEViM1ZpYkdWU2FXZG9kRlJsWlNjNkoxeGNkVEl5UVRnbkxDZEViM1ZpYkdWVmNFRnljbTkzSnpvblhGeDFNakZFTVNjc0owUnZkV0pzWlZWd1JHOTNia0Z5Y205M0p6b25YRngxTWpGRU5TY3NKMFJ2ZFdKc1pWWmxjblJwWTJGc1FtRnlKem9uWEZ4MU1qSXlOU2NzSjBSdmQyNUJjbkp2ZDBKaGNpYzZKMXhjZFRJNU1UTW5MQ2RrYjNkdVlYSnliM2NuT2lkY1hIVXlNVGt6Snl3blJHOTNia0Z5Y205M0p6b25YRngxTWpFNU15Y3NKMFJ2ZDI1aGNuSnZkeWM2SjF4Y2RUSXhSRE1uTENkRWIzZHVRWEp5YjNkVmNFRnljbTkzSnpvblhGeDFNakZHTlNjc0owUnZkMjVDY21WMlpTYzZKMXhjZFRBek1URW5MQ2RrYjNkdVpHOTNibUZ5Y205M2N5YzZKMXhjZFRJeFEwRW5MQ2RrYjNkdWFHRnljRzl2Ym14bFpuUW5PaWRjWEhVeU1VTXpKeXduWkc5M2JtaGhjbkJ2YjI1eWFXZG9kQ2M2SjF4Y2RUSXhRekluTENkRWIzZHVUR1ZtZEZKcFoyaDBWbVZqZEc5eUp6b25YRngxTWprMU1DY3NKMFJ2ZDI1TVpXWjBWR1ZsVm1WamRHOXlKem9uWEZ4MU1qazFSU2NzSjBSdmQyNU1aV1owVm1WamRHOXlRbUZ5SnpvblhGeDFNamsxTmljc0owUnZkMjVNWldaMFZtVmpkRzl5SnpvblhGeDFNakZDUkNjc0owUnZkMjVTYVdkb2RGUmxaVlpsWTNSdmNpYzZKMXhjZFRJNU5VWW5MQ2RFYjNkdVVtbG5hSFJXWldOMGIzSkNZWEluT2lkY1hIVXlPVFUzSnl3blJHOTNibEpwWjJoMFZtVmpkRzl5SnpvblhGeDFNakZETVNjc0owUnZkMjVVWldWQmNuSnZkeWM2SjF4Y2RUSXhRVGNuTENkRWIzZHVWR1ZsSnpvblhGeDFNakpCTkNjc0oyUnlZbXRoY205M0p6b25YRngxTWpreE1DY3NKMlJ5WTI5eWJpYzZKMXhjZFRJek1VWW5MQ2RrY21OeWIzQW5PaWRjWEhVeU16QkRKeXduUkhOamNpYzZKMXhjZFVRNE16VmNYSFZFUXpsR0p5d25aSE5qY2ljNkoxeGNkVVE0TXpWY1hIVkVRMEk1Snl3blJGTmplU2M2SjF4Y2RUQTBNRFVuTENka2MyTjVKem9uWEZ4MU1EUTFOU2NzSjJSemIyd25PaWRjWEhVeU9VWTJKeXduUkhOMGNtOXJKem9uWEZ4MU1ERXhNQ2NzSjJSemRISnZheWM2SjF4Y2RUQXhNVEVuTENka2RHUnZkQ2M2SjF4Y2RUSXlSakVuTENka2RISnBKem9uWEZ4MU1qVkNSaWNzSjJSMGNtbG1Kem9uWEZ4MU1qVkNSU2NzSjJSMVlYSnlKem9uWEZ4MU1qRkdOU2NzSjJSMWFHRnlKem9uWEZ4MU1qazJSaWNzSjJSM1lXNW5iR1VuT2lkY1hIVXlPVUUySnl3blJGcGplU2M2SjF4Y2RUQTBNRVluTENka2VtTjVKem9uWEZ4MU1EUTFSaWNzSjJSNmFXZHlZWEp5SnpvblhGeDFNamRHUmljc0owVmhZM1YwWlNjNkoxeGNlRU01Snl3blpXRmpkWFJsSnpvblhGeDRSVGtuTENkbFlYTjBaWEluT2lkY1hIVXlRVFpGSnl3blJXTmhjbTl1SnpvblhGeDFNREV4UVNjc0oyVmpZWEp2YmljNkoxeGNkVEF4TVVJbkxDZEZZMmx5WXljNkoxeGNlRU5CSnl3blpXTnBjbU1uT2lkY1hIaEZRU2NzSjJWamFYSW5PaWRjWEhVeU1qVTJKeXduWldOdmJHOXVKem9uWEZ4MU1qSTFOU2NzSjBWamVTYzZKMXhjZFRBME1rUW5MQ2RsWTNrbk9pZGNYSFV3TkRSRUp5d25aVVJFYjNRbk9pZGNYSFV5UVRjM0p5d25SV1J2ZENjNkoxeGNkVEF4TVRZbkxDZGxaRzkwSnpvblhGeDFNREV4Tnljc0oyVkViM1FuT2lkY1hIVXlNalV4Snl3blpXVW5PaWRjWEhVeU1UUTNKeXduWldaRWIzUW5PaWRjWEhVeU1qVXlKeXduUldaeUp6b25YRngxUkRnek5WeGNkVVJFTURnbkxDZGxabkluT2lkY1hIVkVPRE0xWEZ4MVJFUXlNaWNzSjJWbkp6b25YRngxTWtFNVFTY3NKMFZuY21GMlpTYzZKMXhjZUVNNEp5d25aV2R5WVhabEp6b25YRng0UlRnbkxDZGxaM01uT2lkY1hIVXlRVGsySnl3blpXZHpaRzkwSnpvblhGeDFNa0U1T0Njc0oyVnNKem9uWEZ4MU1rRTVPU2NzSjBWc1pXMWxiblFuT2lkY1hIVXlNakE0Snl3blpXeHBiblJsY25Nbk9pZGNYSFV5TTBVM0p5d25aV3hzSnpvblhGeDFNakV4TXljc0oyVnNjeWM2SjF4Y2RUSkJPVFVuTENkbGJITmtiM1FuT2lkY1hIVXlRVGszSnl3blJXMWhZM0luT2lkY1hIVXdNVEV5Snl3blpXMWhZM0luT2lkY1hIVXdNVEV6Snl3blpXMXdkSGtuT2lkY1hIVXlNakExSnl3blpXMXdkSGx6WlhRbk9pZGNYSFV5TWpBMUp5d25SVzF3ZEhsVGJXRnNiRk54ZFdGeVpTYzZKMXhjZFRJMVJrSW5MQ2RsYlhCMGVYWW5PaWRjWEhVeU1qQTFKeXduUlcxd2RIbFdaWEo1VTIxaGJHeFRjWFZoY21Vbk9pZGNYSFV5TlVGQ0p5d25aVzF6Y0RFekp6b25YRngxTWpBd05DY3NKMlZ0YzNBeE5DYzZKMXhjZFRJd01EVW5MQ2RsYlhOd0p6b25YRngxTWpBd015Y3NKMFZPUnljNkoxeGNkVEF4TkVFbkxDZGxibWNuT2lkY1hIVXdNVFJDSnl3blpXNXpjQ2M2SjF4Y2RUSXdNREluTENkRmIyZHZiaWM2SjF4Y2RUQXhNVGduTENkbGIyZHZiaWM2SjF4Y2RUQXhNVGtuTENkRmIzQm1Kem9uWEZ4MVJEZ3pOVnhjZFVSRU0wTW5MQ2RsYjNCbUp6b25YRngxUkRnek5WeGNkVVJFTlRZbkxDZGxjR0Z5SnpvblhGeDFNakpFTlNjc0oyVndZWEp6YkNjNkoxeGNkVEk1UlRNbkxDZGxjR3gxY3ljNkoxeGNkVEpCTnpFbkxDZGxjSE5wSnpvblhGeDFNRE5DTlNjc0owVndjMmxzYjI0bk9pZGNYSFV3TXprMUp5d25aWEJ6YVd4dmJpYzZKMXhjZFRBelFqVW5MQ2RsY0hOcGRpYzZKMXhjZFRBelJqVW5MQ2RsY1dOcGNtTW5PaWRjWEhVeU1qVTJKeXduWlhGamIyeHZiaWM2SjF4Y2RUSXlOVFVuTENkbGNYTnBiU2M2SjF4Y2RUSXlOREluTENkbGNYTnNZVzUwWjNSeUp6b25YRngxTWtFNU5pY3NKMlZ4YzJ4aGJuUnNaWE56SnpvblhGeDFNa0U1TlNjc0owVnhkV0ZzSnpvblhGeDFNa0UzTlNjc0oyVnhkV0ZzY3ljNkp6MG5MQ2RGY1hWaGJGUnBiR1JsSnpvblhGeDFNakkwTWljc0oyVnhkV1Z6ZENjNkoxeGNkVEl5TlVZbkxDZEZjWFZwYkdsaWNtbDFiU2M2SjF4Y2RUSXhRME1uTENkbGNYVnBkaWM2SjF4Y2RUSXlOakVuTENkbGNYVnBka1JFSnpvblhGeDFNa0UzT0Njc0oyVnhkbkJoY25Oc0p6b25YRngxTWpsRk5TY3NKMlZ5WVhKeUp6b25YRngxTWprM01TY3NKMlZ5Ukc5MEp6b25YRngxTWpJMU15Y3NKMlZ6WTNJbk9pZGNYSFV5TVRKR0p5d25SWE5qY2ljNkoxeGNkVEl4TXpBbkxDZGxjMlJ2ZENjNkoxeGNkVEl5TlRBbkxDZEZjMmx0SnpvblhGeDFNa0UzTXljc0oyVnphVzBuT2lkY1hIVXlNalF5Snl3blJYUmhKem9uWEZ4MU1ETTVOeWNzSjJWMFlTYzZKMXhjZFRBelFqY25MQ2RGVkVnbk9pZGNYSGhFTUNjc0oyVjBhQ2M2SjF4Y2VFWXdKeXduUlhWdGJDYzZKMXhjZUVOQ0p5d25aWFZ0YkNjNkoxeGNlRVZDSnl3blpYVnlieWM2SjF4Y2RUSXdRVU1uTENkbGVHTnNKem9uSVNjc0oyVjRhWE4wSnpvblhGeDFNakl3TXljc0owVjRhWE4wY3ljNkoxeGNkVEl5TURNbkxDZGxlSEJsWTNSaGRHbHZiaWM2SjF4Y2RUSXhNekFuTENkbGVIQnZibVZ1ZEdsaGJHVW5PaWRjWEhVeU1UUTNKeXduUlhod2IyNWxiblJwWVd4Rkp6b25YRngxTWpFME55Y3NKMlpoYkd4cGJtZGtiM1J6WlhFbk9pZGNYSFV5TWpVeUp5d25SbU41SnpvblhGeDFNRFF5TkNjc0oyWmplU2M2SjF4Y2RUQTBORFFuTENkbVpXMWhiR1VuT2lkY1hIVXlOalF3Snl3blptWnBiR2xuSnpvblhGeDFSa0l3TXljc0oyWm1iR2xuSnpvblhGeDFSa0l3TUNjc0oyWm1iR3hwWnljNkoxeGNkVVpDTURRbkxDZEdabkluT2lkY1hIVkVPRE0xWEZ4MVJFUXdPU2NzSjJabWNpYzZKMXhjZFVRNE16VmNYSFZFUkRJekp5d25abWxzYVdjbk9pZGNYSFZHUWpBeEp5d25SbWxzYkdWa1UyMWhiR3hUY1hWaGNtVW5PaWRjWEhVeU5VWkRKeXduUm1sc2JHVmtWbVZ5ZVZOdFlXeHNVM0YxWVhKbEp6b25YRngxTWpWQlFTY3NKMlpxYkdsbkp6b25abW9uTENkbWJHRjBKem9uWEZ4MU1qWTJSQ2NzSjJac2JHbG5Kem9uWEZ4MVJrSXdNaWNzSjJac2RHNXpKem9uWEZ4MU1qVkNNU2NzSjJadWIyWW5PaWRjWEhVd01Ua3lKeXduUm05d1ppYzZKMXhjZFVRNE16VmNYSFZFUkRORUp5d25abTl3WmljNkoxeGNkVVE0TXpWY1hIVkVSRFUzSnl3blptOXlZV3hzSnpvblhGeDFNakl3TUNjc0owWnZja0ZzYkNjNkoxeGNkVEl5TURBbkxDZG1iM0pySnpvblhGeDFNakpFTkNjc0oyWnZjbXQySnpvblhGeDFNa0ZFT1Njc0owWnZkWEpwWlhKMGNtWW5PaWRjWEhVeU1UTXhKeXduWm5CaGNuUnBiblFuT2lkY1hIVXlRVEJFSnl3blpuSmhZekV5SnpvblhGeDRRa1FuTENkbWNtRmpNVE1uT2lkY1hIVXlNVFV6Snl3blpuSmhZekUwSnpvblhGeDRRa01uTENkbWNtRmpNVFVuT2lkY1hIVXlNVFUxSnl3blpuSmhZekUySnpvblhGeDFNakUxT1Njc0oyWnlZV014T0NjNkoxeGNkVEl4TlVJbkxDZG1jbUZqTWpNbk9pZGNYSFV5TVRVMEp5d25abkpoWXpJMUp6b25YRngxTWpFMU5pY3NKMlp5WVdNek5DYzZKMXhjZUVKRkp5d25abkpoWXpNMUp6b25YRngxTWpFMU55Y3NKMlp5WVdNek9DYzZKMXhjZFRJeE5VTW5MQ2RtY21Gak5EVW5PaWRjWEhVeU1UVTRKeXduWm5KaFl6VTJKem9uWEZ4MU1qRTFRU2NzSjJaeVlXTTFPQ2M2SjF4Y2RUSXhOVVFuTENkbWNtRmpOemduT2lkY1hIVXlNVFZGSnl3blpuSmhjMnduT2lkY1hIVXlNRFEwSnl3blpuSnZkMjRuT2lkY1hIVXlNekl5Snl3blpuTmpjaWM2SjF4Y2RVUTRNelZjWEhWRVEwSkNKeXduUm5OamNpYzZKMXhjZFRJeE16RW5MQ2RuWVdOMWRHVW5PaWRjWEhVd01VWTFKeXduUjJGdGJXRW5PaWRjWEhVd016a3pKeXduWjJGdGJXRW5PaWRjWEhVd00wSXpKeXduUjJGdGJXRmtKem9uWEZ4MU1ETkVReWNzSjJkaGJXMWhaQ2M2SjF4Y2RUQXpSRVFuTENkbllYQW5PaWRjWEhVeVFUZzJKeXduUjJKeVpYWmxKem9uWEZ4MU1ERXhSU2NzSjJkaWNtVjJaU2M2SjF4Y2RUQXhNVVluTENkSFkyVmthV3duT2lkY1hIVXdNVEl5Snl3blIyTnBjbU1uT2lkY1hIVXdNVEZESnl3bloyTnBjbU1uT2lkY1hIVXdNVEZFSnl3blIyTjVKem9uWEZ4MU1EUXhNeWNzSjJkamVTYzZKMXhjZFRBME16TW5MQ2RIWkc5MEp6b25YRngxTURFeU1DY3NKMmRrYjNRbk9pZGNYSFV3TVRJeEp5d25aMlVuT2lkY1hIVXlNalkxSnl3blowVW5PaWRjWEhVeU1qWTNKeXduWjBWc0p6b25YRngxTWtFNFF5Y3NKMmRsYkNjNkoxeGNkVEl5UkVJbkxDZG5aWEVuT2lkY1hIVXlNalkxSnl3bloyVnhjU2M2SjF4Y2RUSXlOamNuTENkblpYRnpiR0Z1ZENjNkoxeGNkVEpCTjBVbkxDZG5aWE5qWXljNkoxeGNkVEpCUVRrbkxDZG5aWE1uT2lkY1hIVXlRVGRGSnl3bloyVnpaRzkwSnpvblhGeDFNa0U0TUNjc0oyZGxjMlJ2ZEc4bk9pZGNYSFV5UVRneUp5d25aMlZ6Wkc5MGIyd25PaWRjWEhVeVFUZzBKeXduWjJWemJDYzZKMXhjZFRJeVJFSmNYSFZHUlRBd0p5d25aMlZ6YkdWekp6b25YRngxTWtFNU5DY3NKMGRtY2ljNkoxeGNkVVE0TXpWY1hIVkVSREJCSnl3bloyWnlKem9uWEZ4MVJEZ3pOVnhjZFVSRU1qUW5MQ2RuWnljNkoxeGNkVEl5TmtJbkxDZEhaeWM2SjF4Y2RUSXlSRGtuTENkbloyY25PaWRjWEhVeU1rUTVKeXduWjJsdFpXd25PaWRjWEhVeU1UTTNKeXduUjBwamVTYzZKMXhjZFRBME1ETW5MQ2RuYW1ONUp6b25YRngxTURRMU15Y3NKMmRzWVNjNkoxeGNkVEpCUVRVbkxDZG5iQ2M2SjF4Y2RUSXlOemNuTENkbmJFVW5PaWRjWEhVeVFUa3lKeXduWjJ4cUp6b25YRngxTWtGQk5DY3NKMmR1WVhBbk9pZGNYSFV5UVRoQkp5d25aMjVoY0hCeWIzZ25PaWRjWEhVeVFUaEJKeXduWjI1bEp6b25YRngxTWtFNE9DY3NKMmR1UlNjNkoxeGNkVEl5TmprbkxDZG5ibVZ4SnpvblhGeDFNa0U0T0Njc0oyZHVaWEZ4SnpvblhGeDFNakkyT1Njc0oyZHVjMmx0SnpvblhGeDFNakpGTnljc0owZHZjR1luT2lkY1hIVkVPRE0xWEZ4MVJFUXpSU2NzSjJkdmNHWW5PaWRjWEhWRU9ETTFYRngxUkVRMU9DY3NKMmR5WVhabEp6b25ZQ2NzSjBkeVpXRjBaWEpGY1hWaGJDYzZKMXhjZFRJeU5qVW5MQ2RIY21WaGRHVnlSWEYxWVd4TVpYTnpKem9uWEZ4MU1qSkVRaWNzSjBkeVpXRjBaWEpHZFd4c1JYRjFZV3duT2lkY1hIVXlNalkzSnl3blIzSmxZWFJsY2tkeVpXRjBaWEluT2lkY1hIVXlRVUV5Snl3blIzSmxZWFJsY2t4bGMzTW5PaWRjWEhVeU1qYzNKeXduUjNKbFlYUmxjbE5zWVc1MFJYRjFZV3duT2lkY1hIVXlRVGRGSnl3blIzSmxZWFJsY2xScGJHUmxKem9uWEZ4MU1qSTNNeWNzSjBkelkzSW5PaWRjWEhWRU9ETTFYRngxUkVOQk1pY3NKMmR6WTNJbk9pZGNYSFV5TVRCQkp5d25aM05wYlNjNkoxeGNkVEl5TnpNbkxDZG5jMmx0WlNjNkoxeGNkVEpCT0VVbkxDZG5jMmx0YkNjNkoxeGNkVEpCT1RBbkxDZG5kR05qSnpvblhGeDFNa0ZCTnljc0oyZDBZMmx5SnpvblhGeDFNa0UzUVNjc0oyZDBKem9uUGljc0owZFVKem9uUGljc0owZDBKem9uWEZ4MU1qSTJRaWNzSjJkMFpHOTBKem9uWEZ4MU1qSkVOeWNzSjJkMGJGQmhjaWM2SjF4Y2RUSTVPVFVuTENkbmRIRjFaWE4wSnpvblhGeDFNa0UzUXljc0oyZDBjbUZ3Y0hKdmVDYzZKMXhjZFRKQk9EWW5MQ2RuZEhKaGNuSW5PaWRjWEhVeU9UYzRKeXduWjNSeVpHOTBKem9uWEZ4MU1qSkVOeWNzSjJkMGNtVnhiR1Z6Y3ljNkoxeGNkVEl5UkVJbkxDZG5kSEpsY1hGc1pYTnpKem9uWEZ4MU1rRTRReWNzSjJkMGNteGxjM01uT2lkY1hIVXlNamMzSnl3blozUnljMmx0SnpvblhGeDFNakkzTXljc0oyZDJaWEowYm1WeGNTYzZKMXhjZFRJeU5qbGNYSFZHUlRBd0p5d25aM1p1UlNjNkoxeGNkVEl5TmpsY1hIVkdSVEF3Snl3blNHRmpaV3NuT2lkY1hIVXdNa00zSnl3bmFHRnBjbk53SnpvblhGeDFNakF3UVNjc0oyaGhiR1luT2lkY1hIaENSQ2NzSjJoaGJXbHNkQ2M2SjF4Y2RUSXhNRUluTENkSVFWSkVZM2tuT2lkY1hIVXdOREpCSnl3bmFHRnlaR041SnpvblhGeDFNRFEwUVNjc0oyaGhjbkpqYVhJbk9pZGNYSFV5T1RRNEp5d25hR0Z5Y2ljNkoxeGNkVEl4T1RRbkxDZG9RWEp5SnpvblhGeDFNakZFTkNjc0oyaGhjbkozSnpvblhGeDFNakZCUkNjc0owaGhkQ2M2SjE0bkxDZG9ZbUZ5SnpvblhGeDFNakV3Umljc0owaGphWEpqSnpvblhGeDFNREV5TkNjc0oyaGphWEpqSnpvblhGeDFNREV5TlNjc0oyaGxZWEowY3ljNkoxeGNkVEkyTmpVbkxDZG9aV0Z5ZEhOMWFYUW5PaWRjWEhVeU5qWTFKeXduYUdWc2JHbHdKem9uWEZ4MU1qQXlOaWNzSjJobGNtTnZiaWM2SjF4Y2RUSXlRamtuTENkb1puSW5PaWRjWEhWRU9ETTFYRngxUkVReU5TY3NKMGhtY2ljNkoxeGNkVEl4TUVNbkxDZElhV3hpWlhKMFUzQmhZMlVuT2lkY1hIVXlNVEJDSnl3bmFHdHpaV0Z5YjNjbk9pZGNYSFV5T1RJMUp5d25hR3R6ZDJGeWIzY25PaWRjWEhVeU9USTJKeXduYUc5aGNuSW5PaWRjWEhVeU1VWkdKeXduYUc5dGRHaDBKem9uWEZ4MU1qSXpRaWNzSjJodmIydHNaV1owWVhKeWIzY25PaWRjWEhVeU1VRTVKeXduYUc5dmEzSnBaMmgwWVhKeWIzY25PaWRjWEhVeU1VRkJKeXduYUc5d1ppYzZKMXhjZFVRNE16VmNYSFZFUkRVNUp5d25TRzl3WmljNkoxeGNkVEl4TUVRbkxDZG9iM0ppWVhJbk9pZGNYSFV5TURFMUp5d25TRzl5YVhwdmJuUmhiRXhwYm1Vbk9pZGNYSFV5TlRBd0p5d25hSE5qY2ljNkoxeGNkVVE0TXpWY1hIVkVRMEpFSnl3blNITmpjaWM2SjF4Y2RUSXhNRUluTENkb2MyeGhjMmduT2lkY1hIVXlNVEJHSnl3blNITjBjbTlySnpvblhGeDFNREV5Tmljc0oyaHpkSEp2YXljNkoxeGNkVEF4TWpjbkxDZElkVzF3Ukc5M2JraDFiWEFuT2lkY1hIVXlNalJGSnl3blNIVnRjRVZ4ZFdGc0p6b25YRngxTWpJMFJpY3NKMmg1WW5Wc2JDYzZKMXhjZFRJd05ETW5MQ2RvZVhCb1pXNG5PaWRjWEhVeU1ERXdKeXduU1dGamRYUmxKem9uWEZ4NFEwUW5MQ2RwWVdOMWRHVW5PaWRjWEhoRlJDY3NKMmxqSnpvblhGeDFNakEyTXljc0owbGphWEpqSnpvblhGeDRRMFVuTENkcFkybHlZeWM2SjF4Y2VFVkZKeXduU1dONUp6b25YRngxTURReE9DY3NKMmxqZVNjNkoxeGNkVEEwTXpnbkxDZEpaRzkwSnpvblhGeDFNREV6TUNjc0owbEZZM2tuT2lkY1hIVXdOREUxSnl3bmFXVmplU2M2SjF4Y2RUQTBNelVuTENkcFpYaGpiQ2M2SjF4Y2VFRXhKeXduYVdabUp6b25YRngxTWpGRU5DY3NKMmxtY2ljNkoxeGNkVVE0TXpWY1hIVkVSREkySnl3blNXWnlKem9uWEZ4MU1qRXhNU2NzSjBsbmNtRjJaU2M2SjF4Y2VFTkRKeXduYVdkeVlYWmxKem9uWEZ4NFJVTW5MQ2RwYVNjNkoxeGNkVEl4TkRnbkxDZHBhV2xwYm5Rbk9pZGNYSFV5UVRCREp5d25hV2xwYm5Rbk9pZGNYSFV5TWpKRUp5d25hV2x1Wm1sdUp6b25YRngxTWpsRVF5Y3NKMmxwYjNSaEp6b25YRngxTWpFeU9TY3NKMGxLYkdsbkp6b25YRngxTURFek1pY3NKMmxxYkdsbkp6b25YRngxTURFek15Y3NKMGx0WVdOeUp6b25YRngxTURFeVFTY3NKMmx0WVdOeUp6b25YRngxTURFeVFpY3NKMmx0WVdkbEp6b25YRngxTWpFeE1TY3NKMGx0WVdkcGJtRnllVWtuT2lkY1hIVXlNVFE0Snl3bmFXMWhaMnhwYm1Vbk9pZGNYSFV5TVRFd0p5d25hVzFoWjNCaGNuUW5PaWRjWEhVeU1URXhKeXduYVcxaGRHZ25PaWRjWEhVd01UTXhKeXduU1cwbk9pZGNYSFV5TVRFeEp5d25hVzF2WmljNkoxeGNkVEl5UWpjbkxDZHBiWEJsWkNjNkoxeGNkVEF4UWpVbkxDZEpiWEJzYVdWekp6b25YRngxTWpGRU1pY3NKMmx1WTJGeVpTYzZKMXhjZFRJeE1EVW5MQ2RwYmljNkoxeGNkVEl5TURnbkxDZHBibVpwYmljNkoxeGNkVEl5TVVVbkxDZHBibVpwYm5ScFpTYzZKMXhjZFRJNVJFUW5MQ2RwYm05a2IzUW5PaWRjWEhVd01UTXhKeXduYVc1MFkyRnNKem9uWEZ4MU1qSkNRU2NzSjJsdWRDYzZKMXhjZFRJeU1rSW5MQ2RKYm5Rbk9pZGNYSFV5TWpKREp5d25hVzUwWldkbGNuTW5PaWRjWEhVeU1USTBKeXduU1c1MFpXZHlZV3duT2lkY1hIVXlNakpDSnl3bmFXNTBaWEpqWVd3bk9pZGNYSFV5TWtKQkp5d25TVzUwWlhKelpXTjBhVzl1SnpvblhGeDFNakpETWljc0oybHVkR3hoY21ockp6b25YRngxTWtFeE55Y3NKMmx1ZEhCeWIyUW5PaWRjWEhVeVFUTkRKeXduU1c1MmFYTnBZbXhsUTI5dGJXRW5PaWRjWEhVeU1EWXpKeXduU1c1MmFYTnBZbXhsVkdsdFpYTW5PaWRjWEhVeU1EWXlKeXduU1U5amVTYzZKMXhjZFRBME1ERW5MQ2RwYjJONUp6b25YRngxTURRMU1TY3NKMGx2WjI5dUp6b25YRngxTURFeVJTY3NKMmx2WjI5dUp6b25YRngxTURFeVJpY3NKMGx2Y0dZbk9pZGNYSFZFT0RNMVhGeDFSRVEwTUNjc0oybHZjR1luT2lkY1hIVkVPRE0xWEZ4MVJFUTFRU2NzSjBsdmRHRW5PaWRjWEhVd016azVKeXduYVc5MFlTYzZKMXhjZFRBelFqa25MQ2RwY0hKdlpDYzZKMXhjZFRKQk0wTW5MQ2RwY1hWbGMzUW5PaWRjWEhoQ1JpY3NKMmx6WTNJbk9pZGNYSFZFT0RNMVhGeDFSRU5DUlNjc0owbHpZM0luT2lkY1hIVXlNVEV3Snl3bmFYTnBiaWM2SjF4Y2RUSXlNRGduTENkcGMybHVaRzkwSnpvblhGeDFNakpHTlNjc0oybHphVzVGSnpvblhGeDFNakpHT1Njc0oybHphVzV6SnpvblhGeDFNakpHTkNjc0oybHphVzV6ZGljNkoxeGNkVEl5UmpNbkxDZHBjMmx1ZGljNkoxeGNkVEl5TURnbkxDZHBkQ2M2SjF4Y2RUSXdOakluTENkSmRHbHNaR1VuT2lkY1hIVXdNVEk0Snl3bmFYUnBiR1JsSnpvblhGeDFNREV5T1Njc0owbDFhMk41SnpvblhGeDFNRFF3Tmljc0oybDFhMk41SnpvblhGeDFNRFExTmljc0owbDFiV3duT2lkY1hIaERSaWNzSjJsMWJXd25PaWRjWEhoRlJpY3NKMHBqYVhKakp6b25YRngxTURFek5DY3NKMnBqYVhKakp6b25YRngxTURFek5TY3NKMHBqZVNjNkoxeGNkVEEwTVRrbkxDZHFZM2tuT2lkY1hIVXdORE01Snl3blNtWnlKem9uWEZ4MVJEZ3pOVnhjZFVSRU1FUW5MQ2RxWm5Jbk9pZGNYSFZFT0RNMVhGeDFSRVF5Tnljc0oycHRZWFJvSnpvblhGeDFNREl6Tnljc0owcHZjR1luT2lkY1hIVkVPRE0xWEZ4MVJFUTBNU2NzSjJwdmNHWW5PaWRjWEhWRU9ETTFYRngxUkVRMVFpY3NKMHB6WTNJbk9pZGNYSFZFT0RNMVhGeDFSRU5CTlNjc0oycHpZM0luT2lkY1hIVkVPRE0xWEZ4MVJFTkNSaWNzSjBwelpYSmplU2M2SjF4Y2RUQTBNRGduTENkcWMyVnlZM2tuT2lkY1hIVXdORFU0Snl3blNuVnJZM2tuT2lkY1hIVXdOREEwSnl3bmFuVnJZM2tuT2lkY1hIVXdORFUwSnl3blMyRndjR0VuT2lkY1hIVXdNemxCSnl3bmEyRndjR0VuT2lkY1hIVXdNMEpCSnl3bmEyRndjR0YySnpvblhGeDFNRE5HTUNjc0owdGpaV1JwYkNjNkoxeGNkVEF4TXpZbkxDZHJZMlZrYVd3bk9pZGNYSFV3TVRNM0p5d25TMk41SnpvblhGeDFNRFF4UVNjc0oydGplU2M2SjF4Y2RUQTBNMEVuTENkTFpuSW5PaWRjWEhWRU9ETTFYRngxUkVRd1JTY3NKMnRtY2ljNkoxeGNkVVE0TXpWY1hIVkVSREk0Snl3bmEyZHlaV1Z1SnpvblhGeDFNREV6T0Njc0owdElZM2tuT2lkY1hIVXdOREkxSnl3bmEyaGplU2M2SjF4Y2RUQTBORFVuTENkTFNtTjVKem9uWEZ4MU1EUXdReWNzSjJ0cVkza25PaWRjWEhVd05EVkRKeXduUzI5d1ppYzZKMXhjZFVRNE16VmNYSFZFUkRReUp5d25hMjl3WmljNkoxeGNkVVE0TXpWY1hIVkVSRFZESnl3blMzTmpjaWM2SjF4Y2RVUTRNelZjWEhWRVEwRTJKeXduYTNOamNpYzZKMXhjZFVRNE16VmNYSFZFUTBNd0p5d25iRUZoY25Jbk9pZGNYSFV5TVVSQkp5d25UR0ZqZFhSbEp6b25YRngxTURFek9TY3NKMnhoWTNWMFpTYzZKMXhjZFRBeE0wRW5MQ2RzWVdWdGNIUjVkaWM2SjF4Y2RUSTVRalFuTENkc1lXZHlZVzRuT2lkY1hIVXlNVEV5Snl3blRHRnRZbVJoSnpvblhGeDFNRE01UWljc0oyeGhiV0prWVNjNkoxeGNkVEF6UWtJbkxDZHNZVzVuSnpvblhGeDFNamRGT0Njc0oweGhibWNuT2lkY1hIVXlOMFZCSnl3bmJHRnVaMlFuT2lkY1hIVXlPVGt4Snl3bmJHRnVaMnhsSnpvblhGeDFNamRGT0Njc0oyeGhjQ2M2SjF4Y2RUSkJPRFVuTENkTVlYQnNZV05sZEhKbUp6b25YRngxTWpFeE1pY3NKMnhoY1hWdkp6b25YRng0UVVJbkxDZHNZWEp5WWljNkoxeGNkVEl4UlRRbkxDZHNZWEp5WW1aekp6b25YRngxTWpreFJpY3NKMnhoY25Jbk9pZGNYSFV5TVRrd0p5d25UR0Z5Y2ljNkoxeGNkVEl4T1VVbkxDZHNRWEp5SnpvblhGeDFNakZFTUNjc0oyeGhjbkptY3ljNkoxeGNkVEk1TVVRbkxDZHNZWEp5YUdzbk9pZGNYSFV5TVVFNUp5d25iR0Z5Y214d0p6b25YRngxTWpGQlFpY3NKMnhoY25Kd2JDYzZKMXhjZFRJNU16a25MQ2RzWVhKeWMybHRKem9uWEZ4MU1qazNNeWNzSjJ4aGNuSjBiQ2M2SjF4Y2RUSXhRVEluTENkc1lYUmhhV3duT2lkY1hIVXlPVEU1Snl3bmJFRjBZV2xzSnpvblhGeDFNamt4UWljc0oyeGhkQ2M2SjF4Y2RUSkJRVUluTENkc1lYUmxKem9uWEZ4MU1rRkJSQ2NzSjJ4aGRHVnpKem9uWEZ4MU1rRkJSRnhjZFVaRk1EQW5MQ2RzWW1GeWNpYzZKMXhjZFRJNU1FTW5MQ2RzUW1GeWNpYzZKMXhjZFRJNU1FVW5MQ2RzWW1KeWF5YzZKMXhjZFRJM056SW5MQ2RzWW5KaFkyVW5PaWQ3Snl3bmJHSnlZV05ySnpvbld5Y3NKMnhpY210bEp6b25YRngxTWprNFFpY3NKMnhpY210emJHUW5PaWRjWEhVeU9UaEdKeXduYkdKeWEzTnNkU2M2SjF4Y2RUSTVPRVFuTENkTVkyRnliMjRuT2lkY1hIVXdNVE5FSnl3bmJHTmhjbTl1SnpvblhGeDFNREV6UlNjc0oweGpaV1JwYkNjNkoxeGNkVEF4TTBJbkxDZHNZMlZrYVd3bk9pZGNYSFV3TVROREp5d25iR05sYVd3bk9pZGNYSFV5TXpBNEp5d25iR04xWWljNkozc25MQ2RNWTNrbk9pZGNYSFV3TkRGQ0p5d25iR041SnpvblhGeDFNRFF6UWljc0oyeGtZMkVuT2lkY1hIVXlPVE0ySnl3bmJHUnhkVzhuT2lkY1hIVXlNREZESnl3bmJHUnhkVzl5SnpvblhGeDFNakF4UlNjc0oyeGtjbVJvWVhJbk9pZGNYSFV5T1RZM0p5d25iR1J5ZFhOb1lYSW5PaWRjWEhVeU9UUkNKeXduYkdSemFDYzZKMXhjZFRJeFFqSW5MQ2RzWlNjNkoxeGNkVEl5TmpRbkxDZHNSU2M2SjF4Y2RUSXlOalluTENkTVpXWjBRVzVuYkdWQ2NtRmphMlYwSnpvblhGeDFNamRGT0Njc0oweGxablJCY25KdmQwSmhjaWM2SjF4Y2RUSXhSVFFuTENkc1pXWjBZWEp5YjNjbk9pZGNYSFV5TVRrd0p5d25UR1ZtZEVGeWNtOTNKem9uWEZ4MU1qRTVNQ2NzSjB4bFpuUmhjbkp2ZHljNkoxeGNkVEl4UkRBbkxDZE1aV1owUVhKeWIzZFNhV2RvZEVGeWNtOTNKem9uWEZ4MU1qRkROaWNzSjJ4bFpuUmhjbkp2ZDNSaGFXd25PaWRjWEhVeU1VRXlKeXduVEdWbWRFTmxhV3hwYm1jbk9pZGNYSFV5TXpBNEp5d25UR1ZtZEVSdmRXSnNaVUp5WVdOclpYUW5PaWRjWEhVeU4wVTJKeXduVEdWbWRFUnZkMjVVWldWV1pXTjBiM0luT2lkY1hIVXlPVFl4Snl3blRHVm1kRVJ2ZDI1V1pXTjBiM0pDWVhJbk9pZGNYSFV5T1RVNUp5d25UR1ZtZEVSdmQyNVdaV04wYjNJbk9pZGNYSFV5TVVNekp5d25UR1ZtZEVac2IyOXlKem9uWEZ4MU1qTXdRU2NzSjJ4bFpuUm9ZWEp3YjI5dVpHOTNiaWM2SjF4Y2RUSXhRa1FuTENkc1pXWjBhR0Z5Y0c5dmJuVndKem9uWEZ4MU1qRkNReWNzSjJ4bFpuUnNaV1owWVhKeWIzZHpKem9uWEZ4MU1qRkROeWNzSjJ4bFpuUnlhV2RvZEdGeWNtOTNKem9uWEZ4MU1qRTVOQ2NzSjB4bFpuUlNhV2RvZEVGeWNtOTNKem9uWEZ4MU1qRTVOQ2NzSjB4bFpuUnlhV2RvZEdGeWNtOTNKem9uWEZ4MU1qRkVOQ2NzSjJ4bFpuUnlhV2RvZEdGeWNtOTNjeWM2SjF4Y2RUSXhRelluTENkc1pXWjBjbWxuYUhSb1lYSndiMjl1Y3ljNkoxeGNkVEl4UTBJbkxDZHNaV1owY21sbmFIUnpjWFZwWjJGeWNtOTNKem9uWEZ4MU1qRkJSQ2NzSjB4bFpuUlNhV2RvZEZabFkzUnZjaWM2SjF4Y2RUSTVORVVuTENkTVpXWjBWR1ZsUVhKeWIzY25PaWRjWEhVeU1VRTBKeXduVEdWbWRGUmxaU2M2SjF4Y2RUSXlRVE1uTENkTVpXWjBWR1ZsVm1WamRHOXlKem9uWEZ4MU1qazFRU2NzSjJ4bFpuUjBhSEpsWlhScGJXVnpKem9uWEZ4MU1qSkRRaWNzSjB4bFpuUlVjbWxoYm1kc1pVSmhjaWM2SjF4Y2RUSTVRMFluTENkTVpXWjBWSEpwWVc1bmJHVW5PaWRjWEhVeU1rSXlKeXduVEdWbWRGUnlhV0Z1WjJ4bFJYRjFZV3duT2lkY1hIVXlNa0kwSnl3blRHVm1kRlZ3Ukc5M2JsWmxZM1J2Y2ljNkoxeGNkVEk1TlRFbkxDZE1aV1owVlhCVVpXVldaV04wYjNJbk9pZGNYSFV5T1RZd0p5d25UR1ZtZEZWd1ZtVmpkRzl5UW1GeUp6b25YRngxTWprMU9DY3NKMHhsWm5SVmNGWmxZM1J2Y2ljNkoxeGNkVEl4UWtZbkxDZE1aV1owVm1WamRHOXlRbUZ5SnpvblhGeDFNamsxTWljc0oweGxablJXWldOMGIzSW5PaWRjWEhVeU1VSkRKeXduYkVWbkp6b25YRngxTWtFNFFpY3NKMnhsWnljNkoxeGNkVEl5UkVFbkxDZHNaWEVuT2lkY1hIVXlNalkwSnl3bmJHVnhjU2M2SjF4Y2RUSXlOalluTENkc1pYRnpiR0Z1ZENjNkoxeGNkVEpCTjBRbkxDZHNaWE5qWXljNkoxeGNkVEpCUVRnbkxDZHNaWE1uT2lkY1hIVXlRVGRFSnl3bmJHVnpaRzkwSnpvblhGeDFNa0UzUmljc0oyeGxjMlJ2ZEc4bk9pZGNYSFV5UVRneEp5d25iR1Z6Wkc5MGIzSW5PaWRjWEhVeVFUZ3pKeXduYkdWelp5YzZKMXhjZFRJeVJFRmNYSFZHUlRBd0p5d25iR1Z6WjJWekp6b25YRngxTWtFNU15Y3NKMnhsYzNOaGNIQnliM2duT2lkY1hIVXlRVGcxSnl3bmJHVnpjMlJ2ZENjNkoxeGNkVEl5UkRZbkxDZHNaWE56WlhGbmRISW5PaWRjWEhVeU1rUkJKeXduYkdWemMyVnhjV2QwY2ljNkoxeGNkVEpCT0VJbkxDZE1aWE56UlhGMVlXeEhjbVZoZEdWeUp6b25YRngxTWpKRVFTY3NKMHhsYzNOR2RXeHNSWEYxWVd3bk9pZGNYSFV5TWpZMkp5d25UR1Z6YzBkeVpXRjBaWEluT2lkY1hIVXlNamMySnl3bmJHVnpjMmQwY2ljNkoxeGNkVEl5TnpZbkxDZE1aWE56VEdWemN5YzZKMXhjZFRKQlFURW5MQ2RzWlhOemMybHRKem9uWEZ4MU1qSTNNaWNzSjB4bGMzTlRiR0Z1ZEVWeGRXRnNKem9uWEZ4MU1rRTNSQ2NzSjB4bGMzTlVhV3hrWlNjNkoxeGNkVEl5TnpJbkxDZHNabWx6YUhRbk9pZGNYSFV5T1RkREp5d25iR1pzYjI5eUp6b25YRngxTWpNd1FTY3NKMHhtY2ljNkoxeGNkVVE0TXpWY1hIVkVSREJHSnl3bmJHWnlKem9uWEZ4MVJEZ3pOVnhjZFVSRU1qa25MQ2RzWnljNkoxeGNkVEl5TnpZbkxDZHNaMFVuT2lkY1hIVXlRVGt4Snl3bmJFaGhjaWM2SjF4Y2RUSTVOakluTENkc2FHRnlaQ2M2SjF4Y2RUSXhRa1FuTENkc2FHRnlkU2M2SjF4Y2RUSXhRa01uTENkc2FHRnlkV3duT2lkY1hIVXlPVFpCSnl3bmJHaGliR3NuT2lkY1hIVXlOVGcwSnl3blRFcGplU2M2SjF4Y2RUQTBNRGtuTENkc2FtTjVKem9uWEZ4MU1EUTFPU2NzSjJ4c1lYSnlKem9uWEZ4MU1qRkROeWNzSjJ4c0p6b25YRngxTWpJMlFTY3NKMHhzSnpvblhGeDFNakpFT0Njc0oyeHNZMjl5Ym1WeUp6b25YRngxTWpNeFJTY3NKMHhzWldaMFlYSnliM2NuT2lkY1hIVXlNVVJCSnl3bmJHeG9ZWEprSnpvblhGeDFNamsyUWljc0oyeHNkSEpwSnpvblhGeDFNalZHUVNjc0oweHRhV1J2ZENjNkoxeGNkVEF4TTBZbkxDZHNiV2xrYjNRbk9pZGNYSFV3TVRRd0p5d25iRzF2ZFhOMFlXTm9aU2M2SjF4Y2RUSXpRakFuTENkc2JXOTFjM1FuT2lkY1hIVXlNMEl3Snl3bmJHNWhjQ2M2SjF4Y2RUSkJPRGtuTENkc2JtRndjSEp2ZUNjNkoxeGNkVEpCT0RrbkxDZHNibVVuT2lkY1hIVXlRVGczSnl3bmJHNUZKem9uWEZ4MU1qSTJPQ2NzSjJ4dVpYRW5PaWRjWEhVeVFUZzNKeXduYkc1bGNYRW5PaWRjWEhVeU1qWTRKeXduYkc1emFXMG5PaWRjWEhVeU1rVTJKeXduYkc5aGJtY25PaWRjWEhVeU4wVkRKeXduYkc5aGNuSW5PaWRjWEhVeU1VWkVKeXduYkc5aWNtc25PaWRjWEhVeU4wVTJKeXduYkc5dVoyeGxablJoY25KdmR5YzZKMXhjZFRJM1JqVW5MQ2RNYjI1blRHVm1kRUZ5Y205M0p6b25YRngxTWpkR05TY3NKMHh2Ym1kc1pXWjBZWEp5YjNjbk9pZGNYSFV5TjBZNEp5d25iRzl1WjJ4bFpuUnlhV2RvZEdGeWNtOTNKem9uWEZ4MU1qZEdOeWNzSjB4dmJtZE1aV1owVW1sbmFIUkJjbkp2ZHljNkoxeGNkVEkzUmpjbkxDZE1iMjVuYkdWbWRISnBaMmgwWVhKeWIzY25PaWRjWEhVeU4wWkJKeXduYkc5dVoyMWhjSE4wYnljNkoxeGNkVEkzUmtNbkxDZHNiMjVuY21sbmFIUmhjbkp2ZHljNkoxeGNkVEkzUmpZbkxDZE1iMjVuVW1sbmFIUkJjbkp2ZHljNkoxeGNkVEkzUmpZbkxDZE1iMjVuY21sbmFIUmhjbkp2ZHljNkoxeGNkVEkzUmprbkxDZHNiMjl3WVhKeWIzZHNaV1owSnpvblhGeDFNakZCUWljc0oyeHZiM0JoY25KdmQzSnBaMmgwSnpvblhGeDFNakZCUXljc0oyeHZjR0Z5SnpvblhGeDFNams0TlNjc0oweHZjR1luT2lkY1hIVkVPRE0xWEZ4MVJFUTBNeWNzSjJ4dmNHWW5PaWRjWEhWRU9ETTFYRngxUkVRMVJDY3NKMnh2Y0d4MWN5YzZKMXhjZFRKQk1rUW5MQ2RzYjNScGJXVnpKem9uWEZ4MU1rRXpOQ2NzSjJ4dmQyRnpkQ2M2SjF4Y2RUSXlNVGNuTENkc2IzZGlZWEluT2lkZkp5d25URzkzWlhKTVpXWjBRWEp5YjNjbk9pZGNYSFV5TVRrNUp5d25URzkzWlhKU2FXZG9kRUZ5Y205M0p6b25YRngxTWpFNU9DY3NKMnh2ZWljNkoxeGNkVEkxUTBFbkxDZHNiM3BsYm1kbEp6b25YRngxTWpWRFFTY3NKMnh2ZW1Zbk9pZGNYSFV5T1VWQ0p5d25iSEJoY2ljNkp5Z25MQ2RzY0dGeWJIUW5PaWRjWEhVeU9Ua3pKeXduYkhKaGNuSW5PaWRjWEhVeU1VTTJKeXduYkhKamIzSnVaWEluT2lkY1hIVXlNekZHSnl3bmJISm9ZWEluT2lkY1hIVXlNVU5DSnl3bmJISm9ZWEprSnpvblhGeDFNamsyUkNjc0oyeHliU2M2SjF4Y2RUSXdNRVVuTENkc2NuUnlhU2M2SjF4Y2RUSXlRa1luTENkc2MyRnhkVzhuT2lkY1hIVXlNRE01Snl3bmJITmpjaWM2SjF4Y2RVUTRNelZjWEhWRVEwTXhKeXduVEhOamNpYzZKMXhjZFRJeE1USW5MQ2RzYzJnbk9pZGNYSFV5TVVJd0p5d25USE5vSnpvblhGeDFNakZDTUNjc0oyeHphVzBuT2lkY1hIVXlNamN5Snl3bmJITnBiV1VuT2lkY1hIVXlRVGhFSnl3bmJITnBiV2NuT2lkY1hIVXlRVGhHSnl3bmJITnhZaWM2SjFzbkxDZHNjM0YxYnljNkoxeGNkVEl3TVRnbkxDZHNjM0YxYjNJbk9pZGNYSFV5TURGQkp5d25USE4wY205ckp6b25YRngxTURFME1TY3NKMnh6ZEhKdmF5YzZKMXhjZFRBeE5ESW5MQ2RzZEdOakp6b25YRngxTWtGQk5pY3NKMngwWTJseUp6b25YRngxTWtFM09TY3NKMngwSnpvblBDY3NKMHhVSnpvblBDY3NKMHgwSnpvblhGeDFNakkyUVNjc0oyeDBaRzkwSnpvblhGeDFNakpFTmljc0oyeDBhSEpsWlNjNkoxeGNkVEl5UTBJbkxDZHNkR2x0WlhNbk9pZGNYSFV5TWtNNUp5d25iSFJzWVhKeUp6b25YRngxTWprM05pY3NKMngwY1hWbGMzUW5PaWRjWEhVeVFUZENKeXduYkhSeWFTYzZKMXhjZFRJMVF6TW5MQ2RzZEhKcFpTYzZKMXhjZFRJeVFqUW5MQ2RzZEhKcFppYzZKMXhjZFRJMVF6SW5MQ2RzZEhKUVlYSW5PaWRjWEhVeU9UazJKeXduYkhWeVpITm9ZWEluT2lkY1hIVXlPVFJCSnl3bmJIVnlkV2hoY2ljNkoxeGNkVEk1TmpZbkxDZHNkbVZ5ZEc1bGNYRW5PaWRjWEhVeU1qWTRYRngxUmtVd01DY3NKMngyYmtVbk9pZGNYSFV5TWpZNFhGeDFSa1V3TUNjc0oyMWhZM0luT2lkY1hIaEJSaWNzSjIxaGJHVW5PaWRjWEhVeU5qUXlKeXduYldGc2RDYzZKMXhjZFRJM01qQW5MQ2R0WVd4MFpYTmxKem9uWEZ4MU1qY3lNQ2NzSjAxaGNDYzZKMXhjZFRJNU1EVW5MQ2R0WVhBbk9pZGNYSFV5TVVFMkp5d25iV0Z3YzNSdkp6b25YRngxTWpGQk5pY3NKMjFoY0hOMGIyUnZkMjRuT2lkY1hIVXlNVUUzSnl3bmJXRndjM1J2YkdWbWRDYzZKMXhjZFRJeFFUUW5MQ2R0WVhCemRHOTFjQ2M2SjF4Y2RUSXhRVFVuTENkdFlYSnJaWEluT2lkY1hIVXlOVUZGSnl3bmJXTnZiVzFoSnpvblhGeDFNa0V5T1Njc0owMWplU2M2SjF4Y2RUQTBNVU1uTENkdFkza25PaWRjWEhVd05ETkRKeXduYldSaGMyZ25PaWRjWEhVeU1ERTBKeXduYlVSRWIzUW5PaWRjWEhVeU1qTkJKeXduYldWaGMzVnlaV1JoYm1kc1pTYzZKMXhjZFRJeU1qRW5MQ2ROWldScGRXMVRjR0ZqWlNjNkoxeGNkVEl3TlVZbkxDZE5aV3hzYVc1MGNtWW5PaWRjWEhVeU1UTXpKeXduVFdaeUp6b25YRngxUkRnek5WeGNkVVJFTVRBbkxDZHRabkluT2lkY1hIVkVPRE0xWEZ4MVJFUXlRU2NzSjIxb2J5YzZKMXhjZFRJeE1qY25MQ2R0YVdOeWJ5YzZKMXhjZUVJMUp5d25iV2xrWVhOMEp6b25LaWNzSjIxcFpHTnBjaWM2SjF4Y2RUSkJSakFuTENkdGFXUW5PaWRjWEhVeU1qSXpKeXduYldsa1pHOTBKem9uWEZ4NFFqY25MQ2R0YVc1MWMySW5PaWRjWEhVeU1qbEdKeXduYldsdWRYTW5PaWRjWEhVeU1qRXlKeXduYldsdWRYTmtKem9uWEZ4MU1qSXpPQ2NzSjIxcGJuVnpaSFVuT2lkY1hIVXlRVEpCSnl3blRXbHVkWE5RYkhWekp6b25YRngxTWpJeE15Y3NKMjFzWTNBbk9pZGNYSFV5UVVSQ0p5d25iV3hrY2ljNkoxeGNkVEl3TWpZbkxDZHRibkJzZFhNbk9pZGNYSFV5TWpFekp5d25iVzlrWld4ekp6b25YRngxTWpKQk55Y3NKMDF2Y0dZbk9pZGNYSFZFT0RNMVhGeDFSRVEwTkNjc0oyMXZjR1luT2lkY1hIVkVPRE0xWEZ4MVJFUTFSU2NzSjIxd0p6b25YRngxTWpJeE15Y3NKMjF6WTNJbk9pZGNYSFZFT0RNMVhGeDFSRU5ETWljc0owMXpZM0luT2lkY1hIVXlNVE16Snl3bmJYTjBjRzl6SnpvblhGeDFNakl6UlNjc0owMTFKem9uWEZ4MU1ETTVReWNzSjIxMUp6b25YRngxTUROQ1F5Y3NKMjExYkhScGJXRndKem9uWEZ4MU1qSkNPQ2NzSjIxMWJXRndKem9uWEZ4MU1qSkNPQ2NzSjI1aFlteGhKem9uWEZ4MU1qSXdOeWNzSjA1aFkzVjBaU2M2SjF4Y2RUQXhORE1uTENkdVlXTjFkR1VuT2lkY1hIVXdNVFEwSnl3bmJtRnVaeWM2SjF4Y2RUSXlNakJjWEhVeU1FUXlKeXduYm1Gd0p6b25YRngxTWpJME9TY3NKMjVoY0VVbk9pZGNYSFV5UVRjd1hGeDFNRE16T0Njc0oyNWhjR2xrSnpvblhGeDFNakkwUWx4Y2RUQXpNemduTENkdVlYQnZjeWM2SjF4Y2RUQXhORGtuTENkdVlYQndjbTk0SnpvblhGeDFNakkwT1Njc0oyNWhkSFZ5WVd3bk9pZGNYSFV5TmpaRkp5d25ibUYwZFhKaGJITW5PaWRjWEhVeU1URTFKeXduYm1GMGRYSW5PaWRjWEhVeU5qWkZKeXduYm1KemNDYzZKMXhjZUVFd0p5d25ibUoxYlhBbk9pZGNYSFV5TWpSRlhGeDFNRE16T0Njc0oyNWlkVzF3WlNjNkoxeGNkVEl5TkVaY1hIVXdNek00Snl3bmJtTmhjQ2M2SjF4Y2RUSkJORE1uTENkT1kyRnliMjRuT2lkY1hIVXdNVFEzSnl3bmJtTmhjbTl1SnpvblhGeDFNREUwT0Njc0owNWpaV1JwYkNjNkoxeGNkVEF4TkRVbkxDZHVZMlZrYVd3bk9pZGNYSFV3TVRRMkp5d25ibU52Ym1jbk9pZGNYSFV5TWpRM0p5d25ibU52Ym1ka2IzUW5PaWRjWEhVeVFUWkVYRngxTURNek9DY3NKMjVqZFhBbk9pZGNYSFV5UVRReUp5d25UbU41SnpvblhGeDFNRFF4UkNjc0oyNWplU2M2SjF4Y2RUQTBNMFFuTENkdVpHRnphQ2M2SjF4Y2RUSXdNVE1uTENkdVpXRnlhR3NuT2lkY1hIVXlPVEkwSnl3bmJtVmhjbkluT2lkY1hIVXlNVGszSnl3bmJtVkJjbkluT2lkY1hIVXlNVVEzSnl3bmJtVmhjbkp2ZHljNkoxeGNkVEl4T1RjbkxDZHVaU2M2SjF4Y2RUSXlOakFuTENkdVpXUnZkQ2M2SjF4Y2RUSXlOVEJjWEhVd016TTRKeXduVG1WbllYUnBkbVZOWldScGRXMVRjR0ZqWlNjNkoxeGNkVEl3TUVJbkxDZE9aV2RoZEdsMlpWUm9hV05yVTNCaFkyVW5PaWRjWEhVeU1EQkNKeXduVG1WbllYUnBkbVZVYUdsdVUzQmhZMlVuT2lkY1hIVXlNREJDSnl3blRtVm5ZWFJwZG1WV1pYSjVWR2hwYmxOd1lXTmxKem9uWEZ4MU1qQXdRaWNzSjI1bGNYVnBkaWM2SjF4Y2RUSXlOakluTENkdVpYTmxZWEluT2lkY1hIVXlPVEk0Snl3bmJtVnphVzBuT2lkY1hIVXlNalF5WEZ4MU1ETXpPQ2NzSjA1bGMzUmxaRWR5WldGMFpYSkhjbVZoZEdWeUp6b25YRngxTWpJMlFpY3NKMDVsYzNSbFpFeGxjM05NWlhOekp6b25YRngxTWpJMlFTY3NKMDVsZDB4cGJtVW5PaWRjWEc0bkxDZHVaWGhwYzNRbk9pZGNYSFV5TWpBMEp5d25ibVY0YVhOMGN5YzZKMXhjZFRJeU1EUW5MQ2RPWm5Jbk9pZGNYSFZFT0RNMVhGeDFSRVF4TVNjc0oyNW1jaWM2SjF4Y2RVUTRNelZjWEhWRVJESkNKeXduYm1kRkp6b25YRngxTWpJMk4xeGNkVEF6TXpnbkxDZHVaMlVuT2lkY1hIVXlNamN4Snl3bmJtZGxjU2M2SjF4Y2RUSXlOekVuTENkdVoyVnhjU2M2SjF4Y2RUSXlOamRjWEhVd016TTRKeXduYm1kbGNYTnNZVzUwSnpvblhGeDFNa0UzUlZ4Y2RUQXpNemduTENkdVoyVnpKem9uWEZ4MU1rRTNSVnhjZFRBek16Z25MQ2R1UjJjbk9pZGNYSFV5TWtRNVhGeDFNRE16T0Njc0oyNW5jMmx0SnpvblhGeDFNakkzTlNjc0oyNUhkQ2M2SjF4Y2RUSXlOa0pjWEhVeU1FUXlKeXduYm1kMEp6b25YRngxTWpJMlJpY3NKMjVuZEhJbk9pZGNYSFV5TWpaR0p5d25ia2QwZGljNkoxeGNkVEl5TmtKY1hIVXdNek00Snl3bmJtaGhjbkluT2lkY1hIVXlNVUZGSnl3bmJtaEJjbkluT2lkY1hIVXlNVU5GSnl3bmJtaHdZWEluT2lkY1hIVXlRVVl5Snl3bmJta25PaWRjWEhVeU1qQkNKeXduYm1sekp6b25YRngxTWpKR1F5Y3NKMjVwYzJRbk9pZGNYSFV5TWtaQkp5d25ibWwySnpvblhGeDFNakl3UWljc0owNUtZM2tuT2lkY1hIVXdOREJCSnl3bmJtcGplU2M2SjF4Y2RUQTBOVUVuTENkdWJHRnljaWM2SjF4Y2RUSXhPVUVuTENkdWJFRnljaWM2SjF4Y2RUSXhRMFFuTENkdWJHUnlKem9uWEZ4MU1qQXlOU2NzSjI1c1JTYzZKMXhjZFRJeU5qWmNYSFV3TXpNNEp5d25ibXhsSnpvblhGeDFNakkzTUNjc0oyNXNaV1owWVhKeWIzY25PaWRjWEhVeU1UbEJKeXduYmt4bFpuUmhjbkp2ZHljNkoxeGNkVEl4UTBRbkxDZHViR1ZtZEhKcFoyaDBZWEp5YjNjbk9pZGNYSFV5TVVGRkp5d25ia3hsWm5SeWFXZG9kR0Z5Y205M0p6b25YRngxTWpGRFJTY3NKMjVzWlhFbk9pZGNYSFV5TWpjd0p5d25ibXhsY1hFbk9pZGNYSFV5TWpZMlhGeDFNRE16T0Njc0oyNXNaWEZ6YkdGdWRDYzZKMXhjZFRKQk4wUmNYSFV3TXpNNEp5d25ibXhsY3ljNkoxeGNkVEpCTjBSY1hIVXdNek00Snl3bmJteGxjM01uT2lkY1hIVXlNalpGSnl3bmJreHNKem9uWEZ4MU1qSkVPRnhjZFRBek16Z25MQ2R1YkhOcGJTYzZKMXhjZFRJeU56UW5MQ2R1VEhRbk9pZGNYSFV5TWpaQlhGeDFNakJFTWljc0oyNXNkQ2M2SjF4Y2RUSXlOa1VuTENkdWJIUnlhU2M2SjF4Y2RUSXlSVUVuTENkdWJIUnlhV1VuT2lkY1hIVXlNa1ZESnl3bmJreDBkaWM2SjF4Y2RUSXlOa0ZjWEhVd016TTRKeXduYm0xcFpDYzZKMXhjZFRJeU1qUW5MQ2RPYjBKeVpXRnJKem9uWEZ4MU1qQTJNQ2NzSjA1dmJrSnlaV0ZyYVc1blUzQmhZMlVuT2lkY1hIaEJNQ2NzSjI1dmNHWW5PaWRjWEhWRU9ETTFYRngxUkVRMVJpY3NKMDV2Y0dZbk9pZGNYSFV5TVRFMUp5d25UbTkwSnpvblhGeDFNa0ZGUXljc0oyNXZkQ2M2SjF4Y2VFRkRKeXduVG05MFEyOXVaM0oxWlc1MEp6b25YRngxTWpJMk1pY3NKMDV2ZEVOMWNFTmhjQ2M2SjF4Y2RUSXlOa1FuTENkT2IzUkViM1ZpYkdWV1pYSjBhV05oYkVKaGNpYzZKMXhjZFRJeU1qWW5MQ2RPYjNSRmJHVnRaVzUwSnpvblhGeDFNakl3T1Njc0owNXZkRVZ4ZFdGc0p6b25YRngxTWpJMk1DY3NKMDV2ZEVWeGRXRnNWR2xzWkdVbk9pZGNYSFV5TWpReVhGeDFNRE16T0Njc0owNXZkRVY0YVhOMGN5YzZKMXhjZFRJeU1EUW5MQ2RPYjNSSGNtVmhkR1Z5SnpvblhGeDFNakkyUmljc0owNXZkRWR5WldGMFpYSkZjWFZoYkNjNkoxeGNkVEl5TnpFbkxDZE9iM1JIY21WaGRHVnlSblZzYkVWeGRXRnNKem9uWEZ4MU1qSTJOMXhjZFRBek16Z25MQ2RPYjNSSGNtVmhkR1Z5UjNKbFlYUmxjaWM2SjF4Y2RUSXlOa0pjWEhVd016TTRKeXduVG05MFIzSmxZWFJsY2t4bGMzTW5PaWRjWEhVeU1qYzVKeXduVG05MFIzSmxZWFJsY2xOc1lXNTBSWEYxWVd3bk9pZGNYSFV5UVRkRlhGeDFNRE16T0Njc0owNXZkRWR5WldGMFpYSlVhV3hrWlNjNkoxeGNkVEl5TnpVbkxDZE9iM1JJZFcxd1JHOTNia2gxYlhBbk9pZGNYSFV5TWpSRlhGeDFNRE16T0Njc0owNXZkRWgxYlhCRmNYVmhiQ2M2SjF4Y2RUSXlORVpjWEhVd016TTRKeXduYm05MGFXNG5PaWRjWEhVeU1qQTVKeXduYm05MGFXNWtiM1FuT2lkY1hIVXlNa1kxWEZ4MU1ETXpPQ2NzSjI1dmRHbHVSU2M2SjF4Y2RUSXlSamxjWEhVd016TTRKeXduYm05MGFXNTJZU2M2SjF4Y2RUSXlNRGtuTENkdWIzUnBiblppSnpvblhGeDFNakpHTnljc0oyNXZkR2x1ZG1Nbk9pZGNYSFV5TWtZMkp5d25UbTkwVEdWbWRGUnlhV0Z1WjJ4bFFtRnlKem9uWEZ4MU1qbERSbHhjZFRBek16Z25MQ2RPYjNSTVpXWjBWSEpwWVc1bmJHVW5PaWRjWEhVeU1rVkJKeXduVG05MFRHVm1kRlJ5YVdGdVoyeGxSWEYxWVd3bk9pZGNYSFV5TWtWREp5d25UbTkwVEdWemN5YzZKMXhjZFRJeU5rVW5MQ2RPYjNSTVpYTnpSWEYxWVd3bk9pZGNYSFV5TWpjd0p5d25UbTkwVEdWemMwZHlaV0YwWlhJbk9pZGNYSFV5TWpjNEp5d25UbTkwVEdWemMweGxjM01uT2lkY1hIVXlNalpCWEZ4MU1ETXpPQ2NzSjA1dmRFeGxjM05UYkdGdWRFVnhkV0ZzSnpvblhGeDFNa0UzUkZ4Y2RUQXpNemduTENkT2IzUk1aWE56Vkdsc1pHVW5PaWRjWEhVeU1qYzBKeXduVG05MFRtVnpkR1ZrUjNKbFlYUmxja2R5WldGMFpYSW5PaWRjWEhVeVFVRXlYRngxTURNek9DY3NKMDV2ZEU1bGMzUmxaRXhsYzNOTVpYTnpKem9uWEZ4MU1rRkJNVnhjZFRBek16Z25MQ2R1YjNSdWFTYzZKMXhjZFRJeU1FTW5MQ2R1YjNSdWFYWmhKem9uWEZ4MU1qSXdReWNzSjI1dmRHNXBkbUluT2lkY1hIVXlNa1pGSnl3bmJtOTBibWwyWXljNkoxeGNkVEl5UmtRbkxDZE9iM1JRY21WalpXUmxjeWM2SjF4Y2RUSXlPREFuTENkT2IzUlFjbVZqWldSbGMwVnhkV0ZzSnpvblhGeDFNa0ZCUmx4Y2RUQXpNemduTENkT2IzUlFjbVZqWldSbGMxTnNZVzUwUlhGMVlXd25PaWRjWEhVeU1rVXdKeXduVG05MFVtVjJaWEp6WlVWc1pXMWxiblFuT2lkY1hIVXlNakJESnl3blRtOTBVbWxuYUhSVWNtbGhibWRzWlVKaGNpYzZKMXhjZFRJNVJEQmNYSFV3TXpNNEp5d25UbTkwVW1sbmFIUlVjbWxoYm1kc1pTYzZKMXhjZFRJeVJVSW5MQ2RPYjNSU2FXZG9kRlJ5YVdGdVoyeGxSWEYxWVd3bk9pZGNYSFV5TWtWRUp5d25UbTkwVTNGMVlYSmxVM1ZpYzJWMEp6b25YRngxTWpJNFJseGNkVEF6TXpnbkxDZE9iM1JUY1hWaGNtVlRkV0p6WlhSRmNYVmhiQ2M2SjF4Y2RUSXlSVEluTENkT2IzUlRjWFZoY21WVGRYQmxjbk5sZENjNkoxeGNkVEl5T1RCY1hIVXdNek00Snl3blRtOTBVM0YxWVhKbFUzVndaWEp6WlhSRmNYVmhiQ2M2SjF4Y2RUSXlSVE1uTENkT2IzUlRkV0p6WlhRbk9pZGNYSFV5TWpneVhGeDFNakJFTWljc0owNXZkRk4xWW5ObGRFVnhkV0ZzSnpvblhGeDFNakk0T0Njc0owNXZkRk4xWTJObFpXUnpKem9uWEZ4MU1qSTRNU2NzSjA1dmRGTjFZMk5sWldSelJYRjFZV3duT2lkY1hIVXlRVUl3WEZ4MU1ETXpPQ2NzSjA1dmRGTjFZMk5sWldSelUyeGhiblJGY1hWaGJDYzZKMXhjZFRJeVJURW5MQ2RPYjNSVGRXTmpaV1ZrYzFScGJHUmxKem9uWEZ4MU1qSTNSbHhjZFRBek16Z25MQ2RPYjNSVGRYQmxjbk5sZENjNkoxeGNkVEl5T0ROY1hIVXlNRVF5Snl3blRtOTBVM1Z3WlhKelpYUkZjWFZoYkNjNkoxeGNkVEl5T0RrbkxDZE9iM1JVYVd4a1pTYzZKMXhjZFRJeU5ERW5MQ2RPYjNSVWFXeGtaVVZ4ZFdGc0p6b25YRngxTWpJME5DY3NKMDV2ZEZScGJHUmxSblZzYkVWeGRXRnNKem9uWEZ4MU1qSTBOeWNzSjA1dmRGUnBiR1JsVkdsc1pHVW5PaWRjWEhVeU1qUTVKeXduVG05MFZtVnlkR2xqWVd4Q1lYSW5PaWRjWEhVeU1qSTBKeXduYm5CaGNtRnNiR1ZzSnpvblhGeDFNakl5Tmljc0oyNXdZWEluT2lkY1hIVXlNakkySnl3bmJuQmhjbk5zSnpvblhGeDFNa0ZHUkZ4Y2RUSXdSVFVuTENkdWNHRnlkQ2M2SjF4Y2RUSXlNREpjWEhVd016TTRKeXduYm5CdmJHbHVkQ2M2SjF4Y2RUSkJNVFFuTENkdWNISW5PaWRjWEhVeU1qZ3dKeXduYm5CeVkzVmxKem9uWEZ4MU1qSkZNQ2NzSjI1d2NtVmpKem9uWEZ4MU1qSTRNQ2NzSjI1d2NtVmpaWEVuT2lkY1hIVXlRVUZHWEZ4MU1ETXpPQ2NzSjI1d2NtVW5PaWRjWEhVeVFVRkdYRngxTURNek9DY3NKMjV5WVhKeVl5YzZKMXhjZFRJNU16TmNYSFV3TXpNNEp5d25ibkpoY25Jbk9pZGNYSFV5TVRsQ0p5d25ibkpCY25Jbk9pZGNYSFV5TVVOR0p5d25ibkpoY25KM0p6b25YRngxTWpFNVJGeGNkVEF6TXpnbkxDZHVjbWxuYUhSaGNuSnZkeWM2SjF4Y2RUSXhPVUluTENkdVVtbG5hSFJoY25KdmR5YzZKMXhjZFRJeFEwWW5MQ2R1Y25SeWFTYzZKMXhjZFRJeVJVSW5MQ2R1Y25SeWFXVW5PaWRjWEhVeU1rVkVKeXduYm5Oakp6b25YRngxTWpJNE1TY3NKMjV6WTJOMVpTYzZKMXhjZFRJeVJURW5MQ2R1YzJObEp6b25YRngxTWtGQ01GeGNkVEF6TXpnbkxDZE9jMk55SnpvblhGeDFSRGd6TlZ4Y2RVUkRRVGtuTENkdWMyTnlKem9uWEZ4MVJEZ3pOVnhjZFVSRFF6TW5MQ2R1YzJodmNuUnRhV1FuT2lkY1hIVXlNakkwSnl3bmJuTm9iM0owY0dGeVlXeHNaV3duT2lkY1hIVXlNakkySnl3bmJuTnBiU2M2SjF4Y2RUSXlOREVuTENkdWMybHRaU2M2SjF4Y2RUSXlORFFuTENkdWMybHRaWEVuT2lkY1hIVXlNalEwSnl3bmJuTnRhV1FuT2lkY1hIVXlNakkwSnl3bmJuTndZWEluT2lkY1hIVXlNakkySnl3bmJuTnhjM1ZpWlNjNkoxeGNkVEl5UlRJbkxDZHVjM0Z6ZFhCbEp6b25YRngxTWpKRk15Y3NKMjV6ZFdJbk9pZGNYSFV5TWpnMEp5d25ibk4xWWtVbk9pZGNYSFV5UVVNMVhGeDFNRE16T0Njc0oyNXpkV0psSnpvblhGeDFNakk0T0Njc0oyNXpkV0p6WlhRbk9pZGNYSFV5TWpneVhGeDFNakJFTWljc0oyNXpkV0p6WlhSbGNTYzZKMXhjZFRJeU9EZ25MQ2R1YzNWaWMyVjBaWEZ4SnpvblhGeDFNa0ZETlZ4Y2RUQXpNemduTENkdWMzVmpZeWM2SjF4Y2RUSXlPREVuTENkdWMzVmpZMlZ4SnpvblhGeDFNa0ZDTUZ4Y2RUQXpNemduTENkdWMzVndKem9uWEZ4MU1qSTROU2NzSjI1emRYQkZKem9uWEZ4MU1rRkRObHhjZFRBek16Z25MQ2R1YzNWd1pTYzZKMXhjZFRJeU9Ea25MQ2R1YzNWd2MyVjBKem9uWEZ4MU1qSTRNMXhjZFRJd1JESW5MQ2R1YzNWd2MyVjBaWEVuT2lkY1hIVXlNamc1Snl3bmJuTjFjSE5sZEdWeGNTYzZKMXhjZFRKQlF6WmNYSFV3TXpNNEp5d25iblJuYkNjNkoxeGNkVEl5TnprbkxDZE9kR2xzWkdVbk9pZGNYSGhFTVNjc0oyNTBhV3hrWlNjNkoxeGNlRVl4Snl3bmJuUnNaeWM2SjF4Y2RUSXlOemduTENkdWRISnBZVzVuYkdWc1pXWjBKem9uWEZ4MU1qSkZRU2NzSjI1MGNtbGhibWRzWld4bFpuUmxjU2M2SjF4Y2RUSXlSVU1uTENkdWRISnBZVzVuYkdWeWFXZG9kQ2M2SjF4Y2RUSXlSVUluTENkdWRISnBZVzVuYkdWeWFXZG9kR1Z4SnpvblhGeDFNakpGUkNjc0owNTFKem9uWEZ4MU1ETTVSQ2NzSjI1MUp6b25YRngxTUROQ1JDY3NKMjUxYlNjNkp5TW5MQ2R1ZFcxbGNtOG5PaWRjWEhVeU1URTJKeXduYm5WdGMzQW5PaWRjWEhVeU1EQTNKeXduYm5aaGNDYzZKMXhjZFRJeU5FUmNYSFV5TUVReUp5d25iblprWVhOb0p6b25YRngxTWpKQlF5Y3NKMjUyUkdGemFDYzZKMXhjZFRJeVFVUW5MQ2R1Vm1SaGMyZ25PaWRjWEhVeU1rRkZKeXduYmxaRVlYTm9Kem9uWEZ4MU1qSkJSaWNzSjI1MloyVW5PaWRjWEhVeU1qWTFYRngxTWpCRU1pY3NKMjUyWjNRbk9pYytYRngxTWpCRU1pY3NKMjUyU0dGeWNpYzZKMXhjZFRJNU1EUW5MQ2R1ZG1sdVptbHVKem9uWEZ4MU1qbEVSU2NzSjI1MmJFRnljaWM2SjF4Y2RUSTVNREluTENkdWRteGxKem9uWEZ4MU1qSTJORnhjZFRJd1JESW5MQ2R1ZG14MEp6b25QRnhjZFRJd1JESW5MQ2R1ZG14MGNtbGxKem9uWEZ4MU1qSkNORnhjZFRJd1JESW5MQ2R1ZG5KQmNuSW5PaWRjWEhVeU9UQXpKeXduYm5aeWRISnBaU2M2SjF4Y2RUSXlRalZjWEhVeU1FUXlKeXduYm5aemFXMG5PaWRjWEhVeU1qTkRYRngxTWpCRU1pY3NKMjUzWVhKb2F5YzZKMXhjZFRJNU1qTW5MQ2R1ZDJGeWNpYzZKMXhjZFRJeE9UWW5MQ2R1ZDBGeWNpYzZKMXhjZFRJeFJEWW5MQ2R1ZDJGeWNtOTNKem9uWEZ4MU1qRTVOaWNzSjI1M2JtVmhjaWM2SjF4Y2RUSTVNamNuTENkUFlXTjFkR1VuT2lkY1hIaEVNeWNzSjI5aFkzVjBaU2M2SjF4Y2VFWXpKeXduYjJGemRDYzZKMXhjZFRJeU9VSW5MQ2RQWTJseVl5YzZKMXhjZUVRMEp5d25iMk5wY21Nbk9pZGNYSGhHTkNjc0oyOWphWEluT2lkY1hIVXlNamxCSnl3blQyTjVKem9uWEZ4MU1EUXhSU2NzSjI5amVTYzZKMXhjZFRBME0wVW5MQ2R2WkdGemFDYzZKMXhjZFRJeU9VUW5MQ2RQWkdKc1lXTW5PaWRjWEhVd01UVXdKeXduYjJSaWJHRmpKem9uWEZ4MU1ERTFNU2NzSjI5a2FYWW5PaWRjWEhVeVFUTTRKeXduYjJSdmRDYzZKMXhjZFRJeU9Ua25MQ2R2WkhOdmJHUW5PaWRjWEhVeU9VSkRKeXduVDBWc2FXY25PaWRjWEhVd01UVXlKeXduYjJWc2FXY25PaWRjWEhVd01UVXpKeXduYjJaamFYSW5PaWRjWEhVeU9VSkdKeXduVDJaeUp6b25YRngxUkRnek5WeGNkVVJFTVRJbkxDZHZabkluT2lkY1hIVkVPRE0xWEZ4MVJFUXlReWNzSjI5bmIyNG5PaWRjWEhVd01rUkNKeXduVDJkeVlYWmxKem9uWEZ4NFJESW5MQ2R2WjNKaGRtVW5PaWRjWEhoR01pY3NKMjluZENjNkoxeGNkVEk1UXpFbkxDZHZhR0poY2ljNkoxeGNkVEk1UWpVbkxDZHZhRzBuT2lkY1hIVXdNMEU1Snl3bmIybHVkQ2M2SjF4Y2RUSXlNa1VuTENkdmJHRnljaWM2SjF4Y2RUSXhRa0VuTENkdmJHTnBjaWM2SjF4Y2RUSTVRa1VuTENkdmJHTnliM056SnpvblhGeDFNamxDUWljc0oyOXNhVzVsSnpvblhGeDFNakF6UlNjc0oyOXNkQ2M2SjF4Y2RUSTVRekFuTENkUGJXRmpjaWM2SjF4Y2RUQXhORU1uTENkdmJXRmpjaWM2SjF4Y2RUQXhORVFuTENkUGJXVm5ZU2M2SjF4Y2RUQXpRVGtuTENkdmJXVm5ZU2M2SjF4Y2RUQXpRemtuTENkUGJXbGpjbTl1SnpvblhGeDFNRE01Umljc0oyOXRhV055YjI0bk9pZGNYSFV3TTBKR0p5d25iMjFwWkNjNkoxeGNkVEk1UWpZbkxDZHZiV2x1ZFhNbk9pZGNYSFV5TWprMkp5d25UMjl3WmljNkoxeGNkVVE0TXpWY1hIVkVSRFEySnl3bmIyOXdaaWM2SjF4Y2RVUTRNelZjWEhWRVJEWXdKeXduYjNCaGNpYzZKMXhjZFRJNVFqY25MQ2RQY0dWdVEzVnliSGxFYjNWaWJHVlJkVzkwWlNjNkoxeGNkVEl3TVVNbkxDZFBjR1Z1UTNWeWJIbFJkVzkwWlNjNkoxeGNkVEl3TVRnbkxDZHZjR1Z5Y0NjNkoxeGNkVEk1UWprbkxDZHZjR3gxY3ljNkoxeGNkVEl5T1RVbkxDZHZjbUZ5Y2ljNkoxeGNkVEl4UWtJbkxDZFBjaWM2SjF4Y2RUSkJOVFFuTENkdmNpYzZKMXhjZFRJeU1qZ25MQ2R2Y21Rbk9pZGNYSFV5UVRWRUp5d25iM0prWlhJbk9pZGNYSFV5TVRNMEp5d25iM0prWlhKdlppYzZKMXhjZFRJeE16UW5MQ2R2Y21SbUp6b25YRng0UVVFbkxDZHZjbVJ0SnpvblhGeDRRa0VuTENkdmNtbG5iMlluT2lkY1hIVXlNa0kySnl3bmIzSnZjaWM2SjF4Y2RUSkJOVFluTENkdmNuTnNiM0JsSnpvblhGeDFNa0UxTnljc0oyOXlkaWM2SjF4Y2RUSkJOVUluTENkdlV5YzZKMXhjZFRJMFF6Z25MQ2RQYzJOeUp6b25YRngxUkRnek5WeGNkVVJEUVVFbkxDZHZjMk55SnpvblhGeDFNakV6TkNjc0owOXpiR0Z6YUNjNkoxeGNlRVE0Snl3bmIzTnNZWE5vSnpvblhGeDRSamduTENkdmMyOXNKem9uWEZ4MU1qSTVPQ2NzSjA5MGFXeGtaU2M2SjF4Y2VFUTFKeXduYjNScGJHUmxKem9uWEZ4NFJqVW5MQ2R2ZEdsdFpYTmhjeWM2SjF4Y2RUSkJNelluTENkUGRHbHRaWE1uT2lkY1hIVXlRVE0zSnl3bmIzUnBiV1Z6SnpvblhGeDFNakk1Tnljc0owOTFiV3duT2lkY1hIaEVOaWNzSjI5MWJXd25PaWRjWEhoR05pY3NKMjkyWW1GeUp6b25YRngxTWpNelJDY3NKMDkyWlhKQ1lYSW5PaWRjWEhVeU1ETkZKeXduVDNabGNrSnlZV05sSnpvblhGeDFNak5FUlNjc0owOTJaWEpDY21GamEyVjBKem9uWEZ4MU1qTkNOQ2NzSjA5MlpYSlFZWEpsYm5Sb1pYTnBjeWM2SjF4Y2RUSXpSRU1uTENkd1lYSmhKem9uWEZ4NFFqWW5MQ2R3WVhKaGJHeGxiQ2M2SjF4Y2RUSXlNalVuTENkd1lYSW5PaWRjWEhVeU1qSTFKeXduY0dGeWMybHRKem9uWEZ4MU1rRkdNeWNzSjNCaGNuTnNKem9uWEZ4MU1rRkdSQ2NzSjNCaGNuUW5PaWRjWEhVeU1qQXlKeXduVUdGeWRHbGhiRVFuT2lkY1hIVXlNakF5Snl3blVHTjVKem9uWEZ4MU1EUXhSaWNzSjNCamVTYzZKMXhjZFRBME0wWW5MQ2R3WlhKamJuUW5PaWNsSnl3bmNHVnlhVzlrSnpvbkxpY3NKM0JsY20xcGJDYzZKMXhjZFRJd016QW5MQ2R3WlhKd0p6b25YRngxTWpKQk5TY3NKM0JsY25SbGJtc25PaWRjWEhVeU1ETXhKeXduVUdaeUp6b25YRngxUkRnek5WeGNkVVJFTVRNbkxDZHdabkluT2lkY1hIVkVPRE0xWEZ4MVJFUXlSQ2NzSjFCb2FTYzZKMXhjZFRBelFUWW5MQ2R3YUdrbk9pZGNYSFV3TTBNMkp5d25jR2hwZGljNkoxeGNkVEF6UkRVbkxDZHdhRzF0WVhRbk9pZGNYSFV5TVRNekp5d25jR2h2Ym1Vbk9pZGNYSFV5TmpCRkp5d25VR2tuT2lkY1hIVXdNMEV3Snl3bmNHa25PaWRjWEhVd00wTXdKeXduY0dsMFkyaG1iM0pySnpvblhGeDFNakpFTkNjc0ozQnBkaWM2SjF4Y2RUQXpSRFluTENkd2JHRnVZMnNuT2lkY1hIVXlNVEJHSnl3bmNHeGhibU5yYUNjNkoxeGNkVEl4TUVVbkxDZHdiR0Z1YTNZbk9pZGNYSFV5TVRCR0p5d25jR3gxYzJGamFYSW5PaWRjWEhVeVFUSXpKeXduY0d4MWMySW5PaWRjWEhVeU1qbEZKeXduY0d4MWMyTnBjaWM2SjF4Y2RUSkJNakluTENkd2JIVnpKem9uS3ljc0ozQnNkWE5rYnljNkoxeGNkVEl5TVRRbkxDZHdiSFZ6WkhVbk9pZGNYSFV5UVRJMUp5d25jR3gxYzJVbk9pZGNYSFV5UVRjeUp5d25VR3gxYzAxcGJuVnpKem9uWEZ4NFFqRW5MQ2R3YkhWemJXNG5PaWRjWEhoQ01TY3NKM0JzZFhOemFXMG5PaWRjWEhVeVFUSTJKeXduY0d4MWMzUjNieWM2SjF4Y2RUSkJNamNuTENkd2JTYzZKMXhjZUVJeEp5d25VRzlwYm1OaGNtVndiR0Z1WlNjNkoxeGNkVEl4TUVNbkxDZHdiMmx1ZEdsdWRDYzZKMXhjZFRKQk1UVW5MQ2R3YjNCbUp6b25YRngxUkRnek5WeGNkVVJFTmpFbkxDZFFiM0JtSnpvblhGeDFNakV4T1Njc0ozQnZkVzVrSnpvblhGeDRRVE1uTENkd2NtRndKem9uWEZ4MU1rRkNOeWNzSjFCeUp6b25YRngxTWtGQ1FpY3NKM0J5SnpvblhGeDFNakkzUVNjc0ozQnlZM1ZsSnpvblhGeDFNakkzUXljc0ozQnlaV05oY0hCeWIzZ25PaWRjWEhVeVFVSTNKeXduY0hKbFl5YzZKMXhjZFRJeU4wRW5MQ2R3Y21WalkzVnliSGxsY1NjNkoxeGNkVEl5TjBNbkxDZFFjbVZqWldSbGN5YzZKMXhjZFRJeU4wRW5MQ2RRY21WalpXUmxjMFZ4ZFdGc0p6b25YRngxTWtGQlJpY3NKMUJ5WldObFpHVnpVMnhoYm5SRmNYVmhiQ2M2SjF4Y2RUSXlOME1uTENkUWNtVmpaV1JsYzFScGJHUmxKem9uWEZ4MU1qSTNSU2NzSjNCeVpXTmxjU2M2SjF4Y2RUSkJRVVluTENkd2NtVmpibUZ3Y0hKdmVDYzZKMXhjZFRKQlFqa25MQ2R3Y21WamJtVnhjU2M2SjF4Y2RUSkJRalVuTENkd2NtVmpibk5wYlNjNkoxeGNkVEl5UlRnbkxDZHdjbVVuT2lkY1hIVXlRVUZHSnl3bmNISkZKem9uWEZ4MU1rRkNNeWNzSjNCeVpXTnphVzBuT2lkY1hIVXlNamRGSnl3bmNISnBiV1VuT2lkY1hIVXlNRE15Snl3blVISnBiV1VuT2lkY1hIVXlNRE16Snl3bmNISnBiV1Z6SnpvblhGeDFNakV4T1Njc0ozQnlibUZ3SnpvblhGeDFNa0ZDT1Njc0ozQnlia1VuT2lkY1hIVXlRVUkxSnl3bmNISnVjMmx0SnpvblhGeDFNakpGT0Njc0ozQnliMlFuT2lkY1hIVXlNakJHSnl3blVISnZaSFZqZENjNkoxeGNkVEl5TUVZbkxDZHdjbTltWVd4aGNpYzZKMXhjZFRJek1rVW5MQ2R3Y205bWJHbHVaU2M2SjF4Y2RUSXpNVEluTENkd2NtOW1jM1Z5WmljNkoxeGNkVEl6TVRNbkxDZHdjbTl3SnpvblhGeDFNakl4UkNjc0oxQnliM0J2Y25ScGIyNWhiQ2M2SjF4Y2RUSXlNVVFuTENkUWNtOXdiM0owYVc5dUp6b25YRngxTWpJek55Y3NKM0J5YjNCMGJ5YzZKMXhjZFRJeU1VUW5MQ2R3Y25OcGJTYzZKMXhjZFRJeU4wVW5MQ2R3Y25WeVpXd25PaWRjWEhVeU1rSXdKeXduVUhOamNpYzZKMXhjZFVRNE16VmNYSFZFUTBGQ0p5d25jSE5qY2ljNkoxeGNkVVE0TXpWY1hIVkVRME0xSnl3blVITnBKem9uWEZ4MU1ETkJPQ2NzSjNCemFTYzZKMXhjZFRBelF6Z25MQ2R3ZFc1amMzQW5PaWRjWEhVeU1EQTRKeXduVVdaeUp6b25YRngxUkRnek5WeGNkVVJFTVRRbkxDZHhabkluT2lkY1hIVkVPRE0xWEZ4MVJFUXlSU2NzSjNGcGJuUW5PaWRjWEhVeVFUQkRKeXduY1c5d1ppYzZKMXhjZFVRNE16VmNYSFZFUkRZeUp5d25VVzl3WmljNkoxeGNkVEl4TVVFbkxDZHhjSEpwYldVbk9pZGNYSFV5TURVM0p5d25VWE5qY2ljNkoxeGNkVVE0TXpWY1hIVkVRMEZESnl3bmNYTmpjaWM2SjF4Y2RVUTRNelZjWEhWRVEwTTJKeXduY1hWaGRHVnlibWx2Ym5Nbk9pZGNYSFV5TVRCRUp5d25jWFZoZEdsdWRDYzZKMXhjZFRKQk1UWW5MQ2R4ZFdWemRDYzZKejhuTENkeGRXVnpkR1Z4SnpvblhGeDFNakkxUmljc0ozRjFiM1FuT2lkY0lpY3NKMUZWVDFRbk9pZGNJaWNzSjNKQllYSnlKem9uWEZ4MU1qRkVRaWNzSjNKaFkyVW5PaWRjWEhVeU1qTkVYRngxTURNek1TY3NKMUpoWTNWMFpTYzZKMXhjZFRBeE5UUW5MQ2R5WVdOMWRHVW5PaWRjWEhVd01UVTFKeXduY21Ga2FXTW5PaWRjWEhVeU1qRkJKeXduY21GbGJYQjBlWFluT2lkY1hIVXlPVUl6Snl3bmNtRnVaeWM2SjF4Y2RUSTNSVGtuTENkU1lXNW5Kem9uWEZ4MU1qZEZRaWNzSjNKaGJtZGtKem9uWEZ4MU1qazVNaWNzSjNKaGJtZGxKem9uWEZ4MU1qbEJOU2NzSjNKaGJtZHNaU2M2SjF4Y2RUSTNSVGtuTENkeVlYRjFieWM2SjF4Y2VFSkNKeXduY21GeWNtRndKem9uWEZ4MU1qazNOU2NzSjNKaGNuSmlKem9uWEZ4MU1qRkZOU2NzSjNKaGNuSmlabk1uT2lkY1hIVXlPVEl3Snl3bmNtRnljbU1uT2lkY1hIVXlPVE16Snl3bmNtRnljaWM2SjF4Y2RUSXhPVEluTENkU1lYSnlKem9uWEZ4MU1qRkJNQ2NzSjNKQmNuSW5PaWRjWEhVeU1VUXlKeXduY21GeWNtWnpKem9uWEZ4MU1qa3hSU2NzSjNKaGNuSm9heWM2SjF4Y2RUSXhRVUVuTENkeVlYSnliSEFuT2lkY1hIVXlNVUZESnl3bmNtRnljbkJzSnpvblhGeDFNamswTlNjc0ozSmhjbkp6YVcwbk9pZGNYSFV5T1RjMEp5d25VbUZ5Y25Sc0p6b25YRngxTWpreE5pY3NKM0poY25KMGJDYzZKMXhjZFRJeFFUTW5MQ2R5WVhKeWR5YzZKMXhjZFRJeE9VUW5MQ2R5WVhSaGFXd25PaWRjWEhVeU9URkJKeXduY2tGMFlXbHNKem9uWEZ4MU1qa3hReWNzSjNKaGRHbHZKem9uWEZ4MU1qSXpOaWNzSjNKaGRHbHZibUZzY3ljNkoxeGNkVEl4TVVFbkxDZHlZbUZ5Y2ljNkoxeGNkVEk1TUVRbkxDZHlRbUZ5Y2ljNkoxeGNkVEk1TUVZbkxDZFNRbUZ5Y2ljNkoxeGNkVEk1TVRBbkxDZHlZbUp5YXljNkoxeGNkVEkzTnpNbkxDZHlZbkpoWTJVbk9pZDlKeXduY21KeVlXTnJKem9uWFNjc0ozSmljbXRsSnpvblhGeDFNams0UXljc0ozSmljbXR6YkdRbk9pZGNYSFV5T1RoRkp5d25jbUp5YTNOc2RTYzZKMXhjZFRJNU9UQW5MQ2RTWTJGeWIyNG5PaWRjWEhVd01UVTRKeXduY21OaGNtOXVKem9uWEZ4MU1ERTFPU2NzSjFKalpXUnBiQ2M2SjF4Y2RUQXhOVFluTENkeVkyVmthV3duT2lkY1hIVXdNVFUzSnl3bmNtTmxhV3duT2lkY1hIVXlNekE1Snl3bmNtTjFZaWM2SjMwbkxDZFNZM2tuT2lkY1hIVXdOREl3Snl3bmNtTjVKem9uWEZ4MU1EUTBNQ2NzSjNKa1kyRW5PaWRjWEhVeU9UTTNKeXduY21Sc1pHaGhjaWM2SjF4Y2RUSTVOamtuTENkeVpIRjFieWM2SjF4Y2RUSXdNVVFuTENkeVpIRjFiM0luT2lkY1hIVXlNREZFSnl3bmNtUnphQ2M2SjF4Y2RUSXhRak1uTENkeVpXRnNKem9uWEZ4MU1qRXhReWNzSjNKbFlXeHBibVVuT2lkY1hIVXlNVEZDSnl3bmNtVmhiSEJoY25Rbk9pZGNYSFV5TVRGREp5d25jbVZoYkhNbk9pZGNYSFV5TVRGRUp5d25VbVVuT2lkY1hIVXlNVEZESnl3bmNtVmpkQ2M2SjF4Y2RUSTFRVVFuTENkeVpXY25PaWRjWEhoQlJTY3NKMUpGUnljNkoxeGNlRUZGSnl3blVtVjJaWEp6WlVWc1pXMWxiblFuT2lkY1hIVXlNakJDSnl3blVtVjJaWEp6WlVWeGRXbHNhV0p5YVhWdEp6b25YRngxTWpGRFFpY3NKMUpsZG1WeWMyVlZjRVZ4ZFdsc2FXSnlhWFZ0SnpvblhGeDFNamsyUmljc0ozSm1hWE5vZENjNkoxeGNkVEk1TjBRbkxDZHlabXh2YjNJbk9pZGNYSFV5TXpCQ0p5d25jbVp5SnpvblhGeDFSRGd6TlZ4Y2RVUkVNa1luTENkU1puSW5PaWRjWEhVeU1URkRKeXduY2toaGNpYzZKMXhjZFRJNU5qUW5MQ2R5YUdGeVpDYzZKMXhjZFRJeFF6RW5MQ2R5YUdGeWRTYzZKMXhjZFRJeFF6QW5MQ2R5YUdGeWRXd25PaWRjWEhVeU9UWkRKeXduVW1odkp6b25YRngxTUROQk1TY3NKM0pvYnljNkoxeGNkVEF6UXpFbkxDZHlhRzkySnpvblhGeDFNRE5HTVNjc0oxSnBaMmgwUVc1bmJHVkNjbUZqYTJWMEp6b25YRngxTWpkRk9TY3NKMUpwWjJoMFFYSnliM2RDWVhJbk9pZGNYSFV5TVVVMUp5d25jbWxuYUhSaGNuSnZkeWM2SjF4Y2RUSXhPVEluTENkU2FXZG9kRUZ5Y205M0p6b25YRngxTWpFNU1pY3NKMUpwWjJoMFlYSnliM2NuT2lkY1hIVXlNVVF5Snl3blVtbG5hSFJCY25KdmQweGxablJCY25KdmR5YzZKMXhjZFRJeFF6UW5MQ2R5YVdkb2RHRnljbTkzZEdGcGJDYzZKMXhjZFRJeFFUTW5MQ2RTYVdkb2RFTmxhV3hwYm1jbk9pZGNYSFV5TXpBNUp5d25VbWxuYUhSRWIzVmliR1ZDY21GamEyVjBKem9uWEZ4MU1qZEZOeWNzSjFKcFoyaDBSRzkzYmxSbFpWWmxZM1J2Y2ljNkoxeGNkVEk1TlVRbkxDZFNhV2RvZEVSdmQyNVdaV04wYjNKQ1lYSW5PaWRjWEhVeU9UVTFKeXduVW1sbmFIUkViM2R1Vm1WamRHOXlKem9uWEZ4MU1qRkRNaWNzSjFKcFoyaDBSbXh2YjNJbk9pZGNYSFV5TXpCQ0p5d25jbWxuYUhSb1lYSndiMjl1Wkc5M2JpYzZKMXhjZFRJeFF6RW5MQ2R5YVdkb2RHaGhjbkJ2YjI1MWNDYzZKMXhjZFRJeFF6QW5MQ2R5YVdkb2RHeGxablJoY25KdmQzTW5PaWRjWEhVeU1VTTBKeXduY21sbmFIUnNaV1owYUdGeWNHOXZibk1uT2lkY1hIVXlNVU5ESnl3bmNtbG5hSFJ5YVdkb2RHRnljbTkzY3ljNkoxeGNkVEl4UXprbkxDZHlhV2RvZEhOeGRXbG5ZWEp5YjNjbk9pZGNYSFV5TVRsRUp5d25VbWxuYUhSVVpXVkJjbkp2ZHljNkoxeGNkVEl4UVRZbkxDZFNhV2RvZEZSbFpTYzZKMXhjZFRJeVFUSW5MQ2RTYVdkb2RGUmxaVlpsWTNSdmNpYzZKMXhjZFRJNU5VSW5MQ2R5YVdkb2RIUm9jbVZsZEdsdFpYTW5PaWRjWEhVeU1rTkRKeXduVW1sbmFIUlVjbWxoYm1kc1pVSmhjaWM2SjF4Y2RUSTVSREFuTENkU2FXZG9kRlJ5YVdGdVoyeGxKem9uWEZ4MU1qSkNNeWNzSjFKcFoyaDBWSEpwWVc1bmJHVkZjWFZoYkNjNkoxeGNkVEl5UWpVbkxDZFNhV2RvZEZWd1JHOTNibFpsWTNSdmNpYzZKMXhjZFRJNU5FWW5MQ2RTYVdkb2RGVndWR1ZsVm1WamRHOXlKem9uWEZ4MU1qazFReWNzSjFKcFoyaDBWWEJXWldOMGIzSkNZWEluT2lkY1hIVXlPVFUwSnl3blVtbG5hSFJWY0ZabFkzUnZjaWM2SjF4Y2RUSXhRa1VuTENkU2FXZG9kRlpsWTNSdmNrSmhjaWM2SjF4Y2RUSTVOVE1uTENkU2FXZG9kRlpsWTNSdmNpYzZKMXhjZFRJeFF6QW5MQ2R5YVc1bkp6b25YRngxTURKRVFTY3NKM0pwYzJsdVoyUnZkSE5sY1NjNkoxeGNkVEl5TlRNbkxDZHliR0Z5Y2ljNkoxeGNkVEl4UXpRbkxDZHliR2hoY2ljNkoxeGNkVEl4UTBNbkxDZHliRzBuT2lkY1hIVXlNREJHSnl3bmNtMXZkWE4wWVdOb1pTYzZKMXhjZFRJelFqRW5MQ2R5Ylc5MWMzUW5PaWRjWEhVeU0wSXhKeXduY201dGFXUW5PaWRjWEhVeVFVVkZKeXduY205aGJtY25PaWRjWEhVeU4wVkVKeXduY205aGNuSW5PaWRjWEhVeU1VWkZKeXduY205aWNtc25PaWRjWEhVeU4wVTNKeXduY205d1lYSW5PaWRjWEhVeU9UZzJKeXduY205d1ppYzZKMXhjZFVRNE16VmNYSFZFUkRZekp5d25VbTl3WmljNkoxeGNkVEl4TVVRbkxDZHliM0JzZFhNbk9pZGNYSFV5UVRKRkp5d25jbTkwYVcxbGN5YzZKMXhjZFRKQk16VW5MQ2RTYjNWdVpFbHRjR3hwWlhNbk9pZGNYSFV5T1Rjd0p5d25jbkJoY2ljNkp5a25MQ2R5Y0dGeVozUW5PaWRjWEhVeU9UazBKeXduY25Cd2IyeHBiblFuT2lkY1hIVXlRVEV5Snl3bmNuSmhjbkluT2lkY1hIVXlNVU01Snl3blVuSnBaMmgwWVhKeWIzY25PaWRjWEhVeU1VUkNKeXduY25OaGNYVnZKem9uWEZ4MU1qQXpRU2NzSjNKelkzSW5PaWRjWEhWRU9ETTFYRngxUkVORE55Y3NKMUp6WTNJbk9pZGNYSFV5TVRGQ0p5d25jbk5vSnpvblhGeDFNakZDTVNjc0oxSnphQ2M2SjF4Y2RUSXhRakVuTENkeWMzRmlKem9uWFNjc0ozSnpjWFZ2SnpvblhGeDFNakF4T1Njc0ozSnpjWFZ2Y2ljNkoxeGNkVEl3TVRrbkxDZHlkR2h5WldVbk9pZGNYSFV5TWtOREp5d25jblJwYldWekp6b25YRngxTWpKRFFTY3NKM0owY21rbk9pZGNYSFV5TlVJNUp5d25jblJ5YVdVbk9pZGNYSFV5TWtJMUp5d25jblJ5YVdZbk9pZGNYSFV5TlVJNEp5d25jblJ5YVd4MGNta25PaWRjWEhVeU9VTkZKeXduVW5Wc1pVUmxiR0Y1WldRbk9pZGNYSFV5T1VZMEp5d25jblZzZFdoaGNpYzZKMXhjZFRJNU5qZ25MQ2R5ZUNjNkoxeGNkVEl4TVVVbkxDZFRZV04xZEdVbk9pZGNYSFV3TVRWQkp5d25jMkZqZFhSbEp6b25YRngxTURFMVFpY3NKM05pY1hWdkp6b25YRngxTWpBeFFTY3NKM05qWVhBbk9pZGNYSFV5UVVJNEp5d25VMk5oY205dUp6b25YRngxTURFMk1DY3NKM05qWVhKdmJpYzZKMXhjZFRBeE5qRW5MQ2RUWXljNkoxeGNkVEpCUWtNbkxDZHpZeWM2SjF4Y2RUSXlOMEluTENkelkyTjFaU2M2SjF4Y2RUSXlOMFFuTENkelkyVW5PaWRjWEhVeVFVSXdKeXduYzJORkp6b25YRngxTWtGQ05DY3NKMU5qWldScGJDYzZKMXhjZFRBeE5VVW5MQ2R6WTJWa2FXd25PaWRjWEhVd01UVkdKeXduVTJOcGNtTW5PaWRjWEhVd01UVkRKeXduYzJOcGNtTW5PaWRjWEhVd01UVkVKeXduYzJOdVlYQW5PaWRjWEhVeVFVSkJKeXduYzJOdVJTYzZKMXhjZFRKQlFqWW5MQ2R6WTI1emFXMG5PaWRjWEhVeU1rVTVKeXduYzJOd2IyeHBiblFuT2lkY1hIVXlRVEV6Snl3bmMyTnphVzBuT2lkY1hIVXlNamRHSnl3blUyTjVKem9uWEZ4MU1EUXlNU2NzSjNOamVTYzZKMXhjZFRBME5ERW5MQ2R6Wkc5MFlpYzZKMXhjZFRJeVFURW5MQ2R6Wkc5MEp6b25YRngxTWpKRE5TY3NKM05rYjNSbEp6b25YRngxTWtFMk5pY3NKM05sWVhKb2F5YzZKMXhjZFRJNU1qVW5MQ2R6WldGeWNpYzZKMXhjZFRJeE9UZ25MQ2R6WlVGeWNpYzZKMXhjZFRJeFJEZ25MQ2R6WldGeWNtOTNKem9uWEZ4MU1qRTVPQ2NzSjNObFkzUW5PaWRjWEhoQk55Y3NKM05sYldrbk9pYzdKeXduYzJWemQyRnlKem9uWEZ4MU1qa3lPU2NzSjNObGRHMXBiblZ6SnpvblhGeDFNakl4Tmljc0ozTmxkRzF1SnpvblhGeDFNakl4Tmljc0ozTmxlSFFuT2lkY1hIVXlOek0ySnl3blUyWnlKem9uWEZ4MVJEZ3pOVnhjZFVSRU1UWW5MQ2R6Wm5Jbk9pZGNYSFZFT0RNMVhGeDFSRVF6TUNjc0ozTm1jbTkzYmljNkoxeGNkVEl6TWpJbkxDZHphR0Z5Y0NjNkoxeGNkVEkyTmtZbkxDZFRTRU5JWTNrbk9pZGNYSFV3TkRJNUp5d25jMmhqYUdONUp6b25YRngxTURRME9TY3NKMU5JWTNrbk9pZGNYSFV3TkRJNEp5d25jMmhqZVNjNkoxeGNkVEEwTkRnbkxDZFRhRzl5ZEVSdmQyNUJjbkp2ZHljNkoxeGNkVEl4T1RNbkxDZFRhRzl5ZEV4bFpuUkJjbkp2ZHljNkoxeGNkVEl4T1RBbkxDZHphRzl5ZEcxcFpDYzZKMXhjZFRJeU1qTW5MQ2R6YUc5eWRIQmhjbUZzYkdWc0p6b25YRngxTWpJeU5TY3NKMU5vYjNKMFVtbG5hSFJCY25KdmR5YzZKMXhjZFRJeE9USW5MQ2RUYUc5eWRGVndRWEp5YjNjbk9pZGNYSFV5TVRreEp5d25jMmg1SnpvblhGeDRRVVFuTENkVGFXZHRZU2M2SjF4Y2RUQXpRVE1uTENkemFXZHRZU2M2SjF4Y2RUQXpRek1uTENkemFXZHRZV1luT2lkY1hIVXdNME15Snl3bmMybG5iV0YySnpvblhGeDFNRE5ETWljc0ozTnBiU2M2SjF4Y2RUSXlNME1uTENkemFXMWtiM1FuT2lkY1hIVXlRVFpCSnl3bmMybHRaU2M2SjF4Y2RUSXlORE1uTENkemFXMWxjU2M2SjF4Y2RUSXlORE1uTENkemFXMW5Kem9uWEZ4MU1rRTVSU2NzSjNOcGJXZEZKem9uWEZ4MU1rRkJNQ2NzSjNOcGJXd25PaWRjWEhVeVFUbEVKeXduYzJsdGJFVW5PaWRjWEhVeVFUbEdKeXduYzJsdGJtVW5PaWRjWEhVeU1qUTJKeXduYzJsdGNHeDFjeWM2SjF4Y2RUSkJNalFuTENkemFXMXlZWEp5SnpvblhGeDFNamszTWljc0ozTnNZWEp5SnpvblhGeDFNakU1TUNjc0oxTnRZV3hzUTJseVkyeGxKem9uWEZ4MU1qSXhPQ2NzSjNOdFlXeHNjMlYwYldsdWRYTW5PaWRjWEhVeU1qRTJKeXduYzIxaGMyaHdKem9uWEZ4MU1rRXpNeWNzSjNOdFpYQmhjbk5zSnpvblhGeDFNamxGTkNjc0ozTnRhV1FuT2lkY1hIVXlNakl6Snl3bmMyMXBiR1VuT2lkY1hIVXlNekl6Snl3bmMyMTBKem9uWEZ4MU1rRkJRU2NzSjNOdGRHVW5PaWRjWEhVeVFVRkRKeXduYzIxMFpYTW5PaWRjWEhVeVFVRkRYRngxUmtVd01DY3NKMU5QUmxSamVTYzZKMXhjZFRBME1rTW5MQ2R6YjJaMFkza25PaWRjWEhVd05EUkRKeXduYzI5c1ltRnlKem9uWEZ4MU1qTXpSaWNzSjNOdmJHSW5PaWRjWEhVeU9VTTBKeXduYzI5c0p6b25MeWNzSjFOdmNHWW5PaWRjWEhWRU9ETTFYRngxUkVRMFFTY3NKM052Y0dZbk9pZGNYSFZFT0RNMVhGeDFSRVEyTkNjc0ozTndZV1JsY3ljNkoxeGNkVEkyTmpBbkxDZHpjR0ZrWlhOMWFYUW5PaWRjWEhVeU5qWXdKeXduYzNCaGNpYzZKMXhjZFRJeU1qVW5MQ2R6Y1dOaGNDYzZKMXhjZFRJeU9UTW5MQ2R6Y1dOaGNITW5PaWRjWEhVeU1qa3pYRngxUmtVd01DY3NKM054WTNWd0p6b25YRngxTWpJNU5DY3NKM054WTNWd2N5YzZKMXhjZFRJeU9UUmNYSFZHUlRBd0p5d25VM0Z5ZENjNkoxeGNkVEl5TVVFbkxDZHpjWE4xWWljNkoxeGNkVEl5T0VZbkxDZHpjWE4xWW1Vbk9pZGNYSFV5TWpreEp5d25jM0Z6ZFdKelpYUW5PaWRjWEhVeU1qaEdKeXduYzNGemRXSnpaWFJsY1NjNkoxeGNkVEl5T1RFbkxDZHpjWE4xY0NjNkoxeGNkVEl5T1RBbkxDZHpjWE4xY0dVbk9pZGNYSFV5TWpreUp5d25jM0Z6ZFhCelpYUW5PaWRjWEhVeU1qa3dKeXduYzNGemRYQnpaWFJsY1NjNkoxeGNkVEl5T1RJbkxDZHpjWFZoY21Vbk9pZGNYSFV5TlVFeEp5d25VM0YxWVhKbEp6b25YRngxTWpWQk1TY3NKMU54ZFdGeVpVbHVkR1Z5YzJWamRHbHZiaWM2SjF4Y2RUSXlPVE1uTENkVGNYVmhjbVZUZFdKelpYUW5PaWRjWEhVeU1qaEdKeXduVTNGMVlYSmxVM1ZpYzJWMFJYRjFZV3duT2lkY1hIVXlNamt4Snl3blUzRjFZWEpsVTNWd1pYSnpaWFFuT2lkY1hIVXlNamt3Snl3blUzRjFZWEpsVTNWd1pYSnpaWFJGY1hWaGJDYzZKMXhjZFRJeU9USW5MQ2RUY1hWaGNtVlZibWx2YmljNkoxeGNkVEl5T1RRbkxDZHpjWFZoY21Zbk9pZGNYSFV5TlVGQkp5d25jM0YxSnpvblhGeDFNalZCTVNjc0ozTnhkV1luT2lkY1hIVXlOVUZCSnl3bmMzSmhjbkluT2lkY1hIVXlNVGt5Snl3blUzTmpjaWM2SjF4Y2RVUTRNelZjWEhWRVEwRkZKeXduYzNOamNpYzZKMXhjZFVRNE16VmNYSFZFUTBNNEp5d25jM05sZEcxdUp6b25YRngxTWpJeE5pY3NKM056Yldsc1pTYzZKMXhjZFRJek1qTW5MQ2R6YzNSaGNtWW5PaWRjWEhVeU1rTTJKeXduVTNSaGNpYzZKMXhjZFRJeVF6WW5MQ2R6ZEdGeUp6b25YRngxTWpZd05pY3NKM04wWVhKbUp6b25YRngxTWpZd05TY3NKM04wY21GcFoyaDBaWEJ6YVd4dmJpYzZKMXhjZFRBelJqVW5MQ2R6ZEhKaGFXZG9kSEJvYVNjNkoxeGNkVEF6UkRVbkxDZHpkSEp1Y3ljNkoxeGNlRUZHSnl3bmMzVmlKem9uWEZ4MU1qSTRNaWNzSjFOMVlpYzZKMXhjZFRJeVJEQW5MQ2R6ZFdKa2IzUW5PaWRjWEhVeVFVSkVKeXduYzNWaVJTYzZKMXhjZFRKQlF6VW5MQ2R6ZFdKbEp6b25YRngxTWpJNE5pY3NKM04xWW1Wa2IzUW5PaWRjWEhVeVFVTXpKeXduYzNWaWJYVnNkQ2M2SjF4Y2RUSkJRekVuTENkemRXSnVSU2M2SjF4Y2RUSkJRMEluTENkemRXSnVaU2M2SjF4Y2RUSXlPRUVuTENkemRXSndiSFZ6SnpvblhGeDFNa0ZDUmljc0ozTjFZbkpoY25Jbk9pZGNYSFV5T1RjNUp5d25jM1ZpYzJWMEp6b25YRngxTWpJNE1pY3NKMU4xWW5ObGRDYzZKMXhjZFRJeVJEQW5MQ2R6ZFdKelpYUmxjU2M2SjF4Y2RUSXlPRFluTENkemRXSnpaWFJsY1hFbk9pZGNYSFV5UVVNMUp5d25VM1ZpYzJWMFJYRjFZV3duT2lkY1hIVXlNamcySnl3bmMzVmljMlYwYm1WeEp6b25YRngxTWpJNFFTY3NKM04xWW5ObGRHNWxjWEVuT2lkY1hIVXlRVU5DSnl3bmMzVmljMmx0SnpvblhGeDFNa0ZETnljc0ozTjFZbk4xWWljNkoxeGNkVEpCUkRVbkxDZHpkV0p6ZFhBbk9pZGNYSFV5UVVRekp5d25jM1ZqWTJGd2NISnZlQ2M2SjF4Y2RUSkJRamduTENkemRXTmpKem9uWEZ4MU1qSTNRaWNzSjNOMVkyTmpkWEpzZVdWeEp6b25YRngxTWpJM1JDY3NKMU4xWTJObFpXUnpKem9uWEZ4MU1qSTNRaWNzSjFOMVkyTmxaV1J6UlhGMVlXd25PaWRjWEhVeVFVSXdKeXduVTNWalkyVmxaSE5UYkdGdWRFVnhkV0ZzSnpvblhGeDFNakkzUkNjc0oxTjFZMk5sWldSelZHbHNaR1VuT2lkY1hIVXlNamRHSnl3bmMzVmpZMlZ4SnpvblhGeDFNa0ZDTUNjc0ozTjFZMk51WVhCd2NtOTRKem9uWEZ4MU1rRkNRU2NzSjNOMVkyTnVaWEZ4SnpvblhGeDFNa0ZDTmljc0ozTjFZMk51YzJsdEp6b25YRngxTWpKRk9TY3NKM04xWTJOemFXMG5PaWRjWEhVeU1qZEdKeXduVTNWamFGUm9ZWFFuT2lkY1hIVXlNakJDSnl3bmMzVnRKem9uWEZ4MU1qSXhNU2NzSjFOMWJTYzZKMXhjZFRJeU1URW5MQ2R6ZFc1bkp6b25YRngxTWpZMlFTY3NKM04xY0RFbk9pZGNYSGhDT1Njc0ozTjFjREluT2lkY1hIaENNaWNzSjNOMWNETW5PaWRjWEhoQ015Y3NKM04xY0NjNkoxeGNkVEl5T0RNbkxDZFRkWEFuT2lkY1hIVXlNa1F4Snl3bmMzVndaRzkwSnpvblhGeDFNa0ZDUlNjc0ozTjFjR1J6ZFdJbk9pZGNYSFV5UVVRNEp5d25jM1Z3UlNjNkoxeGNkVEpCUXpZbkxDZHpkWEJsSnpvblhGeDFNakk0Tnljc0ozTjFjR1ZrYjNRbk9pZGNYSFV5UVVNMEp5d25VM1Z3WlhKelpYUW5PaWRjWEhVeU1qZ3pKeXduVTNWd1pYSnpaWFJGY1hWaGJDYzZKMXhjZFRJeU9EY25MQ2R6ZFhCb2MyOXNKem9uWEZ4MU1qZERPU2NzSjNOMWNHaHpkV0luT2lkY1hIVXlRVVEzSnl3bmMzVndiR0Z5Y2ljNkoxeGNkVEk1TjBJbkxDZHpkWEJ0ZFd4MEp6b25YRngxTWtGRE1pY3NKM04xY0c1Rkp6b25YRngxTWtGRFF5Y3NKM04xY0c1bEp6b25YRngxTWpJNFFpY3NKM04xY0hCc2RYTW5PaWRjWEhVeVFVTXdKeXduYzNWd2MyVjBKem9uWEZ4MU1qSTRNeWNzSjFOMWNITmxkQ2M2SjF4Y2RUSXlSREVuTENkemRYQnpaWFJsY1NjNkoxeGNkVEl5T0RjbkxDZHpkWEJ6WlhSbGNYRW5PaWRjWEhVeVFVTTJKeXduYzNWd2MyVjBibVZ4SnpvblhGeDFNakk0UWljc0ozTjFjSE5sZEc1bGNYRW5PaWRjWEhVeVFVTkRKeXduYzNWd2MybHRKem9uWEZ4MU1rRkRPQ2NzSjNOMWNITjFZaWM2SjF4Y2RUSkJSRFFuTENkemRYQnpkWEFuT2lkY1hIVXlRVVEySnl3bmMzZGhjbWhySnpvblhGeDFNamt5Tmljc0ozTjNZWEp5SnpvblhGeDFNakU1T1Njc0ozTjNRWEp5SnpvblhGeDFNakZFT1Njc0ozTjNZWEp5YjNjbk9pZGNYSFV5TVRrNUp5d25jM2R1ZDJGeUp6b25YRngxTWpreVFTY3NKM042Ykdsbkp6b25YRng0UkVZbkxDZFVZV0luT2lkY1hIUW5MQ2QwWVhKblpYUW5PaWRjWEhVeU16RTJKeXduVkdGMUp6b25YRngxTUROQk5DY3NKM1JoZFNjNkoxeGNkVEF6UXpRbkxDZDBZbkpySnpvblhGeDFNak5DTkNjc0oxUmpZWEp2YmljNkoxeGNkVEF4TmpRbkxDZDBZMkZ5YjI0bk9pZGNYSFV3TVRZMUp5d25WR05sWkdsc0p6b25YRngxTURFMk1pY3NKM1JqWldScGJDYzZKMXhjZFRBeE5qTW5MQ2RVWTNrbk9pZGNYSFV3TkRJeUp5d25kR041SnpvblhGeDFNRFEwTWljc0ozUmtiM1FuT2lkY1hIVXlNRVJDSnl3bmRHVnNjbVZqSnpvblhGeDFNak14TlNjc0oxUm1jaWM2SjF4Y2RVUTRNelZjWEhWRVJERTNKeXduZEdaeUp6b25YRngxUkRnek5WeGNkVVJFTXpFbkxDZDBhR1Z5WlRRbk9pZGNYSFV5TWpNMEp5d25kR2hsY21WbWIzSmxKem9uWEZ4MU1qSXpOQ2NzSjFSb1pYSmxabTl5WlNjNkoxeGNkVEl5TXpRbkxDZFVhR1YwWVNjNkoxeGNkVEF6T1RnbkxDZDBhR1YwWVNjNkoxeGNkVEF6UWpnbkxDZDBhR1YwWVhONWJTYzZKMXhjZFRBelJERW5MQ2QwYUdWMFlYWW5PaWRjWEhVd00wUXhKeXduZEdocFkydGhjSEJ5YjNnbk9pZGNYSFV5TWpRNEp5d25kR2hwWTJ0emFXMG5PaWRjWEhVeU1qTkRKeXduVkdocFkydFRjR0ZqWlNjNkoxeGNkVEl3TlVaY1hIVXlNREJCSnl3blZHaHBibE53WVdObEp6b25YRngxTWpBd09TY3NKM1JvYVc1emNDYzZKMXhjZFRJd01Ea25MQ2QwYUd0aGNDYzZKMXhjZFRJeU5EZ25MQ2QwYUd0emFXMG5PaWRjWEhVeU1qTkRKeXduVkVoUFVrNG5PaWRjWEhoRVJTY3NKM1JvYjNKdUp6b25YRng0UmtVbkxDZDBhV3hrWlNjNkoxeGNkVEF5UkVNbkxDZFVhV3hrWlNjNkoxeGNkVEl5TTBNbkxDZFVhV3hrWlVWeGRXRnNKem9uWEZ4MU1qSTBNeWNzSjFScGJHUmxSblZzYkVWeGRXRnNKem9uWEZ4MU1qSTBOU2NzSjFScGJHUmxWR2xzWkdVbk9pZGNYSFV5TWpRNEp5d25kR2x0WlhOaVlYSW5PaWRjWEhVeVFUTXhKeXduZEdsdFpYTmlKem9uWEZ4MU1qSkJNQ2NzSjNScGJXVnpKem9uWEZ4NFJEY25MQ2QwYVcxbGMyUW5PaWRjWEhVeVFUTXdKeXduZEdsdWRDYzZKMXhjZFRJeU1rUW5MQ2QwYjJWaEp6b25YRngxTWpreU9DY3NKM1J2Y0dKdmRDYzZKMXhjZFRJek16WW5MQ2QwYjNCamFYSW5PaWRjWEhVeVFVWXhKeXduZEc5d0p6b25YRngxTWpKQk5DY3NKMVJ2Y0dZbk9pZGNYSFZFT0RNMVhGeDFSRVEwUWljc0ozUnZjR1luT2lkY1hIVkVPRE0xWEZ4MVJFUTJOU2NzSjNSdmNHWnZjbXNuT2lkY1hIVXlRVVJCSnl3bmRHOXpZU2M2SjF4Y2RUSTVNamtuTENkMGNISnBiV1VuT2lkY1hIVXlNRE0wSnl3bmRISmhaR1VuT2lkY1hIVXlNVEl5Snl3blZGSkJSRVVuT2lkY1hIVXlNVEl5Snl3bmRISnBZVzVuYkdVbk9pZGNYSFV5TlVJMUp5d25kSEpwWVc1bmJHVmtiM2R1SnpvblhGeDFNalZDUmljc0ozUnlhV0Z1WjJ4bGJHVm1kQ2M2SjF4Y2RUSTFRek1uTENkMGNtbGhibWRzWld4bFpuUmxjU2M2SjF4Y2RUSXlRalFuTENkMGNtbGhibWRzWlhFbk9pZGNYSFV5TWpWREp5d25kSEpwWVc1bmJHVnlhV2RvZENjNkoxeGNkVEkxUWprbkxDZDBjbWxoYm1kc1pYSnBaMmgwWlhFbk9pZGNYSFV5TWtJMUp5d25kSEpwWkc5MEp6b25YRngxTWpWRlF5Y3NKM1J5YVdVbk9pZGNYSFV5TWpWREp5d25kSEpwYldsdWRYTW5PaWRjWEhVeVFUTkJKeXduVkhKcGNHeGxSRzkwSnpvblhGeDFNakJFUWljc0ozUnlhWEJzZFhNbk9pZGNYSFV5UVRNNUp5d25kSEpwYzJJbk9pZGNYSFV5T1VORUp5d25kSEpwZEdsdFpTYzZKMXhjZFRKQk0wSW5MQ2QwY25CbGVtbDFiU2M2SjF4Y2RUSXpSVEluTENkVWMyTnlKem9uWEZ4MVJEZ3pOVnhjZFVSRFFVWW5MQ2QwYzJOeUp6b25YRngxUkRnek5WeGNkVVJEUXprbkxDZFVVMk41SnpvblhGeDFNRFF5Tmljc0ozUnpZM2tuT2lkY1hIVXdORFEySnl3blZGTklZM2tuT2lkY1hIVXdOREJDSnl3bmRITm9ZM2tuT2lkY1hIVXdORFZDSnl3blZITjBjbTlySnpvblhGeDFNREUyTmljc0ozUnpkSEp2YXljNkoxeGNkVEF4TmpjbkxDZDBkMmw0ZENjNkoxeGNkVEl5TmtNbkxDZDBkMjlvWldGa2JHVm1kR0Z5Y205M0p6b25YRngxTWpFNVJTY3NKM1IzYjJobFlXUnlhV2RvZEdGeWNtOTNKem9uWEZ4MU1qRkJNQ2NzSjFWaFkzVjBaU2M2SjF4Y2VFUkJKeXduZFdGamRYUmxKem9uWEZ4NFJrRW5MQ2QxWVhKeUp6b25YRngxTWpFNU1TY3NKMVZoY25Jbk9pZGNYSFV5TVRsR0p5d25kVUZ5Y2ljNkoxeGNkVEl4UkRFbkxDZFZZWEp5YjJOcGNpYzZKMXhjZFRJNU5Ea25MQ2RWWW5KamVTYzZKMXhjZFRBME1FVW5MQ2QxWW5KamVTYzZKMXhjZFRBME5VVW5MQ2RWWW5KbGRtVW5PaWRjWEhVd01UWkRKeXduZFdKeVpYWmxKem9uWEZ4MU1ERTJSQ2NzSjFWamFYSmpKem9uWEZ4NFJFSW5MQ2QxWTJseVl5YzZKMXhjZUVaQ0p5d25WV041SnpvblhGeDFNRFF5TXljc0ozVmplU2M2SjF4Y2RUQTBORE1uTENkMVpHRnljaWM2SjF4Y2RUSXhRelVuTENkVlpHSnNZV01uT2lkY1hIVXdNVGN3Snl3bmRXUmliR0ZqSnpvblhGeDFNREUzTVNjc0ozVmthR0Z5SnpvblhGeDFNamsyUlNjc0ozVm1hWE5vZENjNkoxeGNkVEk1TjBVbkxDZFZabkluT2lkY1hIVkVPRE0xWEZ4MVJFUXhPQ2NzSjNWbWNpYzZKMXhjZFVRNE16VmNYSFZFUkRNeUp5d25WV2R5WVhabEp6b25YRng0UkRrbkxDZDFaM0poZG1Vbk9pZGNYSGhHT1Njc0ozVklZWEluT2lkY1hIVXlPVFl6Snl3bmRXaGhjbXduT2lkY1hIVXlNVUpHSnl3bmRXaGhjbkluT2lkY1hIVXlNVUpGSnl3bmRXaGliR3NuT2lkY1hIVXlOVGd3Snl3bmRXeGpiM0p1SnpvblhGeDFNak14UXljc0ozVnNZMjl5Ym1WeUp6b25YRngxTWpNeFF5Y3NKM1ZzWTNKdmNDYzZKMXhjZFRJek1FWW5MQ2QxYkhSeWFTYzZKMXhjZFRJMVJqZ25MQ2RWYldGamNpYzZKMXhjZFRBeE5rRW5MQ2QxYldGamNpYzZKMXhjZFRBeE5rSW5MQ2QxYld3bk9pZGNYSGhCT0Njc0oxVnVaR1Z5UW1GeUp6b25YeWNzSjFWdVpHVnlRbkpoWTJVbk9pZGNYSFV5TTBSR0p5d25WVzVrWlhKQ2NtRmphMlYwSnpvblhGeDFNak5DTlNjc0oxVnVaR1Z5VUdGeVpXNTBhR1Z6YVhNbk9pZGNYSFV5TTBSRUp5d25WVzVwYjI0bk9pZGNYSFV5TWtNekp5d25WVzVwYjI1UWJIVnpKem9uWEZ4MU1qSTRSU2NzSjFWdloyOXVKem9uWEZ4MU1ERTNNaWNzSjNWdloyOXVKem9uWEZ4MU1ERTNNeWNzSjFWdmNHWW5PaWRjWEhWRU9ETTFYRngxUkVRMFF5Y3NKM1Z2Y0dZbk9pZGNYSFZFT0RNMVhGeDFSRVEyTmljc0oxVndRWEp5YjNkQ1lYSW5PaWRjWEhVeU9URXlKeXduZFhCaGNuSnZkeWM2SjF4Y2RUSXhPVEVuTENkVmNFRnljbTkzSnpvblhGeDFNakU1TVNjc0oxVndZWEp5YjNjbk9pZGNYSFV5TVVReEp5d25WWEJCY25KdmQwUnZkMjVCY25KdmR5YzZKMXhjZFRJeFF6VW5MQ2QxY0dSdmQyNWhjbkp2ZHljNkoxeGNkVEl4T1RVbkxDZFZjRVJ2ZDI1QmNuSnZkeWM2SjF4Y2RUSXhPVFVuTENkVmNHUnZkMjVoY25KdmR5YzZKMXhjZFRJeFJEVW5MQ2RWY0VWeGRXbHNhV0p5YVhWdEp6b25YRngxTWprMlJTY3NKM1Z3YUdGeWNHOXZibXhsWm5Rbk9pZGNYSFV5TVVKR0p5d25kWEJvWVhKd2IyOXVjbWxuYUhRbk9pZGNYSFV5TVVKRkp5d25kWEJzZFhNbk9pZGNYSFV5TWpoRkp5d25WWEJ3WlhKTVpXWjBRWEp5YjNjbk9pZGNYSFV5TVRrMkp5d25WWEJ3WlhKU2FXZG9kRUZ5Y205M0p6b25YRngxTWpFNU55Y3NKM1Z3YzJrbk9pZGNYSFV3TTBNMUp5d25WWEJ6YVNjNkoxeGNkVEF6UkRJbkxDZDFjSE5wYUNjNkoxeGNkVEF6UkRJbkxDZFZjSE5wYkc5dUp6b25YRngxTUROQk5TY3NKM1Z3YzJsc2IyNG5PaWRjWEhVd00wTTFKeXduVlhCVVpXVkJjbkp2ZHljNkoxeGNkVEl4UVRVbkxDZFZjRlJsWlNjNkoxeGNkVEl5UVRVbkxDZDFjSFZ3WVhKeWIzZHpKem9uWEZ4MU1qRkRPQ2NzSjNWeVkyOXliaWM2SjF4Y2RUSXpNVVFuTENkMWNtTnZjbTVsY2ljNkoxeGNkVEl6TVVRbkxDZDFjbU55YjNBbk9pZGNYSFV5TXpCRkp5d25WWEpwYm1jbk9pZGNYSFV3TVRaRkp5d25kWEpwYm1jbk9pZGNYSFV3TVRaR0p5d25kWEowY21rbk9pZGNYSFV5TlVZNUp5d25WWE5qY2ljNkoxeGNkVVE0TXpWY1hIVkVRMEl3Snl3bmRYTmpjaWM2SjF4Y2RVUTRNelZjWEhWRVEwTkJKeXduZFhSa2IzUW5PaWRjWEhVeU1rWXdKeXduVlhScGJHUmxKem9uWEZ4MU1ERTJPQ2NzSjNWMGFXeGtaU2M2SjF4Y2RUQXhOamtuTENkMWRISnBKem9uWEZ4MU1qVkNOU2NzSjNWMGNtbG1Kem9uWEZ4MU1qVkNOQ2NzSjNWMVlYSnlKem9uWEZ4MU1qRkRPQ2NzSjFWMWJXd25PaWRjWEhoRVF5Y3NKM1YxYld3bk9pZGNYSGhHUXljc0ozVjNZVzVuYkdVbk9pZGNYSFV5T1VFM0p5d25kbUZ1WjNKMEp6b25YRngxTWprNVF5Y3NKM1poY21Wd2MybHNiMjRuT2lkY1hIVXdNMFkxSnl3bmRtRnlhMkZ3Y0dFbk9pZGNYSFV3TTBZd0p5d25kbUZ5Ym05MGFHbHVaeWM2SjF4Y2RUSXlNRFVuTENkMllYSndhR2tuT2lkY1hIVXdNMFExSnl3bmRtRnljR2tuT2lkY1hIVXdNMFEySnl3bmRtRnljSEp2Y0hSdkp6b25YRngxTWpJeFJDY3NKM1poY25Jbk9pZGNYSFV5TVRrMUp5d25ka0Z5Y2ljNkoxeGNkVEl4UkRVbkxDZDJZWEp5YUc4bk9pZGNYSFV3TTBZeEp5d25kbUZ5YzJsbmJXRW5PaWRjWEhVd00wTXlKeXduZG1GeWMzVmljMlYwYm1WeEp6b25YRngxTWpJNFFWeGNkVVpGTURBbkxDZDJZWEp6ZFdKelpYUnVaWEZ4SnpvblhGeDFNa0ZEUWx4Y2RVWkZNREFuTENkMllYSnpkWEJ6WlhSdVpYRW5PaWRjWEhVeU1qaENYRngxUmtVd01DY3NKM1poY25OMWNITmxkRzVsY1hFbk9pZGNYSFV5UVVORFhGeDFSa1V3TUNjc0ozWmhjblJvWlhSaEp6b25YRngxTURORU1TY3NKM1poY25SeWFXRnVaMnhsYkdWbWRDYzZKMXhjZFRJeVFqSW5MQ2QyWVhKMGNtbGhibWRzWlhKcFoyaDBKem9uWEZ4MU1qSkNNeWNzSjNaQ1lYSW5PaWRjWEhVeVFVVTRKeXduVm1KaGNpYzZKMXhjZFRKQlJVSW5MQ2QyUW1GeWRpYzZKMXhjZFRKQlJUa25MQ2RXWTNrbk9pZGNYSFV3TkRFeUp5d25kbU41SnpvblhGeDFNRFF6TWljc0ozWmtZWE5vSnpvblhGeDFNakpCTWljc0ozWkVZWE5vSnpvblhGeDFNakpCT0Njc0oxWmtZWE5vSnpvblhGeDFNakpCT1Njc0oxWkVZWE5vSnpvblhGeDFNakpCUWljc0oxWmtZWE5vYkNjNkoxeGNkVEpCUlRZbkxDZDJaV1ZpWVhJbk9pZGNYSFV5TWtKQ0p5d25kbVZsSnpvblhGeDFNakl5T0Njc0oxWmxaU2M2SjF4Y2RUSXlRekVuTENkMlpXVmxjU2M2SjF4Y2RUSXlOVUVuTENkMlpXeHNhWEFuT2lkY1hIVXlNa1ZGSnl3bmRtVnlZbUZ5SnpvbmZDY3NKMVpsY21KaGNpYzZKMXhjZFRJd01UWW5MQ2QyWlhKMEp6b25mQ2NzSjFabGNuUW5PaWRjWEhVeU1ERTJKeXduVm1WeWRHbGpZV3hDWVhJbk9pZGNYSFV5TWpJekp5d25WbVZ5ZEdsallXeE1hVzVsSnpvbmZDY3NKMVpsY25ScFkyRnNVMlZ3WVhKaGRHOXlKem9uWEZ4MU1qYzFPQ2NzSjFabGNuUnBZMkZzVkdsc1pHVW5PaWRjWEhVeU1qUXdKeXduVm1WeWVWUm9hVzVUY0dGalpTYzZKMXhjZFRJd01FRW5MQ2RXWm5Jbk9pZGNYSFZFT0RNMVhGeDFSRVF4T1Njc0ozWm1jaWM2SjF4Y2RVUTRNelZjWEhWRVJETXpKeXduZG14MGNta25PaWRjWEhVeU1rSXlKeXduZG01emRXSW5PaWRjWEhVeU1qZ3lYRngxTWpCRU1pY3NKM1p1YzNWd0p6b25YRngxTWpJNE0xeGNkVEl3UkRJbkxDZFdiM0JtSnpvblhGeDFSRGd6TlZ4Y2RVUkVORVFuTENkMmIzQm1Kem9uWEZ4MVJEZ3pOVnhjZFVSRU5qY25MQ2QyY0hKdmNDYzZKMXhjZFRJeU1VUW5MQ2QyY25SeWFTYzZKMXhjZFRJeVFqTW5MQ2RXYzJOeUp6b25YRngxUkRnek5WeGNkVVJEUWpFbkxDZDJjMk55SnpvblhGeDFSRGd6TlZ4Y2RVUkRRMEluTENkMmMzVmlia1VuT2lkY1hIVXlRVU5DWEZ4MVJrVXdNQ2NzSjNaemRXSnVaU2M2SjF4Y2RUSXlPRUZjWEhWR1JUQXdKeXduZG5OMWNHNUZKem9uWEZ4MU1rRkRRMXhjZFVaRk1EQW5MQ2QyYzNWd2JtVW5PaWRjWEhVeU1qaENYRngxUmtVd01DY3NKMVoyWkdGemFDYzZKMXhjZFRJeVFVRW5MQ2QyZW1sbmVtRm5Kem9uWEZ4MU1qazVRU2NzSjFkamFYSmpKem9uWEZ4MU1ERTNOQ2NzSjNkamFYSmpKem9uWEZ4MU1ERTNOU2NzSjNkbFpHSmhjaWM2SjF4Y2RUSkJOVVluTENkM1pXUm5aU2M2SjF4Y2RUSXlNamNuTENkWFpXUm5aU2M2SjF4Y2RUSXlRekFuTENkM1pXUm5aWEVuT2lkY1hIVXlNalU1Snl3bmQyVnBaWEp3SnpvblhGeDFNakV4T0Njc0oxZG1jaWM2SjF4Y2RVUTRNelZjWEhWRVJERkJKeXduZDJaeUp6b25YRngxUkRnek5WeGNkVVJFTXpRbkxDZFhiM0JtSnpvblhGeDFSRGd6TlZ4Y2RVUkVORVVuTENkM2IzQm1Kem9uWEZ4MVJEZ3pOVnhjZFVSRU5qZ25MQ2QzY0NjNkoxeGNkVEl4TVRnbkxDZDNjaWM2SjF4Y2RUSXlOREFuTENkM2NtVmhkR2duT2lkY1hIVXlNalF3Snl3blYzTmpjaWM2SjF4Y2RVUTRNelZjWEhWRVEwSXlKeXduZDNOamNpYzZKMXhjZFVRNE16VmNYSFZFUTBOREp5d25lR05oY0NjNkoxeGNkVEl5UXpJbkxDZDRZMmx5WXljNkoxeGNkVEkxUlVZbkxDZDRZM1Z3SnpvblhGeDFNakpETXljc0ozaGtkSEpwSnpvblhGeDFNalZDUkNjc0oxaG1jaWM2SjF4Y2RVUTRNelZjWEhWRVJERkNKeXduZUdaeUp6b25YRngxUkRnek5WeGNkVVJFTXpVbkxDZDRhR0Z5Y2ljNkoxeGNkVEkzUmpjbkxDZDRhRUZ5Y2ljNkoxeGNkVEkzUmtFbkxDZFlhU2M2SjF4Y2RUQXpPVVVuTENkNGFTYzZKMXhjZFRBelFrVW5MQ2Q0YkdGeWNpYzZKMXhjZFRJM1JqVW5MQ2Q0YkVGeWNpYzZKMXhjZFRJM1JqZ25MQ2Q0YldGd0p6b25YRngxTWpkR1F5Y3NKM2h1YVhNbk9pZGNYSFV5TWtaQ0p5d25lRzlrYjNRbk9pZGNYSFV5UVRBd0p5d25XRzl3WmljNkoxeGNkVVE0TXpWY1hIVkVSRFJHSnl3bmVHOXdaaWM2SjF4Y2RVUTRNelZjWEhWRVJEWTVKeXduZUc5d2JIVnpKem9uWEZ4MU1rRXdNU2NzSjNodmRHbHRaU2M2SjF4Y2RUSkJNREluTENkNGNtRnljaWM2SjF4Y2RUSTNSalluTENkNGNrRnljaWM2SjF4Y2RUSTNSamtuTENkWWMyTnlKem9uWEZ4MVJEZ3pOVnhjZFVSRFFqTW5MQ2Q0YzJOeUp6b25YRngxUkRnek5WeGNkVVJEUTBRbkxDZDRjM0ZqZFhBbk9pZGNYSFV5UVRBMkp5d25lSFZ3YkhWekp6b25YRngxTWtFd05DY3NKM2gxZEhKcEp6b25YRngxTWpWQ015Y3NKM2gyWldVbk9pZGNYSFV5TWtNeEp5d25lSGRsWkdkbEp6b25YRngxTWpKRE1DY3NKMWxoWTNWMFpTYzZKMXhjZUVSRUp5d25lV0ZqZFhSbEp6b25YRng0UmtRbkxDZFpRV041SnpvblhGeDFNRFF5Umljc0ozbGhZM2tuT2lkY1hIVXdORFJHSnl3bldXTnBjbU1uT2lkY1hIVXdNVGMySnl3bmVXTnBjbU1uT2lkY1hIVXdNVGMzSnl3bldXTjVKem9uWEZ4MU1EUXlRaWNzSjNsamVTYzZKMXhjZFRBME5FSW5MQ2Q1Wlc0bk9pZGNYSGhCTlNjc0oxbG1jaWM2SjF4Y2RVUTRNelZjWEhWRVJERkRKeXduZVdaeUp6b25YRngxUkRnek5WeGNkVVJFTXpZbkxDZFpTV041SnpvblhGeDFNRFF3Tnljc0ozbHBZM2tuT2lkY1hIVXdORFUzSnl3bldXOXdaaWM2SjF4Y2RVUTRNelZjWEhWRVJEVXdKeXduZVc5d1ppYzZKMXhjZFVRNE16VmNYSFZFUkRaQkp5d25XWE5qY2ljNkoxeGNkVVE0TXpWY1hIVkVRMEkwSnl3bmVYTmpjaWM2SjF4Y2RVUTRNelZjWEhWRVEwTkZKeXduV1ZWamVTYzZKMXhjZFRBME1rVW5MQ2Q1ZFdONUp6b25YRngxTURRMFJTY3NKM2wxYld3bk9pZGNYSGhHUmljc0oxbDFiV3duT2lkY1hIVXdNVGM0Snl3bldtRmpkWFJsSnpvblhGeDFNREUzT1Njc0ozcGhZM1YwWlNjNkoxeGNkVEF4TjBFbkxDZGFZMkZ5YjI0bk9pZGNYSFV3TVRkRUp5d25lbU5oY205dUp6b25YRngxTURFM1JTY3NKMXBqZVNjNkoxeGNkVEEwTVRjbkxDZDZZM2tuT2lkY1hIVXdORE0zSnl3bldtUnZkQ2M2SjF4Y2RUQXhOMEluTENkNlpHOTBKem9uWEZ4MU1ERTNReWNzSjNwbFpYUnlaaWM2SjF4Y2RUSXhNamduTENkYVpYSnZWMmxrZEdoVGNHRmpaU2M2SjF4Y2RUSXdNRUluTENkYVpYUmhKem9uWEZ4MU1ETTVOaWNzSjNwbGRHRW5PaWRjWEhVd00wSTJKeXduZW1aeUp6b25YRngxUkRnek5WeGNkVVJFTXpjbkxDZGFabkluT2lkY1hIVXlNVEk0Snl3bldraGplU2M2SjF4Y2RUQTBNVFluTENkNmFHTjVKem9uWEZ4MU1EUXpOaWNzSjNwcFozSmhjbkluT2lkY1hIVXlNVVJFSnl3bmVtOXdaaWM2SjF4Y2RVUTRNelZjWEhWRVJEWkNKeXduV205d1ppYzZKMXhjZFRJeE1qUW5MQ2RhYzJOeUp6b25YRngxUkRnek5WeGNkVVJEUWpVbkxDZDZjMk55SnpvblhGeDFSRGd6TlZ4Y2RVUkRRMFluTENkNmQyb25PaWRjWEhVeU1EQkVKeXduZW5kdWFpYzZKMXhjZFRJd01FTW5mVHRjYmx4MGRtRnlJR1JsWTI5a1pVMWhjRXhsWjJGamVTQTlJSHNuUVdGamRYUmxKem9uWEZ4NFF6RW5MQ2RoWVdOMWRHVW5PaWRjWEhoRk1TY3NKMEZqYVhKakp6b25YRng0UXpJbkxDZGhZMmx5WXljNkoxeGNlRVV5Snl3bllXTjFkR1VuT2lkY1hIaENOQ2NzSjBGRmJHbG5Kem9uWEZ4NFF6WW5MQ2RoWld4cFp5YzZKMXhjZUVVMkp5d25RV2R5WVhabEp6b25YRng0UXpBbkxDZGhaM0poZG1Vbk9pZGNYSGhGTUNjc0oyRnRjQ2M2SnlZbkxDZEJUVkFuT2ljbUp5d25RWEpwYm1jbk9pZGNYSGhETlNjc0oyRnlhVzVuSnpvblhGeDRSVFVuTENkQmRHbHNaR1VuT2lkY1hIaERNeWNzSjJGMGFXeGtaU2M2SjF4Y2VFVXpKeXduUVhWdGJDYzZKMXhjZUVNMEp5d25ZWFZ0YkNjNkoxeGNlRVUwSnl3blluSjJZbUZ5SnpvblhGeDRRVFluTENkRFkyVmthV3duT2lkY1hIaEROeWNzSjJOalpXUnBiQ2M2SjF4Y2VFVTNKeXduWTJWa2FXd25PaWRjWEhoQ09DY3NKMk5sYm5Rbk9pZGNYSGhCTWljc0oyTnZjSGtuT2lkY1hIaEJPU2NzSjBOUFVGa25PaWRjWEhoQk9TY3NKMk4xY25KbGJpYzZKMXhjZUVFMEp5d25aR1ZuSnpvblhGeDRRakFuTENka2FYWnBaR1VuT2lkY1hIaEdOeWNzSjBWaFkzVjBaU2M2SjF4Y2VFTTVKeXduWldGamRYUmxKem9uWEZ4NFJUa25MQ2RGWTJseVl5YzZKMXhjZUVOQkp5d25aV05wY21Nbk9pZGNYSGhGUVNjc0owVm5jbUYyWlNjNkoxeGNlRU00Snl3blpXZHlZWFpsSnpvblhGeDRSVGduTENkRlZFZ25PaWRjWEhoRU1DY3NKMlYwYUNjNkoxeGNlRVl3Snl3blJYVnRiQ2M2SjF4Y2VFTkNKeXduWlhWdGJDYzZKMXhjZUVWQ0p5d25abkpoWXpFeUp6b25YRng0UWtRbkxDZG1jbUZqTVRRbk9pZGNYSGhDUXljc0oyWnlZV016TkNjNkoxeGNlRUpGSnl3blozUW5PaWMrSnl3blIxUW5PaWMrSnl3blNXRmpkWFJsSnpvblhGeDRRMFFuTENkcFlXTjFkR1VuT2lkY1hIaEZSQ2NzSjBsamFYSmpKem9uWEZ4NFEwVW5MQ2RwWTJseVl5YzZKMXhjZUVWRkp5d25hV1Y0WTJ3bk9pZGNYSGhCTVNjc0owbG5jbUYyWlNjNkoxeGNlRU5ESnl3bmFXZHlZWFpsSnpvblhGeDRSVU1uTENkcGNYVmxjM1FuT2lkY1hIaENSaWNzSjBsMWJXd25PaWRjWEhoRFJpY3NKMmwxYld3bk9pZGNYSGhGUmljc0oyeGhjWFZ2SnpvblhGeDRRVUluTENkc2RDYzZKenduTENkTVZDYzZKenduTENkdFlXTnlKem9uWEZ4NFFVWW5MQ2R0YVdOeWJ5YzZKMXhjZUVJMUp5d25iV2xrWkc5MEp6b25YRng0UWpjbkxDZHVZbk53SnpvblhGeDRRVEFuTENkdWIzUW5PaWRjWEhoQlF5Y3NKMDUwYVd4a1pTYzZKMXhjZUVReEp5d25iblJwYkdSbEp6b25YRng0UmpFbkxDZFBZV04xZEdVbk9pZGNYSGhFTXljc0oyOWhZM1YwWlNjNkoxeGNlRVl6Snl3blQyTnBjbU1uT2lkY1hIaEVOQ2NzSjI5amFYSmpKem9uWEZ4NFJqUW5MQ2RQWjNKaGRtVW5PaWRjWEhoRU1pY3NKMjluY21GMlpTYzZKMXhjZUVZeUp5d25iM0prWmljNkoxeGNlRUZCSnl3bmIzSmtiU2M2SjF4Y2VFSkJKeXduVDNOc1lYTm9Kem9uWEZ4NFJEZ25MQ2R2YzJ4aGMyZ25PaWRjWEhoR09DY3NKMDkwYVd4a1pTYzZKMXhjZUVRMUp5d25iM1JwYkdSbEp6b25YRng0UmpVbkxDZFBkVzFzSnpvblhGeDRSRFluTENkdmRXMXNKem9uWEZ4NFJqWW5MQ2R3WVhKaEp6b25YRng0UWpZbkxDZHdiSFZ6Ylc0bk9pZGNYSGhDTVNjc0ozQnZkVzVrSnpvblhGeDRRVE1uTENkeGRXOTBKem9uWENJbkxDZFJWVTlVSnpvblhDSW5MQ2R5WVhGMWJ5YzZKMXhjZUVKQ0p5d25jbVZuSnpvblhGeDRRVVVuTENkU1JVY25PaWRjWEhoQlJTY3NKM05sWTNRbk9pZGNYSGhCTnljc0ozTm9lU2M2SjF4Y2VFRkVKeXduYzNWd01TYzZKMXhjZUVJNUp5d25jM1Z3TWljNkoxeGNlRUl5Snl3bmMzVndNeWM2SjF4Y2VFSXpKeXduYzNwc2FXY25PaWRjWEhoRVJpY3NKMVJJVDFKT0p6b25YRng0UkVVbkxDZDBhRzl5YmljNkoxeGNlRVpGSnl3bmRHbHRaWE1uT2lkY1hIaEVOeWNzSjFWaFkzVjBaU2M2SjF4Y2VFUkJKeXduZFdGamRYUmxKem9uWEZ4NFJrRW5MQ2RWWTJseVl5YzZKMXhjZUVSQ0p5d25kV05wY21Nbk9pZGNYSGhHUWljc0oxVm5jbUYyWlNjNkoxeGNlRVE1Snl3bmRXZHlZWFpsSnpvblhGeDRSamtuTENkMWJXd25PaWRjWEhoQk9DY3NKMVYxYld3bk9pZGNYSGhFUXljc0ozVjFiV3duT2lkY1hIaEdReWNzSjFsaFkzVjBaU2M2SjF4Y2VFUkVKeXduZVdGamRYUmxKem9uWEZ4NFJrUW5MQ2Q1Wlc0bk9pZGNYSGhCTlNjc0ozbDFiV3duT2lkY1hIaEdSaWQ5TzF4dVhIUjJZWElnWkdWamIyUmxUV0Z3VG5WdFpYSnBZeUE5SUhzbk1DYzZKMXhjZFVaR1JrUW5MQ2N4TWpnbk9pZGNYSFV5TUVGREp5d25NVE13SnpvblhGeDFNakF4UVNjc0p6RXpNU2M2SjF4Y2RUQXhPVEluTENjeE16SW5PaWRjWEhVeU1ERkZKeXduTVRNekp6b25YRngxTWpBeU5pY3NKekV6TkNjNkoxeGNkVEl3TWpBbkxDY3hNelVuT2lkY1hIVXlNREl4Snl3bk1UTTJKem9uWEZ4MU1ESkROaWNzSnpFek55YzZKMXhjZFRJd016QW5MQ2N4TXpnbk9pZGNYSFV3TVRZd0p5d25NVE01SnpvblhGeDFNakF6T1Njc0p6RTBNQ2M2SjF4Y2RUQXhOVEluTENjeE5ESW5PaWRjWEhVd01UZEVKeXduTVRRMUp6b25YRngxTWpBeE9DY3NKekUwTmljNkoxeGNkVEl3TVRrbkxDY3hORGNuT2lkY1hIVXlNREZESnl3bk1UUTRKem9uWEZ4MU1qQXhSQ2NzSnpFME9TYzZKMXhjZFRJd01qSW5MQ2N4TlRBbk9pZGNYSFV5TURFekp5d25NVFV4SnpvblhGeDFNakF4TkNjc0p6RTFNaWM2SjF4Y2RUQXlSRU1uTENjeE5UTW5PaWRjWEhVeU1USXlKeXduTVRVMEp6b25YRngxTURFMk1TY3NKekUxTlNjNkoxeGNkVEl3TTBFbkxDY3hOVFluT2lkY1hIVXdNVFV6Snl3bk1UVTRKem9uWEZ4MU1ERTNSU2NzSnpFMU9TYzZKMXhjZFRBeE56Z25mVHRjYmx4MGRtRnlJR2x1ZG1Gc2FXUlNaV1psY21WdVkyVkRiMlJsVUc5cGJuUnpJRDBnV3pFc01pd3pMRFFzTlN3MkxEY3NPQ3d4TVN3eE15d3hOQ3d4TlN3eE5pd3hOeXd4T0N3eE9Td3lNQ3d5TVN3eU1pd3lNeXd5TkN3eU5Td3lOaXd5Tnl3eU9Dd3lPU3d6TUN3ek1Td3hNamNzTVRJNExERXlPU3d4TXpBc01UTXhMREV6TWl3eE16TXNNVE0wTERFek5Td3hNellzTVRNM0xERXpPQ3d4TXprc01UUXdMREUwTVN3eE5ESXNNVFF6TERFME5Dd3hORFVzTVRRMkxERTBOeXd4TkRnc01UUTVMREUxTUN3eE5URXNNVFV5TERFMU15d3hOVFFzTVRVMUxERTFOaXd4TlRjc01UVTRMREUxT1N3Mk5EazNOaXcyTkRrM055dzJORGszT0N3Mk5EazNPU3cyTkRrNE1DdzJORGs0TVN3Mk5EazRNaXcyTkRrNE15dzJORGs0TkN3Mk5EazROU3cyTkRrNE5pdzJORGs0Tnl3Mk5EazRPQ3cyTkRrNE9TdzJORGs1TUN3Mk5EazVNU3cyTkRrNU1pdzJORGs1TXl3Mk5EazVOQ3cyTkRrNU5TdzJORGs1Tml3Mk5EazVOeXcyTkRrNU9DdzJORGs1T1N3Mk5UQXdNQ3cyTlRBd01TdzJOVEF3TWl3Mk5UQXdNeXcyTlRBd05DdzJOVEF3TlN3Mk5UQXdOaXcyTlRBd055dzJOVFV6TkN3Mk5UVXpOU3d4TXpFd056QXNNVE14TURjeExERTVOall3Tml3eE9UWTJNRGNzTWpZeU1UUXlMREkyTWpFME15d3pNamMyTnpnc016STNOamM1TERNNU16SXhOQ3d6T1RNeU1UVXNORFU0TnpVd0xEUTFPRGMxTVN3MU1qUXlPRFlzTlRJME1qZzNMRFU0T1RneU1pdzFPRGs0TWpNc05qVTFNelU0TERZMU5UTTFPU3czTWpBNE9UUXNOekl3T0RrMUxEYzROalF6TUN3M09EWTBNekVzT0RVeE9UWTJMRGcxTVRrMk55dzVNVGMxTURJc09URTNOVEF6TERrNE16QXpPQ3c1T0RNd016a3NNVEEwT0RVM05Dd3hNRFE0TlRjMUxERXhNVFF4TVRBc01URXhOREV4TVYwN1hHNWNibHgwTHlvdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTb3ZYRzVjYmx4MGRtRnlJSE4wY21sdVowWnliMjFEYUdGeVEyOWtaU0E5SUZOMGNtbHVaeTVtY205dFEyaGhja052WkdVN1hHNWNibHgwZG1GeUlHOWlhbVZqZENBOUlIdDlPMXh1WEhSMllYSWdhR0Z6VDNkdVVISnZjR1Z5ZEhrZ1BTQnZZbXBsWTNRdWFHRnpUM2R1VUhKdmNHVnlkSGs3WEc1Y2RIWmhjaUJvWVhNZ1BTQm1kVzVqZEdsdmJpaHZZbXBsWTNRc0lIQnliM0JsY25SNVRtRnRaU2tnZTF4dVhIUmNkSEpsZEhWeWJpQm9ZWE5QZDI1UWNtOXdaWEowZVM1allXeHNLRzlpYW1WamRDd2djSEp2Y0dWeWRIbE9ZVzFsS1R0Y2JseDBmVHRjYmx4dVhIUjJZWElnWTI5dWRHRnBibk1nUFNCbWRXNWpkR2x2YmloaGNuSmhlU3dnZG1Gc2RXVXBJSHRjYmx4MFhIUjJZWElnYVc1a1pYZ2dQU0F0TVR0Y2JseDBYSFIyWVhJZ2JHVnVaM1JvSUQwZ1lYSnlZWGt1YkdWdVozUm9PMXh1WEhSY2RIZG9hV3hsSUNncksybHVaR1Y0SUR3Z2JHVnVaM1JvS1NCN1hHNWNkRngwWEhScFppQW9ZWEp5WVhsYmFXNWtaWGhkSUQwOUlIWmhiSFZsS1NCN1hHNWNkRngwWEhSY2RISmxkSFZ5YmlCMGNuVmxPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMWNibHgwWEhSeVpYUjFjbTRnWm1Gc2MyVTdYRzVjZEgwN1hHNWNibHgwZG1GeUlHMWxjbWRsSUQwZ1puVnVZM1JwYjI0b2IzQjBhVzl1Y3l3Z1pHVm1ZWFZzZEhNcElIdGNibHgwWEhScFppQW9JVzl3ZEdsdmJuTXBJSHRjYmx4MFhIUmNkSEpsZEhWeWJpQmtaV1poZFd4MGN6dGNibHgwWEhSOVhHNWNkRngwZG1GeUlISmxjM1ZzZENBOUlIdDlPMXh1WEhSY2RIWmhjaUJyWlhrN1hHNWNkRngwWm05eUlDaHJaWGtnYVc0Z1pHVm1ZWFZzZEhNcElIdGNibHgwWEhSY2RDOHZJRUVnWUdoaGMwOTNibEJ5YjNCbGNuUjVZQ0JqYUdWamF5QnBjeUJ1YjNRZ2JtVmxaR1ZrSUdobGNtVXNJSE5wYm1ObElHOXViSGtnY21WamIyZHVhWHBsWkZ4dVhIUmNkRngwTHk4Z2IzQjBhVzl1SUc1aGJXVnpJR0Z5WlNCMWMyVmtJR0Z1ZVhkaGVTNGdRVzU1SUc5MGFHVnljeUJoY21VZ2FXZHViM0psWkM1Y2JseDBYSFJjZEhKbGMzVnNkRnRyWlhsZElEMGdhR0Z6S0c5d2RHbHZibk1zSUd0bGVTa2dQeUJ2Y0hScGIyNXpXMnRsZVYwZ09pQmtaV1poZFd4MGMxdHJaWGxkTzF4dVhIUmNkSDFjYmx4MFhIUnlaWFIxY200Z2NtVnpkV3gwTzF4dVhIUjlPMXh1WEc1Y2RDOHZJRTF2WkdsbWFXVmtJSFpsY25OcGIyNGdiMllnWUhWamN6SmxibU52WkdWZ095QnpaV1VnYUhSMGNEb3ZMMjEwYUhNdVltVXZjSFZ1ZVdOdlpHVXVYRzVjZEhaaGNpQmpiMlJsVUc5cGJuUlViMU41YldKdmJDQTlJR1oxYm1OMGFXOXVLR052WkdWUWIybHVkQ3dnYzNSeWFXTjBLU0I3WEc1Y2RGeDBkbUZ5SUc5MWRIQjFkQ0E5SUNjbk8xeHVYSFJjZEdsbUlDZ29ZMjlrWlZCdmFXNTBJRDQ5SURCNFJEZ3dNQ0FtSmlCamIyUmxVRzlwYm5RZ1BEMGdNSGhFUmtaR0tTQjhmQ0JqYjJSbFVHOXBiblFnUGlBd2VERXdSa1pHUmlrZ2UxeHVYSFJjZEZ4MEx5OGdVMlZsSUdsemMzVmxJQ00wT2x4dVhIUmNkRngwTHk4ZzRvQ2NUM1JvWlhKM2FYTmxMQ0JwWmlCMGFHVWdiblZ0WW1WeUlHbHpJR2x1SUhSb1pTQnlZVzVuWlNBd2VFUTRNREFnZEc4Z01IaEVSa1pHSUc5eUlHbHpYRzVjZEZ4MFhIUXZMeUJuY21WaGRHVnlJSFJvWVc0Z01IZ3hNRVpHUmtZc0lIUm9aVzRnZEdocGN5QnBjeUJoSUhCaGNuTmxJR1Z5Y205eUxpQlNaWFIxY200Z1lTQlZLMFpHUmtSY2JseDBYSFJjZEM4dklGSkZVRXhCUTBWTlJVNVVJRU5JUVZKQlExUkZVaTdpZ0oxY2JseDBYSFJjZEdsbUlDaHpkSEpwWTNRcElIdGNibHgwWEhSY2RGeDBjR0Z5YzJWRmNuSnZjaWduWTJoaGNtRmpkR1Z5SUhKbFptVnlaVzVqWlNCdmRYUnphV1JsSUhSb1pTQndaWEp0YVhOemFXSnNaU0JWYm1samIyUmxJSEpoYm1kbEp5azdYRzVjZEZ4MFhIUjlYRzVjZEZ4MFhIUnlaWFIxY200Z0oxeGNkVVpHUmtRbk8xeHVYSFJjZEgxY2JseDBYSFJwWmlBb2FHRnpLR1JsWTI5a1pVMWhjRTUxYldWeWFXTXNJR052WkdWUWIybHVkQ2twSUh0Y2JseDBYSFJjZEdsbUlDaHpkSEpwWTNRcElIdGNibHgwWEhSY2RGeDBjR0Z5YzJWRmNuSnZjaWduWkdsellXeHNiM2RsWkNCamFHRnlZV04wWlhJZ2NtVm1aWEpsYm1ObEp5azdYRzVjZEZ4MFhIUjlYRzVjZEZ4MFhIUnlaWFIxY200Z1pHVmpiMlJsVFdGd1RuVnRaWEpwWTF0amIyUmxVRzlwYm5SZE8xeHVYSFJjZEgxY2JseDBYSFJwWmlBb2MzUnlhV04wSUNZbUlHTnZiblJoYVc1ektHbHVkbUZzYVdSU1pXWmxjbVZ1WTJWRGIyUmxVRzlwYm5SekxDQmpiMlJsVUc5cGJuUXBLU0I3WEc1Y2RGeDBYSFJ3WVhKelpVVnljbTl5S0Nka2FYTmhiR3h2ZDJWa0lHTm9ZWEpoWTNSbGNpQnlaV1psY21WdVkyVW5LVHRjYmx4MFhIUjlYRzVjZEZ4MGFXWWdLR052WkdWUWIybHVkQ0ErSURCNFJrWkdSaWtnZTF4dVhIUmNkRngwWTI5a1pWQnZhVzUwSUMwOUlEQjRNVEF3TURBN1hHNWNkRngwWEhSdmRYUndkWFFnS3owZ2MzUnlhVzVuUm5KdmJVTm9ZWEpEYjJSbEtHTnZaR1ZRYjJsdWRDQStQajRnTVRBZ0ppQXdlRE5HUmlCOElEQjRSRGd3TUNrN1hHNWNkRngwWEhSamIyUmxVRzlwYm5RZ1BTQXdlRVJETURBZ2ZDQmpiMlJsVUc5cGJuUWdKaUF3ZUROR1JqdGNibHgwWEhSOVhHNWNkRngwYjNWMGNIVjBJQ3M5SUhOMGNtbHVaMFp5YjIxRGFHRnlRMjlrWlNoamIyUmxVRzlwYm5RcE8xeHVYSFJjZEhKbGRIVnliaUJ2ZFhSd2RYUTdYRzVjZEgwN1hHNWNibHgwZG1GeUlHaGxlRVZ6WTJGd1pTQTlJR1oxYm1OMGFXOXVLSE41YldKdmJDa2dlMXh1WEhSY2RISmxkSFZ5YmlBbkppTjRKeUFySUhONWJXSnZiQzVqYUdGeVEyOWtaVUYwS0RBcExuUnZVM1J5YVc1bktERTJLUzUwYjFWd2NHVnlRMkZ6WlNncElDc2dKenNuTzF4dVhIUjlPMXh1WEc1Y2RIWmhjaUJ3WVhKelpVVnljbTl5SUQwZ1puVnVZM1JwYjI0b2JXVnpjMkZuWlNrZ2UxeHVYSFJjZEhSb2NtOTNJRVZ5Y205eUtDZFFZWEp6WlNCbGNuSnZjam9nSnlBcklHMWxjM05oWjJVcE8xeHVYSFI5TzF4dVhHNWNkQzhxTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwcUwxeHVYRzVjZEhaaGNpQmxibU52WkdVZ1BTQm1kVzVqZEdsdmJpaHpkSEpwYm1jc0lHOXdkR2x2Ym5NcElIdGNibHgwWEhSdmNIUnBiMjV6SUQwZ2JXVnlaMlVvYjNCMGFXOXVjeXdnWlc1amIyUmxMbTl3ZEdsdmJuTXBPMXh1WEhSY2RIWmhjaUJ6ZEhKcFkzUWdQU0J2Y0hScGIyNXpMbk4wY21samREdGNibHgwWEhScFppQW9jM1J5YVdOMElDWW1JSEpsWjJWNFNXNTJZV3hwWkZKaGQwTnZaR1ZRYjJsdWRDNTBaWE4wS0hOMGNtbHVaeWtwSUh0Y2JseDBYSFJjZEhCaGNuTmxSWEp5YjNJb0oyWnZjbUpwWkdSbGJpQmpiMlJsSUhCdmFXNTBKeWs3WEc1Y2RGeDBmVnh1WEhSY2RIWmhjaUJsYm1OdlpHVkZkbVZ5ZVhSb2FXNW5JRDBnYjNCMGFXOXVjeTVsYm1OdlpHVkZkbVZ5ZVhSb2FXNW5PMXh1WEhSY2RIWmhjaUIxYzJWT1lXMWxaRkpsWm1WeVpXNWpaWE1nUFNCdmNIUnBiMjV6TG5WelpVNWhiV1ZrVW1WbVpYSmxibU5sY3p0Y2JseDBYSFIyWVhJZ1lXeHNiM2RWYm5OaFptVlRlVzFpYjJ4eklEMGdiM0IwYVc5dWN5NWhiR3h2ZDFWdWMyRm1aVk41YldKdmJITTdYRzVjZEZ4MGFXWWdLR1Z1WTI5a1pVVjJaWEo1ZEdocGJtY3BJSHRjYmx4MFhIUmNkQzh2SUVWdVkyOWtaU0JCVTBOSlNTQnplVzFpYjJ4ekxseHVYSFJjZEZ4MGMzUnlhVzVuSUQwZ2MzUnlhVzVuTG5KbGNHeGhZMlVvY21WblpYaEJjMk5wYVZkb2FYUmxiR2x6ZEN3Z1puVnVZM1JwYjI0b2MzbHRZbTlzS1NCN1hHNWNkRngwWEhSY2RDOHZJRlZ6WlNCdVlXMWxaQ0J5WldabGNtVnVZMlZ6SUdsbUlISmxjWFZsYzNSbFpDQW1JSEJ2YzNOcFlteGxMbHh1WEhSY2RGeDBYSFJwWmlBb2RYTmxUbUZ0WldSU1pXWmxjbVZ1WTJWeklDWW1JR2hoY3lobGJtTnZaR1ZOWVhBc0lITjViV0p2YkNrcElIdGNibHgwWEhSY2RGeDBYSFJ5WlhSMWNtNGdKeVluSUNzZ1pXNWpiMlJsVFdGd1czTjViV0p2YkYwZ0t5QW5PeWM3WEc1Y2RGeDBYSFJjZEgxY2JseDBYSFJjZEZ4MGNtVjBkWEp1SUdobGVFVnpZMkZ3WlNoemVXMWliMndwTzF4dVhIUmNkRngwZlNrN1hHNWNkRngwWEhRdkx5QlRhRzl5ZEdWdUlHRWdabVYzSUdWelkyRndaWE1nZEdoaGRDQnlaWEJ5WlhObGJuUWdkSGR2SUhONWJXSnZiSE1zSUc5bUlIZG9hV05vSUdGMElHeGxZWE4wSUc5dVpWeHVYSFJjZEZ4MEx5OGdhWE1nZDJsMGFHbHVJSFJvWlNCQlUwTkpTU0J5WVc1blpTNWNibHgwWEhSY2RHbG1JQ2gxYzJWT1lXMWxaRkpsWm1WeVpXNWpaWE1wSUh0Y2JseDBYSFJjZEZ4MGMzUnlhVzVuSUQwZ2MzUnlhVzVuWEc1Y2RGeDBYSFJjZEZ4MExuSmxjR3hoWTJVb0x5Wm5kRHRjWEhVeU1FUXlMMmNzSUNjbWJuWm5kRHNuS1Z4dVhIUmNkRngwWEhSY2RDNXlaWEJzWVdObEtDOG1iSFE3WEZ4MU1qQkVNaTluTENBbkptNTJiSFE3SnlsY2JseDBYSFJjZEZ4MFhIUXVjbVZ3YkdGalpTZ3ZKaU40TmpZN0ppTjROa0U3TDJjc0lDY21abXBzYVdjN0p5azdYRzVjZEZ4MFhIUjlYRzVjZEZ4MFhIUXZMeUJGYm1OdlpHVWdibTl1TFVGVFEwbEpJSE41YldKdmJITXVYRzVjZEZ4MFhIUnBaaUFvZFhObFRtRnRaV1JTWldabGNtVnVZMlZ6S1NCN1hHNWNkRngwWEhSY2RDOHZJRVZ1WTI5a1pTQnViMjR0UVZORFNVa2djM2x0WW05c2N5QjBhR0YwSUdOaGJpQmlaU0J5WlhCc1lXTmxaQ0IzYVhSb0lHRWdibUZ0WldRZ2NtVm1aWEpsYm1ObExseHVYSFJjZEZ4MFhIUnpkSEpwYm1jZ1BTQnpkSEpwYm1jdWNtVndiR0ZqWlNoeVpXZGxlRVZ1WTI5a1pVNXZia0Z6WTJscExDQm1kVzVqZEdsdmJpaHpkSEpwYm1jcElIdGNibHgwWEhSY2RGeDBYSFF2THlCT2IzUmxPaUIwYUdWeVpTQnBjeUJ1YnlCdVpXVmtJSFJ2SUdOb1pXTnJJR0JvWVhNb1pXNWpiMlJsVFdGd0xDQnpkSEpwYm1jcFlDQm9aWEpsTGx4dVhIUmNkRngwWEhSY2RISmxkSFZ5YmlBbkppY2dLeUJsYm1OdlpHVk5ZWEJiYzNSeWFXNW5YU0FySUNjN0p6dGNibHgwWEhSY2RGeDBmU2s3WEc1Y2RGeDBYSFI5WEc1Y2RGeDBYSFF2THlCT2IzUmxPaUJoYm5rZ2NtVnRZV2x1YVc1bklHNXZiaTFCVTBOSlNTQnplVzFpYjJ4eklHRnlaU0JvWVc1a2JHVmtJRzkxZEhOcFpHVWdiMllnZEdobElHQnBabUF1WEc1Y2RGeDBmU0JsYkhObElHbG1JQ2gxYzJWT1lXMWxaRkpsWm1WeVpXNWpaWE1wSUh0Y2JseDBYSFJjZEM4dklFRndjR3g1SUc1aGJXVmtJR05vWVhKaFkzUmxjaUJ5WldabGNtVnVZMlZ6TGx4dVhIUmNkRngwTHk4Z1JXNWpiMlJsSUdBOFBsd2lKeVpnSUhWemFXNW5JRzVoYldWa0lHTm9ZWEpoWTNSbGNpQnlaV1psY21WdVkyVnpMbHh1WEhSY2RGeDBhV1lnS0NGaGJHeHZkMVZ1YzJGbVpWTjViV0p2YkhNcElIdGNibHgwWEhSY2RGeDBjM1J5YVc1bklEMGdjM1J5YVc1bkxuSmxjR3hoWTJVb2NtVm5aWGhGYzJOaGNHVXNJR1oxYm1OMGFXOXVLSE4wY21sdVp5a2dlMXh1WEhSY2RGeDBYSFJjZEhKbGRIVnliaUFuSmljZ0t5QmxibU52WkdWTllYQmJjM1J5YVc1blhTQXJJQ2M3SnpzZ0x5OGdibThnYm1WbFpDQjBieUJqYUdWamF5QmdhR0Z6S0NsZ0lHaGxjbVZjYmx4MFhIUmNkRngwZlNrN1hHNWNkRngwWEhSOVhHNWNkRngwWEhRdkx5QlRhRzl5ZEdWdUlHVnpZMkZ3WlhNZ2RHaGhkQ0J5WlhCeVpYTmxiblFnZEhkdklITjViV0p2YkhNc0lHOW1JSGRvYVdOb0lHRjBJR3hsWVhOMElHOXVaU0JwYzF4dVhIUmNkRngwTHk4Z1lEdytYQ0luSm1BdVhHNWNkRngwWEhSemRISnBibWNnUFNCemRISnBibWRjYmx4MFhIUmNkRngwTG5KbGNHeGhZMlVvTHlabmREdGNYSFV5TUVReUwyY3NJQ2NtYm5abmREc25LVnh1WEhSY2RGeDBYSFF1Y21Wd2JHRmpaU2d2Sm14ME8xeGNkVEl3UkRJdlp5d2dKeVp1ZG14ME95Y3BPMXh1WEhSY2RGeDBMeThnUlc1amIyUmxJRzV2YmkxQlUwTkpTU0J6ZVcxaWIyeHpJSFJvWVhRZ1kyRnVJR0psSUhKbGNHeGhZMlZrSUhkcGRHZ2dZU0J1WVcxbFpDQnlaV1psY21WdVkyVXVYRzVjZEZ4MFhIUnpkSEpwYm1jZ1BTQnpkSEpwYm1jdWNtVndiR0ZqWlNoeVpXZGxlRVZ1WTI5a1pVNXZia0Z6WTJscExDQm1kVzVqZEdsdmJpaHpkSEpwYm1jcElIdGNibHgwWEhSY2RGeDBMeThnVG05MFpUb2dkR2hsY21VZ2FYTWdibThnYm1WbFpDQjBieUJqYUdWamF5QmdhR0Z6S0dWdVkyOWtaVTFoY0N3Z2MzUnlhVzVuS1dBZ2FHVnlaUzVjYmx4MFhIUmNkRngwY21WMGRYSnVJQ2NtSnlBcklHVnVZMjlrWlUxaGNGdHpkSEpwYm1kZElDc2dKenNuTzF4dVhIUmNkRngwZlNrN1hHNWNkRngwZlNCbGJITmxJR2xtSUNnaFlXeHNiM2RWYm5OaFptVlRlVzFpYjJ4ektTQjdYRzVjZEZ4MFhIUXZMeUJGYm1OdlpHVWdZRHcrWENJbkptQWdkWE5wYm1jZ2FHVjRZV1JsWTJsdFlXd2daWE5qWVhCbGN5d2dibTkzSUhSb1lYUWdkR2hsZWVLQW1YSmxJRzV2ZENCb1lXNWtiR1ZrWEc1Y2RGeDBYSFF2THlCMWMybHVaeUJ1WVcxbFpDQmphR0Z5WVdOMFpYSWdjbVZtWlhKbGJtTmxjeTVjYmx4MFhIUmNkSE4wY21sdVp5QTlJSE4wY21sdVp5NXlaWEJzWVdObEtISmxaMlY0UlhOallYQmxMQ0JvWlhoRmMyTmhjR1VwTzF4dVhIUmNkSDFjYmx4MFhIUnlaWFIxY200Z2MzUnlhVzVuWEc1Y2RGeDBYSFF2THlCRmJtTnZaR1VnWVhOMGNtRnNJSE41YldKdmJITXVYRzVjZEZ4MFhIUXVjbVZ3YkdGalpTaHlaV2RsZUVGemRISmhiRk41YldKdmJITXNJR1oxYm1OMGFXOXVLQ1F3S1NCN1hHNWNkRngwWEhSY2RDOHZJR2gwZEhCek9pOHZiV0YwYUdsaGMySjVibVZ1Y3k1aVpTOXViM1JsY3k5cVlYWmhjMk55YVhCMExXVnVZMjlrYVc1bkkzTjFjbkp2WjJGMFpTMW1iM0p0ZFd4aFpWeHVYSFJjZEZ4MFhIUjJZWElnYUdsbmFDQTlJQ1F3TG1Ob1lYSkRiMlJsUVhRb01DazdYRzVjZEZ4MFhIUmNkSFpoY2lCc2IzY2dQU0FrTUM1amFHRnlRMjlrWlVGMEtERXBPMXh1WEhSY2RGeDBYSFIyWVhJZ1kyOWtaVkJ2YVc1MElEMGdLR2hwWjJnZ0xTQXdlRVE0TURBcElDb2dNSGcwTURBZ0t5QnNiM2NnTFNBd2VFUkRNREFnS3lBd2VERXdNREF3TzF4dVhIUmNkRngwWEhSeVpYUjFjbTRnSnlZamVDY2dLeUJqYjJSbFVHOXBiblF1ZEc5VGRISnBibWNvTVRZcExuUnZWWEJ3WlhKRFlYTmxLQ2tnS3lBbk95YzdYRzVjZEZ4MFhIUjlLVnh1WEhSY2RGeDBMeThnUlc1amIyUmxJR0Z1ZVNCeVpXMWhhVzVwYm1jZ1FrMVFJSE41YldKdmJITWdkR2hoZENCaGNtVWdibTkwSUhCeWFXNTBZV0pzWlNCQlUwTkpTU0J6ZVcxaWIyeHpYRzVjZEZ4MFhIUXZMeUIxYzJsdVp5QmhJR2hsZUdGa1pXTnBiV0ZzSUdWelkyRndaUzVjYmx4MFhIUmNkQzV5WlhCc1lXTmxLSEpsWjJWNFFtMXdWMmhwZEdWc2FYTjBMQ0JvWlhoRmMyTmhjR1VwTzF4dVhIUjlPMXh1WEhRdkx5QkZlSEJ2YzJVZ1pHVm1ZWFZzZENCdmNIUnBiMjV6SUNoemJ5QjBhR1Y1SUdOaGJpQmlaU0J2ZG1WeWNtbGtaR1Z1SUdkc2IySmhiR3g1S1M1Y2JseDBaVzVqYjJSbExtOXdkR2x2Ym5NZ1BTQjdYRzVjZEZ4MEoyRnNiRzkzVlc1ellXWmxVM2x0WW05c2N5YzZJR1poYkhObExGeHVYSFJjZENkbGJtTnZaR1ZGZG1WeWVYUm9hVzVuSnpvZ1ptRnNjMlVzWEc1Y2RGeDBKM04wY21samRDYzZJR1poYkhObExGeHVYSFJjZENkMWMyVk9ZVzFsWkZKbFptVnlaVzVqWlhNbk9pQm1ZV3h6WlZ4dVhIUjlPMXh1WEc1Y2RIWmhjaUJrWldOdlpHVWdQU0JtZFc1amRHbHZiaWhvZEcxc0xDQnZjSFJwYjI1ektTQjdYRzVjZEZ4MGIzQjBhVzl1Y3lBOUlHMWxjbWRsS0c5d2RHbHZibk1zSUdSbFkyOWtaUzV2Y0hScGIyNXpLVHRjYmx4MFhIUjJZWElnYzNSeWFXTjBJRDBnYjNCMGFXOXVjeTV6ZEhKcFkzUTdYRzVjZEZ4MGFXWWdLSE4wY21samRDQW1KaUJ5WldkbGVFbHVkbUZzYVdSRmJuUnBkSGt1ZEdWemRDaG9kRzFzS1NrZ2UxeHVYSFJjZEZ4MGNHRnljMlZGY25KdmNpZ25iV0ZzWm05eWJXVmtJR05vWVhKaFkzUmxjaUJ5WldabGNtVnVZMlVuS1R0Y2JseDBYSFI5WEc1Y2RGeDBjbVYwZFhKdUlHaDBiV3d1Y21Wd2JHRmpaU2h5WldkbGVFUmxZMjlrWlN3Z1puVnVZM1JwYjI0b0pEQXNJQ1F4TENBa01pd2dKRE1zSUNRMExDQWtOU3dnSkRZc0lDUTNLU0I3WEc1Y2RGeDBYSFIyWVhJZ1kyOWtaVkJ2YVc1ME8xeHVYSFJjZEZ4MGRtRnlJSE5sYldsamIyeHZianRjYmx4MFhIUmNkSFpoY2lCb1pYaEVhV2RwZEhNN1hHNWNkRngwWEhSMllYSWdjbVZtWlhKbGJtTmxPMXh1WEhSY2RGeDBkbUZ5SUc1bGVIUTdYRzVjZEZ4MFhIUnBaaUFvSkRFcElIdGNibHgwWEhSY2RGeDBMeThnUkdWamIyUmxJR1JsWTJsdFlXd2daWE5qWVhCbGN5d2daUzVuTGlCZ0ppTXhNVGsxTlRnN1lDNWNibHgwWEhSY2RGeDBZMjlrWlZCdmFXNTBJRDBnSkRFN1hHNWNkRngwWEhSY2RITmxiV2xqYjJ4dmJpQTlJQ1F5TzF4dVhIUmNkRngwWEhScFppQW9jM1J5YVdOMElDWW1JQ0Z6WlcxcFkyOXNiMjRwSUh0Y2JseDBYSFJjZEZ4MFhIUndZWEp6WlVWeWNtOXlLQ2RqYUdGeVlXTjBaWElnY21WbVpYSmxibU5sSUhkaGN5QnViM1FnZEdWeWJXbHVZWFJsWkNCaWVTQmhJSE5sYldsamIyeHZiaWNwTzF4dVhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RISmxkSFZ5YmlCamIyUmxVRzlwYm5SVWIxTjViV0p2YkNoamIyUmxVRzlwYm5Rc0lITjBjbWxqZENrN1hHNWNkRngwWEhSOVhHNWNkRngwWEhScFppQW9KRE1wSUh0Y2JseDBYSFJjZEZ4MEx5OGdSR1ZqYjJSbElHaGxlR0ZrWldOcGJXRnNJR1Z6WTJGd1pYTXNJR1V1Wnk0Z1lDWWplREZFTXpBMk8yQXVYRzVjZEZ4MFhIUmNkR2hsZUVScFoybDBjeUE5SUNRek8xeHVYSFJjZEZ4MFhIUnpaVzFwWTI5c2IyNGdQU0FrTkR0Y2JseDBYSFJjZEZ4MGFXWWdLSE4wY21samRDQW1KaUFoYzJWdGFXTnZiRzl1S1NCN1hHNWNkRngwWEhSY2RGeDBjR0Z5YzJWRmNuSnZjaWduWTJoaGNtRmpkR1Z5SUhKbFptVnlaVzVqWlNCM1lYTWdibTkwSUhSbGNtMXBibUYwWldRZ1lua2dZU0J6WlcxcFkyOXNiMjRuS1R0Y2JseDBYSFJjZEZ4MGZWeHVYSFJjZEZ4MFhIUmpiMlJsVUc5cGJuUWdQU0J3WVhKelpVbHVkQ2hvWlhoRWFXZHBkSE1zSURFMktUdGNibHgwWEhSY2RGeDBjbVYwZFhKdUlHTnZaR1ZRYjJsdWRGUnZVM2x0WW05c0tHTnZaR1ZRYjJsdWRDd2djM1J5YVdOMEtUdGNibHgwWEhSY2RIMWNibHgwWEhSY2RHbG1JQ2drTlNrZ2UxeHVYSFJjZEZ4MFhIUXZMeUJFWldOdlpHVWdibUZ0WldRZ1kyaGhjbUZqZEdWeUlISmxabVZ5Wlc1alpYTWdkMmwwYUNCMGNtRnBiR2x1WnlCZ08yQXNJR1V1Wnk0Z1lDWmpiM0I1TzJBdVhHNWNkRngwWEhSY2RISmxabVZ5Wlc1alpTQTlJQ1ExTzF4dVhIUmNkRngwWEhScFppQW9hR0Z6S0dSbFkyOWtaVTFoY0N3Z2NtVm1aWEpsYm1ObEtTa2dlMXh1WEhSY2RGeDBYSFJjZEhKbGRIVnliaUJrWldOdlpHVk5ZWEJiY21WbVpYSmxibU5sWFR0Y2JseDBYSFJjZEZ4MGZTQmxiSE5sSUh0Y2JseDBYSFJjZEZ4MFhIUXZMeUJCYldKcFozVnZkWE1nWVcxd1pYSnpZVzVrT3lCelpXVWdhSFIwY0RvdkwyMTBhSE11WW1VdmJtOTBaWE12WVcxaWFXZDFiM1Z6TFdGdGNHVnljMkZ1WkhNdVhHNWNkRngwWEhSY2RGeDBhV1lnS0hOMGNtbGpkQ2tnZTF4dVhIUmNkRngwWEhSY2RGeDBjR0Z5YzJWRmNuSnZjaWhjYmx4MFhIUmNkRngwWEhSY2RGeDBKMjVoYldWa0lHTm9ZWEpoWTNSbGNpQnlaV1psY21WdVkyVWdkMkZ6SUc1dmRDQjBaWEp0YVc1aGRHVmtJR0o1SUdFZ2MyVnRhV052Ykc5dUoxeHVYSFJjZEZ4MFhIUmNkRngwS1R0Y2JseDBYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUmNkRngwY21WMGRYSnVJQ1F3TzF4dVhIUmNkRngwWEhSOVhHNWNkRngwWEhSOVhHNWNkRngwWEhRdkx5QkpaaUIzWmVLQW1YSmxJSE4wYVd4c0lHaGxjbVVzSUdsMDRvQ1pjeUJoSUd4bFoyRmplU0J5WldabGNtVnVZMlVnWm05eUlITjFjbVV1SUU1dklHNWxaV1FnWm05eUlHRnVYRzVjZEZ4MFhIUXZMeUJsZUhSeVlTQmdhV1pnSUdOb1pXTnJMbHh1WEhSY2RGeDBMeThnUkdWamIyUmxJRzVoYldWa0lHTm9ZWEpoWTNSbGNpQnlaV1psY21WdVkyVnpJSGRwZEdodmRYUWdkSEpoYVd4cGJtY2dZRHRnTENCbExtY3VJR0FtWVcxd1lGeHVYSFJjZEZ4MEx5OGdWR2hwY3lCcGN5QnZibXg1SUdFZ2NHRnljMlVnWlhKeWIzSWdhV1lnYVhRZ1oyVjBjeUJqYjI1MlpYSjBaV1FnZEc4Z1lDWmdMQ0J2Y2lCcFppQnBkQ0JwYzF4dVhIUmNkRngwTHk4Z1ptOXNiRzkzWldRZ1lua2dZRDFnSUdsdUlHRnVJR0YwZEhKcFluVjBaU0JqYjI1MFpYaDBMbHh1WEhSY2RGeDBjbVZtWlhKbGJtTmxJRDBnSkRZN1hHNWNkRngwWEhSdVpYaDBJRDBnSkRjN1hHNWNkRngwWEhScFppQW9ibVY0ZENBbUppQnZjSFJwYjI1ekxtbHpRWFIwY21saWRYUmxWbUZzZFdVcElIdGNibHgwWEhSY2RGeDBhV1lnS0hOMGNtbGpkQ0FtSmlCdVpYaDBJRDA5SUNjOUp5a2dlMXh1WEhSY2RGeDBYSFJjZEhCaGNuTmxSWEp5YjNJb0oyQW1ZQ0JrYVdRZ2JtOTBJSE4wWVhKMElHRWdZMmhoY21GamRHVnlJSEpsWm1WeVpXNWpaU2NwTzF4dVhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RISmxkSFZ5YmlBa01EdGNibHgwWEhSY2RIMGdaV3h6WlNCN1hHNWNkRngwWEhSY2RHbG1JQ2h6ZEhKcFkzUXBJSHRjYmx4MFhIUmNkRngwWEhSd1lYSnpaVVZ5Y205eUtGeHVYSFJjZEZ4MFhIUmNkRngwSjI1aGJXVmtJR05vWVhKaFkzUmxjaUJ5WldabGNtVnVZMlVnZDJGeklHNXZkQ0IwWlhKdGFXNWhkR1ZrSUdKNUlHRWdjMlZ0YVdOdmJHOXVKMXh1WEhSY2RGeDBYSFJjZENrN1hHNWNkRngwWEhSY2RIMWNibHgwWEhSY2RGeDBMeThnVG05MFpUb2dkR2hsY21VZ2FYTWdibThnYm1WbFpDQjBieUJqYUdWamF5QmdhR0Z6S0dSbFkyOWtaVTFoY0V4bFoyRmplU3dnY21WbVpYSmxibU5sS1dBdVhHNWNkRngwWEhSY2RISmxkSFZ5YmlCa1pXTnZaR1ZOWVhCTVpXZGhZM2xiY21WbVpYSmxibU5sWFNBcklDaHVaWGgwSUh4OElDY25LVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlLVHRjYmx4MGZUdGNibHgwTHk4Z1JYaHdiM05sSUdSbFptRjFiSFFnYjNCMGFXOXVjeUFvYzI4Z2RHaGxlU0JqWVc0Z1ltVWdiM1psY25KcFpHUmxiaUJuYkc5aVlXeHNlU2t1WEc1Y2RHUmxZMjlrWlM1dmNIUnBiMjV6SUQwZ2UxeHVYSFJjZENkcGMwRjBkSEpwWW5WMFpWWmhiSFZsSnpvZ1ptRnNjMlVzWEc1Y2RGeDBKM04wY21samRDYzZJR1poYkhObFhHNWNkSDA3WEc1Y2JseDBkbUZ5SUdWelkyRndaU0E5SUdaMWJtTjBhVzl1S0hOMGNtbHVaeWtnZTF4dVhIUmNkSEpsZEhWeWJpQnpkSEpwYm1jdWNtVndiR0ZqWlNoeVpXZGxlRVZ6WTJGd1pTd2dablZ1WTNScGIyNG9KREFwSUh0Y2JseDBYSFJjZEM4dklFNXZkR1U2SUhSb1pYSmxJR2x6SUc1dklHNWxaV1FnZEc4Z1kyaGxZMnNnWUdoaGN5aGxjMk5oY0dWTllYQXNJQ1F3S1dBZ2FHVnlaUzVjYmx4MFhIUmNkSEpsZEhWeWJpQmxjMk5oY0dWTllYQmJKREJkTzF4dVhIUmNkSDBwTzF4dVhIUjlPMXh1WEc1Y2RDOHFMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzBxTDF4dVhHNWNkSFpoY2lCb1pTQTlJSHRjYmx4MFhIUW5kbVZ5YzJsdmJpYzZJQ2N3TGpVdU1DY3NYRzVjZEZ4MEoyVnVZMjlrWlNjNklHVnVZMjlrWlN4Y2JseDBYSFFuWkdWamIyUmxKem9nWkdWamIyUmxMRnh1WEhSY2RDZGxjMk5oY0dVbk9pQmxjMk5oY0dVc1hHNWNkRngwSjNWdVpYTmpZWEJsSnpvZ1pHVmpiMlJsWEc1Y2RIMDdYRzVjYmx4MEx5OGdVMjl0WlNCQlRVUWdZblZwYkdRZ2IzQjBhVzFwZW1WeWN5d2diR2xyWlNCeUxtcHpMQ0JqYUdWamF5Qm1iM0lnYzNCbFkybG1hV01nWTI5dVpHbDBhVzl1SUhCaGRIUmxjbTV6WEc1Y2RDOHZJR3hwYTJVZ2RHaGxJR1p2Ykd4dmQybHVaenBjYmx4MGFXWWdLRnh1WEhSY2RIUjVjR1Z2WmlCa1pXWnBibVVnUFQwZ0oyWjFibU4wYVc5dUp5QW1KbHh1WEhSY2RIUjVjR1Z2WmlCa1pXWnBibVV1WVcxa0lEMDlJQ2R2WW1wbFkzUW5JQ1ltWEc1Y2RGeDBaR1ZtYVc1bExtRnRaRnh1WEhRcElIdGNibHgwWEhSa1pXWnBibVVvWm5WdVkzUnBiMjRvS1NCN1hHNWNkRngwWEhSeVpYUjFjbTRnYUdVN1hHNWNkRngwZlNrN1hHNWNkSDFjZEdWc2MyVWdhV1lnS0daeVpXVkZlSEJ2Y25SeklDWW1JQ0ZtY21WbFJYaHdiM0owY3k1dWIyUmxWSGx3WlNrZ2UxeHVYSFJjZEdsbUlDaG1jbVZsVFc5a2RXeGxLU0I3SUM4dklHbHVJRTV2WkdVdWFuTWdiM0lnVW1sdVoyOUtVeUIyTUM0NExqQXJYRzVjZEZ4MFhIUm1jbVZsVFc5a2RXeGxMbVY0Y0c5eWRITWdQU0JvWlR0Y2JseDBYSFI5SUdWc2MyVWdleUF2THlCcGJpQk9ZWEozYUdGc0lHOXlJRkpwYm1kdlNsTWdkakF1Tnk0d0xWeHVYSFJjZEZ4MFptOXlJQ2gyWVhJZ2EyVjVJR2x1SUdobEtTQjdYRzVjZEZ4MFhIUmNkR2hoY3lob1pTd2dhMlY1S1NBbUppQW9abkpsWlVWNGNHOXlkSE5iYTJWNVhTQTlJR2hsVzJ0bGVWMHBPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMWNibHgwZlNCbGJITmxJSHNnTHk4Z2FXNGdVbWhwYm04Z2IzSWdZU0IzWldJZ1luSnZkM05sY2x4dVhIUmNkSEp2YjNRdWFHVWdQU0JvWlR0Y2JseDBmVnh1WEc1OUtIUm9hWE1wS1R0Y2JpSmRmUT09IiwiLyoqIEBsaWNlbnNlIE1JVCBMaWNlbnNlIChjKSBjb3B5cmlnaHQgMjAxMS0yMDEzIG9yaWdpbmFsIGF1dGhvciBvciBhdXRob3JzICovXG5cbi8qKlxuICogZGVsYXkuanNcbiAqXG4gKiBIZWxwZXIgdGhhdCByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIGFmdGVyIGEgZGVsYXkuXG4gKlxuICogQGF1dGhvciBCcmlhbiBDYXZhbGllclxuICogQGF1dGhvciBKb2huIEhhbm5cbiAqL1xuXG4oZnVuY3Rpb24oZGVmaW5lKSB7XG5kZWZpbmUoZnVuY3Rpb24ocmVxdWlyZSkge1xuXG5cdHZhciB3aGVuID0gcmVxdWlyZSgnLi93aGVuJyk7XG5cbiAgICAvKipcblx0ICogQGRlcHJlY2F0ZWQgVXNlIHdoZW4odmFsdWUpLmRlbGF5KG1zKVxuICAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiBkZWxheShtc2VjLCB2YWx1ZSkge1xuXHRcdHJldHVybiB3aGVuKHZhbHVlKS5kZWxheShtc2VjKTtcbiAgICB9O1xuXG59KTtcbn0pKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZSA6IGZ1bmN0aW9uIChmYWN0b3J5KSB7IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKTsgfSk7XG5cblxuIiwiLyoqIEBsaWNlbnNlIE1JVCBMaWNlbnNlIChjKSBjb3B5cmlnaHQgMjAxMC0yMDE0IG9yaWdpbmFsIGF1dGhvciBvciBhdXRob3JzICovXG4vKiogQGF1dGhvciBCcmlhbiBDYXZhbGllciAqL1xuLyoqIEBhdXRob3IgSm9obiBIYW5uICovXG5cbihmdW5jdGlvbihkZWZpbmUpIHsgJ3VzZSBzdHJpY3QnO1xuZGVmaW5lKGZ1bmN0aW9uIChyZXF1aXJlKSB7XG5cblx0dmFyIG1ha2VQcm9taXNlID0gcmVxdWlyZSgnLi9tYWtlUHJvbWlzZScpO1xuXHR2YXIgU2NoZWR1bGVyID0gcmVxdWlyZSgnLi9TY2hlZHVsZXInKTtcblx0dmFyIGFzeW5jID0gcmVxdWlyZSgnLi9lbnYnKS5hc2FwO1xuXG5cdHJldHVybiBtYWtlUHJvbWlzZSh7XG5cdFx0c2NoZWR1bGVyOiBuZXcgU2NoZWR1bGVyKGFzeW5jKVxuXHR9KTtcblxufSk7XG59KSh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUgOiBmdW5jdGlvbiAoZmFjdG9yeSkgeyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZSk7IH0pO1xuIiwiLyoqIEBsaWNlbnNlIE1JVCBMaWNlbnNlIChjKSBjb3B5cmlnaHQgMjAxMC0yMDE0IG9yaWdpbmFsIGF1dGhvciBvciBhdXRob3JzICovXG4vKiogQGF1dGhvciBCcmlhbiBDYXZhbGllciAqL1xuLyoqIEBhdXRob3IgSm9obiBIYW5uICovXG5cbihmdW5jdGlvbihkZWZpbmUpIHsgJ3VzZSBzdHJpY3QnO1xuZGVmaW5lKGZ1bmN0aW9uKCkge1xuXG5cdC8vIENyZWRpdCB0byBUd2lzb2wgKGh0dHBzOi8vZ2l0aHViLmNvbS9Ud2lzb2wpIGZvciBzdWdnZXN0aW5nXG5cdC8vIHRoaXMgdHlwZSBvZiBleHRlbnNpYmxlIHF1ZXVlICsgdHJhbXBvbGluZSBhcHByb2FjaCBmb3IgbmV4dC10aWNrIGNvbmZsYXRpb24uXG5cblx0LyoqXG5cdCAqIEFzeW5jIHRhc2sgc2NoZWR1bGVyXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb259IGFzeW5jIGZ1bmN0aW9uIHRvIHNjaGVkdWxlIGEgc2luZ2xlIGFzeW5jIGZ1bmN0aW9uXG5cdCAqIEBjb25zdHJ1Y3RvclxuXHQgKi9cblx0ZnVuY3Rpb24gU2NoZWR1bGVyKGFzeW5jKSB7XG5cdFx0dGhpcy5fYXN5bmMgPSBhc3luYztcblx0XHR0aGlzLl9ydW5uaW5nID0gZmFsc2U7XG5cblx0XHR0aGlzLl9xdWV1ZSA9IHRoaXM7XG5cdFx0dGhpcy5fcXVldWVMZW4gPSAwO1xuXHRcdHRoaXMuX2FmdGVyUXVldWUgPSB7fTtcblx0XHR0aGlzLl9hZnRlclF1ZXVlTGVuID0gMDtcblxuXHRcdHZhciBzZWxmID0gdGhpcztcblx0XHR0aGlzLmRyYWluID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRzZWxmLl9kcmFpbigpO1xuXHRcdH07XG5cdH1cblxuXHQvKipcblx0ICogRW5xdWV1ZSBhIHRhc2tcblx0ICogQHBhcmFtIHt7IHJ1bjpmdW5jdGlvbiB9fSB0YXNrXG5cdCAqL1xuXHRTY2hlZHVsZXIucHJvdG90eXBlLmVucXVldWUgPSBmdW5jdGlvbih0YXNrKSB7XG5cdFx0dGhpcy5fcXVldWVbdGhpcy5fcXVldWVMZW4rK10gPSB0YXNrO1xuXHRcdHRoaXMucnVuKCk7XG5cdH07XG5cblx0LyoqXG5cdCAqIEVucXVldWUgYSB0YXNrIHRvIHJ1biBhZnRlciB0aGUgbWFpbiB0YXNrIHF1ZXVlXG5cdCAqIEBwYXJhbSB7eyBydW46ZnVuY3Rpb24gfX0gdGFza1xuXHQgKi9cblx0U2NoZWR1bGVyLnByb3RvdHlwZS5hZnRlclF1ZXVlID0gZnVuY3Rpb24odGFzaykge1xuXHRcdHRoaXMuX2FmdGVyUXVldWVbdGhpcy5fYWZ0ZXJRdWV1ZUxlbisrXSA9IHRhc2s7XG5cdFx0dGhpcy5ydW4oKTtcblx0fTtcblxuXHRTY2hlZHVsZXIucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICghdGhpcy5fcnVubmluZykge1xuXHRcdFx0dGhpcy5fcnVubmluZyA9IHRydWU7XG5cdFx0XHR0aGlzLl9hc3luYyh0aGlzLmRyYWluKTtcblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIERyYWluIHRoZSBoYW5kbGVyIHF1ZXVlIGVudGlyZWx5LCBhbmQgdGhlbiB0aGUgYWZ0ZXIgcXVldWVcblx0ICovXG5cdFNjaGVkdWxlci5wcm90b3R5cGUuX2RyYWluID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGkgPSAwO1xuXHRcdGZvciAoOyBpIDwgdGhpcy5fcXVldWVMZW47ICsraSkge1xuXHRcdFx0dGhpcy5fcXVldWVbaV0ucnVuKCk7XG5cdFx0XHR0aGlzLl9xdWV1ZVtpXSA9IHZvaWQgMDtcblx0XHR9XG5cblx0XHR0aGlzLl9xdWV1ZUxlbiA9IDA7XG5cdFx0dGhpcy5fcnVubmluZyA9IGZhbHNlO1xuXG5cdFx0Zm9yIChpID0gMDsgaSA8IHRoaXMuX2FmdGVyUXVldWVMZW47ICsraSkge1xuXHRcdFx0dGhpcy5fYWZ0ZXJRdWV1ZVtpXS5ydW4oKTtcblx0XHRcdHRoaXMuX2FmdGVyUXVldWVbaV0gPSB2b2lkIDA7XG5cdFx0fVxuXG5cdFx0dGhpcy5fYWZ0ZXJRdWV1ZUxlbiA9IDA7XG5cdH07XG5cblx0cmV0dXJuIFNjaGVkdWxlcjtcblxufSk7XG59KHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZSA6IGZ1bmN0aW9uKGZhY3RvcnkpIHsgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7IH0pKTtcbiIsIi8qKiBAbGljZW5zZSBNSVQgTGljZW5zZSAoYykgY29weXJpZ2h0IDIwMTAtMjAxNCBvcmlnaW5hbCBhdXRob3Igb3IgYXV0aG9ycyAqL1xuLyoqIEBhdXRob3IgQnJpYW4gQ2F2YWxpZXIgKi9cbi8qKiBAYXV0aG9yIEpvaG4gSGFubiAqL1xuXG4oZnVuY3Rpb24oZGVmaW5lKSB7ICd1c2Ugc3RyaWN0JztcbmRlZmluZShmdW5jdGlvbigpIHtcblxuXHQvKipcblx0ICogQ3VzdG9tIGVycm9yIHR5cGUgZm9yIHByb21pc2VzIHJlamVjdGVkIGJ5IHByb21pc2UudGltZW91dFxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZVxuXHQgKiBAY29uc3RydWN0b3Jcblx0ICovXG5cdGZ1bmN0aW9uIFRpbWVvdXRFcnJvciAobWVzc2FnZSkge1xuXHRcdEVycm9yLmNhbGwodGhpcyk7XG5cdFx0dGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcblx0XHR0aGlzLm5hbWUgPSBUaW1lb3V0RXJyb3IubmFtZTtcblx0XHRpZiAodHlwZW9mIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBUaW1lb3V0RXJyb3IpO1xuXHRcdH1cblx0fVxuXG5cdFRpbWVvdXRFcnJvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG5cdFRpbWVvdXRFcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBUaW1lb3V0RXJyb3I7XG5cblx0cmV0dXJuIFRpbWVvdXRFcnJvcjtcbn0pO1xufSh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUgOiBmdW5jdGlvbihmYWN0b3J5KSB7IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpOyB9KSk7IiwiLyoqIEBsaWNlbnNlIE1JVCBMaWNlbnNlIChjKSBjb3B5cmlnaHQgMjAxMC0yMDE0IG9yaWdpbmFsIGF1dGhvciBvciBhdXRob3JzICovXG4vKiogQGF1dGhvciBCcmlhbiBDYXZhbGllciAqL1xuLyoqIEBhdXRob3IgSm9obiBIYW5uICovXG5cbihmdW5jdGlvbihkZWZpbmUpIHsgJ3VzZSBzdHJpY3QnO1xuZGVmaW5lKGZ1bmN0aW9uKCkge1xuXG5cdG1ha2VBcHBseS50cnlDYXRjaFJlc29sdmUgPSB0cnlDYXRjaFJlc29sdmU7XG5cblx0cmV0dXJuIG1ha2VBcHBseTtcblxuXHRmdW5jdGlvbiBtYWtlQXBwbHkoUHJvbWlzZSwgY2FsbCkge1xuXHRcdGlmKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG5cdFx0XHRjYWxsID0gdHJ5Q2F0Y2hSZXNvbHZlO1xuXHRcdH1cblxuXHRcdHJldHVybiBhcHBseTtcblxuXHRcdGZ1bmN0aW9uIGFwcGx5KGYsIHRoaXNBcmcsIGFyZ3MpIHtcblx0XHRcdHZhciBwID0gUHJvbWlzZS5fZGVmZXIoKTtcblx0XHRcdHZhciBsID0gYXJncy5sZW5ndGg7XG5cdFx0XHR2YXIgcGFyYW1zID0gbmV3IEFycmF5KGwpO1xuXHRcdFx0Y2FsbEFuZFJlc29sdmUoeyBmOmYsIHRoaXNBcmc6dGhpc0FyZywgYXJnczphcmdzLCBwYXJhbXM6cGFyYW1zLCBpOmwtMSwgY2FsbDpjYWxsIH0sIHAuX2hhbmRsZXIpO1xuXG5cdFx0XHRyZXR1cm4gcDtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBjYWxsQW5kUmVzb2x2ZShjLCBoKSB7XG5cdFx0XHRpZihjLmkgPCAwKSB7XG5cdFx0XHRcdHJldHVybiBjYWxsKGMuZiwgYy50aGlzQXJnLCBjLnBhcmFtcywgaCk7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBoYW5kbGVyID0gUHJvbWlzZS5faGFuZGxlcihjLmFyZ3NbYy5pXSk7XG5cdFx0XHRoYW5kbGVyLmZvbGQoY2FsbEFuZFJlc29sdmVOZXh0LCBjLCB2b2lkIDAsIGgpO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGNhbGxBbmRSZXNvbHZlTmV4dChjLCB4LCBoKSB7XG5cdFx0XHRjLnBhcmFtc1tjLmldID0geDtcblx0XHRcdGMuaSAtPSAxO1xuXHRcdFx0Y2FsbEFuZFJlc29sdmUoYywgaCk7XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gdHJ5Q2F0Y2hSZXNvbHZlKGYsIHRoaXNBcmcsIGFyZ3MsIHJlc29sdmVyKSB7XG5cdFx0dHJ5IHtcblx0XHRcdHJlc29sdmVyLnJlc29sdmUoZi5hcHBseSh0aGlzQXJnLCBhcmdzKSk7XG5cdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRyZXNvbHZlci5yZWplY3QoZSk7XG5cdFx0fVxuXHR9XG5cbn0pO1xufSh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUgOiBmdW5jdGlvbihmYWN0b3J5KSB7IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpOyB9KSk7XG5cblxuIiwiLyoqIEBsaWNlbnNlIE1JVCBMaWNlbnNlIChjKSBjb3B5cmlnaHQgMjAxMC0yMDE0IG9yaWdpbmFsIGF1dGhvciBvciBhdXRob3JzICovXG4vKiogQGF1dGhvciBCcmlhbiBDYXZhbGllciAqL1xuLyoqIEBhdXRob3IgSm9obiBIYW5uICovXG5cbihmdW5jdGlvbihkZWZpbmUpIHsgJ3VzZSBzdHJpY3QnO1xuZGVmaW5lKGZ1bmN0aW9uKHJlcXVpcmUpIHtcblxuXHR2YXIgc3RhdGUgPSByZXF1aXJlKCcuLi9zdGF0ZScpO1xuXHR2YXIgYXBwbGllciA9IHJlcXVpcmUoJy4uL2FwcGx5Jyk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIGFycmF5KFByb21pc2UpIHtcblxuXHRcdHZhciBhcHBseUZvbGQgPSBhcHBsaWVyKFByb21pc2UpO1xuXHRcdHZhciB0b1Byb21pc2UgPSBQcm9taXNlLnJlc29sdmU7XG5cdFx0dmFyIGFsbCA9IFByb21pc2UuYWxsO1xuXG5cdFx0dmFyIGFyID0gQXJyYXkucHJvdG90eXBlLnJlZHVjZTtcblx0XHR2YXIgYXJyID0gQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0O1xuXHRcdHZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcblxuXHRcdC8vIEFkZGl0aW9uYWwgYXJyYXkgY29tYmluYXRvcnNcblxuXHRcdFByb21pc2UuYW55ID0gYW55O1xuXHRcdFByb21pc2Uuc29tZSA9IHNvbWU7XG5cdFx0UHJvbWlzZS5zZXR0bGUgPSBzZXR0bGU7XG5cblx0XHRQcm9taXNlLm1hcCA9IG1hcDtcblx0XHRQcm9taXNlLmZpbHRlciA9IGZpbHRlcjtcblx0XHRQcm9taXNlLnJlZHVjZSA9IHJlZHVjZTtcblx0XHRQcm9taXNlLnJlZHVjZVJpZ2h0ID0gcmVkdWNlUmlnaHQ7XG5cblx0XHQvKipcblx0XHQgKiBXaGVuIHRoaXMgcHJvbWlzZSBmdWxmaWxscyB3aXRoIGFuIGFycmF5LCBkb1xuXHRcdCAqIG9uRnVsZmlsbGVkLmFwcGx5KHZvaWQgMCwgYXJyYXkpXG5cdFx0ICogQHBhcmFtIHtmdW5jdGlvbn0gb25GdWxmaWxsZWQgZnVuY3Rpb24gdG8gYXBwbHlcblx0XHQgKiBAcmV0dXJucyB7UHJvbWlzZX0gcHJvbWlzZSBmb3IgdGhlIHJlc3VsdCBvZiBhcHBseWluZyBvbkZ1bGZpbGxlZFxuXHRcdCAqL1xuXHRcdFByb21pc2UucHJvdG90eXBlLnNwcmVhZCA9IGZ1bmN0aW9uKG9uRnVsZmlsbGVkKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy50aGVuKGFsbCkudGhlbihmdW5jdGlvbihhcnJheSkge1xuXHRcdFx0XHRyZXR1cm4gb25GdWxmaWxsZWQuYXBwbHkodGhpcywgYXJyYXkpO1xuXHRcdFx0fSk7XG5cdFx0fTtcblxuXHRcdHJldHVybiBQcm9taXNlO1xuXG5cdFx0LyoqXG5cdFx0ICogT25lLXdpbm5lciBjb21wZXRpdGl2ZSByYWNlLlxuXHRcdCAqIFJldHVybiBhIHByb21pc2UgdGhhdCB3aWxsIGZ1bGZpbGwgd2hlbiBvbmUgb2YgdGhlIHByb21pc2VzXG5cdFx0ICogaW4gdGhlIGlucHV0IGFycmF5IGZ1bGZpbGxzLCBvciB3aWxsIHJlamVjdCB3aGVuIGFsbCBwcm9taXNlc1xuXHRcdCAqIGhhdmUgcmVqZWN0ZWQuXG5cdFx0ICogQHBhcmFtIHthcnJheX0gcHJvbWlzZXNcblx0XHQgKiBAcmV0dXJucyB7UHJvbWlzZX0gcHJvbWlzZSBmb3IgdGhlIGZpcnN0IGZ1bGZpbGxlZCB2YWx1ZVxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIGFueShwcm9taXNlcykge1xuXHRcdFx0dmFyIHAgPSBQcm9taXNlLl9kZWZlcigpO1xuXHRcdFx0dmFyIHJlc29sdmVyID0gcC5faGFuZGxlcjtcblx0XHRcdHZhciBsID0gcHJvbWlzZXMubGVuZ3RoPj4+MDtcblxuXHRcdFx0dmFyIHBlbmRpbmcgPSBsO1xuXHRcdFx0dmFyIGVycm9ycyA9IFtdO1xuXG5cdFx0XHRmb3IgKHZhciBoLCB4LCBpID0gMDsgaSA8IGw7ICsraSkge1xuXHRcdFx0XHR4ID0gcHJvbWlzZXNbaV07XG5cdFx0XHRcdGlmKHggPT09IHZvaWQgMCAmJiAhKGkgaW4gcHJvbWlzZXMpKSB7XG5cdFx0XHRcdFx0LS1wZW5kaW5nO1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aCA9IFByb21pc2UuX2hhbmRsZXIoeCk7XG5cdFx0XHRcdGlmKGguc3RhdGUoKSA+IDApIHtcblx0XHRcdFx0XHRyZXNvbHZlci5iZWNvbWUoaCk7XG5cdFx0XHRcdFx0UHJvbWlzZS5fdmlzaXRSZW1haW5pbmcocHJvbWlzZXMsIGksIGgpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGgudmlzaXQocmVzb2x2ZXIsIGhhbmRsZUZ1bGZpbGwsIGhhbmRsZVJlamVjdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYocGVuZGluZyA9PT0gMCkge1xuXHRcdFx0XHRyZXNvbHZlci5yZWplY3QobmV3IFJhbmdlRXJyb3IoJ2FueSgpOiBhcnJheSBtdXN0IG5vdCBiZSBlbXB0eScpKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHA7XG5cblx0XHRcdGZ1bmN0aW9uIGhhbmRsZUZ1bGZpbGwoeCkge1xuXHRcdFx0XHQvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSovXG5cdFx0XHRcdGVycm9ycyA9IG51bGw7XG5cdFx0XHRcdHRoaXMucmVzb2x2ZSh4KTsgLy8gdGhpcyA9PT0gcmVzb2x2ZXJcblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gaGFuZGxlUmVqZWN0KGUpIHtcblx0XHRcdFx0Lypqc2hpbnQgdmFsaWR0aGlzOnRydWUqL1xuXHRcdFx0XHRpZih0aGlzLnJlc29sdmVkKSB7IC8vIHRoaXMgPT09IHJlc29sdmVyXG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZXJyb3JzLnB1c2goZSk7XG5cdFx0XHRcdGlmKC0tcGVuZGluZyA9PT0gMCkge1xuXHRcdFx0XHRcdHRoaXMucmVqZWN0KGVycm9ycyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvKipcblx0XHQgKiBOLXdpbm5lciBjb21wZXRpdGl2ZSByYWNlXG5cdFx0ICogUmV0dXJuIGEgcHJvbWlzZSB0aGF0IHdpbGwgZnVsZmlsbCB3aGVuIG4gaW5wdXQgcHJvbWlzZXMgaGF2ZVxuXHRcdCAqIGZ1bGZpbGxlZCwgb3Igd2lsbCByZWplY3Qgd2hlbiBpdCBiZWNvbWVzIGltcG9zc2libGUgZm9yIG5cblx0XHQgKiBpbnB1dCBwcm9taXNlcyB0byBmdWxmaWxsIChpZSB3aGVuIHByb21pc2VzLmxlbmd0aCAtIG4gKyAxXG5cdFx0ICogaGF2ZSByZWplY3RlZClcblx0XHQgKiBAcGFyYW0ge2FycmF5fSBwcm9taXNlc1xuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSBuXG5cdFx0ICogQHJldHVybnMge1Byb21pc2V9IHByb21pc2UgZm9yIHRoZSBlYXJsaWVzdCBuIGZ1bGZpbGxtZW50IHZhbHVlc1xuXHRcdCAqXG5cdFx0ICogQGRlcHJlY2F0ZWRcblx0XHQgKi9cblx0XHRmdW5jdGlvbiBzb21lKHByb21pc2VzLCBuKSB7XG5cdFx0XHQvKmpzaGludCBtYXhjb21wbGV4aXR5OjcqL1xuXHRcdFx0dmFyIHAgPSBQcm9taXNlLl9kZWZlcigpO1xuXHRcdFx0dmFyIHJlc29sdmVyID0gcC5faGFuZGxlcjtcblxuXHRcdFx0dmFyIHJlc3VsdHMgPSBbXTtcblx0XHRcdHZhciBlcnJvcnMgPSBbXTtcblxuXHRcdFx0dmFyIGwgPSBwcm9taXNlcy5sZW5ndGg+Pj4wO1xuXHRcdFx0dmFyIG5GdWxmaWxsID0gMDtcblx0XHRcdHZhciBuUmVqZWN0O1xuXHRcdFx0dmFyIHgsIGk7IC8vIHJldXNlZCBpbiBib3RoIGZvcigpIGxvb3BzXG5cblx0XHRcdC8vIEZpcnN0IHBhc3M6IGNvdW50IGFjdHVhbCBhcnJheSBpdGVtc1xuXHRcdFx0Zm9yKGk9MDsgaTxsOyArK2kpIHtcblx0XHRcdFx0eCA9IHByb21pc2VzW2ldO1xuXHRcdFx0XHRpZih4ID09PSB2b2lkIDAgJiYgIShpIGluIHByb21pc2VzKSkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdCsrbkZ1bGZpbGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXB1dGUgYWN0dWFsIGdvYWxzXG5cdFx0XHRuID0gTWF0aC5tYXgobiwgMCk7XG5cdFx0XHRuUmVqZWN0ID0gKG5GdWxmaWxsIC0gbiArIDEpO1xuXHRcdFx0bkZ1bGZpbGwgPSBNYXRoLm1pbihuLCBuRnVsZmlsbCk7XG5cblx0XHRcdGlmKG4gPiBuRnVsZmlsbCkge1xuXHRcdFx0XHRyZXNvbHZlci5yZWplY3QobmV3IFJhbmdlRXJyb3IoJ3NvbWUoKTogYXJyYXkgbXVzdCBjb250YWluIGF0IGxlYXN0ICdcblx0XHRcdFx0KyBuICsgJyBpdGVtKHMpLCBidXQgaGFkICcgKyBuRnVsZmlsbCkpO1xuXHRcdFx0fSBlbHNlIGlmKG5GdWxmaWxsID09PSAwKSB7XG5cdFx0XHRcdHJlc29sdmVyLnJlc29sdmUocmVzdWx0cyk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNlY29uZCBwYXNzOiBvYnNlcnZlIGVhY2ggYXJyYXkgaXRlbSwgbWFrZSBwcm9ncmVzcyB0b3dhcmQgZ29hbHNcblx0XHRcdGZvcihpPTA7IGk8bDsgKytpKSB7XG5cdFx0XHRcdHggPSBwcm9taXNlc1tpXTtcblx0XHRcdFx0aWYoeCA9PT0gdm9pZCAwICYmICEoaSBpbiBwcm9taXNlcykpIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdFByb21pc2UuX2hhbmRsZXIoeCkudmlzaXQocmVzb2x2ZXIsIGZ1bGZpbGwsIHJlamVjdCwgcmVzb2x2ZXIubm90aWZ5KTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHA7XG5cblx0XHRcdGZ1bmN0aW9uIGZ1bGZpbGwoeCkge1xuXHRcdFx0XHQvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSovXG5cdFx0XHRcdGlmKHRoaXMucmVzb2x2ZWQpIHsgLy8gdGhpcyA9PT0gcmVzb2x2ZXJcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHRzLnB1c2goeCk7XG5cdFx0XHRcdGlmKC0tbkZ1bGZpbGwgPT09IDApIHtcblx0XHRcdFx0XHRlcnJvcnMgPSBudWxsO1xuXHRcdFx0XHRcdHRoaXMucmVzb2x2ZShyZXN1bHRzKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmdW5jdGlvbiByZWplY3QoZSkge1xuXHRcdFx0XHQvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSovXG5cdFx0XHRcdGlmKHRoaXMucmVzb2x2ZWQpIHsgLy8gdGhpcyA9PT0gcmVzb2x2ZXJcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRlcnJvcnMucHVzaChlKTtcblx0XHRcdFx0aWYoLS1uUmVqZWN0ID09PSAwKSB7XG5cdFx0XHRcdFx0cmVzdWx0cyA9IG51bGw7XG5cdFx0XHRcdFx0dGhpcy5yZWplY3QoZXJyb3JzKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIEFwcGx5IGYgdG8gdGhlIHZhbHVlIG9mIGVhY2ggcHJvbWlzZSBpbiBhIGxpc3Qgb2YgcHJvbWlzZXNcblx0XHQgKiBhbmQgcmV0dXJuIGEgbmV3IGxpc3QgY29udGFpbmluZyB0aGUgcmVzdWx0cy5cblx0XHQgKiBAcGFyYW0ge2FycmF5fSBwcm9taXNlc1xuXHRcdCAqIEBwYXJhbSB7ZnVuY3Rpb24oeDoqLCBpbmRleDpOdW1iZXIpOip9IGYgbWFwcGluZyBmdW5jdGlvblxuXHRcdCAqIEByZXR1cm5zIHtQcm9taXNlfVxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIG1hcChwcm9taXNlcywgZikge1xuXHRcdFx0cmV0dXJuIFByb21pc2UuX3RyYXZlcnNlKGYsIHByb21pc2VzKTtcblx0XHR9XG5cblx0XHQvKipcblx0XHQgKiBGaWx0ZXIgdGhlIHByb3ZpZGVkIGFycmF5IG9mIHByb21pc2VzIHVzaW5nIHRoZSBwcm92aWRlZCBwcmVkaWNhdGUuICBJbnB1dCBtYXlcblx0XHQgKiBjb250YWluIHByb21pc2VzIGFuZCB2YWx1ZXNcblx0XHQgKiBAcGFyYW0ge0FycmF5fSBwcm9taXNlcyBhcnJheSBvZiBwcm9taXNlcyBhbmQgdmFsdWVzXG5cdFx0ICogQHBhcmFtIHtmdW5jdGlvbih4OiosIGluZGV4Ok51bWJlcik6Ym9vbGVhbn0gcHJlZGljYXRlIGZpbHRlcmluZyBwcmVkaWNhdGUuXG5cdFx0ICogIE11c3QgcmV0dXJuIHRydXRoeSAob3IgcHJvbWlzZSBmb3IgdHJ1dGh5KSBmb3IgaXRlbXMgdG8gcmV0YWluLlxuXHRcdCAqIEByZXR1cm5zIHtQcm9taXNlfSBwcm9taXNlIHRoYXQgd2lsbCBmdWxmaWxsIHdpdGggYW4gYXJyYXkgY29udGFpbmluZyBhbGwgaXRlbXNcblx0XHQgKiAgZm9yIHdoaWNoIHByZWRpY2F0ZSByZXR1cm5lZCB0cnV0aHkuXG5cdFx0ICovXG5cdFx0ZnVuY3Rpb24gZmlsdGVyKHByb21pc2VzLCBwcmVkaWNhdGUpIHtcblx0XHRcdHZhciBhID0gc2xpY2UuY2FsbChwcm9taXNlcyk7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5fdHJhdmVyc2UocHJlZGljYXRlLCBhKS50aGVuKGZ1bmN0aW9uKGtlZXApIHtcblx0XHRcdFx0cmV0dXJuIGZpbHRlclN5bmMoYSwga2VlcCk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBmaWx0ZXJTeW5jKHByb21pc2VzLCBrZWVwKSB7XG5cdFx0XHQvLyBTYWZlIGJlY2F1c2Ugd2Uga25vdyBhbGwgcHJvbWlzZXMgaGF2ZSBmdWxmaWxsZWQgaWYgd2UndmUgbWFkZSBpdCB0aGlzIGZhclxuXHRcdFx0dmFyIGwgPSBrZWVwLmxlbmd0aDtcblx0XHRcdHZhciBmaWx0ZXJlZCA9IG5ldyBBcnJheShsKTtcblx0XHRcdGZvcih2YXIgaT0wLCBqPTA7IGk8bDsgKytpKSB7XG5cdFx0XHRcdGlmKGtlZXBbaV0pIHtcblx0XHRcdFx0XHRmaWx0ZXJlZFtqKytdID0gUHJvbWlzZS5faGFuZGxlcihwcm9taXNlc1tpXSkudmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGZpbHRlcmVkLmxlbmd0aCA9IGo7XG5cdFx0XHRyZXR1cm4gZmlsdGVyZWQ7XG5cblx0XHR9XG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm4gYSBwcm9taXNlIHRoYXQgd2lsbCBhbHdheXMgZnVsZmlsbCB3aXRoIGFuIGFycmF5IGNvbnRhaW5pbmdcblx0XHQgKiB0aGUgb3V0Y29tZSBzdGF0ZXMgb2YgYWxsIGlucHV0IHByb21pc2VzLiAgVGhlIHJldHVybmVkIHByb21pc2Vcblx0XHQgKiB3aWxsIG5ldmVyIHJlamVjdC5cblx0XHQgKiBAcGFyYW0ge0FycmF5fSBwcm9taXNlc1xuXHRcdCAqIEByZXR1cm5zIHtQcm9taXNlfSBwcm9taXNlIGZvciBhcnJheSBvZiBzZXR0bGVkIHN0YXRlIGRlc2NyaXB0b3JzXG5cdFx0ICovXG5cdFx0ZnVuY3Rpb24gc2V0dGxlKHByb21pc2VzKSB7XG5cdFx0XHRyZXR1cm4gYWxsKHByb21pc2VzLm1hcChzZXR0bGVPbmUpKTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBzZXR0bGVPbmUocCkge1xuXHRcdFx0dmFyIGggPSBQcm9taXNlLl9oYW5kbGVyKHApO1xuXHRcdFx0aWYoaC5zdGF0ZSgpID09PSAwKSB7XG5cdFx0XHRcdHJldHVybiB0b1Byb21pc2UocCkudGhlbihzdGF0ZS5mdWxmaWxsZWQsIHN0YXRlLnJlamVjdGVkKTtcblx0XHRcdH1cblxuXHRcdFx0aC5fdW5yZXBvcnQoKTtcblx0XHRcdHJldHVybiBzdGF0ZS5pbnNwZWN0KGgpO1xuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIFRyYWRpdGlvbmFsIHJlZHVjZSBmdW5jdGlvbiwgc2ltaWxhciB0byBgQXJyYXkucHJvdG90eXBlLnJlZHVjZSgpYCwgYnV0XG5cdFx0ICogaW5wdXQgbWF5IGNvbnRhaW4gcHJvbWlzZXMgYW5kL29yIHZhbHVlcywgYW5kIHJlZHVjZUZ1bmNcblx0XHQgKiBtYXkgcmV0dXJuIGVpdGhlciBhIHZhbHVlIG9yIGEgcHJvbWlzZSwgKmFuZCogaW5pdGlhbFZhbHVlIG1heVxuXHRcdCAqIGJlIGEgcHJvbWlzZSBmb3IgdGhlIHN0YXJ0aW5nIHZhbHVlLlxuXHRcdCAqIEBwYXJhbSB7QXJyYXl8UHJvbWlzZX0gcHJvbWlzZXMgYXJyYXkgb3IgcHJvbWlzZSBmb3IgYW4gYXJyYXkgb2YgYW55dGhpbmcsXG5cdFx0ICogICAgICBtYXkgY29udGFpbiBhIG1peCBvZiBwcm9taXNlcyBhbmQgdmFsdWVzLlxuXHRcdCAqIEBwYXJhbSB7ZnVuY3Rpb24oYWNjdW11bGF0ZWQ6KiwgeDoqLCBpbmRleDpOdW1iZXIpOip9IGYgcmVkdWNlIGZ1bmN0aW9uXG5cdFx0ICogQHJldHVybnMge1Byb21pc2V9IHRoYXQgd2lsbCByZXNvbHZlIHRvIHRoZSBmaW5hbCByZWR1Y2VkIHZhbHVlXG5cdFx0ICovXG5cdFx0ZnVuY3Rpb24gcmVkdWNlKHByb21pc2VzLCBmIC8qLCBpbml0aWFsVmFsdWUgKi8pIHtcblx0XHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyLmNhbGwocHJvbWlzZXMsIGxpZnRDb21iaW5lKGYpLCBhcmd1bWVudHNbMl0pXG5cdFx0XHRcdFx0OiBhci5jYWxsKHByb21pc2VzLCBsaWZ0Q29tYmluZShmKSk7XG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogVHJhZGl0aW9uYWwgcmVkdWNlIGZ1bmN0aW9uLCBzaW1pbGFyIHRvIGBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHQoKWAsIGJ1dFxuXHRcdCAqIGlucHV0IG1heSBjb250YWluIHByb21pc2VzIGFuZC9vciB2YWx1ZXMsIGFuZCByZWR1Y2VGdW5jXG5cdFx0ICogbWF5IHJldHVybiBlaXRoZXIgYSB2YWx1ZSBvciBhIHByb21pc2UsICphbmQqIGluaXRpYWxWYWx1ZSBtYXlcblx0XHQgKiBiZSBhIHByb21pc2UgZm9yIHRoZSBzdGFydGluZyB2YWx1ZS5cblx0XHQgKiBAcGFyYW0ge0FycmF5fFByb21pc2V9IHByb21pc2VzIGFycmF5IG9yIHByb21pc2UgZm9yIGFuIGFycmF5IG9mIGFueXRoaW5nLFxuXHRcdCAqICAgICAgbWF5IGNvbnRhaW4gYSBtaXggb2YgcHJvbWlzZXMgYW5kIHZhbHVlcy5cblx0XHQgKiBAcGFyYW0ge2Z1bmN0aW9uKGFjY3VtdWxhdGVkOiosIHg6KiwgaW5kZXg6TnVtYmVyKToqfSBmIHJlZHVjZSBmdW5jdGlvblxuXHRcdCAqIEByZXR1cm5zIHtQcm9taXNlfSB0aGF0IHdpbGwgcmVzb2x2ZSB0byB0aGUgZmluYWwgcmVkdWNlZCB2YWx1ZVxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KHByb21pc2VzLCBmIC8qLCBpbml0aWFsVmFsdWUgKi8pIHtcblx0XHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyci5jYWxsKHByb21pc2VzLCBsaWZ0Q29tYmluZShmKSwgYXJndW1lbnRzWzJdKVxuXHRcdFx0XHRcdDogYXJyLmNhbGwocHJvbWlzZXMsIGxpZnRDb21iaW5lKGYpKTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBsaWZ0Q29tYmluZShmKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oeiwgeCwgaSkge1xuXHRcdFx0XHRyZXR1cm4gYXBwbHlGb2xkKGYsIHZvaWQgMCwgW3oseCxpXSk7XG5cdFx0XHR9O1xuXHRcdH1cblx0fTtcblxufSk7XG59KHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZSA6IGZ1bmN0aW9uKGZhY3RvcnkpIHsgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUpOyB9KSk7XG4iLCIvKiogQGxpY2Vuc2UgTUlUIExpY2Vuc2UgKGMpIGNvcHlyaWdodCAyMDEwLTIwMTQgb3JpZ2luYWwgYXV0aG9yIG9yIGF1dGhvcnMgKi9cbi8qKiBAYXV0aG9yIEJyaWFuIENhdmFsaWVyICovXG4vKiogQGF1dGhvciBKb2huIEhhbm4gKi9cblxuKGZ1bmN0aW9uKGRlZmluZSkgeyAndXNlIHN0cmljdCc7XG5kZWZpbmUoZnVuY3Rpb24oKSB7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIGZsb3coUHJvbWlzZSkge1xuXG5cdFx0dmFyIHJlc29sdmUgPSBQcm9taXNlLnJlc29sdmU7XG5cdFx0dmFyIHJlamVjdCA9IFByb21pc2UucmVqZWN0O1xuXHRcdHZhciBvcmlnQ2F0Y2ggPSBQcm9taXNlLnByb3RvdHlwZVsnY2F0Y2gnXTtcblxuXHRcdC8qKlxuXHRcdCAqIEhhbmRsZSB0aGUgdWx0aW1hdGUgZnVsZmlsbG1lbnQgdmFsdWUgb3IgcmVqZWN0aW9uIHJlYXNvbiwgYW5kIGFzc3VtZVxuXHRcdCAqIHJlc3BvbnNpYmlsaXR5IGZvciBhbGwgZXJyb3JzLiAgSWYgYW4gZXJyb3IgcHJvcGFnYXRlcyBvdXQgb2YgcmVzdWx0XG5cdFx0ICogb3IgaGFuZGxlRmF0YWxFcnJvciwgaXQgd2lsbCBiZSByZXRocm93biB0byB0aGUgaG9zdCwgcmVzdWx0aW5nIGluIGFcblx0XHQgKiBsb3VkIHN0YWNrIHRyYWNrIG9uIG1vc3QgcGxhdGZvcm1zIGFuZCBhIGNyYXNoIG9uIHNvbWUuXG5cdFx0ICogQHBhcmFtIHtmdW5jdGlvbj99IG9uUmVzdWx0XG5cdFx0ICogQHBhcmFtIHtmdW5jdGlvbj99IG9uRXJyb3Jcblx0XHQgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuXHRcdCAqL1xuXHRcdFByb21pc2UucHJvdG90eXBlLmRvbmUgPSBmdW5jdGlvbihvblJlc3VsdCwgb25FcnJvcikge1xuXHRcdFx0dGhpcy5faGFuZGxlci52aXNpdCh0aGlzLl9oYW5kbGVyLnJlY2VpdmVyLCBvblJlc3VsdCwgb25FcnJvcik7XG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIEFkZCBFcnJvci10eXBlIGFuZCBwcmVkaWNhdGUgbWF0Y2hpbmcgdG8gY2F0Y2guICBFeGFtcGxlczpcblx0XHQgKiBwcm9taXNlLmNhdGNoKFR5cGVFcnJvciwgaGFuZGxlVHlwZUVycm9yKVxuXHRcdCAqICAgLmNhdGNoKHByZWRpY2F0ZSwgaGFuZGxlTWF0Y2hlZEVycm9ycylcblx0XHQgKiAgIC5jYXRjaChoYW5kbGVSZW1haW5pbmdFcnJvcnMpXG5cdFx0ICogQHBhcmFtIG9uUmVqZWN0ZWRcblx0XHQgKiBAcmV0dXJucyB7Kn1cblx0XHQgKi9cblx0XHRQcm9taXNlLnByb3RvdHlwZVsnY2F0Y2gnXSA9IFByb21pc2UucHJvdG90eXBlLm90aGVyd2lzZSA9IGZ1bmN0aW9uKG9uUmVqZWN0ZWQpIHtcblx0XHRcdGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuXHRcdFx0XHRyZXR1cm4gb3JpZ0NhdGNoLmNhbGwodGhpcywgb25SZWplY3RlZCk7XG5cdFx0XHR9XG5cblx0XHRcdGlmKHR5cGVvZiBvblJlamVjdGVkICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmVuc3VyZShyZWplY3RJbnZhbGlkUHJlZGljYXRlKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9yaWdDYXRjaC5jYWxsKHRoaXMsIGNyZWF0ZUNhdGNoRmlsdGVyKGFyZ3VtZW50c1sxXSwgb25SZWplY3RlZCkpO1xuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBXcmFwcyB0aGUgcHJvdmlkZWQgY2F0Y2ggaGFuZGxlciwgc28gdGhhdCBpdCB3aWxsIG9ubHkgYmUgY2FsbGVkXG5cdFx0ICogaWYgdGhlIHByZWRpY2F0ZSBldmFsdWF0ZXMgdHJ1dGh5XG5cdFx0ICogQHBhcmFtIHs/ZnVuY3Rpb259IGhhbmRsZXJcblx0XHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSBwcmVkaWNhdGVcblx0XHQgKiBAcmV0dXJucyB7ZnVuY3Rpb259IGNvbmRpdGlvbmFsIGNhdGNoIGhhbmRsZXJcblx0XHQgKi9cblx0XHRmdW5jdGlvbiBjcmVhdGVDYXRjaEZpbHRlcihoYW5kbGVyLCBwcmVkaWNhdGUpIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdHJldHVybiBldmFsdWF0ZVByZWRpY2F0ZShlLCBwcmVkaWNhdGUpXG5cdFx0XHRcdFx0PyBoYW5kbGVyLmNhbGwodGhpcywgZSlcblx0XHRcdFx0XHQ6IHJlamVjdChlKTtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogRW5zdXJlcyB0aGF0IG9uRnVsZmlsbGVkT3JSZWplY3RlZCB3aWxsIGJlIGNhbGxlZCByZWdhcmRsZXNzIG9mIHdoZXRoZXJcblx0XHQgKiB0aGlzIHByb21pc2UgaXMgZnVsZmlsbGVkIG9yIHJlamVjdGVkLiAgb25GdWxmaWxsZWRPclJlamVjdGVkIFdJTEwgTk9UXG5cdFx0ICogcmVjZWl2ZSB0aGUgcHJvbWlzZXMnIHZhbHVlIG9yIHJlYXNvbi4gIEFueSByZXR1cm5lZCB2YWx1ZSB3aWxsIGJlIGRpc3JlZ2FyZGVkLlxuXHRcdCAqIG9uRnVsZmlsbGVkT3JSZWplY3RlZCBtYXkgdGhyb3cgb3IgcmV0dXJuIGEgcmVqZWN0ZWQgcHJvbWlzZSB0byBzaWduYWxcblx0XHQgKiBhbiBhZGRpdGlvbmFsIGVycm9yLlxuXHRcdCAqIEBwYXJhbSB7ZnVuY3Rpb259IGhhbmRsZXIgaGFuZGxlciB0byBiZSBjYWxsZWQgcmVnYXJkbGVzcyBvZlxuXHRcdCAqICBmdWxmaWxsbWVudCBvciByZWplY3Rpb25cblx0XHQgKiBAcmV0dXJucyB7UHJvbWlzZX1cblx0XHQgKi9cblx0XHRQcm9taXNlLnByb3RvdHlwZVsnZmluYWxseSddID0gUHJvbWlzZS5wcm90b3R5cGUuZW5zdXJlID0gZnVuY3Rpb24oaGFuZGxlcikge1xuXHRcdFx0aWYodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24oeCkge1xuXHRcdFx0XHRyZXR1cm4gcnVuU2lkZUVmZmVjdChoYW5kbGVyLCB0aGlzLCBpZGVudGl0eSwgeCk7XG5cdFx0XHR9LCBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdHJldHVybiBydW5TaWRlRWZmZWN0KGhhbmRsZXIsIHRoaXMsIHJlamVjdCwgZSk7XG5cdFx0XHR9KTtcblx0XHR9O1xuXG5cdFx0ZnVuY3Rpb24gcnVuU2lkZUVmZmVjdCAoaGFuZGxlciwgdGhpc0FyZywgcHJvcGFnYXRlLCB2YWx1ZSkge1xuXHRcdFx0dmFyIHJlc3VsdCA9IGhhbmRsZXIuY2FsbCh0aGlzQXJnKTtcblx0XHRcdHJldHVybiBtYXliZVRoZW5hYmxlKHJlc3VsdClcblx0XHRcdFx0PyBwcm9wYWdhdGVWYWx1ZShyZXN1bHQsIHByb3BhZ2F0ZSwgdmFsdWUpXG5cdFx0XHRcdDogcHJvcGFnYXRlKHZhbHVlKTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBwcm9wYWdhdGVWYWx1ZSAocmVzdWx0LCBwcm9wYWdhdGUsIHgpIHtcblx0XHRcdHJldHVybiByZXNvbHZlKHJlc3VsdCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHJldHVybiBwcm9wYWdhdGUoeCk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHQvKipcblx0XHQgKiBSZWNvdmVyIGZyb20gYSBmYWlsdXJlIGJ5IHJldHVybmluZyBhIGRlZmF1bHRWYWx1ZS4gIElmIGRlZmF1bHRWYWx1ZVxuXHRcdCAqIGlzIGEgcHJvbWlzZSwgaXQncyBmdWxmaWxsbWVudCB2YWx1ZSB3aWxsIGJlIHVzZWQuICBJZiBkZWZhdWx0VmFsdWUgaXNcblx0XHQgKiBhIHByb21pc2UgdGhhdCByZWplY3RzLCB0aGUgcmV0dXJuZWQgcHJvbWlzZSB3aWxsIHJlamVjdCB3aXRoIHRoZVxuXHRcdCAqIHNhbWUgcmVhc29uLlxuXHRcdCAqIEBwYXJhbSB7Kn0gZGVmYXVsdFZhbHVlXG5cdFx0ICogQHJldHVybnMge1Byb21pc2V9IG5ldyBwcm9taXNlXG5cdFx0ICovXG5cdFx0UHJvbWlzZS5wcm90b3R5cGVbJ2Vsc2UnXSA9IFByb21pc2UucHJvdG90eXBlLm9yRWxzZSA9IGZ1bmN0aW9uKGRlZmF1bHRWYWx1ZSkge1xuXHRcdFx0cmV0dXJuIHRoaXMudGhlbih2b2lkIDAsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gZGVmYXVsdFZhbHVlO1xuXHRcdFx0fSk7XG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIFNob3J0Y3V0IGZvciAudGhlbihmdW5jdGlvbigpIHsgcmV0dXJuIHZhbHVlOyB9KVxuXHRcdCAqIEBwYXJhbSAgeyp9IHZhbHVlXG5cdFx0ICogQHJldHVybiB7UHJvbWlzZX0gYSBwcm9taXNlIHRoYXQ6XG5cdFx0ICogIC0gaXMgZnVsZmlsbGVkIGlmIHZhbHVlIGlzIG5vdCBhIHByb21pc2UsIG9yXG5cdFx0ICogIC0gaWYgdmFsdWUgaXMgYSBwcm9taXNlLCB3aWxsIGZ1bGZpbGwgd2l0aCBpdHMgdmFsdWUsIG9yIHJlamVjdFxuXHRcdCAqICAgIHdpdGggaXRzIHJlYXNvbi5cblx0XHQgKi9cblx0XHRQcm9taXNlLnByb3RvdHlwZVsneWllbGQnXSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy50aGVuKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHR9KTtcblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogUnVucyBhIHNpZGUgZWZmZWN0IHdoZW4gdGhpcyBwcm9taXNlIGZ1bGZpbGxzLCB3aXRob3V0IGNoYW5naW5nIHRoZVxuXHRcdCAqIGZ1bGZpbGxtZW50IHZhbHVlLlxuXHRcdCAqIEBwYXJhbSB7ZnVuY3Rpb259IG9uRnVsZmlsbGVkU2lkZUVmZmVjdFxuXHRcdCAqIEByZXR1cm5zIHtQcm9taXNlfVxuXHRcdCAqL1xuXHRcdFByb21pc2UucHJvdG90eXBlLnRhcCA9IGZ1bmN0aW9uKG9uRnVsZmlsbGVkU2lkZUVmZmVjdCkge1xuXHRcdFx0cmV0dXJuIHRoaXMudGhlbihvbkZ1bGZpbGxlZFNpZGVFZmZlY3QpWyd5aWVsZCddKHRoaXMpO1xuXHRcdH07XG5cblx0XHRyZXR1cm4gUHJvbWlzZTtcblx0fTtcblxuXHRmdW5jdGlvbiByZWplY3RJbnZhbGlkUHJlZGljYXRlKCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ2NhdGNoIHByZWRpY2F0ZSBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGV2YWx1YXRlUHJlZGljYXRlKGUsIHByZWRpY2F0ZSkge1xuXHRcdHJldHVybiBpc0Vycm9yKHByZWRpY2F0ZSkgPyBlIGluc3RhbmNlb2YgcHJlZGljYXRlIDogcHJlZGljYXRlKGUpO1xuXHR9XG5cblx0ZnVuY3Rpb24gaXNFcnJvcihwcmVkaWNhdGUpIHtcblx0XHRyZXR1cm4gcHJlZGljYXRlID09PSBFcnJvclxuXHRcdFx0fHwgKHByZWRpY2F0ZSAhPSBudWxsICYmIHByZWRpY2F0ZS5wcm90b3R5cGUgaW5zdGFuY2VvZiBFcnJvcik7XG5cdH1cblxuXHRmdW5jdGlvbiBtYXliZVRoZW5hYmxlKHgpIHtcblx0XHRyZXR1cm4gKHR5cGVvZiB4ID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgeCA9PT0gJ2Z1bmN0aW9uJykgJiYgeCAhPT0gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIGlkZW50aXR5KHgpIHtcblx0XHRyZXR1cm4geDtcblx0fVxuXG59KTtcbn0odHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lIDogZnVuY3Rpb24oZmFjdG9yeSkgeyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTsgfSkpO1xuIiwiLyoqIEBsaWNlbnNlIE1JVCBMaWNlbnNlIChjKSBjb3B5cmlnaHQgMjAxMC0yMDE0IG9yaWdpbmFsIGF1dGhvciBvciBhdXRob3JzICovXG4vKiogQGF1dGhvciBCcmlhbiBDYXZhbGllciAqL1xuLyoqIEBhdXRob3IgSm9obiBIYW5uICovXG4vKiogQGF1dGhvciBKZWZmIEVzY2FsYW50ZSAqL1xuXG4oZnVuY3Rpb24oZGVmaW5lKSB7ICd1c2Ugc3RyaWN0JztcbmRlZmluZShmdW5jdGlvbigpIHtcblxuXHRyZXR1cm4gZnVuY3Rpb24gZm9sZChQcm9taXNlKSB7XG5cblx0XHRQcm9taXNlLnByb3RvdHlwZS5mb2xkID0gZnVuY3Rpb24oZiwgeikge1xuXHRcdFx0dmFyIHByb21pc2UgPSB0aGlzLl9iZWdldCgpO1xuXG5cdFx0XHR0aGlzLl9oYW5kbGVyLmZvbGQoZnVuY3Rpb24oeiwgeCwgdG8pIHtcblx0XHRcdFx0UHJvbWlzZS5faGFuZGxlcih6KS5mb2xkKGZ1bmN0aW9uKHgsIHosIHRvKSB7XG5cdFx0XHRcdFx0dG8ucmVzb2x2ZShmLmNhbGwodGhpcywgeiwgeCkpO1xuXHRcdFx0XHR9LCB4LCB0aGlzLCB0byk7XG5cdFx0XHR9LCB6LCBwcm9taXNlLl9oYW5kbGVyLnJlY2VpdmVyLCBwcm9taXNlLl9oYW5kbGVyKTtcblxuXHRcdFx0cmV0dXJuIHByb21pc2U7XG5cdFx0fTtcblxuXHRcdHJldHVybiBQcm9taXNlO1xuXHR9O1xuXG59KTtcbn0odHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lIDogZnVuY3Rpb24oZmFjdG9yeSkgeyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTsgfSkpO1xuIiwiLyoqIEBsaWNlbnNlIE1JVCBMaWNlbnNlIChjKSBjb3B5cmlnaHQgMjAxMC0yMDE0IG9yaWdpbmFsIGF1dGhvciBvciBhdXRob3JzICovXG4vKiogQGF1dGhvciBCcmlhbiBDYXZhbGllciAqL1xuLyoqIEBhdXRob3IgSm9obiBIYW5uICovXG5cbihmdW5jdGlvbihkZWZpbmUpIHsgJ3VzZSBzdHJpY3QnO1xuZGVmaW5lKGZ1bmN0aW9uKHJlcXVpcmUpIHtcblxuXHR2YXIgaW5zcGVjdCA9IHJlcXVpcmUoJy4uL3N0YXRlJykuaW5zcGVjdDtcblxuXHRyZXR1cm4gZnVuY3Rpb24gaW5zcGVjdGlvbihQcm9taXNlKSB7XG5cblx0XHRQcm9taXNlLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gaW5zcGVjdChQcm9taXNlLl9oYW5kbGVyKHRoaXMpKTtcblx0XHR9O1xuXG5cdFx0cmV0dXJuIFByb21pc2U7XG5cdH07XG5cbn0pO1xufSh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUgOiBmdW5jdGlvbihmYWN0b3J5KSB7IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKTsgfSkpO1xuIiwiLyoqIEBsaWNlbnNlIE1JVCBMaWNlbnNlIChjKSBjb3B5cmlnaHQgMjAxMC0yMDE0IG9yaWdpbmFsIGF1dGhvciBvciBhdXRob3JzICovXG4vKiogQGF1dGhvciBCcmlhbiBDYXZhbGllciAqL1xuLyoqIEBhdXRob3IgSm9obiBIYW5uICovXG5cbihmdW5jdGlvbihkZWZpbmUpIHsgJ3VzZSBzdHJpY3QnO1xuZGVmaW5lKGZ1bmN0aW9uKCkge1xuXG5cdHJldHVybiBmdW5jdGlvbiBnZW5lcmF0ZShQcm9taXNlKSB7XG5cblx0XHR2YXIgcmVzb2x2ZSA9IFByb21pc2UucmVzb2x2ZTtcblxuXHRcdFByb21pc2UuaXRlcmF0ZSA9IGl0ZXJhdGU7XG5cdFx0UHJvbWlzZS51bmZvbGQgPSB1bmZvbGQ7XG5cblx0XHRyZXR1cm4gUHJvbWlzZTtcblxuXHRcdC8qKlxuXHRcdCAqIEBkZXByZWNhdGVkIFVzZSBnaXRodWIuY29tL2N1am9qcy9tb3N0IHN0cmVhbXMgYW5kIG1vc3QuaXRlcmF0ZVxuXHRcdCAqIEdlbmVyYXRlIGEgKHBvdGVudGlhbGx5IGluZmluaXRlKSBzdHJlYW0gb2YgcHJvbWlzZWQgdmFsdWVzOlxuXHRcdCAqIHgsIGYoeCksIGYoZih4KSksIGV0Yy4gdW50aWwgY29uZGl0aW9uKHgpIHJldHVybnMgdHJ1ZVxuXHRcdCAqIEBwYXJhbSB7ZnVuY3Rpb259IGYgZnVuY3Rpb24gdG8gZ2VuZXJhdGUgYSBuZXcgeCBmcm9tIHRoZSBwcmV2aW91cyB4XG5cdFx0ICogQHBhcmFtIHtmdW5jdGlvbn0gY29uZGl0aW9uIGZ1bmN0aW9uIHRoYXQsIGdpdmVuIHRoZSBjdXJyZW50IHgsIHJldHVybnNcblx0XHQgKiAgdHJ1dGh5IHdoZW4gdGhlIGl0ZXJhdGUgc2hvdWxkIHN0b3Bcblx0XHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSBoYW5kbGVyIGZ1bmN0aW9uIHRvIGhhbmRsZSB0aGUgdmFsdWUgcHJvZHVjZWQgYnkgZlxuXHRcdCAqIEBwYXJhbSB7KnxQcm9taXNlfSB4IHN0YXJ0aW5nIHZhbHVlLCBtYXkgYmUgYSBwcm9taXNlXG5cdFx0ICogQHJldHVybiB7UHJvbWlzZX0gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBjYWxsIHRvIGYgYmVmb3JlXG5cdFx0ICogIGNvbmRpdGlvbiByZXR1cm5zIHRydWVcblx0XHQgKi9cblx0XHRmdW5jdGlvbiBpdGVyYXRlKGYsIGNvbmRpdGlvbiwgaGFuZGxlciwgeCkge1xuXHRcdFx0cmV0dXJuIHVuZm9sZChmdW5jdGlvbih4KSB7XG5cdFx0XHRcdHJldHVybiBbeCwgZih4KV07XG5cdFx0XHR9LCBjb25kaXRpb24sIGhhbmRsZXIsIHgpO1xuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIEBkZXByZWNhdGVkIFVzZSBnaXRodWIuY29tL2N1am9qcy9tb3N0IHN0cmVhbXMgYW5kIG1vc3QudW5mb2xkXG5cdFx0ICogR2VuZXJhdGUgYSAocG90ZW50aWFsbHkgaW5maW5pdGUpIHN0cmVhbSBvZiBwcm9taXNlZCB2YWx1ZXNcblx0XHQgKiBieSBhcHBseWluZyBoYW5kbGVyKGdlbmVyYXRvcihzZWVkKSkgaXRlcmF0aXZlbHkgdW50aWxcblx0XHQgKiBjb25kaXRpb24oc2VlZCkgcmV0dXJucyB0cnVlLlxuXHRcdCAqIEBwYXJhbSB7ZnVuY3Rpb259IHVuc3Bvb2wgZnVuY3Rpb24gdGhhdCBnZW5lcmF0ZXMgYSBbdmFsdWUsIG5ld1NlZWRdXG5cdFx0ICogIGdpdmVuIGEgc2VlZC5cblx0XHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb25kaXRpb24gZnVuY3Rpb24gdGhhdCwgZ2l2ZW4gdGhlIGN1cnJlbnQgc2VlZCwgcmV0dXJuc1xuXHRcdCAqICB0cnV0aHkgd2hlbiB0aGUgdW5mb2xkIHNob3VsZCBzdG9wXG5cdFx0ICogQHBhcmFtIHtmdW5jdGlvbn0gaGFuZGxlciBmdW5jdGlvbiB0byBoYW5kbGUgdGhlIHZhbHVlIHByb2R1Y2VkIGJ5IHVuc3Bvb2xcblx0XHQgKiBAcGFyYW0geCB7KnxQcm9taXNlfSBzdGFydGluZyB2YWx1ZSwgbWF5IGJlIGEgcHJvbWlzZVxuXHRcdCAqIEByZXR1cm4ge1Byb21pc2V9IHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgdmFsdWUgcHJvZHVjZWQgYnkgdW5zcG9vbCBiZWZvcmVcblx0XHQgKiAgY29uZGl0aW9uIHJldHVybnMgdHJ1ZVxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIHVuZm9sZCh1bnNwb29sLCBjb25kaXRpb24sIGhhbmRsZXIsIHgpIHtcblx0XHRcdHJldHVybiByZXNvbHZlKHgpLnRoZW4oZnVuY3Rpb24oc2VlZCkge1xuXHRcdFx0XHRyZXR1cm4gcmVzb2x2ZShjb25kaXRpb24oc2VlZCkpLnRoZW4oZnVuY3Rpb24oZG9uZSkge1xuXHRcdFx0XHRcdHJldHVybiBkb25lID8gc2VlZCA6IHJlc29sdmUodW5zcG9vbChzZWVkKSkuc3ByZWFkKG5leHQpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXG5cdFx0XHRmdW5jdGlvbiBuZXh0KGl0ZW0sIG5ld1NlZWQpIHtcblx0XHRcdFx0cmV0dXJuIHJlc29sdmUoaGFuZGxlcihpdGVtKSkudGhlbihmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gdW5mb2xkKHVuc3Bvb2wsIGNvbmRpdGlvbiwgaGFuZGxlciwgbmV3U2VlZCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxufSk7XG59KHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZSA6IGZ1bmN0aW9uKGZhY3RvcnkpIHsgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7IH0pKTtcbiIsIi8qKiBAbGljZW5zZSBNSVQgTGljZW5zZSAoYykgY29weXJpZ2h0IDIwMTAtMjAxNCBvcmlnaW5hbCBhdXRob3Igb3IgYXV0aG9ycyAqL1xuLyoqIEBhdXRob3IgQnJpYW4gQ2F2YWxpZXIgKi9cbi8qKiBAYXV0aG9yIEpvaG4gSGFubiAqL1xuXG4oZnVuY3Rpb24oZGVmaW5lKSB7ICd1c2Ugc3RyaWN0JztcbmRlZmluZShmdW5jdGlvbigpIHtcblxuXHRyZXR1cm4gZnVuY3Rpb24gcHJvZ3Jlc3MoUHJvbWlzZSkge1xuXG5cdFx0LyoqXG5cdFx0ICogQGRlcHJlY2F0ZWRcblx0XHQgKiBSZWdpc3RlciBhIHByb2dyZXNzIGhhbmRsZXIgZm9yIHRoaXMgcHJvbWlzZVxuXHRcdCAqIEBwYXJhbSB7ZnVuY3Rpb259IG9uUHJvZ3Jlc3Ncblx0XHQgKiBAcmV0dXJucyB7UHJvbWlzZX1cblx0XHQgKi9cblx0XHRQcm9taXNlLnByb3RvdHlwZS5wcm9ncmVzcyA9IGZ1bmN0aW9uKG9uUHJvZ3Jlc3MpIHtcblx0XHRcdHJldHVybiB0aGlzLnRoZW4odm9pZCAwLCB2b2lkIDAsIG9uUHJvZ3Jlc3MpO1xuXHRcdH07XG5cblx0XHRyZXR1cm4gUHJvbWlzZTtcblx0fTtcblxufSk7XG59KHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZSA6IGZ1bmN0aW9uKGZhY3RvcnkpIHsgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7IH0pKTtcbiIsIi8qKiBAbGljZW5zZSBNSVQgTGljZW5zZSAoYykgY29weXJpZ2h0IDIwMTAtMjAxNCBvcmlnaW5hbCBhdXRob3Igb3IgYXV0aG9ycyAqL1xuLyoqIEBhdXRob3IgQnJpYW4gQ2F2YWxpZXIgKi9cbi8qKiBAYXV0aG9yIEpvaG4gSGFubiAqL1xuXG4oZnVuY3Rpb24oZGVmaW5lKSB7ICd1c2Ugc3RyaWN0JztcbmRlZmluZShmdW5jdGlvbihyZXF1aXJlKSB7XG5cblx0dmFyIGVudiA9IHJlcXVpcmUoJy4uL2VudicpO1xuXHR2YXIgVGltZW91dEVycm9yID0gcmVxdWlyZSgnLi4vVGltZW91dEVycm9yJyk7XG5cblx0ZnVuY3Rpb24gc2V0VGltZW91dChmLCBtcywgeCwgeSkge1xuXHRcdHJldHVybiBlbnYuc2V0VGltZXIoZnVuY3Rpb24oKSB7XG5cdFx0XHRmKHgsIHksIG1zKTtcblx0XHR9LCBtcyk7XG5cdH1cblxuXHRyZXR1cm4gZnVuY3Rpb24gdGltZWQoUHJvbWlzZSkge1xuXHRcdC8qKlxuXHRcdCAqIFJldHVybiBhIG5ldyBwcm9taXNlIHdob3NlIGZ1bGZpbGxtZW50IHZhbHVlIGlzIHJldmVhbGVkIG9ubHlcblx0XHQgKiBhZnRlciBtcyBtaWxsaXNlY29uZHNcblx0XHQgKiBAcGFyYW0ge251bWJlcn0gbXMgbWlsbGlzZWNvbmRzXG5cdFx0ICogQHJldHVybnMge1Byb21pc2V9XG5cdFx0ICovXG5cdFx0UHJvbWlzZS5wcm90b3R5cGUuZGVsYXkgPSBmdW5jdGlvbihtcykge1xuXHRcdFx0dmFyIHAgPSB0aGlzLl9iZWdldCgpO1xuXHRcdFx0dGhpcy5faGFuZGxlci5mb2xkKGhhbmRsZURlbGF5LCBtcywgdm9pZCAwLCBwLl9oYW5kbGVyKTtcblx0XHRcdHJldHVybiBwO1xuXHRcdH07XG5cblx0XHRmdW5jdGlvbiBoYW5kbGVEZWxheShtcywgeCwgaCkge1xuXHRcdFx0c2V0VGltZW91dChyZXNvbHZlRGVsYXksIG1zLCB4LCBoKTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiByZXNvbHZlRGVsYXkoeCwgaCkge1xuXHRcdFx0aC5yZXNvbHZlKHgpO1xuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIFJldHVybiBhIG5ldyBwcm9taXNlIHRoYXQgcmVqZWN0cyBhZnRlciBtcyBtaWxsaXNlY29uZHMgdW5sZXNzXG5cdFx0ICogdGhpcyBwcm9taXNlIGZ1bGZpbGxzIGVhcmxpZXIsIGluIHdoaWNoIGNhc2UgdGhlIHJldHVybmVkIHByb21pc2Vcblx0XHQgKiBmdWxmaWxscyB3aXRoIHRoZSBzYW1lIHZhbHVlLlxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSBtcyBtaWxsaXNlY29uZHNcblx0XHQgKiBAcGFyYW0ge0Vycm9yfCo9fSByZWFzb24gb3B0aW9uYWwgcmVqZWN0aW9uIHJlYXNvbiB0byB1c2UsIGRlZmF1bHRzXG5cdFx0ICogICB0byBhIFRpbWVvdXRFcnJvciBpZiBub3QgcHJvdmlkZWRcblx0XHQgKiBAcmV0dXJucyB7UHJvbWlzZX1cblx0XHQgKi9cblx0XHRQcm9taXNlLnByb3RvdHlwZS50aW1lb3V0ID0gZnVuY3Rpb24obXMsIHJlYXNvbikge1xuXHRcdFx0dmFyIHAgPSB0aGlzLl9iZWdldCgpO1xuXHRcdFx0dmFyIGggPSBwLl9oYW5kbGVyO1xuXG5cdFx0XHR2YXIgdCA9IHNldFRpbWVvdXQob25UaW1lb3V0LCBtcywgcmVhc29uLCBwLl9oYW5kbGVyKTtcblxuXHRcdFx0dGhpcy5faGFuZGxlci52aXNpdChoLFxuXHRcdFx0XHRmdW5jdGlvbiBvbkZ1bGZpbGwoeCkge1xuXHRcdFx0XHRcdGVudi5jbGVhclRpbWVyKHQpO1xuXHRcdFx0XHRcdHRoaXMucmVzb2x2ZSh4KTsgLy8gdGhpcyA9IGhcblx0XHRcdFx0fSxcblx0XHRcdFx0ZnVuY3Rpb24gb25SZWplY3QoeCkge1xuXHRcdFx0XHRcdGVudi5jbGVhclRpbWVyKHQpO1xuXHRcdFx0XHRcdHRoaXMucmVqZWN0KHgpOyAvLyB0aGlzID0gaFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRoLm5vdGlmeSk7XG5cblx0XHRcdHJldHVybiBwO1xuXHRcdH07XG5cblx0XHRmdW5jdGlvbiBvblRpbWVvdXQocmVhc29uLCBoLCBtcykge1xuXHRcdFx0dmFyIGUgPSB0eXBlb2YgcmVhc29uID09PSAndW5kZWZpbmVkJ1xuXHRcdFx0XHQ/IG5ldyBUaW1lb3V0RXJyb3IoJ3RpbWVkIG91dCBhZnRlciAnICsgbXMgKyAnbXMnKVxuXHRcdFx0XHQ6IHJlYXNvbjtcblx0XHRcdGgucmVqZWN0KGUpO1xuXHRcdH1cblxuXHRcdHJldHVybiBQcm9taXNlO1xuXHR9O1xuXG59KTtcbn0odHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lIDogZnVuY3Rpb24oZmFjdG9yeSkgeyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZSk7IH0pKTtcbiIsIi8qKiBAbGljZW5zZSBNSVQgTGljZW5zZSAoYykgY29weXJpZ2h0IDIwMTAtMjAxNCBvcmlnaW5hbCBhdXRob3Igb3IgYXV0aG9ycyAqL1xuLyoqIEBhdXRob3IgQnJpYW4gQ2F2YWxpZXIgKi9cbi8qKiBAYXV0aG9yIEpvaG4gSGFubiAqL1xuXG4oZnVuY3Rpb24oZGVmaW5lKSB7ICd1c2Ugc3RyaWN0JztcbmRlZmluZShmdW5jdGlvbihyZXF1aXJlKSB7XG5cblx0dmFyIHNldFRpbWVyID0gcmVxdWlyZSgnLi4vZW52Jykuc2V0VGltZXI7XG5cdHZhciBmb3JtYXQgPSByZXF1aXJlKCcuLi9mb3JtYXQnKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdW5oYW5kbGVkUmVqZWN0aW9uKFByb21pc2UpIHtcblxuXHRcdHZhciBsb2dFcnJvciA9IG5vb3A7XG5cdFx0dmFyIGxvZ0luZm8gPSBub29wO1xuXHRcdHZhciBsb2NhbENvbnNvbGU7XG5cblx0XHRpZih0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdC8vIEFsaWFzIGNvbnNvbGUgdG8gcHJldmVudCB0aGluZ3MgbGlrZSB1Z2xpZnkncyBkcm9wX2NvbnNvbGUgb3B0aW9uIGZyb21cblx0XHRcdC8vIHJlbW92aW5nIGNvbnNvbGUubG9nL2Vycm9yLiBVbmhhbmRsZWQgcmVqZWN0aW9ucyBmYWxsIGludG8gdGhlIHNhbWVcblx0XHRcdC8vIGNhdGVnb3J5IGFzIHVuY2F1Z2h0IGV4Y2VwdGlvbnMsIGFuZCBidWlsZCB0b29scyBzaG91bGRuJ3Qgc2lsZW5jZSB0aGVtLlxuXHRcdFx0bG9jYWxDb25zb2xlID0gY29uc29sZTtcblx0XHRcdGxvZ0Vycm9yID0gdHlwZW9mIGxvY2FsQ29uc29sZS5lcnJvciAhPT0gJ3VuZGVmaW5lZCdcblx0XHRcdFx0PyBmdW5jdGlvbiAoZSkgeyBsb2NhbENvbnNvbGUuZXJyb3IoZSk7IH1cblx0XHRcdFx0OiBmdW5jdGlvbiAoZSkgeyBsb2NhbENvbnNvbGUubG9nKGUpOyB9O1xuXG5cdFx0XHRsb2dJbmZvID0gdHlwZW9mIGxvY2FsQ29uc29sZS5pbmZvICE9PSAndW5kZWZpbmVkJ1xuXHRcdFx0XHQ/IGZ1bmN0aW9uIChlKSB7IGxvY2FsQ29uc29sZS5pbmZvKGUpOyB9XG5cdFx0XHRcdDogZnVuY3Rpb24gKGUpIHsgbG9jYWxDb25zb2xlLmxvZyhlKTsgfTtcblx0XHR9XG5cblx0XHRQcm9taXNlLm9uUG90ZW50aWFsbHlVbmhhbmRsZWRSZWplY3Rpb24gPSBmdW5jdGlvbihyZWplY3Rpb24pIHtcblx0XHRcdGVucXVldWUocmVwb3J0LCByZWplY3Rpb24pO1xuXHRcdH07XG5cblx0XHRQcm9taXNlLm9uUG90ZW50aWFsbHlVbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVkID0gZnVuY3Rpb24ocmVqZWN0aW9uKSB7XG5cdFx0XHRlbnF1ZXVlKHVucmVwb3J0LCByZWplY3Rpb24pO1xuXHRcdH07XG5cblx0XHRQcm9taXNlLm9uRmF0YWxSZWplY3Rpb24gPSBmdW5jdGlvbihyZWplY3Rpb24pIHtcblx0XHRcdGVucXVldWUodGhyb3dpdCwgcmVqZWN0aW9uLnZhbHVlKTtcblx0XHR9O1xuXG5cdFx0dmFyIHRhc2tzID0gW107XG5cdFx0dmFyIHJlcG9ydGVkID0gW107XG5cdFx0dmFyIHJ1bm5pbmcgPSBudWxsO1xuXG5cdFx0ZnVuY3Rpb24gcmVwb3J0KHIpIHtcblx0XHRcdGlmKCFyLmhhbmRsZWQpIHtcblx0XHRcdFx0cmVwb3J0ZWQucHVzaChyKTtcblx0XHRcdFx0bG9nRXJyb3IoJ1BvdGVudGlhbGx5IHVuaGFuZGxlZCByZWplY3Rpb24gWycgKyByLmlkICsgJ10gJyArIGZvcm1hdC5mb3JtYXRFcnJvcihyLnZhbHVlKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gdW5yZXBvcnQocikge1xuXHRcdFx0dmFyIGkgPSByZXBvcnRlZC5pbmRleE9mKHIpO1xuXHRcdFx0aWYoaSA+PSAwKSB7XG5cdFx0XHRcdHJlcG9ydGVkLnNwbGljZShpLCAxKTtcblx0XHRcdFx0bG9nSW5mbygnSGFuZGxlZCBwcmV2aW91cyByZWplY3Rpb24gWycgKyByLmlkICsgJ10gJyArIGZvcm1hdC5mb3JtYXRPYmplY3Qoci52YWx1ZSkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGVucXVldWUoZiwgeCkge1xuXHRcdFx0dGFza3MucHVzaChmLCB4KTtcblx0XHRcdGlmKHJ1bm5pbmcgPT09IG51bGwpIHtcblx0XHRcdFx0cnVubmluZyA9IHNldFRpbWVyKGZsdXNoLCAwKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBmbHVzaCgpIHtcblx0XHRcdHJ1bm5pbmcgPSBudWxsO1xuXHRcdFx0d2hpbGUodGFza3MubGVuZ3RoID4gMCkge1xuXHRcdFx0XHR0YXNrcy5zaGlmdCgpKHRhc2tzLnNoaWZ0KCkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBQcm9taXNlO1xuXHR9O1xuXG5cdGZ1bmN0aW9uIHRocm93aXQoZSkge1xuXHRcdHRocm93IGU7XG5cdH1cblxuXHRmdW5jdGlvbiBub29wKCkge31cblxufSk7XG59KHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZSA6IGZ1bmN0aW9uKGZhY3RvcnkpIHsgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUpOyB9KSk7XG4iLCIvKiogQGxpY2Vuc2UgTUlUIExpY2Vuc2UgKGMpIGNvcHlyaWdodCAyMDEwLTIwMTQgb3JpZ2luYWwgYXV0aG9yIG9yIGF1dGhvcnMgKi9cbi8qKiBAYXV0aG9yIEJyaWFuIENhdmFsaWVyICovXG4vKiogQGF1dGhvciBKb2huIEhhbm4gKi9cblxuKGZ1bmN0aW9uKGRlZmluZSkgeyAndXNlIHN0cmljdCc7XG5kZWZpbmUoZnVuY3Rpb24oKSB7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIGFkZFdpdGgoUHJvbWlzZSkge1xuXHRcdC8qKlxuXHRcdCAqIFJldHVybnMgYSBwcm9taXNlIHdob3NlIGhhbmRsZXJzIHdpbGwgYmUgY2FsbGVkIHdpdGggYHRoaXNgIHNldCB0b1xuXHRcdCAqIHRoZSBzdXBwbGllZCByZWNlaXZlci4gIFN1YnNlcXVlbnQgcHJvbWlzZXMgZGVyaXZlZCBmcm9tIHRoZVxuXHRcdCAqIHJldHVybmVkIHByb21pc2Ugd2lsbCBhbHNvIGhhdmUgdGhlaXIgaGFuZGxlcnMgY2FsbGVkIHdpdGggcmVjZWl2ZXJcblx0XHQgKiBhcyBgdGhpc2AuIENhbGxpbmcgYHdpdGhgIHdpdGggdW5kZWZpbmVkIG9yIG5vIGFyZ3VtZW50cyB3aWxsIHJldHVyblxuXHRcdCAqIGEgcHJvbWlzZSB3aG9zZSBoYW5kbGVycyB3aWxsIGFnYWluIGJlIGNhbGxlZCBpbiB0aGUgdXN1YWwgUHJvbWlzZXMvQStcblx0XHQgKiB3YXkgKG5vIGB0aGlzYCkgdGh1cyBzYWZlbHkgdW5kb2luZyBhbnkgcHJldmlvdXMgYHdpdGhgIGluIHRoZVxuXHRcdCAqIHByb21pc2UgY2hhaW4uXG5cdFx0ICpcblx0XHQgKiBXQVJOSU5HOiBQcm9taXNlcyByZXR1cm5lZCBmcm9tIGB3aXRoYC9gd2l0aFRoaXNgIGFyZSBOT1QgUHJvbWlzZXMvQStcblx0XHQgKiBjb21wbGlhbnQsIHNwZWNpZmljYWxseSB2aW9sYXRpbmcgMi4yLjUgKGh0dHA6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNDEpXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge29iamVjdH0gcmVjZWl2ZXIgYHRoaXNgIHZhbHVlIGZvciBhbGwgaGFuZGxlcnMgYXR0YWNoZWQgdG9cblx0XHQgKiAgdGhlIHJldHVybmVkIHByb21pc2UuXG5cdFx0ICogQHJldHVybnMge1Byb21pc2V9XG5cdFx0ICovXG5cdFx0UHJvbWlzZS5wcm90b3R5cGVbJ3dpdGgnXSA9IFByb21pc2UucHJvdG90eXBlLndpdGhUaGlzID0gZnVuY3Rpb24ocmVjZWl2ZXIpIHtcblx0XHRcdHZhciBwID0gdGhpcy5fYmVnZXQoKTtcblx0XHRcdHZhciBjaGlsZCA9IHAuX2hhbmRsZXI7XG5cdFx0XHRjaGlsZC5yZWNlaXZlciA9IHJlY2VpdmVyO1xuXHRcdFx0dGhpcy5faGFuZGxlci5jaGFpbihjaGlsZCwgcmVjZWl2ZXIpO1xuXHRcdFx0cmV0dXJuIHA7XG5cdFx0fTtcblxuXHRcdHJldHVybiBQcm9taXNlO1xuXHR9O1xuXG59KTtcbn0odHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lIDogZnVuY3Rpb24oZmFjdG9yeSkgeyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTsgfSkpO1xuXG4iLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqIEBsaWNlbnNlIE1JVCBMaWNlbnNlIChjKSBjb3B5cmlnaHQgMjAxMC0yMDE0IG9yaWdpbmFsIGF1dGhvciBvciBhdXRob3JzICovXG4vKiogQGF1dGhvciBCcmlhbiBDYXZhbGllciAqL1xuLyoqIEBhdXRob3IgSm9obiBIYW5uICovXG5cbi8qZ2xvYmFsIHByb2Nlc3MsZG9jdW1lbnQsc2V0VGltZW91dCxjbGVhclRpbWVvdXQsTXV0YXRpb25PYnNlcnZlcixXZWJLaXRNdXRhdGlvbk9ic2VydmVyKi9cbihmdW5jdGlvbihkZWZpbmUpIHsgJ3VzZSBzdHJpY3QnO1xuZGVmaW5lKGZ1bmN0aW9uKHJlcXVpcmUpIHtcblx0Lypqc2hpbnQgbWF4Y29tcGxleGl0eTo2Ki9cblxuXHQvLyBTbmlmZiBcImJlc3RcIiBhc3luYyBzY2hlZHVsaW5nIG9wdGlvblxuXHQvLyBQcmVmZXIgcHJvY2Vzcy5uZXh0VGljayBvciBNdXRhdGlvbk9ic2VydmVyLCB0aGVuIGNoZWNrIGZvclxuXHQvLyBzZXRUaW1lb3V0LCBhbmQgZmluYWxseSB2ZXJ0eCwgc2luY2UgaXRzIHRoZSBvbmx5IGVudiB0aGF0IGRvZXNuJ3Rcblx0Ly8gaGF2ZSBzZXRUaW1lb3V0XG5cblx0dmFyIE11dGF0aW9uT2JzO1xuXHR2YXIgY2FwdHVyZWRTZXRUaW1lb3V0ID0gdHlwZW9mIHNldFRpbWVvdXQgIT09ICd1bmRlZmluZWQnICYmIHNldFRpbWVvdXQ7XG5cblx0Ly8gRGVmYXVsdCBlbnZcblx0dmFyIHNldFRpbWVyID0gZnVuY3Rpb24oZiwgbXMpIHsgcmV0dXJuIHNldFRpbWVvdXQoZiwgbXMpOyB9O1xuXHR2YXIgY2xlYXJUaW1lciA9IGZ1bmN0aW9uKHQpIHsgcmV0dXJuIGNsZWFyVGltZW91dCh0KTsgfTtcblx0dmFyIGFzYXAgPSBmdW5jdGlvbiAoZikgeyByZXR1cm4gY2FwdHVyZWRTZXRUaW1lb3V0KGYsIDApOyB9O1xuXG5cdC8vIERldGVjdCBzcGVjaWZpYyBlbnZcblx0aWYgKGlzTm9kZSgpKSB7IC8vIE5vZGVcblx0XHRhc2FwID0gZnVuY3Rpb24gKGYpIHsgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZik7IH07XG5cblx0fSBlbHNlIGlmIChNdXRhdGlvbk9icyA9IGhhc011dGF0aW9uT2JzZXJ2ZXIoKSkgeyAvLyBNb2Rlcm4gYnJvd3NlclxuXHRcdGFzYXAgPSBpbml0TXV0YXRpb25PYnNlcnZlcihNdXRhdGlvbk9icyk7XG5cblx0fSBlbHNlIGlmICghY2FwdHVyZWRTZXRUaW1lb3V0KSB7IC8vIHZlcnQueFxuXHRcdHZhciB2ZXJ0eFJlcXVpcmUgPSByZXF1aXJlO1xuXHRcdHZhciB2ZXJ0eCA9IHZlcnR4UmVxdWlyZSgndmVydHgnKTtcblx0XHRzZXRUaW1lciA9IGZ1bmN0aW9uIChmLCBtcykgeyByZXR1cm4gdmVydHguc2V0VGltZXIobXMsIGYpOyB9O1xuXHRcdGNsZWFyVGltZXIgPSB2ZXJ0eC5jYW5jZWxUaW1lcjtcblx0XHRhc2FwID0gdmVydHgucnVuT25Mb29wIHx8IHZlcnR4LnJ1bk9uQ29udGV4dDtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0c2V0VGltZXI6IHNldFRpbWVyLFxuXHRcdGNsZWFyVGltZXI6IGNsZWFyVGltZXIsXG5cdFx0YXNhcDogYXNhcFxuXHR9O1xuXG5cdGZ1bmN0aW9uIGlzTm9kZSAoKSB7XG5cdFx0cmV0dXJuIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJlxuXHRcdFx0T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXSc7XG5cdH1cblxuXHRmdW5jdGlvbiBoYXNNdXRhdGlvbk9ic2VydmVyICgpIHtcblx0XHRyZXR1cm4gKHR5cGVvZiBNdXRhdGlvbk9ic2VydmVyID09PSAnZnVuY3Rpb24nICYmIE11dGF0aW9uT2JzZXJ2ZXIpIHx8XG5cdFx0XHQodHlwZW9mIFdlYktpdE11dGF0aW9uT2JzZXJ2ZXIgPT09ICdmdW5jdGlvbicgJiYgV2ViS2l0TXV0YXRpb25PYnNlcnZlcik7XG5cdH1cblxuXHRmdW5jdGlvbiBpbml0TXV0YXRpb25PYnNlcnZlcihNdXRhdGlvbk9ic2VydmVyKSB7XG5cdFx0dmFyIHNjaGVkdWxlZDtcblx0XHR2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcblx0XHR2YXIgbyA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKHJ1bik7XG5cdFx0by5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTtcblxuXHRcdGZ1bmN0aW9uIHJ1bigpIHtcblx0XHRcdHZhciBmID0gc2NoZWR1bGVkO1xuXHRcdFx0c2NoZWR1bGVkID0gdm9pZCAwO1xuXHRcdFx0ZigpO1xuXHRcdH1cblxuXHRcdHZhciBpID0gMDtcblx0XHRyZXR1cm4gZnVuY3Rpb24gKGYpIHtcblx0XHRcdHNjaGVkdWxlZCA9IGY7XG5cdFx0XHRub2RlLmRhdGEgPSAoaSBePSAxKTtcblx0XHR9O1xuXHR9XG59KTtcbn0odHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lIDogZnVuY3Rpb24oZmFjdG9yeSkgeyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZSk7IH0pKTtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5M2FHVnVMMnhwWWk5bGJuWXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLaUJBYkdsalpXNXpaU0JOU1ZRZ1RHbGpaVzV6WlNBb1l5a2dZMjl3ZVhKcFoyaDBJREl3TVRBdE1qQXhOQ0J2Y21sbmFXNWhiQ0JoZFhSb2IzSWdiM0lnWVhWMGFHOXljeUFxTDF4dUx5b3FJRUJoZFhSb2IzSWdRbkpwWVc0Z1EyRjJZV3hwWlhJZ0tpOWNiaThxS2lCQVlYVjBhRzl5SUVwdmFHNGdTR0Z1YmlBcUwxeHVYRzR2S21kc2IySmhiQ0J3Y205alpYTnpMR1J2WTNWdFpXNTBMSE5sZEZScGJXVnZkWFFzWTJ4bFlYSlVhVzFsYjNWMExFMTFkR0YwYVc5dVQySnpaWEoyWlhJc1YyVmlTMmwwVFhWMFlYUnBiMjVQWW5ObGNuWmxjaW92WEc0b1puVnVZM1JwYjI0b1pHVm1hVzVsS1NCN0lDZDFjMlVnYzNSeWFXTjBKenRjYm1SbFptbHVaU2htZFc1amRHbHZiaWh5WlhGMWFYSmxLU0I3WEc1Y2RDOHFhbk5vYVc1MElHMWhlR052YlhCc1pYaHBkSGs2TmlvdlhHNWNibHgwTHk4Z1UyNXBabVlnWENKaVpYTjBYQ0lnWVhONWJtTWdjMk5vWldSMWJHbHVaeUJ2Y0hScGIyNWNibHgwTHk4Z1VISmxabVZ5SUhCeWIyTmxjM011Ym1WNGRGUnBZMnNnYjNJZ1RYVjBZWFJwYjI1UFluTmxjblpsY2l3Z2RHaGxiaUJqYUdWamF5Qm1iM0pjYmx4MEx5OGdjMlYwVkdsdFpXOTFkQ3dnWVc1a0lHWnBibUZzYkhrZ2RtVnlkSGdzSUhOcGJtTmxJR2wwY3lCMGFHVWdiMjVzZVNCbGJuWWdkR2hoZENCa2IyVnpiaWQwWEc1Y2RDOHZJR2hoZG1VZ2MyVjBWR2x0Wlc5MWRGeHVYRzVjZEhaaGNpQk5kWFJoZEdsdmJrOWljenRjYmx4MGRtRnlJR05oY0hSMWNtVmtVMlYwVkdsdFpXOTFkQ0E5SUhSNWNHVnZaaUJ6WlhSVWFXMWxiM1YwSUNFOVBTQW5kVzVrWldacGJtVmtKeUFtSmlCelpYUlVhVzFsYjNWME8xeHVYRzVjZEM4dklFUmxabUYxYkhRZ1pXNTJYRzVjZEhaaGNpQnpaWFJVYVcxbGNpQTlJR1oxYm1OMGFXOXVLR1lzSUcxektTQjdJSEpsZEhWeWJpQnpaWFJVYVcxbGIzVjBLR1lzSUcxektUc2dmVHRjYmx4MGRtRnlJR05zWldGeVZHbHRaWElnUFNCbWRXNWpkR2x2YmloMEtTQjdJSEpsZEhWeWJpQmpiR1ZoY2xScGJXVnZkWFFvZENrN0lIMDdYRzVjZEhaaGNpQmhjMkZ3SUQwZ1puVnVZM1JwYjI0Z0tHWXBJSHNnY21WMGRYSnVJR05oY0hSMWNtVmtVMlYwVkdsdFpXOTFkQ2htTENBd0tUc2dmVHRjYmx4dVhIUXZMeUJFWlhSbFkzUWdjM0JsWTJsbWFXTWdaVzUyWEc1Y2RHbG1JQ2hwYzA1dlpHVW9LU2tnZXlBdkx5Qk9iMlJsWEc1Y2RGeDBZWE5oY0NBOUlHWjFibU4wYVc5dUlDaG1LU0I3SUhKbGRIVnliaUJ3Y205alpYTnpMbTVsZUhSVWFXTnJLR1lwT3lCOU8xeHVYRzVjZEgwZ1pXeHpaU0JwWmlBb1RYVjBZWFJwYjI1UFluTWdQU0JvWVhOTmRYUmhkR2x2Yms5aWMyVnlkbVZ5S0NrcElIc2dMeThnVFc5a1pYSnVJR0p5YjNkelpYSmNibHgwWEhSaGMyRndJRDBnYVc1cGRFMTFkR0YwYVc5dVQySnpaWEoyWlhJb1RYVjBZWFJwYjI1UFluTXBPMXh1WEc1Y2RIMGdaV3h6WlNCcFppQW9JV05oY0hSMWNtVmtVMlYwVkdsdFpXOTFkQ2tnZXlBdkx5QjJaWEowTG5oY2JseDBYSFIyWVhJZ2RtVnlkSGhTWlhGMWFYSmxJRDBnY21WeGRXbHlaVHRjYmx4MFhIUjJZWElnZG1WeWRIZ2dQU0IyWlhKMGVGSmxjWFZwY21Vb0ozWmxjblI0SnlrN1hHNWNkRngwYzJWMFZHbHRaWElnUFNCbWRXNWpkR2x2YmlBb1ppd2diWE1wSUhzZ2NtVjBkWEp1SUhabGNuUjRMbk5sZEZScGJXVnlLRzF6TENCbUtUc2dmVHRjYmx4MFhIUmpiR1ZoY2xScGJXVnlJRDBnZG1WeWRIZ3VZMkZ1WTJWc1ZHbHRaWEk3WEc1Y2RGeDBZWE5oY0NBOUlIWmxjblI0TG5KMWJrOXVURzl2Y0NCOGZDQjJaWEowZUM1eWRXNVBia052Ym5SbGVIUTdYRzVjZEgxY2JseHVYSFJ5WlhSMWNtNGdlMXh1WEhSY2RITmxkRlJwYldWeU9pQnpaWFJVYVcxbGNpeGNibHgwWEhSamJHVmhjbFJwYldWeU9pQmpiR1ZoY2xScGJXVnlMRnh1WEhSY2RHRnpZWEE2SUdGellYQmNibHgwZlR0Y2JseHVYSFJtZFc1amRHbHZiaUJwYzA1dlpHVWdLQ2tnZTF4dVhIUmNkSEpsZEhWeWJpQjBlWEJsYjJZZ2NISnZZMlZ6Y3lBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlaY2JseDBYSFJjZEU5aWFtVmpkQzV3Y205MGIzUjVjR1V1ZEc5VGRISnBibWN1WTJGc2JDaHdjbTlqWlhOektTQTlQVDBnSjF0dlltcGxZM1FnY0hKdlkyVnpjMTBuTzF4dVhIUjlYRzVjYmx4MFpuVnVZM1JwYjI0Z2FHRnpUWFYwWVhScGIyNVBZbk5sY25abGNpQW9LU0I3WEc1Y2RGeDBjbVYwZFhKdUlDaDBlWEJsYjJZZ1RYVjBZWFJwYjI1UFluTmxjblpsY2lBOVBUMGdKMloxYm1OMGFXOXVKeUFtSmlCTmRYUmhkR2x2Yms5aWMyVnlkbVZ5S1NCOGZGeHVYSFJjZEZ4MEtIUjVjR1Z2WmlCWFpXSkxhWFJOZFhSaGRHbHZiazlpYzJWeWRtVnlJRDA5UFNBblpuVnVZM1JwYjI0bklDWW1JRmRsWWt0cGRFMTFkR0YwYVc5dVQySnpaWEoyWlhJcE8xeHVYSFI5WEc1Y2JseDBablZ1WTNScGIyNGdhVzVwZEUxMWRHRjBhVzl1VDJKelpYSjJaWElvVFhWMFlYUnBiMjVQWW5ObGNuWmxjaWtnZTF4dVhIUmNkSFpoY2lCelkyaGxaSFZzWldRN1hHNWNkRngwZG1GeUlHNXZaR1VnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZVWlhoMFRtOWtaU2duSnlrN1hHNWNkRngwZG1GeUlHOGdQU0J1WlhjZ1RYVjBZWFJwYjI1UFluTmxjblpsY2loeWRXNHBPMXh1WEhSY2RHOHViMkp6WlhKMlpTaHViMlJsTENCN0lHTm9ZWEpoWTNSbGNrUmhkR0U2SUhSeWRXVWdmU2s3WEc1Y2JseDBYSFJtZFc1amRHbHZiaUJ5ZFc0b0tTQjdYRzVjZEZ4MFhIUjJZWElnWmlBOUlITmphR1ZrZFd4bFpEdGNibHgwWEhSY2RITmphR1ZrZFd4bFpDQTlJSFp2YVdRZ01EdGNibHgwWEhSY2RHWW9LVHRjYmx4MFhIUjlYRzVjYmx4MFhIUjJZWElnYVNBOUlEQTdYRzVjZEZ4MGNtVjBkWEp1SUdaMWJtTjBhVzl1SUNobUtTQjdYRzVjZEZ4MFhIUnpZMmhsWkhWc1pXUWdQU0JtTzF4dVhIUmNkRngwYm05a1pTNWtZWFJoSUQwZ0tHa2dYajBnTVNrN1hHNWNkRngwZlR0Y2JseDBmVnh1ZlNrN1hHNTlLSFI1Y0dWdlppQmtaV1pwYm1VZ1BUMDlJQ2RtZFc1amRHbHZiaWNnSmlZZ1pHVm1hVzVsTG1GdFpDQS9JR1JsWm1sdVpTQTZJR1oxYm1OMGFXOXVLR1poWTNSdmNua3BJSHNnYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtWVdOMGIzSjVLSEpsY1hWcGNtVXBPeUI5S1NrN1hHNGlYWDA9IiwiLyoqIEBsaWNlbnNlIE1JVCBMaWNlbnNlIChjKSBjb3B5cmlnaHQgMjAxMC0yMDE0IG9yaWdpbmFsIGF1dGhvciBvciBhdXRob3JzICovXG4vKiogQGF1dGhvciBCcmlhbiBDYXZhbGllciAqL1xuLyoqIEBhdXRob3IgSm9obiBIYW5uICovXG5cbihmdW5jdGlvbihkZWZpbmUpIHsgJ3VzZSBzdHJpY3QnO1xuZGVmaW5lKGZ1bmN0aW9uKCkge1xuXG5cdHJldHVybiB7XG5cdFx0Zm9ybWF0RXJyb3I6IGZvcm1hdEVycm9yLFxuXHRcdGZvcm1hdE9iamVjdDogZm9ybWF0T2JqZWN0LFxuXHRcdHRyeVN0cmluZ2lmeTogdHJ5U3RyaW5naWZ5XG5cdH07XG5cblx0LyoqXG5cdCAqIEZvcm1hdCBhbiBlcnJvciBpbnRvIGEgc3RyaW5nLiAgSWYgZSBpcyBhbiBFcnJvciBhbmQgaGFzIGEgc3RhY2sgcHJvcGVydHksXG5cdCAqIGl0J3MgcmV0dXJuZWQuICBPdGhlcndpc2UsIGUgaXMgZm9ybWF0dGVkIHVzaW5nIGZvcm1hdE9iamVjdCwgd2l0aCBhXG5cdCAqIHdhcm5pbmcgYWRkZWQgYWJvdXQgZSBub3QgYmVpbmcgYSBwcm9wZXIgRXJyb3IuXG5cdCAqIEBwYXJhbSB7Kn0gZVxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBmb3JtYXR0ZWQgc3RyaW5nLCBzdWl0YWJsZSBmb3Igb3V0cHV0IHRvIGRldmVsb3BlcnNcblx0ICovXG5cdGZ1bmN0aW9uIGZvcm1hdEVycm9yKGUpIHtcblx0XHR2YXIgcyA9IHR5cGVvZiBlID09PSAnb2JqZWN0JyAmJiBlICE9PSBudWxsICYmIChlLnN0YWNrIHx8IGUubWVzc2FnZSkgPyBlLnN0YWNrIHx8IGUubWVzc2FnZSA6IGZvcm1hdE9iamVjdChlKTtcblx0XHRyZXR1cm4gZSBpbnN0YW5jZW9mIEVycm9yID8gcyA6IHMgKyAnIChXQVJOSU5HOiBub24tRXJyb3IgdXNlZCknO1xuXHR9XG5cblx0LyoqXG5cdCAqIEZvcm1hdCBhbiBvYmplY3QsIGRldGVjdGluZyBcInBsYWluXCIgb2JqZWN0cyBhbmQgcnVubmluZyB0aGVtIHRocm91Z2hcblx0ICogSlNPTi5zdHJpbmdpZnkgaWYgcG9zc2libGUuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvXG5cdCAqIEByZXR1cm5zIHtzdHJpbmd9XG5cdCAqL1xuXHRmdW5jdGlvbiBmb3JtYXRPYmplY3Qobykge1xuXHRcdHZhciBzID0gU3RyaW5nKG8pO1xuXHRcdGlmKHMgPT09ICdbb2JqZWN0IE9iamVjdF0nICYmIHR5cGVvZiBKU09OICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0cyA9IHRyeVN0cmluZ2lmeShvLCBzKTtcblx0XHR9XG5cdFx0cmV0dXJuIHM7XG5cdH1cblxuXHQvKipcblx0ICogVHJ5IHRvIHJldHVybiB0aGUgcmVzdWx0IG9mIEpTT04uc3RyaW5naWZ5KHgpLiAgSWYgdGhhdCBmYWlscywgcmV0dXJuXG5cdCAqIGRlZmF1bHRWYWx1ZVxuXHQgKiBAcGFyYW0geyp9IHhcblx0ICogQHBhcmFtIHsqfSBkZWZhdWx0VmFsdWVcblx0ICogQHJldHVybnMge1N0cmluZ3wqfSBKU09OLnN0cmluZ2lmeSh4KSBvciBkZWZhdWx0VmFsdWVcblx0ICovXG5cdGZ1bmN0aW9uIHRyeVN0cmluZ2lmeSh4LCBkZWZhdWx0VmFsdWUpIHtcblx0XHR0cnkge1xuXHRcdFx0cmV0dXJuIEpTT04uc3RyaW5naWZ5KHgpO1xuXHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0cmV0dXJuIGRlZmF1bHRWYWx1ZTtcblx0XHR9XG5cdH1cblxufSk7XG59KHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZSA6IGZ1bmN0aW9uKGZhY3RvcnkpIHsgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7IH0pKTtcbiIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG4vKiogQGxpY2Vuc2UgTUlUIExpY2Vuc2UgKGMpIGNvcHlyaWdodCAyMDEwLTIwMTQgb3JpZ2luYWwgYXV0aG9yIG9yIGF1dGhvcnMgKi9cbi8qKiBAYXV0aG9yIEJyaWFuIENhdmFsaWVyICovXG4vKiogQGF1dGhvciBKb2huIEhhbm4gKi9cblxuKGZ1bmN0aW9uKGRlZmluZSkgeyAndXNlIHN0cmljdCc7XG5kZWZpbmUoZnVuY3Rpb24oKSB7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIG1ha2VQcm9taXNlKGVudmlyb25tZW50KSB7XG5cblx0XHR2YXIgdGFza3MgPSBlbnZpcm9ubWVudC5zY2hlZHVsZXI7XG5cdFx0dmFyIGVtaXRSZWplY3Rpb24gPSBpbml0RW1pdFJlamVjdGlvbigpO1xuXG5cdFx0dmFyIG9iamVjdENyZWF0ZSA9IE9iamVjdC5jcmVhdGUgfHxcblx0XHRcdGZ1bmN0aW9uKHByb3RvKSB7XG5cdFx0XHRcdGZ1bmN0aW9uIENoaWxkKCkge31cblx0XHRcdFx0Q2hpbGQucHJvdG90eXBlID0gcHJvdG87XG5cdFx0XHRcdHJldHVybiBuZXcgQ2hpbGQoKTtcblx0XHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBDcmVhdGUgYSBwcm9taXNlIHdob3NlIGZhdGUgaXMgZGV0ZXJtaW5lZCBieSByZXNvbHZlclxuXHRcdCAqIEBjb25zdHJ1Y3RvclxuXHRcdCAqIEByZXR1cm5zIHtQcm9taXNlfSBwcm9taXNlXG5cdFx0ICogQG5hbWUgUHJvbWlzZVxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIFByb21pc2UocmVzb2x2ZXIsIGhhbmRsZXIpIHtcblx0XHRcdHRoaXMuX2hhbmRsZXIgPSByZXNvbHZlciA9PT0gSGFuZGxlciA/IGhhbmRsZXIgOiBpbml0KHJlc29sdmVyKTtcblx0XHR9XG5cblx0XHQvKipcblx0XHQgKiBSdW4gdGhlIHN1cHBsaWVkIHJlc29sdmVyXG5cdFx0ICogQHBhcmFtIHJlc29sdmVyXG5cdFx0ICogQHJldHVybnMge1BlbmRpbmd9XG5cdFx0ICovXG5cdFx0ZnVuY3Rpb24gaW5pdChyZXNvbHZlcikge1xuXHRcdFx0dmFyIGhhbmRsZXIgPSBuZXcgUGVuZGluZygpO1xuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRyZXNvbHZlcihwcm9taXNlUmVzb2x2ZSwgcHJvbWlzZVJlamVjdCwgcHJvbWlzZU5vdGlmeSk7XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdHByb21pc2VSZWplY3QoZSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBoYW5kbGVyO1xuXG5cdFx0XHQvKipcblx0XHRcdCAqIFRyYW5zaXRpb24gZnJvbSBwcmUtcmVzb2x1dGlvbiBzdGF0ZSB0byBwb3N0LXJlc29sdXRpb24gc3RhdGUsIG5vdGlmeWluZ1xuXHRcdFx0ICogYWxsIGxpc3RlbmVycyBvZiB0aGUgdWx0aW1hdGUgZnVsZmlsbG1lbnQgb3IgcmVqZWN0aW9uXG5cdFx0XHQgKiBAcGFyYW0geyp9IHggcmVzb2x1dGlvbiB2YWx1ZVxuXHRcdFx0ICovXG5cdFx0XHRmdW5jdGlvbiBwcm9taXNlUmVzb2x2ZSAoeCkge1xuXHRcdFx0XHRoYW5kbGVyLnJlc29sdmUoeCk7XG5cdFx0XHR9XG5cdFx0XHQvKipcblx0XHRcdCAqIFJlamVjdCB0aGlzIHByb21pc2Ugd2l0aCByZWFzb24sIHdoaWNoIHdpbGwgYmUgdXNlZCB2ZXJiYXRpbVxuXHRcdFx0ICogQHBhcmFtIHtFcnJvcnwqfSByZWFzb24gcmVqZWN0aW9uIHJlYXNvbiwgc3Ryb25nbHkgc3VnZ2VzdGVkXG5cdFx0XHQgKiAgIHRvIGJlIGFuIEVycm9yIHR5cGVcblx0XHRcdCAqL1xuXHRcdFx0ZnVuY3Rpb24gcHJvbWlzZVJlamVjdCAocmVhc29uKSB7XG5cdFx0XHRcdGhhbmRsZXIucmVqZWN0KHJlYXNvbik7XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuXHRcdFx0ICogQGRlcHJlY2F0ZWRcblx0XHRcdCAqIElzc3VlIGEgcHJvZ3Jlc3MgZXZlbnQsIG5vdGlmeWluZyBhbGwgcHJvZ3Jlc3MgbGlzdGVuZXJzXG5cdFx0XHQgKiBAcGFyYW0geyp9IHggcHJvZ3Jlc3MgZXZlbnQgcGF5bG9hZCB0byBwYXNzIHRvIGFsbCBsaXN0ZW5lcnNcblx0XHRcdCAqL1xuXHRcdFx0ZnVuY3Rpb24gcHJvbWlzZU5vdGlmeSAoeCkge1xuXHRcdFx0XHRoYW5kbGVyLm5vdGlmeSh4KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDcmVhdGlvblxuXG5cdFx0UHJvbWlzZS5yZXNvbHZlID0gcmVzb2x2ZTtcblx0XHRQcm9taXNlLnJlamVjdCA9IHJlamVjdDtcblx0XHRQcm9taXNlLm5ldmVyID0gbmV2ZXI7XG5cblx0XHRQcm9taXNlLl9kZWZlciA9IGRlZmVyO1xuXHRcdFByb21pc2UuX2hhbmRsZXIgPSBnZXRIYW5kbGVyO1xuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyBhIHRydXN0ZWQgcHJvbWlzZS4gSWYgeCBpcyBhbHJlYWR5IGEgdHJ1c3RlZCBwcm9taXNlLCBpdCBpc1xuXHRcdCAqIHJldHVybmVkLCBvdGhlcndpc2UgcmV0dXJucyBhIG5ldyB0cnVzdGVkIFByb21pc2Ugd2hpY2ggZm9sbG93cyB4LlxuXHRcdCAqIEBwYXJhbSAgeyp9IHhcblx0XHQgKiBAcmV0dXJuIHtQcm9taXNlfSBwcm9taXNlXG5cdFx0ICovXG5cdFx0ZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG5cdFx0XHRyZXR1cm4gaXNQcm9taXNlKHgpID8geFxuXHRcdFx0XHQ6IG5ldyBQcm9taXNlKEhhbmRsZXIsIG5ldyBBc3luYyhnZXRIYW5kbGVyKHgpKSk7XG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJuIGEgcmVqZWN0IHByb21pc2Ugd2l0aCB4IGFzIGl0cyByZWFzb24gKHggaXMgdXNlZCB2ZXJiYXRpbSlcblx0XHQgKiBAcGFyYW0geyp9IHhcblx0XHQgKiBAcmV0dXJucyB7UHJvbWlzZX0gcmVqZWN0ZWQgcHJvbWlzZVxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIHJlamVjdCh4KSB7XG5cdFx0XHRyZXR1cm4gbmV3IFByb21pc2UoSGFuZGxlciwgbmV3IEFzeW5jKG5ldyBSZWplY3RlZCh4KSkpO1xuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIFJldHVybiBhIHByb21pc2UgdGhhdCByZW1haW5zIHBlbmRpbmcgZm9yZXZlclxuXHRcdCAqIEByZXR1cm5zIHtQcm9taXNlfSBmb3JldmVyLXBlbmRpbmcgcHJvbWlzZS5cblx0XHQgKi9cblx0XHRmdW5jdGlvbiBuZXZlcigpIHtcblx0XHRcdHJldHVybiBmb3JldmVyUGVuZGluZ1Byb21pc2U7IC8vIFNob3VsZCBiZSBmcm96ZW5cblx0XHR9XG5cblx0XHQvKipcblx0XHQgKiBDcmVhdGVzIGFuIGludGVybmFsIHtwcm9taXNlLCByZXNvbHZlcn0gcGFpclxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHJldHVybnMge1Byb21pc2V9XG5cdFx0ICovXG5cdFx0ZnVuY3Rpb24gZGVmZXIoKSB7XG5cdFx0XHRyZXR1cm4gbmV3IFByb21pc2UoSGFuZGxlciwgbmV3IFBlbmRpbmcoKSk7XG5cdFx0fVxuXG5cdFx0Ly8gVHJhbnNmb3JtYXRpb24gYW5kIGZsb3cgY29udHJvbFxuXG5cdFx0LyoqXG5cdFx0ICogVHJhbnNmb3JtIHRoaXMgcHJvbWlzZSdzIGZ1bGZpbGxtZW50IHZhbHVlLCByZXR1cm5pbmcgYSBuZXcgUHJvbWlzZVxuXHRcdCAqIGZvciB0aGUgdHJhbnNmb3JtZWQgcmVzdWx0LiAgSWYgdGhlIHByb21pc2UgY2Fubm90IGJlIGZ1bGZpbGxlZCwgb25SZWplY3RlZFxuXHRcdCAqIGlzIGNhbGxlZCB3aXRoIHRoZSByZWFzb24uICBvblByb2dyZXNzICptYXkqIGJlIGNhbGxlZCB3aXRoIHVwZGF0ZXMgdG93YXJkXG5cdFx0ICogdGhpcyBwcm9taXNlJ3MgZnVsZmlsbG1lbnQuXG5cdFx0ICogQHBhcmFtIHtmdW5jdGlvbj19IG9uRnVsZmlsbGVkIGZ1bGZpbGxtZW50IGhhbmRsZXJcblx0XHQgKiBAcGFyYW0ge2Z1bmN0aW9uPX0gb25SZWplY3RlZCByZWplY3Rpb24gaGFuZGxlclxuXHRcdCAqIEBwYXJhbSB7ZnVuY3Rpb249fSBvblByb2dyZXNzIEBkZXByZWNhdGVkIHByb2dyZXNzIGhhbmRsZXJcblx0XHQgKiBAcmV0dXJuIHtQcm9taXNlfSBuZXcgcHJvbWlzZVxuXHRcdCAqL1xuXHRcdFByb21pc2UucHJvdG90eXBlLnRoZW4gPSBmdW5jdGlvbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgb25Qcm9ncmVzcykge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMuX2hhbmRsZXI7XG5cdFx0XHR2YXIgc3RhdGUgPSBwYXJlbnQuam9pbigpLnN0YXRlKCk7XG5cblx0XHRcdGlmICgodHlwZW9mIG9uRnVsZmlsbGVkICE9PSAnZnVuY3Rpb24nICYmIHN0YXRlID4gMCkgfHxcblx0XHRcdFx0KHR5cGVvZiBvblJlamVjdGVkICE9PSAnZnVuY3Rpb24nICYmIHN0YXRlIDwgMCkpIHtcblx0XHRcdFx0Ly8gU2hvcnQgY2lyY3VpdDogdmFsdWUgd2lsbCBub3QgY2hhbmdlLCBzaW1wbHkgc2hhcmUgaGFuZGxlclxuXHRcdFx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoSGFuZGxlciwgcGFyZW50KTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHAgPSB0aGlzLl9iZWdldCgpO1xuXHRcdFx0dmFyIGNoaWxkID0gcC5faGFuZGxlcjtcblxuXHRcdFx0cGFyZW50LmNoYWluKGNoaWxkLCBwYXJlbnQucmVjZWl2ZXIsIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzKTtcblxuXHRcdFx0cmV0dXJuIHA7XG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIElmIHRoaXMgcHJvbWlzZSBjYW5ub3QgYmUgZnVsZmlsbGVkIGR1ZSB0byBhbiBlcnJvciwgY2FsbCBvblJlamVjdGVkIHRvXG5cdFx0ICogaGFuZGxlIHRoZSBlcnJvci4gU2hvcnRjdXQgZm9yIC50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZClcblx0XHQgKiBAcGFyYW0ge2Z1bmN0aW9uP30gb25SZWplY3RlZFxuXHRcdCAqIEByZXR1cm4ge1Byb21pc2V9XG5cdFx0ICovXG5cdFx0UHJvbWlzZS5wcm90b3R5cGVbJ2NhdGNoJ10gPSBmdW5jdGlvbihvblJlamVjdGVkKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy50aGVuKHZvaWQgMCwgb25SZWplY3RlZCk7XG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIENyZWF0ZXMgYSBuZXcsIHBlbmRpbmcgcHJvbWlzZSBvZiB0aGUgc2FtZSB0eXBlIGFzIHRoaXMgcHJvbWlzZVxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHJldHVybnMge1Byb21pc2V9XG5cdFx0ICovXG5cdFx0UHJvbWlzZS5wcm90b3R5cGUuX2JlZ2V0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gYmVnZXRGcm9tKHRoaXMuX2hhbmRsZXIsIHRoaXMuY29uc3RydWN0b3IpO1xuXHRcdH07XG5cblx0XHRmdW5jdGlvbiBiZWdldEZyb20ocGFyZW50LCBQcm9taXNlKSB7XG5cdFx0XHR2YXIgY2hpbGQgPSBuZXcgUGVuZGluZyhwYXJlbnQucmVjZWl2ZXIsIHBhcmVudC5qb2luKCkuY29udGV4dCk7XG5cdFx0XHRyZXR1cm4gbmV3IFByb21pc2UoSGFuZGxlciwgY2hpbGQpO1xuXHRcdH1cblxuXHRcdC8vIEFycmF5IGNvbWJpbmF0b3JzXG5cblx0XHRQcm9taXNlLmFsbCA9IGFsbDtcblx0XHRQcm9taXNlLnJhY2UgPSByYWNlO1xuXHRcdFByb21pc2UuX3RyYXZlcnNlID0gdHJhdmVyc2U7XG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm4gYSBwcm9taXNlIHRoYXQgd2lsbCBmdWxmaWxsIHdoZW4gYWxsIHByb21pc2VzIGluIHRoZVxuXHRcdCAqIGlucHV0IGFycmF5IGhhdmUgZnVsZmlsbGVkLCBvciB3aWxsIHJlamVjdCB3aGVuIG9uZSBvZiB0aGVcblx0XHQgKiBwcm9taXNlcyByZWplY3RzLlxuXHRcdCAqIEBwYXJhbSB7YXJyYXl9IHByb21pc2VzIGFycmF5IG9mIHByb21pc2VzXG5cdFx0ICogQHJldHVybnMge1Byb21pc2V9IHByb21pc2UgZm9yIGFycmF5IG9mIGZ1bGZpbGxtZW50IHZhbHVlc1xuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuXHRcdFx0cmV0dXJuIHRyYXZlcnNlV2l0aChzbmQsIG51bGwsIHByb21pc2VzKTtcblx0XHR9XG5cblx0XHQvKipcblx0XHQgKiBBcnJheTxQcm9taXNlPFg+PiAtPiBQcm9taXNlPEFycmF5PGYoWCk+PlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHBhcmFtIHtmdW5jdGlvbn0gZiBmdW5jdGlvbiB0byBhcHBseSB0byBlYWNoIHByb21pc2UncyB2YWx1ZVxuXHRcdCAqIEBwYXJhbSB7QXJyYXl9IHByb21pc2VzIGFycmF5IG9mIHByb21pc2VzXG5cdFx0ICogQHJldHVybnMge1Byb21pc2V9IHByb21pc2UgZm9yIHRyYW5zZm9ybWVkIHZhbHVlc1xuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIHRyYXZlcnNlKGYsIHByb21pc2VzKSB7XG5cdFx0XHRyZXR1cm4gdHJhdmVyc2VXaXRoKHRyeUNhdGNoMiwgZiwgcHJvbWlzZXMpO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHRyYXZlcnNlV2l0aCh0cnlNYXAsIGYsIHByb21pc2VzKSB7XG5cdFx0XHR2YXIgaGFuZGxlciA9IHR5cGVvZiBmID09PSAnZnVuY3Rpb24nID8gbWFwQXQgOiBzZXR0bGVBdDtcblxuXHRcdFx0dmFyIHJlc29sdmVyID0gbmV3IFBlbmRpbmcoKTtcblx0XHRcdHZhciBwZW5kaW5nID0gcHJvbWlzZXMubGVuZ3RoID4+PiAwO1xuXHRcdFx0dmFyIHJlc3VsdHMgPSBuZXcgQXJyYXkocGVuZGluZyk7XG5cblx0XHRcdGZvciAodmFyIGkgPSAwLCB4OyBpIDwgcHJvbWlzZXMubGVuZ3RoICYmICFyZXNvbHZlci5yZXNvbHZlZDsgKytpKSB7XG5cdFx0XHRcdHggPSBwcm9taXNlc1tpXTtcblxuXHRcdFx0XHRpZiAoeCA9PT0gdm9pZCAwICYmICEoaSBpbiBwcm9taXNlcykpIHtcblx0XHRcdFx0XHQtLXBlbmRpbmc7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0cmF2ZXJzZUF0KHByb21pc2VzLCBoYW5kbGVyLCBpLCB4LCByZXNvbHZlcik7XG5cdFx0XHR9XG5cblx0XHRcdGlmKHBlbmRpbmcgPT09IDApIHtcblx0XHRcdFx0cmVzb2x2ZXIuYmVjb21lKG5ldyBGdWxmaWxsZWQocmVzdWx0cykpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbmV3IFByb21pc2UoSGFuZGxlciwgcmVzb2x2ZXIpO1xuXG5cdFx0XHRmdW5jdGlvbiBtYXBBdChpLCB4LCByZXNvbHZlcikge1xuXHRcdFx0XHRpZighcmVzb2x2ZXIucmVzb2x2ZWQpIHtcblx0XHRcdFx0XHR0cmF2ZXJzZUF0KHByb21pc2VzLCBzZXR0bGVBdCwgaSwgdHJ5TWFwKGYsIHgsIGkpLCByZXNvbHZlcik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gc2V0dGxlQXQoaSwgeCwgcmVzb2x2ZXIpIHtcblx0XHRcdFx0cmVzdWx0c1tpXSA9IHg7XG5cdFx0XHRcdGlmKC0tcGVuZGluZyA9PT0gMCkge1xuXHRcdFx0XHRcdHJlc29sdmVyLmJlY29tZShuZXcgRnVsZmlsbGVkKHJlc3VsdHMpKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHRyYXZlcnNlQXQocHJvbWlzZXMsIGhhbmRsZXIsIGksIHgsIHJlc29sdmVyKSB7XG5cdFx0XHRpZiAobWF5YmVUaGVuYWJsZSh4KSkge1xuXHRcdFx0XHR2YXIgaCA9IGdldEhhbmRsZXJNYXliZVRoZW5hYmxlKHgpO1xuXHRcdFx0XHR2YXIgcyA9IGguc3RhdGUoKTtcblxuXHRcdFx0XHRpZiAocyA9PT0gMCkge1xuXHRcdFx0XHRcdGguZm9sZChoYW5kbGVyLCBpLCB2b2lkIDAsIHJlc29sdmVyKTtcblx0XHRcdFx0fSBlbHNlIGlmIChzID4gMCkge1xuXHRcdFx0XHRcdGhhbmRsZXIoaSwgaC52YWx1ZSwgcmVzb2x2ZXIpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJlc29sdmVyLmJlY29tZShoKTtcblx0XHRcdFx0XHR2aXNpdFJlbWFpbmluZyhwcm9taXNlcywgaSsxLCBoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcihpLCB4LCByZXNvbHZlcik7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0UHJvbWlzZS5fdmlzaXRSZW1haW5pbmcgPSB2aXNpdFJlbWFpbmluZztcblx0XHRmdW5jdGlvbiB2aXNpdFJlbWFpbmluZyhwcm9taXNlcywgc3RhcnQsIGhhbmRsZXIpIHtcblx0XHRcdGZvcih2YXIgaT1zdGFydDsgaTxwcm9taXNlcy5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHRtYXJrQXNIYW5kbGVkKGdldEhhbmRsZXIocHJvbWlzZXNbaV0pLCBoYW5kbGVyKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBtYXJrQXNIYW5kbGVkKGgsIGhhbmRsZXIpIHtcblx0XHRcdGlmKGggPT09IGhhbmRsZXIpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgcyA9IGguc3RhdGUoKTtcblx0XHRcdGlmKHMgPT09IDApIHtcblx0XHRcdFx0aC52aXNpdChoLCB2b2lkIDAsIGguX3VucmVwb3J0KTtcblx0XHRcdH0gZWxzZSBpZihzIDwgMCkge1xuXHRcdFx0XHRoLl91bnJlcG9ydCgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIEZ1bGZpbGwtcmVqZWN0IGNvbXBldGl0aXZlIHJhY2UuIFJldHVybiBhIHByb21pc2UgdGhhdCB3aWxsIHNldHRsZVxuXHRcdCAqIHRvIHRoZSBzYW1lIHN0YXRlIGFzIHRoZSBlYXJsaWVzdCBpbnB1dCBwcm9taXNlIHRvIHNldHRsZS5cblx0XHQgKlxuXHRcdCAqIFdBUk5JTkc6IFRoZSBFUzYgUHJvbWlzZSBzcGVjIHJlcXVpcmVzIHRoYXQgcmFjZSgpaW5nIGFuIGVtcHR5IGFycmF5XG5cdFx0ICogbXVzdCByZXR1cm4gYSBwcm9taXNlIHRoYXQgaXMgcGVuZGluZyBmb3JldmVyLiAgVGhpcyBpbXBsZW1lbnRhdGlvblxuXHRcdCAqIHJldHVybnMgYSBzaW5nbGV0b24gZm9yZXZlci1wZW5kaW5nIHByb21pc2UsIHRoZSBzYW1lIHNpbmdsZXRvbiB0aGF0IGlzXG5cdFx0ICogcmV0dXJuZWQgYnkgUHJvbWlzZS5uZXZlcigpLCB0aHVzIGNhbiBiZSBjaGVja2VkIHdpdGggPT09XG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge2FycmF5fSBwcm9taXNlcyBhcnJheSBvZiBwcm9taXNlcyB0byByYWNlXG5cdFx0ICogQHJldHVybnMge1Byb21pc2V9IGlmIGlucHV0IGlzIG5vbi1lbXB0eSwgYSBwcm9taXNlIHRoYXQgd2lsbCBzZXR0bGVcblx0XHQgKiB0byB0aGUgc2FtZSBvdXRjb21lIGFzIHRoZSBlYXJsaWVzdCBpbnB1dCBwcm9taXNlIHRvIHNldHRsZS4gaWYgZW1wdHlcblx0XHQgKiBpcyBlbXB0eSwgcmV0dXJucyBhIHByb21pc2UgdGhhdCB3aWxsIG5ldmVyIHNldHRsZS5cblx0XHQgKi9cblx0XHRmdW5jdGlvbiByYWNlKHByb21pc2VzKSB7XG5cdFx0XHRpZih0eXBlb2YgcHJvbWlzZXMgIT09ICdvYmplY3QnIHx8IHByb21pc2VzID09PSBudWxsKSB7XG5cdFx0XHRcdHJldHVybiByZWplY3QobmV3IFR5cGVFcnJvcignbm9uLWl0ZXJhYmxlIHBhc3NlZCB0byByYWNlKCknKSk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNpZ2gsIHJhY2UoW10pIGlzIHVudGVzdGFibGUgdW5sZXNzIHdlIHJldHVybiAqc29tZXRoaW5nKlxuXHRcdFx0Ly8gdGhhdCBpcyByZWNvZ25pemFibGUgd2l0aG91dCBjYWxsaW5nIC50aGVuKCkgb24gaXQuXG5cdFx0XHRyZXR1cm4gcHJvbWlzZXMubGVuZ3RoID09PSAwID8gbmV2ZXIoKVxuXHRcdFx0XHQgOiBwcm9taXNlcy5sZW5ndGggPT09IDEgPyByZXNvbHZlKHByb21pc2VzWzBdKVxuXHRcdFx0XHQgOiBydW5SYWNlKHByb21pc2VzKTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBydW5SYWNlKHByb21pc2VzKSB7XG5cdFx0XHR2YXIgcmVzb2x2ZXIgPSBuZXcgUGVuZGluZygpO1xuXHRcdFx0dmFyIGksIHgsIGg7XG5cdFx0XHRmb3IoaT0wOyBpPHByb21pc2VzLmxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdHggPSBwcm9taXNlc1tpXTtcblx0XHRcdFx0aWYgKHggPT09IHZvaWQgMCAmJiAhKGkgaW4gcHJvbWlzZXMpKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRoID0gZ2V0SGFuZGxlcih4KTtcblx0XHRcdFx0aWYoaC5zdGF0ZSgpICE9PSAwKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZXIuYmVjb21lKGgpO1xuXHRcdFx0XHRcdHZpc2l0UmVtYWluaW5nKHByb21pc2VzLCBpKzEsIGgpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGgudmlzaXQocmVzb2x2ZXIsIHJlc29sdmVyLnJlc29sdmUsIHJlc29sdmVyLnJlamVjdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBuZXcgUHJvbWlzZShIYW5kbGVyLCByZXNvbHZlcik7XG5cdFx0fVxuXG5cdFx0Ly8gUHJvbWlzZSBpbnRlcm5hbHNcblx0XHQvLyBCZWxvdyB0aGlzLCBldmVyeXRoaW5nIGlzIEBwcml2YXRlXG5cblx0XHQvKipcblx0XHQgKiBHZXQgYW4gYXBwcm9wcmlhdGUgaGFuZGxlciBmb3IgeCwgd2l0aG91dCBjaGVja2luZyBmb3IgY3ljbGVzXG5cdFx0ICogQHBhcmFtIHsqfSB4XG5cdFx0ICogQHJldHVybnMge29iamVjdH0gaGFuZGxlclxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIGdldEhhbmRsZXIoeCkge1xuXHRcdFx0aWYoaXNQcm9taXNlKHgpKSB7XG5cdFx0XHRcdHJldHVybiB4Ll9oYW5kbGVyLmpvaW4oKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXliZVRoZW5hYmxlKHgpID8gZ2V0SGFuZGxlclVudHJ1c3RlZCh4KSA6IG5ldyBGdWxmaWxsZWQoeCk7XG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogR2V0IGEgaGFuZGxlciBmb3IgdGhlbmFibGUgeC5cblx0XHQgKiBOT1RFOiBZb3UgbXVzdCBvbmx5IGNhbGwgdGhpcyBpZiBtYXliZVRoZW5hYmxlKHgpID09IHRydWVcblx0XHQgKiBAcGFyYW0ge29iamVjdHxmdW5jdGlvbnxQcm9taXNlfSB4XG5cdFx0ICogQHJldHVybnMge29iamVjdH0gaGFuZGxlclxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIGdldEhhbmRsZXJNYXliZVRoZW5hYmxlKHgpIHtcblx0XHRcdHJldHVybiBpc1Byb21pc2UoeCkgPyB4Ll9oYW5kbGVyLmpvaW4oKSA6IGdldEhhbmRsZXJVbnRydXN0ZWQoeCk7XG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogR2V0IGEgaGFuZGxlciBmb3IgcG90ZW50aWFsbHkgdW50cnVzdGVkIHRoZW5hYmxlIHhcblx0XHQgKiBAcGFyYW0geyp9IHhcblx0XHQgKiBAcmV0dXJucyB7b2JqZWN0fSBoYW5kbGVyXG5cdFx0ICovXG5cdFx0ZnVuY3Rpb24gZ2V0SGFuZGxlclVudHJ1c3RlZCh4KSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHR2YXIgdW50cnVzdGVkVGhlbiA9IHgudGhlbjtcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiB1bnRydXN0ZWRUaGVuID09PSAnZnVuY3Rpb24nXG5cdFx0XHRcdFx0PyBuZXcgVGhlbmFibGUodW50cnVzdGVkVGhlbiwgeClcblx0XHRcdFx0XHQ6IG5ldyBGdWxmaWxsZWQoeCk7XG5cdFx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdFx0cmV0dXJuIG5ldyBSZWplY3RlZChlKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvKipcblx0XHQgKiBIYW5kbGVyIGZvciBhIHByb21pc2UgdGhhdCBpcyBwZW5kaW5nIGZvcmV2ZXJcblx0XHQgKiBAY29uc3RydWN0b3Jcblx0XHQgKi9cblx0XHRmdW5jdGlvbiBIYW5kbGVyKCkge31cblxuXHRcdEhhbmRsZXIucHJvdG90eXBlLndoZW5cblx0XHRcdD0gSGFuZGxlci5wcm90b3R5cGUuYmVjb21lXG5cdFx0XHQ9IEhhbmRsZXIucHJvdG90eXBlLm5vdGlmeSAvLyBkZXByZWNhdGVkXG5cdFx0XHQ9IEhhbmRsZXIucHJvdG90eXBlLmZhaWxcblx0XHRcdD0gSGFuZGxlci5wcm90b3R5cGUuX3VucmVwb3J0XG5cdFx0XHQ9IEhhbmRsZXIucHJvdG90eXBlLl9yZXBvcnRcblx0XHRcdD0gbm9vcDtcblxuXHRcdEhhbmRsZXIucHJvdG90eXBlLl9zdGF0ZSA9IDA7XG5cblx0XHRIYW5kbGVyLnByb3RvdHlwZS5zdGF0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuX3N0YXRlO1xuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBSZWN1cnNpdmVseSBjb2xsYXBzZSBoYW5kbGVyIGNoYWluIHRvIGZpbmQgdGhlIGhhbmRsZXJcblx0XHQgKiBuZWFyZXN0IHRvIHRoZSBmdWxseSByZXNvbHZlZCB2YWx1ZS5cblx0XHQgKiBAcmV0dXJucyB7b2JqZWN0fSBoYW5kbGVyIG5lYXJlc3QgdGhlIGZ1bGx5IHJlc29sdmVkIHZhbHVlXG5cdFx0ICovXG5cdFx0SGFuZGxlci5wcm90b3R5cGUuam9pbiA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGggPSB0aGlzO1xuXHRcdFx0d2hpbGUoaC5oYW5kbGVyICE9PSB2b2lkIDApIHtcblx0XHRcdFx0aCA9IGguaGFuZGxlcjtcblx0XHRcdH1cblx0XHRcdHJldHVybiBoO1xuXHRcdH07XG5cblx0XHRIYW5kbGVyLnByb3RvdHlwZS5jaGFpbiA9IGZ1bmN0aW9uKHRvLCByZWNlaXZlciwgZnVsZmlsbGVkLCByZWplY3RlZCwgcHJvZ3Jlc3MpIHtcblx0XHRcdHRoaXMud2hlbih7XG5cdFx0XHRcdHJlc29sdmVyOiB0byxcblx0XHRcdFx0cmVjZWl2ZXI6IHJlY2VpdmVyLFxuXHRcdFx0XHRmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcblx0XHRcdFx0cmVqZWN0ZWQ6IHJlamVjdGVkLFxuXHRcdFx0XHRwcm9ncmVzczogcHJvZ3Jlc3Ncblx0XHRcdH0pO1xuXHRcdH07XG5cblx0XHRIYW5kbGVyLnByb3RvdHlwZS52aXNpdCA9IGZ1bmN0aW9uKHJlY2VpdmVyLCBmdWxmaWxsZWQsIHJlamVjdGVkLCBwcm9ncmVzcykge1xuXHRcdFx0dGhpcy5jaGFpbihmYWlsSWZSZWplY3RlZCwgcmVjZWl2ZXIsIGZ1bGZpbGxlZCwgcmVqZWN0ZWQsIHByb2dyZXNzKTtcblx0XHR9O1xuXG5cdFx0SGFuZGxlci5wcm90b3R5cGUuZm9sZCA9IGZ1bmN0aW9uKGYsIHosIGMsIHRvKSB7XG5cdFx0XHR0aGlzLndoZW4obmV3IEZvbGQoZiwgeiwgYywgdG8pKTtcblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogSGFuZGxlciB0aGF0IGludm9rZXMgZmFpbCgpIG9uIGFueSBoYW5kbGVyIGl0IGJlY29tZXNcblx0XHQgKiBAY29uc3RydWN0b3Jcblx0XHQgKi9cblx0XHRmdW5jdGlvbiBGYWlsSWZSZWplY3RlZCgpIHt9XG5cblx0XHRpbmhlcml0KEhhbmRsZXIsIEZhaWxJZlJlamVjdGVkKTtcblxuXHRcdEZhaWxJZlJlamVjdGVkLnByb3RvdHlwZS5iZWNvbWUgPSBmdW5jdGlvbihoKSB7XG5cdFx0XHRoLmZhaWwoKTtcblx0XHR9O1xuXG5cdFx0dmFyIGZhaWxJZlJlamVjdGVkID0gbmV3IEZhaWxJZlJlamVjdGVkKCk7XG5cblx0XHQvKipcblx0XHQgKiBIYW5kbGVyIHRoYXQgbWFuYWdlcyBhIHF1ZXVlIG9mIGNvbnN1bWVycyB3YWl0aW5nIG9uIGEgcGVuZGluZyBwcm9taXNlXG5cdFx0ICogQGNvbnN0cnVjdG9yXG5cdFx0ICovXG5cdFx0ZnVuY3Rpb24gUGVuZGluZyhyZWNlaXZlciwgaW5oZXJpdGVkQ29udGV4dCkge1xuXHRcdFx0UHJvbWlzZS5jcmVhdGVDb250ZXh0KHRoaXMsIGluaGVyaXRlZENvbnRleHQpO1xuXG5cdFx0XHR0aGlzLmNvbnN1bWVycyA9IHZvaWQgMDtcblx0XHRcdHRoaXMucmVjZWl2ZXIgPSByZWNlaXZlcjtcblx0XHRcdHRoaXMuaGFuZGxlciA9IHZvaWQgMDtcblx0XHRcdHRoaXMucmVzb2x2ZWQgPSBmYWxzZTtcblx0XHR9XG5cblx0XHRpbmhlcml0KEhhbmRsZXIsIFBlbmRpbmcpO1xuXG5cdFx0UGVuZGluZy5wcm90b3R5cGUuX3N0YXRlID0gMDtcblxuXHRcdFBlbmRpbmcucHJvdG90eXBlLnJlc29sdmUgPSBmdW5jdGlvbih4KSB7XG5cdFx0XHR0aGlzLmJlY29tZShnZXRIYW5kbGVyKHgpKTtcblx0XHR9O1xuXG5cdFx0UGVuZGluZy5wcm90b3R5cGUucmVqZWN0ID0gZnVuY3Rpb24oeCkge1xuXHRcdFx0aWYodGhpcy5yZXNvbHZlZCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuYmVjb21lKG5ldyBSZWplY3RlZCh4KSk7XG5cdFx0fTtcblxuXHRcdFBlbmRpbmcucHJvdG90eXBlLmpvaW4gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICghdGhpcy5yZXNvbHZlZCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblxuXHRcdFx0dmFyIGggPSB0aGlzO1xuXG5cdFx0XHR3aGlsZSAoaC5oYW5kbGVyICE9PSB2b2lkIDApIHtcblx0XHRcdFx0aCA9IGguaGFuZGxlcjtcblx0XHRcdFx0aWYgKGggPT09IHRoaXMpIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5oYW5kbGVyID0gY3ljbGUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gaDtcblx0XHR9O1xuXG5cdFx0UGVuZGluZy5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgcSA9IHRoaXMuY29uc3VtZXJzO1xuXHRcdFx0dmFyIGhhbmRsZXIgPSB0aGlzLmhhbmRsZXI7XG5cdFx0XHR0aGlzLmhhbmRsZXIgPSB0aGlzLmhhbmRsZXIuam9pbigpO1xuXHRcdFx0dGhpcy5jb25zdW1lcnMgPSB2b2lkIDA7XG5cblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgcS5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHRoYW5kbGVyLndoZW4ocVtpXSk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdFBlbmRpbmcucHJvdG90eXBlLmJlY29tZSA9IGZ1bmN0aW9uKGhhbmRsZXIpIHtcblx0XHRcdGlmKHRoaXMucmVzb2x2ZWQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnJlc29sdmVkID0gdHJ1ZTtcblx0XHRcdHRoaXMuaGFuZGxlciA9IGhhbmRsZXI7XG5cdFx0XHRpZih0aGlzLmNvbnN1bWVycyAhPT0gdm9pZCAwKSB7XG5cdFx0XHRcdHRhc2tzLmVucXVldWUodGhpcyk7XG5cdFx0XHR9XG5cblx0XHRcdGlmKHRoaXMuY29udGV4dCAhPT0gdm9pZCAwKSB7XG5cdFx0XHRcdGhhbmRsZXIuX3JlcG9ydCh0aGlzLmNvbnRleHQpO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRQZW5kaW5nLnByb3RvdHlwZS53aGVuID0gZnVuY3Rpb24oY29udGludWF0aW9uKSB7XG5cdFx0XHRpZih0aGlzLnJlc29sdmVkKSB7XG5cdFx0XHRcdHRhc2tzLmVucXVldWUobmV3IENvbnRpbnVhdGlvblRhc2soY29udGludWF0aW9uLCB0aGlzLmhhbmRsZXIpKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmKHRoaXMuY29uc3VtZXJzID09PSB2b2lkIDApIHtcblx0XHRcdFx0XHR0aGlzLmNvbnN1bWVycyA9IFtjb250aW51YXRpb25dO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuY29uc3VtZXJzLnB1c2goY29udGludWF0aW9uKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBAZGVwcmVjYXRlZFxuXHRcdCAqL1xuXHRcdFBlbmRpbmcucHJvdG90eXBlLm5vdGlmeSA9IGZ1bmN0aW9uKHgpIHtcblx0XHRcdGlmKCF0aGlzLnJlc29sdmVkKSB7XG5cdFx0XHRcdHRhc2tzLmVucXVldWUobmV3IFByb2dyZXNzVGFzayh4LCB0aGlzKSk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdFBlbmRpbmcucHJvdG90eXBlLmZhaWwgPSBmdW5jdGlvbihjb250ZXh0KSB7XG5cdFx0XHR2YXIgYyA9IHR5cGVvZiBjb250ZXh0ID09PSAndW5kZWZpbmVkJyA/IHRoaXMuY29udGV4dCA6IGNvbnRleHQ7XG5cdFx0XHR0aGlzLnJlc29sdmVkICYmIHRoaXMuaGFuZGxlci5qb2luKCkuZmFpbChjKTtcblx0XHR9O1xuXG5cdFx0UGVuZGluZy5wcm90b3R5cGUuX3JlcG9ydCA9IGZ1bmN0aW9uKGNvbnRleHQpIHtcblx0XHRcdHRoaXMucmVzb2x2ZWQgJiYgdGhpcy5oYW5kbGVyLmpvaW4oKS5fcmVwb3J0KGNvbnRleHQpO1xuXHRcdH07XG5cblx0XHRQZW5kaW5nLnByb3RvdHlwZS5fdW5yZXBvcnQgPSBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMucmVzb2x2ZWQgJiYgdGhpcy5oYW5kbGVyLmpvaW4oKS5fdW5yZXBvcnQoKTtcblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogV3JhcCBhbm90aGVyIGhhbmRsZXIgYW5kIGZvcmNlIGl0IGludG8gYSBmdXR1cmUgc3RhY2tcblx0XHQgKiBAcGFyYW0ge29iamVjdH0gaGFuZGxlclxuXHRcdCAqIEBjb25zdHJ1Y3RvclxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIEFzeW5jKGhhbmRsZXIpIHtcblx0XHRcdHRoaXMuaGFuZGxlciA9IGhhbmRsZXI7XG5cdFx0fVxuXG5cdFx0aW5oZXJpdChIYW5kbGVyLCBBc3luYyk7XG5cblx0XHRBc3luYy5wcm90b3R5cGUud2hlbiA9IGZ1bmN0aW9uKGNvbnRpbnVhdGlvbikge1xuXHRcdFx0dGFza3MuZW5xdWV1ZShuZXcgQ29udGludWF0aW9uVGFzayhjb250aW51YXRpb24sIHRoaXMpKTtcblx0XHR9O1xuXG5cdFx0QXN5bmMucHJvdG90eXBlLl9yZXBvcnQgPSBmdW5jdGlvbihjb250ZXh0KSB7XG5cdFx0XHR0aGlzLmpvaW4oKS5fcmVwb3J0KGNvbnRleHQpO1xuXHRcdH07XG5cblx0XHRBc3luYy5wcm90b3R5cGUuX3VucmVwb3J0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLmpvaW4oKS5fdW5yZXBvcnQoKTtcblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogSGFuZGxlciB0aGF0IHdyYXBzIGFuIHVudHJ1c3RlZCB0aGVuYWJsZSBhbmQgYXNzaW1pbGF0ZXMgaXQgaW4gYSBmdXR1cmUgc3RhY2tcblx0XHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSB0aGVuXG5cdFx0ICogQHBhcmFtIHt7dGhlbjogZnVuY3Rpb259fSB0aGVuYWJsZVxuXHRcdCAqIEBjb25zdHJ1Y3RvclxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIFRoZW5hYmxlKHRoZW4sIHRoZW5hYmxlKSB7XG5cdFx0XHRQZW5kaW5nLmNhbGwodGhpcyk7XG5cdFx0XHR0YXNrcy5lbnF1ZXVlKG5ldyBBc3NpbWlsYXRlVGFzayh0aGVuLCB0aGVuYWJsZSwgdGhpcykpO1xuXHRcdH1cblxuXHRcdGluaGVyaXQoUGVuZGluZywgVGhlbmFibGUpO1xuXG5cdFx0LyoqXG5cdFx0ICogSGFuZGxlciBmb3IgYSBmdWxmaWxsZWQgcHJvbWlzZVxuXHRcdCAqIEBwYXJhbSB7Kn0geCBmdWxmaWxsbWVudCB2YWx1ZVxuXHRcdCAqIEBjb25zdHJ1Y3RvclxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIEZ1bGZpbGxlZCh4KSB7XG5cdFx0XHRQcm9taXNlLmNyZWF0ZUNvbnRleHQodGhpcyk7XG5cdFx0XHR0aGlzLnZhbHVlID0geDtcblx0XHR9XG5cblx0XHRpbmhlcml0KEhhbmRsZXIsIEZ1bGZpbGxlZCk7XG5cblx0XHRGdWxmaWxsZWQucHJvdG90eXBlLl9zdGF0ZSA9IDE7XG5cblx0XHRGdWxmaWxsZWQucHJvdG90eXBlLmZvbGQgPSBmdW5jdGlvbihmLCB6LCBjLCB0bykge1xuXHRcdFx0cnVuQ29udGludWF0aW9uMyhmLCB6LCB0aGlzLCBjLCB0byk7XG5cdFx0fTtcblxuXHRcdEZ1bGZpbGxlZC5wcm90b3R5cGUud2hlbiA9IGZ1bmN0aW9uKGNvbnQpIHtcblx0XHRcdHJ1bkNvbnRpbnVhdGlvbjEoY29udC5mdWxmaWxsZWQsIHRoaXMsIGNvbnQucmVjZWl2ZXIsIGNvbnQucmVzb2x2ZXIpO1xuXHRcdH07XG5cblx0XHR2YXIgZXJyb3JJZCA9IDA7XG5cblx0XHQvKipcblx0XHQgKiBIYW5kbGVyIGZvciBhIHJlamVjdGVkIHByb21pc2Vcblx0XHQgKiBAcGFyYW0geyp9IHggcmVqZWN0aW9uIHJlYXNvblxuXHRcdCAqIEBjb25zdHJ1Y3RvclxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIFJlamVjdGVkKHgpIHtcblx0XHRcdFByb21pc2UuY3JlYXRlQ29udGV4dCh0aGlzKTtcblxuXHRcdFx0dGhpcy5pZCA9ICsrZXJyb3JJZDtcblx0XHRcdHRoaXMudmFsdWUgPSB4O1xuXHRcdFx0dGhpcy5oYW5kbGVkID0gZmFsc2U7XG5cdFx0XHR0aGlzLnJlcG9ydGVkID0gZmFsc2U7XG5cblx0XHRcdHRoaXMuX3JlcG9ydCgpO1xuXHRcdH1cblxuXHRcdGluaGVyaXQoSGFuZGxlciwgUmVqZWN0ZWQpO1xuXG5cdFx0UmVqZWN0ZWQucHJvdG90eXBlLl9zdGF0ZSA9IC0xO1xuXG5cdFx0UmVqZWN0ZWQucHJvdG90eXBlLmZvbGQgPSBmdW5jdGlvbihmLCB6LCBjLCB0bykge1xuXHRcdFx0dG8uYmVjb21lKHRoaXMpO1xuXHRcdH07XG5cblx0XHRSZWplY3RlZC5wcm90b3R5cGUud2hlbiA9IGZ1bmN0aW9uKGNvbnQpIHtcblx0XHRcdGlmKHR5cGVvZiBjb250LnJlamVjdGVkID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdHRoaXMuX3VucmVwb3J0KCk7XG5cdFx0XHR9XG5cdFx0XHRydW5Db250aW51YXRpb24xKGNvbnQucmVqZWN0ZWQsIHRoaXMsIGNvbnQucmVjZWl2ZXIsIGNvbnQucmVzb2x2ZXIpO1xuXHRcdH07XG5cblx0XHRSZWplY3RlZC5wcm90b3R5cGUuX3JlcG9ydCA9IGZ1bmN0aW9uKGNvbnRleHQpIHtcblx0XHRcdHRhc2tzLmFmdGVyUXVldWUobmV3IFJlcG9ydFRhc2sodGhpcywgY29udGV4dCkpO1xuXHRcdH07XG5cblx0XHRSZWplY3RlZC5wcm90b3R5cGUuX3VucmVwb3J0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZih0aGlzLmhhbmRsZWQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5oYW5kbGVkID0gdHJ1ZTtcblx0XHRcdHRhc2tzLmFmdGVyUXVldWUobmV3IFVucmVwb3J0VGFzayh0aGlzKSk7XG5cdFx0fTtcblxuXHRcdFJlamVjdGVkLnByb3RvdHlwZS5mYWlsID0gZnVuY3Rpb24oY29udGV4dCkge1xuXHRcdFx0dGhpcy5yZXBvcnRlZCA9IHRydWU7XG5cdFx0XHRlbWl0UmVqZWN0aW9uKCd1bmhhbmRsZWRSZWplY3Rpb24nLCB0aGlzKTtcblx0XHRcdFByb21pc2Uub25GYXRhbFJlamVjdGlvbih0aGlzLCBjb250ZXh0ID09PSB2b2lkIDAgPyB0aGlzLmNvbnRleHQgOiBjb250ZXh0KTtcblx0XHR9O1xuXG5cdFx0ZnVuY3Rpb24gUmVwb3J0VGFzayhyZWplY3Rpb24sIGNvbnRleHQpIHtcblx0XHRcdHRoaXMucmVqZWN0aW9uID0gcmVqZWN0aW9uO1xuXHRcdFx0dGhpcy5jb250ZXh0ID0gY29udGV4dDtcblx0XHR9XG5cblx0XHRSZXBvcnRUYXNrLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmKCF0aGlzLnJlamVjdGlvbi5oYW5kbGVkICYmICF0aGlzLnJlamVjdGlvbi5yZXBvcnRlZCkge1xuXHRcdFx0XHR0aGlzLnJlamVjdGlvbi5yZXBvcnRlZCA9IHRydWU7XG5cdFx0XHRcdGVtaXRSZWplY3Rpb24oJ3VuaGFuZGxlZFJlamVjdGlvbicsIHRoaXMucmVqZWN0aW9uKSB8fFxuXHRcdFx0XHRcdFByb21pc2Uub25Qb3RlbnRpYWxseVVuaGFuZGxlZFJlamVjdGlvbih0aGlzLnJlamVjdGlvbiwgdGhpcy5jb250ZXh0KTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0ZnVuY3Rpb24gVW5yZXBvcnRUYXNrKHJlamVjdGlvbikge1xuXHRcdFx0dGhpcy5yZWplY3Rpb24gPSByZWplY3Rpb247XG5cdFx0fVxuXG5cdFx0VW5yZXBvcnRUYXNrLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmKHRoaXMucmVqZWN0aW9uLnJlcG9ydGVkKSB7XG5cdFx0XHRcdGVtaXRSZWplY3Rpb24oJ3JlamVjdGlvbkhhbmRsZWQnLCB0aGlzLnJlamVjdGlvbikgfHxcblx0XHRcdFx0XHRQcm9taXNlLm9uUG90ZW50aWFsbHlVbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVkKHRoaXMucmVqZWN0aW9uKTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0Ly8gVW5oYW5kbGVkIHJlamVjdGlvbiBob29rc1xuXHRcdC8vIEJ5IGRlZmF1bHQsIGV2ZXJ5dGhpbmcgaXMgYSBub29wXG5cblx0XHRQcm9taXNlLmNyZWF0ZUNvbnRleHRcblx0XHRcdD0gUHJvbWlzZS5lbnRlckNvbnRleHRcblx0XHRcdD0gUHJvbWlzZS5leGl0Q29udGV4dFxuXHRcdFx0PSBQcm9taXNlLm9uUG90ZW50aWFsbHlVbmhhbmRsZWRSZWplY3Rpb25cblx0XHRcdD0gUHJvbWlzZS5vblBvdGVudGlhbGx5VW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlZFxuXHRcdFx0PSBQcm9taXNlLm9uRmF0YWxSZWplY3Rpb25cblx0XHRcdD0gbm9vcDtcblxuXHRcdC8vIEVycm9ycyBhbmQgc2luZ2xldG9uc1xuXG5cdFx0dmFyIGZvcmV2ZXJQZW5kaW5nSGFuZGxlciA9IG5ldyBIYW5kbGVyKCk7XG5cdFx0dmFyIGZvcmV2ZXJQZW5kaW5nUHJvbWlzZSA9IG5ldyBQcm9taXNlKEhhbmRsZXIsIGZvcmV2ZXJQZW5kaW5nSGFuZGxlcik7XG5cblx0XHRmdW5jdGlvbiBjeWNsZSgpIHtcblx0XHRcdHJldHVybiBuZXcgUmVqZWN0ZWQobmV3IFR5cGVFcnJvcignUHJvbWlzZSBjeWNsZScpKTtcblx0XHR9XG5cblx0XHQvLyBUYXNrIHJ1bm5lcnNcblxuXHRcdC8qKlxuXHRcdCAqIFJ1biBhIHNpbmdsZSBjb25zdW1lclxuXHRcdCAqIEBjb25zdHJ1Y3RvclxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIENvbnRpbnVhdGlvblRhc2soY29udGludWF0aW9uLCBoYW5kbGVyKSB7XG5cdFx0XHR0aGlzLmNvbnRpbnVhdGlvbiA9IGNvbnRpbnVhdGlvbjtcblx0XHRcdHRoaXMuaGFuZGxlciA9IGhhbmRsZXI7XG5cdFx0fVxuXG5cdFx0Q29udGludWF0aW9uVGFzay5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLmhhbmRsZXIuam9pbigpLndoZW4odGhpcy5jb250aW51YXRpb24pO1xuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBSdW4gYSBxdWV1ZSBvZiBwcm9ncmVzcyBoYW5kbGVyc1xuXHRcdCAqIEBjb25zdHJ1Y3RvclxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIFByb2dyZXNzVGFzayh2YWx1ZSwgaGFuZGxlcikge1xuXHRcdFx0dGhpcy5oYW5kbGVyID0gaGFuZGxlcjtcblx0XHRcdHRoaXMudmFsdWUgPSB2YWx1ZTtcblx0XHR9XG5cblx0XHRQcm9ncmVzc1Rhc2sucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHEgPSB0aGlzLmhhbmRsZXIuY29uc3VtZXJzO1xuXHRcdFx0aWYocSA9PT0gdm9pZCAwKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Zm9yICh2YXIgYywgaSA9IDA7IGkgPCBxLmxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdGMgPSBxW2ldO1xuXHRcdFx0XHRydW5Ob3RpZnkoYy5wcm9ncmVzcywgdGhpcy52YWx1ZSwgdGhpcy5oYW5kbGVyLCBjLnJlY2VpdmVyLCBjLnJlc29sdmVyKTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogQXNzaW1pbGF0ZSBhIHRoZW5hYmxlLCBzZW5kaW5nIGl0J3MgdmFsdWUgdG8gcmVzb2x2ZXJcblx0XHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSB0aGVuXG5cdFx0ICogQHBhcmFtIHtvYmplY3R8ZnVuY3Rpb259IHRoZW5hYmxlXG5cdFx0ICogQHBhcmFtIHtvYmplY3R9IHJlc29sdmVyXG5cdFx0ICogQGNvbnN0cnVjdG9yXG5cdFx0ICovXG5cdFx0ZnVuY3Rpb24gQXNzaW1pbGF0ZVRhc2sodGhlbiwgdGhlbmFibGUsIHJlc29sdmVyKSB7XG5cdFx0XHR0aGlzLl90aGVuID0gdGhlbjtcblx0XHRcdHRoaXMudGhlbmFibGUgPSB0aGVuYWJsZTtcblx0XHRcdHRoaXMucmVzb2x2ZXIgPSByZXNvbHZlcjtcblx0XHR9XG5cblx0XHRBc3NpbWlsYXRlVGFzay5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaCA9IHRoaXMucmVzb2x2ZXI7XG5cdFx0XHR0cnlBc3NpbWlsYXRlKHRoaXMuX3RoZW4sIHRoaXMudGhlbmFibGUsIF9yZXNvbHZlLCBfcmVqZWN0LCBfbm90aWZ5KTtcblxuXHRcdFx0ZnVuY3Rpb24gX3Jlc29sdmUoeCkgeyBoLnJlc29sdmUoeCk7IH1cblx0XHRcdGZ1bmN0aW9uIF9yZWplY3QoeCkgIHsgaC5yZWplY3QoeCk7IH1cblx0XHRcdGZ1bmN0aW9uIF9ub3RpZnkoeCkgIHsgaC5ub3RpZnkoeCk7IH1cblx0XHR9O1xuXG5cdFx0ZnVuY3Rpb24gdHJ5QXNzaW1pbGF0ZSh0aGVuLCB0aGVuYWJsZSwgcmVzb2x2ZSwgcmVqZWN0LCBub3RpZnkpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdHRoZW4uY2FsbCh0aGVuYWJsZSwgcmVzb2x2ZSwgcmVqZWN0LCBub3RpZnkpO1xuXHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRyZWplY3QoZSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogRm9sZCBhIGhhbmRsZXIgdmFsdWUgd2l0aCB6XG5cdFx0ICogQGNvbnN0cnVjdG9yXG5cdFx0ICovXG5cdFx0ZnVuY3Rpb24gRm9sZChmLCB6LCBjLCB0bykge1xuXHRcdFx0dGhpcy5mID0gZjsgdGhpcy56ID0gejsgdGhpcy5jID0gYzsgdGhpcy50byA9IHRvO1xuXHRcdFx0dGhpcy5yZXNvbHZlciA9IGZhaWxJZlJlamVjdGVkO1xuXHRcdFx0dGhpcy5yZWNlaXZlciA9IHRoaXM7XG5cdFx0fVxuXG5cdFx0Rm9sZC5wcm90b3R5cGUuZnVsZmlsbGVkID0gZnVuY3Rpb24oeCkge1xuXHRcdFx0dGhpcy5mLmNhbGwodGhpcy5jLCB0aGlzLnosIHgsIHRoaXMudG8pO1xuXHRcdH07XG5cblx0XHRGb2xkLnByb3RvdHlwZS5yZWplY3RlZCA9IGZ1bmN0aW9uKHgpIHtcblx0XHRcdHRoaXMudG8ucmVqZWN0KHgpO1xuXHRcdH07XG5cblx0XHRGb2xkLnByb3RvdHlwZS5wcm9ncmVzcyA9IGZ1bmN0aW9uKHgpIHtcblx0XHRcdHRoaXMudG8ubm90aWZ5KHgpO1xuXHRcdH07XG5cblx0XHQvLyBPdGhlciBoZWxwZXJzXG5cblx0XHQvKipcblx0XHQgKiBAcGFyYW0geyp9IHhcblx0XHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZmYgeCBpcyBhIHRydXN0ZWQgUHJvbWlzZVxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIGlzUHJvbWlzZSh4KSB7XG5cdFx0XHRyZXR1cm4geCBpbnN0YW5jZW9mIFByb21pc2U7XG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogVGVzdCBqdXN0IGVub3VnaCB0byBydWxlIG91dCBwcmltaXRpdmVzLCBpbiBvcmRlciB0byB0YWtlIGZhc3RlclxuXHRcdCAqIHBhdGhzIGluIHNvbWUgY29kZVxuXHRcdCAqIEBwYXJhbSB7Kn0geFxuXHRcdCAqIEByZXR1cm5zIHtib29sZWFufSBmYWxzZSBpZmYgeCBpcyBndWFyYW50ZWVkICpub3QqIHRvIGJlIGEgdGhlbmFibGVcblx0XHQgKi9cblx0XHRmdW5jdGlvbiBtYXliZVRoZW5hYmxlKHgpIHtcblx0XHRcdHJldHVybiAodHlwZW9mIHggPT09ICdvYmplY3QnIHx8IHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nKSAmJiB4ICE9PSBudWxsO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHJ1bkNvbnRpbnVhdGlvbjEoZiwgaCwgcmVjZWl2ZXIsIG5leHQpIHtcblx0XHRcdGlmKHR5cGVvZiBmICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdHJldHVybiBuZXh0LmJlY29tZShoKTtcblx0XHRcdH1cblxuXHRcdFx0UHJvbWlzZS5lbnRlckNvbnRleHQoaCk7XG5cdFx0XHR0cnlDYXRjaFJlamVjdChmLCBoLnZhbHVlLCByZWNlaXZlciwgbmV4dCk7XG5cdFx0XHRQcm9taXNlLmV4aXRDb250ZXh0KCk7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gcnVuQ29udGludWF0aW9uMyhmLCB4LCBoLCByZWNlaXZlciwgbmV4dCkge1xuXHRcdFx0aWYodHlwZW9mIGYgIT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0cmV0dXJuIG5leHQuYmVjb21lKGgpO1xuXHRcdFx0fVxuXG5cdFx0XHRQcm9taXNlLmVudGVyQ29udGV4dChoKTtcblx0XHRcdHRyeUNhdGNoUmVqZWN0MyhmLCB4LCBoLnZhbHVlLCByZWNlaXZlciwgbmV4dCk7XG5cdFx0XHRQcm9taXNlLmV4aXRDb250ZXh0KCk7XG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogQGRlcHJlY2F0ZWRcblx0XHQgKi9cblx0XHRmdW5jdGlvbiBydW5Ob3RpZnkoZiwgeCwgaCwgcmVjZWl2ZXIsIG5leHQpIHtcblx0XHRcdGlmKHR5cGVvZiBmICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdHJldHVybiBuZXh0Lm5vdGlmeSh4KTtcblx0XHRcdH1cblxuXHRcdFx0UHJvbWlzZS5lbnRlckNvbnRleHQoaCk7XG5cdFx0XHR0cnlDYXRjaFJldHVybihmLCB4LCByZWNlaXZlciwgbmV4dCk7XG5cdFx0XHRQcm9taXNlLmV4aXRDb250ZXh0KCk7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gdHJ5Q2F0Y2gyKGYsIGEsIGIpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdHJldHVybiBmKGEsIGIpO1xuXHRcdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRcdHJldHVybiByZWplY3QoZSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJuIGYuY2FsbCh0aGlzQXJnLCB4KSwgb3IgaWYgaXQgdGhyb3dzIHJldHVybiBhIHJlamVjdGVkIHByb21pc2UgZm9yXG5cdFx0ICogdGhlIHRocm93biBleGNlcHRpb25cblx0XHQgKi9cblx0XHRmdW5jdGlvbiB0cnlDYXRjaFJlamVjdChmLCB4LCB0aGlzQXJnLCBuZXh0KSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRuZXh0LmJlY29tZShnZXRIYW5kbGVyKGYuY2FsbCh0aGlzQXJnLCB4KSkpO1xuXHRcdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRcdG5leHQuYmVjb21lKG5ldyBSZWplY3RlZChlKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogU2FtZSBhcyBhYm92ZSwgYnV0IGluY2x1ZGVzIHRoZSBleHRyYSBhcmd1bWVudCBwYXJhbWV0ZXIuXG5cdFx0ICovXG5cdFx0ZnVuY3Rpb24gdHJ5Q2F0Y2hSZWplY3QzKGYsIHgsIHksIHRoaXNBcmcsIG5leHQpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGYuY2FsbCh0aGlzQXJnLCB4LCB5LCBuZXh0KTtcblx0XHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0XHRuZXh0LmJlY29tZShuZXcgUmVqZWN0ZWQoZSkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIEBkZXByZWNhdGVkXG5cdFx0ICogUmV0dXJuIGYuY2FsbCh0aGlzQXJnLCB4KSwgb3IgaWYgaXQgdGhyb3dzLCAqcmV0dXJuKiB0aGUgZXhjZXB0aW9uXG5cdFx0ICovXG5cdFx0ZnVuY3Rpb24gdHJ5Q2F0Y2hSZXR1cm4oZiwgeCwgdGhpc0FyZywgbmV4dCkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0bmV4dC5ub3RpZnkoZi5jYWxsKHRoaXNBcmcsIHgpKTtcblx0XHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0XHRuZXh0Lm5vdGlmeShlKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBpbmhlcml0KFBhcmVudCwgQ2hpbGQpIHtcblx0XHRcdENoaWxkLnByb3RvdHlwZSA9IG9iamVjdENyZWF0ZShQYXJlbnQucHJvdG90eXBlKTtcblx0XHRcdENoaWxkLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENoaWxkO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHNuZCh4LCB5KSB7XG5cdFx0XHRyZXR1cm4geTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBub29wKCkge31cblxuXHRcdGZ1bmN0aW9uIGluaXRFbWl0UmVqZWN0aW9uKCkge1xuXHRcdFx0LypnbG9iYWwgcHJvY2Vzcywgc2VsZiwgQ3VzdG9tRXZlbnQqL1xuXHRcdFx0aWYodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MgIT09IG51bGxcblx0XHRcdFx0JiYgdHlwZW9mIHByb2Nlc3MuZW1pdCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHQvLyBSZXR1cm5pbmcgZmFsc3kgaGVyZSBtZWFucyB0byBjYWxsIHRoZSBkZWZhdWx0XG5cdFx0XHRcdC8vIG9uUG90ZW50aWFsbHlVbmhhbmRsZWRSZWplY3Rpb24gQVBJLiAgVGhpcyBpcyBzYWZlIGV2ZW4gaW5cblx0XHRcdFx0Ly8gYnJvd3NlcmlmeSBzaW5jZSBwcm9jZXNzLmVtaXQgYWx3YXlzIHJldHVybnMgZmFsc3kgaW4gYnJvd3NlcmlmeTpcblx0XHRcdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL2RlZnVuY3R6b21iaWUvbm9kZS1wcm9jZXNzL2Jsb2IvbWFzdGVyL2Jyb3dzZXIuanMjTDQwLUw0NlxuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24odHlwZSwgcmVqZWN0aW9uKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHR5cGUgPT09ICd1bmhhbmRsZWRSZWplY3Rpb24nXG5cdFx0XHRcdFx0XHQ/IHByb2Nlc3MuZW1pdCh0eXBlLCByZWplY3Rpb24udmFsdWUsIHJlamVjdGlvbilcblx0XHRcdFx0XHRcdDogcHJvY2Vzcy5lbWl0KHR5cGUsIHJlamVjdGlvbik7XG5cdFx0XHRcdH07XG5cdFx0XHR9IGVsc2UgaWYodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBDdXN0b21FdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRyZXR1cm4gKGZ1bmN0aW9uKG5vb3AsIHNlbGYsIEN1c3RvbUV2ZW50KSB7XG5cdFx0XHRcdFx0dmFyIGhhc0N1c3RvbUV2ZW50ID0gZmFsc2U7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdHZhciBldiA9IG5ldyBDdXN0b21FdmVudCgndW5oYW5kbGVkUmVqZWN0aW9uJyk7XG5cdFx0XHRcdFx0XHRoYXNDdXN0b21FdmVudCA9IGV2IGluc3RhbmNlb2YgQ3VzdG9tRXZlbnQ7XG5cdFx0XHRcdFx0fSBjYXRjaCAoZSkge31cblxuXHRcdFx0XHRcdHJldHVybiAhaGFzQ3VzdG9tRXZlbnQgPyBub29wIDogZnVuY3Rpb24odHlwZSwgcmVqZWN0aW9uKSB7XG5cdFx0XHRcdFx0XHR2YXIgZXYgPSBuZXcgQ3VzdG9tRXZlbnQodHlwZSwge1xuXHRcdFx0XHRcdFx0XHRkZXRhaWw6IHtcblx0XHRcdFx0XHRcdFx0XHRyZWFzb246IHJlamVjdGlvbi52YWx1ZSxcblx0XHRcdFx0XHRcdFx0XHRrZXk6IHJlamVjdGlvblxuXHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHRidWJibGVzOiBmYWxzZSxcblx0XHRcdFx0XHRcdFx0Y2FuY2VsYWJsZTogdHJ1ZVxuXHRcdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHRcdHJldHVybiAhc2VsZi5kaXNwYXRjaEV2ZW50KGV2KTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9KG5vb3AsIHNlbGYsIEN1c3RvbUV2ZW50KSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBub29wO1xuXHRcdH1cblxuXHRcdHJldHVybiBQcm9taXNlO1xuXHR9O1xufSk7XG59KHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZSA6IGZ1bmN0aW9uKGZhY3RvcnkpIHsgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7IH0pKTtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5M2FHVnVMMnhwWWk5dFlXdGxVSEp2YldselpTNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2lCQWJHbGpaVzV6WlNCTlNWUWdUR2xqWlc1elpTQW9ZeWtnWTI5d2VYSnBaMmgwSURJd01UQXRNakF4TkNCdmNtbG5hVzVoYkNCaGRYUm9iM0lnYjNJZ1lYVjBhRzl5Y3lBcUwxeHVMeW9xSUVCaGRYUm9iM0lnUW5KcFlXNGdRMkYyWVd4cFpYSWdLaTljYmk4cUtpQkFZWFYwYUc5eUlFcHZhRzRnU0dGdWJpQXFMMXh1WEc0b1puVnVZM1JwYjI0b1pHVm1hVzVsS1NCN0lDZDFjMlVnYzNSeWFXTjBKenRjYm1SbFptbHVaU2htZFc1amRHbHZiaWdwSUh0Y2JseHVYSFJ5WlhSMWNtNGdablZ1WTNScGIyNGdiV0ZyWlZCeWIyMXBjMlVvWlc1MmFYSnZibTFsYm5RcElIdGNibHh1WEhSY2RIWmhjaUIwWVhOcmN5QTlJR1Z1ZG1seWIyNXRaVzUwTG5OamFHVmtkV3hsY2p0Y2JseDBYSFIyWVhJZ1pXMXBkRkpsYW1WamRHbHZiaUE5SUdsdWFYUkZiV2wwVW1WcVpXTjBhVzl1S0NrN1hHNWNibHgwWEhSMllYSWdiMkpxWldOMFEzSmxZWFJsSUQwZ1QySnFaV04wTG1OeVpXRjBaU0I4ZkZ4dVhIUmNkRngwWm5WdVkzUnBiMjRvY0hKdmRHOHBJSHRjYmx4MFhIUmNkRngwWm5WdVkzUnBiMjRnUTJocGJHUW9LU0I3ZlZ4dVhIUmNkRngwWEhSRGFHbHNaQzV3Y205MGIzUjVjR1VnUFNCd2NtOTBienRjYmx4MFhIUmNkRngwY21WMGRYSnVJRzVsZHlCRGFHbHNaQ2dwTzF4dVhIUmNkRngwZlR0Y2JseHVYSFJjZEM4cUtseHVYSFJjZENBcUlFTnlaV0YwWlNCaElIQnliMjFwYzJVZ2QyaHZjMlVnWm1GMFpTQnBjeUJrWlhSbGNtMXBibVZrSUdKNUlISmxjMjlzZG1WeVhHNWNkRngwSUNvZ1FHTnZibk4wY25WamRHOXlYRzVjZEZ4MElDb2dRSEpsZEhWeWJuTWdlMUJ5YjIxcGMyVjlJSEJ5YjIxcGMyVmNibHgwWEhRZ0tpQkFibUZ0WlNCUWNtOXRhWE5sWEc1Y2RGeDBJQ292WEc1Y2RGeDBablZ1WTNScGIyNGdVSEp2YldselpTaHlaWE52YkhabGNpd2dhR0Z1Wkd4bGNpa2dlMXh1WEhSY2RGeDBkR2hwY3k1ZmFHRnVaR3hsY2lBOUlISmxjMjlzZG1WeUlEMDlQU0JJWVc1a2JHVnlJRDhnYUdGdVpHeGxjaUE2SUdsdWFYUW9jbVZ6YjJ4MlpYSXBPMXh1WEhSY2RIMWNibHh1WEhSY2RDOHFLbHh1WEhSY2RDQXFJRkoxYmlCMGFHVWdjM1Z3Y0d4cFpXUWdjbVZ6YjJ4MlpYSmNibHgwWEhRZ0tpQkFjR0Z5WVcwZ2NtVnpiMngyWlhKY2JseDBYSFFnS2lCQWNtVjBkWEp1Y3lCN1VHVnVaR2x1WjMxY2JseDBYSFFnS2k5Y2JseDBYSFJtZFc1amRHbHZiaUJwYm1sMEtISmxjMjlzZG1WeUtTQjdYRzVjZEZ4MFhIUjJZWElnYUdGdVpHeGxjaUE5SUc1bGR5QlFaVzVrYVc1bktDazdYRzVjYmx4MFhIUmNkSFJ5ZVNCN1hHNWNkRngwWEhSY2RISmxjMjlzZG1WeUtIQnliMjFwYzJWU1pYTnZiSFpsTENCd2NtOXRhWE5sVW1WcVpXTjBMQ0J3Y205dGFYTmxUbTkwYVdaNUtUdGNibHgwWEhSY2RIMGdZMkYwWTJnZ0tHVXBJSHRjYmx4MFhIUmNkRngwY0hKdmJXbHpaVkpsYW1WamRDaGxLVHRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwY21WMGRYSnVJR2hoYm1Sc1pYSTdYRzVjYmx4MFhIUmNkQzhxS2x4dVhIUmNkRngwSUNvZ1ZISmhibk5wZEdsdmJpQm1jbTl0SUhCeVpTMXlaWE52YkhWMGFXOXVJSE4wWVhSbElIUnZJSEJ2YzNRdGNtVnpiMngxZEdsdmJpQnpkR0YwWlN3Z2JtOTBhV1o1YVc1blhHNWNkRngwWEhRZ0tpQmhiR3dnYkdsemRHVnVaWEp6SUc5bUlIUm9aU0IxYkhScGJXRjBaU0JtZFd4bWFXeHNiV1Z1ZENCdmNpQnlaV3BsWTNScGIyNWNibHgwWEhSY2RDQXFJRUJ3WVhKaGJTQjdLbjBnZUNCeVpYTnZiSFYwYVc5dUlIWmhiSFZsWEc1Y2RGeDBYSFFnS2k5Y2JseDBYSFJjZEdaMWJtTjBhVzl1SUhCeWIyMXBjMlZTWlhOdmJIWmxJQ2g0S1NCN1hHNWNkRngwWEhSY2RHaGhibVJzWlhJdWNtVnpiMngyWlNoNEtUdGNibHgwWEhSY2RIMWNibHgwWEhSY2RDOHFLbHh1WEhSY2RGeDBJQ29nVW1WcVpXTjBJSFJvYVhNZ2NISnZiV2x6WlNCM2FYUm9JSEpsWVhOdmJpd2dkMmhwWTJnZ2QybHNiQ0JpWlNCMWMyVmtJSFpsY21KaGRHbHRYRzVjZEZ4MFhIUWdLaUJBY0dGeVlXMGdlMFZ5Y205eWZDcDlJSEpsWVhOdmJpQnlaV3BsWTNScGIyNGdjbVZoYzI5dUxDQnpkSEp2Ym1kc2VTQnpkV2RuWlhOMFpXUmNibHgwWEhSY2RDQXFJQ0FnZEc4Z1ltVWdZVzRnUlhKeWIzSWdkSGx3WlZ4dVhIUmNkRngwSUNvdlhHNWNkRngwWEhSbWRXNWpkR2x2YmlCd2NtOXRhWE5sVW1WcVpXTjBJQ2h5WldGemIyNHBJSHRjYmx4MFhIUmNkRngwYUdGdVpHeGxjaTV5WldwbFkzUW9jbVZoYzI5dUtUdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBMeW9xWEc1Y2RGeDBYSFFnS2lCQVpHVndjbVZqWVhSbFpGeHVYSFJjZEZ4MElDb2dTWE56ZFdVZ1lTQndjbTluY21WemN5QmxkbVZ1ZEN3Z2JtOTBhV1o1YVc1bklHRnNiQ0J3Y205bmNtVnpjeUJzYVhOMFpXNWxjbk5jYmx4MFhIUmNkQ0FxSUVCd1lYSmhiU0I3S24wZ2VDQndjbTluY21WemN5QmxkbVZ1ZENCd1lYbHNiMkZrSUhSdklIQmhjM01nZEc4Z1lXeHNJR3hwYzNSbGJtVnljMXh1WEhSY2RGeDBJQ292WEc1Y2RGeDBYSFJtZFc1amRHbHZiaUJ3Y205dGFYTmxUbTkwYVdaNUlDaDRLU0I3WEc1Y2RGeDBYSFJjZEdoaGJtUnNaWEl1Ym05MGFXWjVLSGdwTzF4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4dVhIUmNkQzh2SUVOeVpXRjBhVzl1WEc1Y2JseDBYSFJRY205dGFYTmxMbkpsYzI5c2RtVWdQU0J5WlhOdmJIWmxPMXh1WEhSY2RGQnliMjFwYzJVdWNtVnFaV04wSUQwZ2NtVnFaV04wTzF4dVhIUmNkRkJ5YjIxcGMyVXVibVYyWlhJZ1BTQnVaWFpsY2p0Y2JseHVYSFJjZEZCeWIyMXBjMlV1WDJSbFptVnlJRDBnWkdWbVpYSTdYRzVjZEZ4MFVISnZiV2x6WlM1ZmFHRnVaR3hsY2lBOUlHZGxkRWhoYm1Sc1pYSTdYRzVjYmx4MFhIUXZLaXBjYmx4MFhIUWdLaUJTWlhSMWNtNXpJR0VnZEhKMWMzUmxaQ0J3Y205dGFYTmxMaUJKWmlCNElHbHpJR0ZzY21WaFpIa2dZU0IwY25WemRHVmtJSEJ5YjIxcGMyVXNJR2wwSUdselhHNWNkRngwSUNvZ2NtVjBkWEp1WldRc0lHOTBhR1Z5ZDJselpTQnlaWFIxY201eklHRWdibVYzSUhSeWRYTjBaV1FnVUhKdmJXbHpaU0IzYUdsamFDQm1iMnhzYjNkeklIZ3VYRzVjZEZ4MElDb2dRSEJoY21GdElDQjdLbjBnZUZ4dVhIUmNkQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUhCeWIyMXBjMlZjYmx4MFhIUWdLaTljYmx4MFhIUm1kVzVqZEdsdmJpQnlaWE52YkhabEtIZ3BJSHRjYmx4MFhIUmNkSEpsZEhWeWJpQnBjMUJ5YjIxcGMyVW9lQ2tnUHlCNFhHNWNkRngwWEhSY2REb2dibVYzSUZCeWIyMXBjMlVvU0dGdVpHeGxjaXdnYm1WM0lFRnplVzVqS0dkbGRFaGhibVJzWlhJb2VDa3BLVHRjYmx4MFhIUjlYRzVjYmx4MFhIUXZLaXBjYmx4MFhIUWdLaUJTWlhSMWNtNGdZU0J5WldwbFkzUWdjSEp2YldselpTQjNhWFJvSUhnZ1lYTWdhWFJ6SUhKbFlYTnZiaUFvZUNCcGN5QjFjMlZrSUhabGNtSmhkR2x0S1Z4dVhIUmNkQ0FxSUVCd1lYSmhiU0I3S24wZ2VGeHVYSFJjZENBcUlFQnlaWFIxY201eklIdFFjbTl0YVhObGZTQnlaV3BsWTNSbFpDQndjbTl0YVhObFhHNWNkRngwSUNvdlhHNWNkRngwWm5WdVkzUnBiMjRnY21WcVpXTjBLSGdwSUh0Y2JseDBYSFJjZEhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNoSVlXNWtiR1Z5TENCdVpYY2dRWE41Ym1Nb2JtVjNJRkpsYW1WamRHVmtLSGdwS1NrN1hHNWNkRngwZlZ4dVhHNWNkRngwTHlvcVhHNWNkRngwSUNvZ1VtVjBkWEp1SUdFZ2NISnZiV2x6WlNCMGFHRjBJSEpsYldGcGJuTWdjR1Z1WkdsdVp5Qm1iM0psZG1WeVhHNWNkRngwSUNvZ1FISmxkSFZ5Ym5NZ2UxQnliMjFwYzJWOUlHWnZjbVYyWlhJdGNHVnVaR2x1WnlCd2NtOXRhWE5sTGx4dVhIUmNkQ0FxTDF4dVhIUmNkR1oxYm1OMGFXOXVJRzVsZG1WeUtDa2dlMXh1WEhSY2RGeDBjbVYwZFhKdUlHWnZjbVYyWlhKUVpXNWthVzVuVUhKdmJXbHpaVHNnTHk4Z1UyaHZkV3hrSUdKbElHWnliM3BsYmx4dVhIUmNkSDFjYmx4dVhIUmNkQzhxS2x4dVhIUmNkQ0FxSUVOeVpXRjBaWE1nWVc0Z2FXNTBaWEp1WVd3Z2UzQnliMjFwYzJVc0lISmxjMjlzZG1WeWZTQndZV2x5WEc1Y2RGeDBJQ29nUUhCeWFYWmhkR1ZjYmx4MFhIUWdLaUJBY21WMGRYSnVjeUI3VUhKdmJXbHpaWDFjYmx4MFhIUWdLaTljYmx4MFhIUm1kVzVqZEdsdmJpQmtaV1psY2lncElIdGNibHgwWEhSY2RISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaElZVzVrYkdWeUxDQnVaWGNnVUdWdVpHbHVaeWdwS1R0Y2JseDBYSFI5WEc1Y2JseDBYSFF2THlCVWNtRnVjMlp2Y20xaGRHbHZiaUJoYm1RZ1pteHZkeUJqYjI1MGNtOXNYRzVjYmx4MFhIUXZLaXBjYmx4MFhIUWdLaUJVY21GdWMyWnZjbTBnZEdocGN5QndjbTl0YVhObEozTWdablZzWm1sc2JHMWxiblFnZG1Gc2RXVXNJSEpsZEhWeWJtbHVaeUJoSUc1bGR5QlFjbTl0YVhObFhHNWNkRngwSUNvZ1ptOXlJSFJvWlNCMGNtRnVjMlp2Y20xbFpDQnlaWE4xYkhRdUlDQkpaaUIwYUdVZ2NISnZiV2x6WlNCallXNXViM1FnWW1VZ1puVnNabWxzYkdWa0xDQnZibEpsYW1WamRHVmtYRzVjZEZ4MElDb2dhWE1nWTJGc2JHVmtJSGRwZEdnZ2RHaGxJSEpsWVhOdmJpNGdJRzl1VUhKdlozSmxjM01nS20xaGVTb2dZbVVnWTJGc2JHVmtJSGRwZEdnZ2RYQmtZWFJsY3lCMGIzZGhjbVJjYmx4MFhIUWdLaUIwYUdseklIQnliMjFwYzJVbmN5Qm1kV3htYVd4c2JXVnVkQzVjYmx4MFhIUWdLaUJBY0dGeVlXMGdlMloxYm1OMGFXOXVQWDBnYjI1R2RXeG1hV3hzWldRZ1puVnNabWxzYkcxbGJuUWdhR0Z1Wkd4bGNseHVYSFJjZENBcUlFQndZWEpoYlNCN1puVnVZM1JwYjI0OWZTQnZibEpsYW1WamRHVmtJSEpsYW1WamRHbHZiaUJvWVc1a2JHVnlYRzVjZEZ4MElDb2dRSEJoY21GdElIdG1kVzVqZEdsdmJqMTlJRzl1VUhKdlozSmxjM01nUUdSbGNISmxZMkYwWldRZ2NISnZaM0psYzNNZ2FHRnVaR3hsY2x4dVhIUmNkQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUc1bGR5QndjbTl0YVhObFhHNWNkRngwSUNvdlhHNWNkRngwVUhKdmJXbHpaUzV3Y205MGIzUjVjR1V1ZEdobGJpQTlJR1oxYm1OMGFXOXVLRzl1Um5Wc1ptbHNiR1ZrTENCdmJsSmxhbVZqZEdWa0xDQnZibEJ5YjJkeVpYTnpLU0I3WEc1Y2RGeDBYSFIyWVhJZ2NHRnlaVzUwSUQwZ2RHaHBjeTVmYUdGdVpHeGxjanRjYmx4MFhIUmNkSFpoY2lCemRHRjBaU0E5SUhCaGNtVnVkQzVxYjJsdUtDa3VjM1JoZEdVb0tUdGNibHh1WEhSY2RGeDBhV1lnS0NoMGVYQmxiMllnYjI1R2RXeG1hV3hzWldRZ0lUMDlJQ2RtZFc1amRHbHZiaWNnSmlZZ2MzUmhkR1VnUGlBd0tTQjhmRnh1WEhSY2RGeDBYSFFvZEhsd1pXOW1JRzl1VW1WcVpXTjBaV1FnSVQwOUlDZG1kVzVqZEdsdmJpY2dKaVlnYzNSaGRHVWdQQ0F3S1NrZ2UxeHVYSFJjZEZ4MFhIUXZMeUJUYUc5eWRDQmphWEpqZFdsME9pQjJZV3gxWlNCM2FXeHNJRzV2ZENCamFHRnVaMlVzSUhOcGJYQnNlU0J6YUdGeVpTQm9ZVzVrYkdWeVhHNWNkRngwWEhSY2RISmxkSFZ5YmlCdVpYY2dkR2hwY3k1amIyNXpkSEoxWTNSdmNpaElZVzVrYkdWeUxDQndZWEpsYm5RcE8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUjJZWElnY0NBOUlIUm9hWE11WDJKbFoyVjBLQ2s3WEc1Y2RGeDBYSFIyWVhJZ1kyaHBiR1FnUFNCd0xsOW9ZVzVrYkdWeU8xeHVYRzVjZEZ4MFhIUndZWEpsYm5RdVkyaGhhVzRvWTJocGJHUXNJSEJoY21WdWRDNXlaV05sYVhabGNpd2diMjVHZFd4bWFXeHNaV1FzSUc5dVVtVnFaV04wWldRc0lHOXVVSEp2WjNKbGMzTXBPMXh1WEc1Y2RGeDBYSFJ5WlhSMWNtNGdjRHRjYmx4MFhIUjlPMXh1WEc1Y2RGeDBMeW9xWEc1Y2RGeDBJQ29nU1dZZ2RHaHBjeUJ3Y205dGFYTmxJR05oYm01dmRDQmlaU0JtZFd4bWFXeHNaV1FnWkhWbElIUnZJR0Z1SUdWeWNtOXlMQ0JqWVd4c0lHOXVVbVZxWldOMFpXUWdkRzljYmx4MFhIUWdLaUJvWVc1a2JHVWdkR2hsSUdWeWNtOXlMaUJUYUc5eWRHTjFkQ0JtYjNJZ0xuUm9aVzRvZFc1a1pXWnBibVZrTENCdmJsSmxhbVZqZEdWa0tWeHVYSFJjZENBcUlFQndZWEpoYlNCN1puVnVZM1JwYjI0L2ZTQnZibEpsYW1WamRHVmtYRzVjZEZ4MElDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMWNibHgwWEhRZ0tpOWNibHgwWEhSUWNtOXRhWE5sTG5CeWIzUnZkSGx3WlZzblkyRjBZMmduWFNBOUlHWjFibU4wYVc5dUtHOXVVbVZxWldOMFpXUXBJSHRjYmx4MFhIUmNkSEpsZEhWeWJpQjBhR2x6TG5Sb1pXNG9kbTlwWkNBd0xDQnZibEpsYW1WamRHVmtLVHRjYmx4MFhIUjlPMXh1WEc1Y2RGeDBMeW9xWEc1Y2RGeDBJQ29nUTNKbFlYUmxjeUJoSUc1bGR5d2djR1Z1WkdsdVp5QndjbTl0YVhObElHOW1JSFJvWlNCellXMWxJSFI1Y0dVZ1lYTWdkR2hwY3lCd2NtOXRhWE5sWEc1Y2RGeDBJQ29nUUhCeWFYWmhkR1ZjYmx4MFhIUWdLaUJBY21WMGRYSnVjeUI3VUhKdmJXbHpaWDFjYmx4MFhIUWdLaTljYmx4MFhIUlFjbTl0YVhObExuQnliM1J2ZEhsd1pTNWZZbVZuWlhRZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUmNkSEpsZEhWeWJpQmlaV2RsZEVaeWIyMG9kR2hwY3k1ZmFHRnVaR3hsY2l3Z2RHaHBjeTVqYjI1emRISjFZM1J2Y2lrN1hHNWNkRngwZlR0Y2JseHVYSFJjZEdaMWJtTjBhVzl1SUdKbFoyVjBSbkp2YlNod1lYSmxiblFzSUZCeWIyMXBjMlVwSUh0Y2JseDBYSFJjZEhaaGNpQmphR2xzWkNBOUlHNWxkeUJRWlc1a2FXNW5LSEJoY21WdWRDNXlaV05sYVhabGNpd2djR0Z5Wlc1MExtcHZhVzRvS1M1amIyNTBaWGgwS1R0Y2JseDBYSFJjZEhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNoSVlXNWtiR1Z5TENCamFHbHNaQ2s3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBMeThnUVhKeVlYa2dZMjl0WW1sdVlYUnZjbk5jYmx4dVhIUmNkRkJ5YjIxcGMyVXVZV3hzSUQwZ1lXeHNPMXh1WEhSY2RGQnliMjFwYzJVdWNtRmpaU0E5SUhKaFkyVTdYRzVjZEZ4MFVISnZiV2x6WlM1ZmRISmhkbVZ5YzJVZ1BTQjBjbUYyWlhKelpUdGNibHh1WEhSY2RDOHFLbHh1WEhSY2RDQXFJRkpsZEhWeWJpQmhJSEJ5YjIxcGMyVWdkR2hoZENCM2FXeHNJR1oxYkdacGJHd2dkMmhsYmlCaGJHd2djSEp2YldselpYTWdhVzRnZEdobFhHNWNkRngwSUNvZ2FXNXdkWFFnWVhKeVlYa2dhR0YyWlNCbWRXeG1hV3hzWldRc0lHOXlJSGRwYkd3Z2NtVnFaV04wSUhkb1pXNGdiMjVsSUc5bUlIUm9aVnh1WEhSY2RDQXFJSEJ5YjIxcGMyVnpJSEpsYW1WamRITXVYRzVjZEZ4MElDb2dRSEJoY21GdElIdGhjbkpoZVgwZ2NISnZiV2x6WlhNZ1lYSnlZWGtnYjJZZ2NISnZiV2x6WlhOY2JseDBYSFFnS2lCQWNtVjBkWEp1Y3lCN1VISnZiV2x6WlgwZ2NISnZiV2x6WlNCbWIzSWdZWEp5WVhrZ2IyWWdablZzWm1sc2JHMWxiblFnZG1Gc2RXVnpYRzVjZEZ4MElDb3ZYRzVjZEZ4MFpuVnVZM1JwYjI0Z1lXeHNLSEJ5YjIxcGMyVnpLU0I3WEc1Y2RGeDBYSFJ5WlhSMWNtNGdkSEpoZG1WeWMyVlhhWFJvS0hOdVpDd2diblZzYkN3Z2NISnZiV2x6WlhNcE8xeHVYSFJjZEgxY2JseHVYSFJjZEM4cUtseHVYSFJjZENBcUlFRnljbUY1UEZCeWIyMXBjMlU4V0Q0K0lDMCtJRkJ5YjIxcGMyVThRWEp5WVhrOFppaFlLVDQrWEc1Y2RGeDBJQ29nUUhCeWFYWmhkR1ZjYmx4MFhIUWdLaUJBY0dGeVlXMGdlMloxYm1OMGFXOXVmU0JtSUdaMWJtTjBhVzl1SUhSdklHRndjR3g1SUhSdklHVmhZMmdnY0hKdmJXbHpaU2R6SUhaaGJIVmxYRzVjZEZ4MElDb2dRSEJoY21GdElIdEJjbkpoZVgwZ2NISnZiV2x6WlhNZ1lYSnlZWGtnYjJZZ2NISnZiV2x6WlhOY2JseDBYSFFnS2lCQWNtVjBkWEp1Y3lCN1VISnZiV2x6WlgwZ2NISnZiV2x6WlNCbWIzSWdkSEpoYm5ObWIzSnRaV1FnZG1Gc2RXVnpYRzVjZEZ4MElDb3ZYRzVjZEZ4MFpuVnVZM1JwYjI0Z2RISmhkbVZ5YzJVb1ppd2djSEp2YldselpYTXBJSHRjYmx4MFhIUmNkSEpsZEhWeWJpQjBjbUYyWlhKelpWZHBkR2dvZEhKNVEyRjBZMmd5TENCbUxDQndjbTl0YVhObGN5azdYRzVjZEZ4MGZWeHVYRzVjZEZ4MFpuVnVZM1JwYjI0Z2RISmhkbVZ5YzJWWGFYUm9LSFJ5ZVUxaGNDd2daaXdnY0hKdmJXbHpaWE1wSUh0Y2JseDBYSFJjZEhaaGNpQm9ZVzVrYkdWeUlEMGdkSGx3Wlc5bUlHWWdQVDA5SUNkbWRXNWpkR2x2YmljZ1B5QnRZWEJCZENBNklITmxkSFJzWlVGME8xeHVYRzVjZEZ4MFhIUjJZWElnY21WemIyeDJaWElnUFNCdVpYY2dVR1Z1WkdsdVp5Z3BPMXh1WEhSY2RGeDBkbUZ5SUhCbGJtUnBibWNnUFNCd2NtOXRhWE5sY3k1c1pXNW5kR2dnUGo0K0lEQTdYRzVjZEZ4MFhIUjJZWElnY21WemRXeDBjeUE5SUc1bGR5QkJjbkpoZVNod1pXNWthVzVuS1R0Y2JseHVYSFJjZEZ4MFptOXlJQ2gyWVhJZ2FTQTlJREFzSUhnN0lHa2dQQ0J3Y205dGFYTmxjeTVzWlc1bmRHZ2dKaVlnSVhKbGMyOXNkbVZ5TG5KbGMyOXNkbVZrT3lBcksya3BJSHRjYmx4MFhIUmNkRngwZUNBOUlIQnliMjFwYzJWelcybGRPMXh1WEc1Y2RGeDBYSFJjZEdsbUlDaDRJRDA5UFNCMmIybGtJREFnSmlZZ0lTaHBJR2x1SUhCeWIyMXBjMlZ6S1NrZ2UxeHVYSFJjZEZ4MFhIUmNkQzB0Y0dWdVpHbHVaenRjYmx4MFhIUmNkRngwWEhSamIyNTBhVzUxWlR0Y2JseDBYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmNkSFJ5WVhabGNuTmxRWFFvY0hKdmJXbHpaWE1zSUdoaGJtUnNaWElzSUdrc0lIZ3NJSEpsYzI5c2RtVnlLVHRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwYVdZb2NHVnVaR2x1WnlBOVBUMGdNQ2tnZTF4dVhIUmNkRngwWEhSeVpYTnZiSFpsY2k1aVpXTnZiV1VvYm1WM0lFWjFiR1pwYkd4bFpDaHlaWE4xYkhSektTazdYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2hJWVc1a2JHVnlMQ0J5WlhOdmJIWmxjaWs3WEc1Y2JseDBYSFJjZEdaMWJtTjBhVzl1SUcxaGNFRjBLR2tzSUhnc0lISmxjMjlzZG1WeUtTQjdYRzVjZEZ4MFhIUmNkR2xtS0NGeVpYTnZiSFpsY2k1eVpYTnZiSFpsWkNrZ2UxeHVYSFJjZEZ4MFhIUmNkSFJ5WVhabGNuTmxRWFFvY0hKdmJXbHpaWE1zSUhObGRIUnNaVUYwTENCcExDQjBjbmxOWVhBb1ppd2dlQ3dnYVNrc0lISmxjMjlzZG1WeUtUdGNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJtZFc1amRHbHZiaUJ6WlhSMGJHVkJkQ2hwTENCNExDQnlaWE52YkhabGNpa2dlMXh1WEhSY2RGeDBYSFJ5WlhOMWJIUnpXMmxkSUQwZ2VEdGNibHgwWEhSY2RGeDBhV1lvTFMxd1pXNWthVzVuSUQwOVBTQXdLU0I3WEc1Y2RGeDBYSFJjZEZ4MGNtVnpiMngyWlhJdVltVmpiMjFsS0c1bGR5QkdkV3htYVd4c1pXUW9jbVZ6ZFd4MGN5a3BPMXh1WEhSY2RGeDBYSFI5WEc1Y2RGeDBYSFI5WEc1Y2RGeDBmVnh1WEc1Y2RGeDBablZ1WTNScGIyNGdkSEpoZG1WeWMyVkJkQ2h3Y205dGFYTmxjeXdnYUdGdVpHeGxjaXdnYVN3Z2VDd2djbVZ6YjJ4MlpYSXBJSHRjYmx4MFhIUmNkR2xtSUNodFlYbGlaVlJvWlc1aFlteGxLSGdwS1NCN1hHNWNkRngwWEhSY2RIWmhjaUJvSUQwZ1oyVjBTR0Z1Wkd4bGNrMWhlV0psVkdobGJtRmliR1VvZUNrN1hHNWNkRngwWEhSY2RIWmhjaUJ6SUQwZ2FDNXpkR0YwWlNncE8xeHVYRzVjZEZ4MFhIUmNkR2xtSUNoeklEMDlQU0F3S1NCN1hHNWNkRngwWEhSY2RGeDBhQzVtYjJ4a0tHaGhibVJzWlhJc0lHa3NJSFp2YVdRZ01Dd2djbVZ6YjJ4MlpYSXBPMXh1WEhSY2RGeDBYSFI5SUdWc2MyVWdhV1lnS0hNZ1BpQXdLU0I3WEc1Y2RGeDBYSFJjZEZ4MGFHRnVaR3hsY2locExDQm9MblpoYkhWbExDQnlaWE52YkhabGNpazdYRzVjZEZ4MFhIUmNkSDBnWld4elpTQjdYRzVjZEZ4MFhIUmNkRngwY21WemIyeDJaWEl1WW1WamIyMWxLR2dwTzF4dVhIUmNkRngwWEhSY2RIWnBjMmwwVW1WdFlXbHVhVzVuS0hCeWIyMXBjMlZ6TENCcEt6RXNJR2dwTzF4dVhIUmNkRngwWEhSOVhHNWNkRngwWEhSOUlHVnNjMlVnZTF4dVhIUmNkRngwWEhSb1lXNWtiR1Z5S0drc0lIZ3NJSEpsYzI5c2RtVnlLVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlYRzVjYmx4MFhIUlFjbTl0YVhObExsOTJhWE5wZEZKbGJXRnBibWx1WnlBOUlIWnBjMmwwVW1WdFlXbHVhVzVuTzF4dVhIUmNkR1oxYm1OMGFXOXVJSFpwYzJsMFVtVnRZV2x1YVc1bktIQnliMjFwYzJWekxDQnpkR0Z5ZEN3Z2FHRnVaR3hsY2lrZ2UxeHVYSFJjZEZ4MFptOXlLSFpoY2lCcFBYTjBZWEowT3lCcFBIQnliMjFwYzJWekxteGxibWQwYURzZ0t5dHBLU0I3WEc1Y2RGeDBYSFJjZEcxaGNtdEJjMGhoYm1Sc1pXUW9aMlYwU0dGdVpHeGxjaWh3Y205dGFYTmxjMXRwWFNrc0lHaGhibVJzWlhJcE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgxY2JseHVYSFJjZEdaMWJtTjBhVzl1SUcxaGNtdEJjMGhoYm1Sc1pXUW9hQ3dnYUdGdVpHeGxjaWtnZTF4dVhIUmNkRngwYVdZb2FDQTlQVDBnYUdGdVpHeGxjaWtnZTF4dVhIUmNkRngwWEhSeVpYUjFjbTQ3WEc1Y2RGeDBYSFI5WEc1Y2JseDBYSFJjZEhaaGNpQnpJRDBnYUM1emRHRjBaU2dwTzF4dVhIUmNkRngwYVdZb2N5QTlQVDBnTUNrZ2UxeHVYSFJjZEZ4MFhIUm9MblpwYzJsMEtHZ3NJSFp2YVdRZ01Dd2dhQzVmZFc1eVpYQnZjblFwTzF4dVhIUmNkRngwZlNCbGJITmxJR2xtS0hNZ1BDQXdLU0I3WEc1Y2RGeDBYSFJjZEdndVgzVnVjbVZ3YjNKMEtDazdYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZWeHVYRzVjZEZ4MEx5b3FYRzVjZEZ4MElDb2dSblZzWm1sc2JDMXlaV3BsWTNRZ1kyOXRjR1YwYVhScGRtVWdjbUZqWlM0Z1VtVjBkWEp1SUdFZ2NISnZiV2x6WlNCMGFHRjBJSGRwYkd3Z2MyVjBkR3hsWEc1Y2RGeDBJQ29nZEc4Z2RHaGxJSE5oYldVZ2MzUmhkR1VnWVhNZ2RHaGxJR1ZoY214cFpYTjBJR2x1Y0hWMElIQnliMjFwYzJVZ2RHOGdjMlYwZEd4bExseHVYSFJjZENBcVhHNWNkRngwSUNvZ1YwRlNUa2xPUnpvZ1ZHaGxJRVZUTmlCUWNtOXRhWE5sSUhOd1pXTWdjbVZ4ZFdseVpYTWdkR2hoZENCeVlXTmxLQ2xwYm1jZ1lXNGdaVzF3ZEhrZ1lYSnlZWGxjYmx4MFhIUWdLaUJ0ZFhOMElISmxkSFZ5YmlCaElIQnliMjFwYzJVZ2RHaGhkQ0JwY3lCd1pXNWthVzVuSUdadmNtVjJaWEl1SUNCVWFHbHpJR2x0Y0d4bGJXVnVkR0YwYVc5dVhHNWNkRngwSUNvZ2NtVjBkWEp1Y3lCaElITnBibWRzWlhSdmJpQm1iM0psZG1WeUxYQmxibVJwYm1jZ2NISnZiV2x6WlN3Z2RHaGxJSE5oYldVZ2MybHVaMnhsZEc5dUlIUm9ZWFFnYVhOY2JseDBYSFFnS2lCeVpYUjFjbTVsWkNCaWVTQlFjbTl0YVhObExtNWxkbVZ5S0Nrc0lIUm9kWE1nWTJGdUlHSmxJR05vWldOclpXUWdkMmwwYUNBOVBUMWNibHgwWEhRZ0tseHVYSFJjZENBcUlFQndZWEpoYlNCN1lYSnlZWGw5SUhCeWIyMXBjMlZ6SUdGeWNtRjVJRzltSUhCeWIyMXBjMlZ6SUhSdklISmhZMlZjYmx4MFhIUWdLaUJBY21WMGRYSnVjeUI3VUhKdmJXbHpaWDBnYVdZZ2FXNXdkWFFnYVhNZ2JtOXVMV1Z0Y0hSNUxDQmhJSEJ5YjIxcGMyVWdkR2hoZENCM2FXeHNJSE5sZEhSc1pWeHVYSFJjZENBcUlIUnZJSFJvWlNCellXMWxJRzkxZEdOdmJXVWdZWE1nZEdobElHVmhjbXhwWlhOMElHbHVjSFYwSUhCeWIyMXBjMlVnZEc4Z2MyVjBkR3hsTGlCcFppQmxiWEIwZVZ4dVhIUmNkQ0FxSUdseklHVnRjSFI1TENCeVpYUjFjbTV6SUdFZ2NISnZiV2x6WlNCMGFHRjBJSGRwYkd3Z2JtVjJaWElnYzJWMGRHeGxMbHh1WEhSY2RDQXFMMXh1WEhSY2RHWjFibU4wYVc5dUlISmhZMlVvY0hKdmJXbHpaWE1wSUh0Y2JseDBYSFJjZEdsbUtIUjVjR1Z2WmlCd2NtOXRhWE5sY3lBaFBUMGdKMjlpYW1WamRDY2dmSHdnY0hKdmJXbHpaWE1nUFQwOUlHNTFiR3dwSUh0Y2JseDBYSFJjZEZ4MGNtVjBkWEp1SUhKbGFtVmpkQ2h1WlhjZ1ZIbHdaVVZ5Y205eUtDZHViMjR0YVhSbGNtRmliR1VnY0dGemMyVmtJSFJ2SUhKaFkyVW9LU2NwS1R0Y2JseDBYSFJjZEgxY2JseHVYSFJjZEZ4MEx5OGdVMmxuYUN3Z2NtRmpaU2hiWFNrZ2FYTWdkVzUwWlhOMFlXSnNaU0IxYm14bGMzTWdkMlVnY21WMGRYSnVJQ3B6YjIxbGRHaHBibWNxWEc1Y2RGeDBYSFF2THlCMGFHRjBJR2x6SUhKbFkyOW5ibWw2WVdKc1pTQjNhWFJvYjNWMElHTmhiR3hwYm1jZ0xuUm9aVzRvS1NCdmJpQnBkQzVjYmx4MFhIUmNkSEpsZEhWeWJpQndjbTl0YVhObGN5NXNaVzVuZEdnZ1BUMDlJREFnUHlCdVpYWmxjaWdwWEc1Y2RGeDBYSFJjZENBNklIQnliMjFwYzJWekxteGxibWQwYUNBOVBUMGdNU0EvSUhKbGMyOXNkbVVvY0hKdmJXbHpaWE5iTUYwcFhHNWNkRngwWEhSY2RDQTZJSEoxYmxKaFkyVW9jSEp2YldselpYTXBPMXh1WEhSY2RIMWNibHh1WEhSY2RHWjFibU4wYVc5dUlISjFibEpoWTJVb2NISnZiV2x6WlhNcElIdGNibHgwWEhSY2RIWmhjaUJ5WlhOdmJIWmxjaUE5SUc1bGR5QlFaVzVrYVc1bktDazdYRzVjZEZ4MFhIUjJZWElnYVN3Z2VDd2dhRHRjYmx4MFhIUmNkR1p2Y2locFBUQTdJR2s4Y0hKdmJXbHpaWE11YkdWdVozUm9PeUFySzJrcElIdGNibHgwWEhSY2RGeDBlQ0E5SUhCeWIyMXBjMlZ6VzJsZE8xeHVYSFJjZEZ4MFhIUnBaaUFvZUNBOVBUMGdkbTlwWkNBd0lDWW1JQ0VvYVNCcGJpQndjbTl0YVhObGN5a3BJSHRjYmx4MFhIUmNkRngwWEhSamIyNTBhVzUxWlR0Y2JseDBYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmNkR2dnUFNCblpYUklZVzVrYkdWeUtIZ3BPMXh1WEhSY2RGeDBYSFJwWmlob0xuTjBZWFJsS0NrZ0lUMDlJREFwSUh0Y2JseDBYSFJjZEZ4MFhIUnlaWE52YkhabGNpNWlaV052YldVb2FDazdYRzVjZEZ4MFhIUmNkRngwZG1semFYUlNaVzFoYVc1cGJtY29jSEp2YldselpYTXNJR2tyTVN3Z2FDazdYRzVjZEZ4MFhIUmNkRngwWW5KbFlXczdYRzVjZEZ4MFhIUmNkSDBnWld4elpTQjdYRzVjZEZ4MFhIUmNkRngwYUM1MmFYTnBkQ2h5WlhOdmJIWmxjaXdnY21WemIyeDJaWEl1Y21WemIyeDJaU3dnY21WemIyeDJaWEl1Y21WcVpXTjBLVHRjYmx4MFhIUmNkRngwZlZ4dVhIUmNkRngwZlZ4dVhIUmNkRngwY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0VoaGJtUnNaWElzSUhKbGMyOXNkbVZ5S1R0Y2JseDBYSFI5WEc1Y2JseDBYSFF2THlCUWNtOXRhWE5sSUdsdWRHVnlibUZzYzF4dVhIUmNkQzh2SUVKbGJHOTNJSFJvYVhNc0lHVjJaWEo1ZEdocGJtY2dhWE1nUUhCeWFYWmhkR1ZjYmx4dVhIUmNkQzhxS2x4dVhIUmNkQ0FxSUVkbGRDQmhiaUJoY0hCeWIzQnlhV0YwWlNCb1lXNWtiR1Z5SUdadmNpQjRMQ0IzYVhSb2IzVjBJR05vWldOcmFXNW5JR1p2Y2lCamVXTnNaWE5jYmx4MFhIUWdLaUJBY0dGeVlXMGdleXA5SUhoY2JseDBYSFFnS2lCQWNtVjBkWEp1Y3lCN2IySnFaV04wZlNCb1lXNWtiR1Z5WEc1Y2RGeDBJQ292WEc1Y2RGeDBablZ1WTNScGIyNGdaMlYwU0dGdVpHeGxjaWg0S1NCN1hHNWNkRngwWEhScFppaHBjMUJ5YjIxcGMyVW9lQ2twSUh0Y2JseDBYSFJjZEZ4MGNtVjBkWEp1SUhndVgyaGhibVJzWlhJdWFtOXBiaWdwTzF4dVhIUmNkRngwZlZ4dVhIUmNkRngwY21WMGRYSnVJRzFoZVdKbFZHaGxibUZpYkdVb2VDa2dQeUJuWlhSSVlXNWtiR1Z5Vlc1MGNuVnpkR1ZrS0hncElEb2dibVYzSUVaMWJHWnBiR3hsWkNoNEtUdGNibHgwWEhSOVhHNWNibHgwWEhRdktpcGNibHgwWEhRZ0tpQkhaWFFnWVNCb1lXNWtiR1Z5SUdadmNpQjBhR1Z1WVdKc1pTQjRMbHh1WEhSY2RDQXFJRTVQVkVVNklGbHZkU0J0ZFhOMElHOXViSGtnWTJGc2JDQjBhR2x6SUdsbUlHMWhlV0psVkdobGJtRmliR1VvZUNrZ1BUMGdkSEoxWlZ4dVhIUmNkQ0FxSUVCd1lYSmhiU0I3YjJKcVpXTjBmR1oxYm1OMGFXOXVmRkJ5YjIxcGMyVjlJSGhjYmx4MFhIUWdLaUJBY21WMGRYSnVjeUI3YjJKcVpXTjBmU0JvWVc1a2JHVnlYRzVjZEZ4MElDb3ZYRzVjZEZ4MFpuVnVZM1JwYjI0Z1oyVjBTR0Z1Wkd4bGNrMWhlV0psVkdobGJtRmliR1VvZUNrZ2UxeHVYSFJjZEZ4MGNtVjBkWEp1SUdselVISnZiV2x6WlNoNEtTQS9JSGd1WDJoaGJtUnNaWEl1YW05cGJpZ3BJRG9nWjJWMFNHRnVaR3hsY2xWdWRISjFjM1JsWkNoNEtUdGNibHgwWEhSOVhHNWNibHgwWEhRdktpcGNibHgwWEhRZ0tpQkhaWFFnWVNCb1lXNWtiR1Z5SUdadmNpQndiM1JsYm5ScFlXeHNlU0IxYm5SeWRYTjBaV1FnZEdobGJtRmliR1VnZUZ4dVhIUmNkQ0FxSUVCd1lYSmhiU0I3S24wZ2VGeHVYSFJjZENBcUlFQnlaWFIxY201eklIdHZZbXBsWTNSOUlHaGhibVJzWlhKY2JseDBYSFFnS2k5Y2JseDBYSFJtZFc1amRHbHZiaUJuWlhSSVlXNWtiR1Z5Vlc1MGNuVnpkR1ZrS0hncElIdGNibHgwWEhSY2RIUnllU0I3WEc1Y2RGeDBYSFJjZEhaaGNpQjFiblJ5ZFhOMFpXUlVhR1Z1SUQwZ2VDNTBhR1Z1TzF4dVhIUmNkRngwWEhSeVpYUjFjbTRnZEhsd1pXOW1JSFZ1ZEhKMWMzUmxaRlJvWlc0Z1BUMDlJQ2RtZFc1amRHbHZiaWRjYmx4MFhIUmNkRngwWEhRL0lHNWxkeUJVYUdWdVlXSnNaU2gxYm5SeWRYTjBaV1JVYUdWdUxDQjRLVnh1WEhSY2RGeDBYSFJjZERvZ2JtVjNJRVoxYkdacGJHeGxaQ2g0S1R0Y2JseDBYSFJjZEgwZ1kyRjBZMmdvWlNrZ2UxeHVYSFJjZEZ4MFhIUnlaWFIxY200Z2JtVjNJRkpsYW1WamRHVmtLR1VwTzF4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4dVhIUmNkQzhxS2x4dVhIUmNkQ0FxSUVoaGJtUnNaWElnWm05eUlHRWdjSEp2YldselpTQjBhR0YwSUdseklIQmxibVJwYm1jZ1ptOXlaWFpsY2x4dVhIUmNkQ0FxSUVCamIyNXpkSEoxWTNSdmNseHVYSFJjZENBcUwxeHVYSFJjZEdaMWJtTjBhVzl1SUVoaGJtUnNaWElvS1NCN2ZWeHVYRzVjZEZ4MFNHRnVaR3hsY2k1d2NtOTBiM1I1Y0dVdWQyaGxibHh1WEhSY2RGeDBQU0JJWVc1a2JHVnlMbkJ5YjNSdmRIbHdaUzVpWldOdmJXVmNibHgwWEhSY2REMGdTR0Z1Wkd4bGNpNXdjbTkwYjNSNWNHVXVibTkwYVdaNUlDOHZJR1JsY0hKbFkyRjBaV1JjYmx4MFhIUmNkRDBnU0dGdVpHeGxjaTV3Y205MGIzUjVjR1V1Wm1GcGJGeHVYSFJjZEZ4MFBTQklZVzVrYkdWeUxuQnliM1J2ZEhsd1pTNWZkVzV5WlhCdmNuUmNibHgwWEhSY2REMGdTR0Z1Wkd4bGNpNXdjbTkwYjNSNWNHVXVYM0psY0c5eWRGeHVYSFJjZEZ4MFBTQnViMjl3TzF4dVhHNWNkRngwU0dGdVpHeGxjaTV3Y205MGIzUjVjR1V1WDNOMFlYUmxJRDBnTUR0Y2JseHVYSFJjZEVoaGJtUnNaWEl1Y0hKdmRHOTBlWEJsTG5OMFlYUmxJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNWNkRngwWEhSeVpYUjFjbTRnZEdocGN5NWZjM1JoZEdVN1hHNWNkRngwZlR0Y2JseHVYSFJjZEM4cUtseHVYSFJjZENBcUlGSmxZM1Z5YzJsMlpXeDVJR052Ykd4aGNITmxJR2hoYm1Sc1pYSWdZMmhoYVc0Z2RHOGdabWx1WkNCMGFHVWdhR0Z1Wkd4bGNseHVYSFJjZENBcUlHNWxZWEpsYzNRZ2RHOGdkR2hsSUdaMWJHeDVJSEpsYzI5c2RtVmtJSFpoYkhWbExseHVYSFJjZENBcUlFQnlaWFIxY201eklIdHZZbXBsWTNSOUlHaGhibVJzWlhJZ2JtVmhjbVZ6ZENCMGFHVWdablZzYkhrZ2NtVnpiMngyWldRZ2RtRnNkV1ZjYmx4MFhIUWdLaTljYmx4MFhIUklZVzVrYkdWeUxuQnliM1J2ZEhsd1pTNXFiMmx1SUQwZ1puVnVZM1JwYjI0b0tTQjdYRzVjZEZ4MFhIUjJZWElnYUNBOUlIUm9hWE03WEc1Y2RGeDBYSFIzYUdsc1pTaG9MbWhoYm1Sc1pYSWdJVDA5SUhadmFXUWdNQ2tnZTF4dVhIUmNkRngwWEhSb0lEMGdhQzVvWVc1a2JHVnlPMXh1WEhSY2RGeDBmVnh1WEhSY2RGeDBjbVYwZFhKdUlHZzdYRzVjZEZ4MGZUdGNibHh1WEhSY2RFaGhibVJzWlhJdWNISnZkRzkwZVhCbExtTm9ZV2x1SUQwZ1puVnVZM1JwYjI0b2RHOHNJSEpsWTJWcGRtVnlMQ0JtZFd4bWFXeHNaV1FzSUhKbGFtVmpkR1ZrTENCd2NtOW5jbVZ6Y3lrZ2UxeHVYSFJjZEZ4MGRHaHBjeTUzYUdWdUtIdGNibHgwWEhSY2RGeDBjbVZ6YjJ4MlpYSTZJSFJ2TEZ4dVhIUmNkRngwWEhSeVpXTmxhWFpsY2pvZ2NtVmpaV2wyWlhJc1hHNWNkRngwWEhSY2RHWjFiR1pwYkd4bFpEb2dablZzWm1sc2JHVmtMRnh1WEhSY2RGeDBYSFJ5WldwbFkzUmxaRG9nY21WcVpXTjBaV1FzWEc1Y2RGeDBYSFJjZEhCeWIyZHlaWE56T2lCd2NtOW5jbVZ6YzF4dVhIUmNkRngwZlNrN1hHNWNkRngwZlR0Y2JseHVYSFJjZEVoaGJtUnNaWEl1Y0hKdmRHOTBlWEJsTG5acGMybDBJRDBnWm5WdVkzUnBiMjRvY21WalpXbDJaWElzSUdaMWJHWnBiR3hsWkN3Z2NtVnFaV04wWldRc0lIQnliMmR5WlhOektTQjdYRzVjZEZ4MFhIUjBhR2x6TG1Ob1lXbHVLR1poYVd4SlpsSmxhbVZqZEdWa0xDQnlaV05sYVhabGNpd2dablZzWm1sc2JHVmtMQ0J5WldwbFkzUmxaQ3dnY0hKdlozSmxjM01wTzF4dVhIUmNkSDA3WEc1Y2JseDBYSFJJWVc1a2JHVnlMbkJ5YjNSdmRIbHdaUzVtYjJ4a0lEMGdablZ1WTNScGIyNG9aaXdnZWl3Z1l5d2dkRzhwSUh0Y2JseDBYSFJjZEhSb2FYTXVkMmhsYmlodVpYY2dSbTlzWkNobUxDQjZMQ0JqTENCMGJ5a3BPMXh1WEhSY2RIMDdYRzVjYmx4MFhIUXZLaXBjYmx4MFhIUWdLaUJJWVc1a2JHVnlJSFJvWVhRZ2FXNTJiMnRsY3lCbVlXbHNLQ2tnYjI0Z1lXNTVJR2hoYm1Sc1pYSWdhWFFnWW1WamIyMWxjMXh1WEhSY2RDQXFJRUJqYjI1emRISjFZM1J2Y2x4dVhIUmNkQ0FxTDF4dVhIUmNkR1oxYm1OMGFXOXVJRVpoYVd4SlpsSmxhbVZqZEdWa0tDa2dlMzFjYmx4dVhIUmNkR2x1YUdWeWFYUW9TR0Z1Wkd4bGNpd2dSbUZwYkVsbVVtVnFaV04wWldRcE8xeHVYRzVjZEZ4MFJtRnBiRWxtVW1WcVpXTjBaV1F1Y0hKdmRHOTBlWEJsTG1KbFkyOXRaU0E5SUdaMWJtTjBhVzl1S0dncElIdGNibHgwWEhSY2RHZ3VabUZwYkNncE8xeHVYSFJjZEgwN1hHNWNibHgwWEhSMllYSWdabUZwYkVsbVVtVnFaV04wWldRZ1BTQnVaWGNnUm1GcGJFbG1VbVZxWldOMFpXUW9LVHRjYmx4dVhIUmNkQzhxS2x4dVhIUmNkQ0FxSUVoaGJtUnNaWElnZEdoaGRDQnRZVzVoWjJWeklHRWdjWFZsZFdVZ2IyWWdZMjl1YzNWdFpYSnpJSGRoYVhScGJtY2diMjRnWVNCd1pXNWthVzVuSUhCeWIyMXBjMlZjYmx4MFhIUWdLaUJBWTI5dWMzUnlkV04wYjNKY2JseDBYSFFnS2k5Y2JseDBYSFJtZFc1amRHbHZiaUJRWlc1a2FXNW5LSEpsWTJWcGRtVnlMQ0JwYm1obGNtbDBaV1JEYjI1MFpYaDBLU0I3WEc1Y2RGeDBYSFJRY205dGFYTmxMbU55WldGMFpVTnZiblJsZUhRb2RHaHBjeXdnYVc1b1pYSnBkR1ZrUTI5dWRHVjRkQ2s3WEc1Y2JseDBYSFJjZEhSb2FYTXVZMjl1YzNWdFpYSnpJRDBnZG05cFpDQXdPMXh1WEhSY2RGeDBkR2hwY3k1eVpXTmxhWFpsY2lBOUlISmxZMlZwZG1WeU8xeHVYSFJjZEZ4MGRHaHBjeTVvWVc1a2JHVnlJRDBnZG05cFpDQXdPMXh1WEhSY2RGeDBkR2hwY3k1eVpYTnZiSFpsWkNBOUlHWmhiSE5sTzF4dVhIUmNkSDFjYmx4dVhIUmNkR2x1YUdWeWFYUW9TR0Z1Wkd4bGNpd2dVR1Z1WkdsdVp5azdYRzVjYmx4MFhIUlFaVzVrYVc1bkxuQnliM1J2ZEhsd1pTNWZjM1JoZEdVZ1BTQXdPMXh1WEc1Y2RGeDBVR1Z1WkdsdVp5NXdjbTkwYjNSNWNHVXVjbVZ6YjJ4MlpTQTlJR1oxYm1OMGFXOXVLSGdwSUh0Y2JseDBYSFJjZEhSb2FYTXVZbVZqYjIxbEtHZGxkRWhoYm1Sc1pYSW9lQ2twTzF4dVhIUmNkSDA3WEc1Y2JseDBYSFJRWlc1a2FXNW5MbkJ5YjNSdmRIbHdaUzV5WldwbFkzUWdQU0JtZFc1amRHbHZiaWg0S1NCN1hHNWNkRngwWEhScFppaDBhR2x6TG5KbGMyOXNkbVZrS1NCN1hHNWNkRngwWEhSY2RISmxkSFZ5Ymp0Y2JseDBYSFJjZEgxY2JseHVYSFJjZEZ4MGRHaHBjeTVpWldOdmJXVW9ibVYzSUZKbGFtVmpkR1ZrS0hncEtUdGNibHgwWEhSOU8xeHVYRzVjZEZ4MFVHVnVaR2x1Wnk1d2NtOTBiM1I1Y0dVdWFtOXBiaUE5SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEZ4MGFXWWdLQ0YwYUdsekxuSmxjMjlzZG1Wa0tTQjdYRzVjZEZ4MFhIUmNkSEpsZEhWeWJpQjBhR2x6TzF4dVhIUmNkRngwZlZ4dVhHNWNkRngwWEhSMllYSWdhQ0E5SUhSb2FYTTdYRzVjYmx4MFhIUmNkSGRvYVd4bElDaG9MbWhoYm1Sc1pYSWdJVDA5SUhadmFXUWdNQ2tnZTF4dVhIUmNkRngwWEhSb0lEMGdhQzVvWVc1a2JHVnlPMXh1WEhSY2RGeDBYSFJwWmlBb2FDQTlQVDBnZEdocGN5a2dlMXh1WEhSY2RGeDBYSFJjZEhKbGRIVnliaUIwYUdsekxtaGhibVJzWlhJZ1BTQmplV05zWlNncE8xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkSEpsZEhWeWJpQm9PMXh1WEhSY2RIMDdYRzVjYmx4MFhIUlFaVzVrYVc1bkxuQnliM1J2ZEhsd1pTNXlkVzRnUFNCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSY2RIWmhjaUJ4SUQwZ2RHaHBjeTVqYjI1emRXMWxjbk03WEc1Y2RGeDBYSFIyWVhJZ2FHRnVaR3hsY2lBOUlIUm9hWE11YUdGdVpHeGxjanRjYmx4MFhIUmNkSFJvYVhNdWFHRnVaR3hsY2lBOUlIUm9hWE11YUdGdVpHeGxjaTVxYjJsdUtDazdYRzVjZEZ4MFhIUjBhR2x6TG1OdmJuTjFiV1Z5Y3lBOUlIWnZhV1FnTUR0Y2JseHVYSFJjZEZ4MFptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQnhMbXhsYm1kMGFEc2dLeXRwS1NCN1hHNWNkRngwWEhSY2RHaGhibVJzWlhJdWQyaGxiaWh4VzJsZEtUdGNibHgwWEhSY2RIMWNibHgwWEhSOU8xeHVYRzVjZEZ4MFVHVnVaR2x1Wnk1d2NtOTBiM1I1Y0dVdVltVmpiMjFsSUQwZ1puVnVZM1JwYjI0b2FHRnVaR3hsY2lrZ2UxeHVYSFJjZEZ4MGFXWW9kR2hwY3k1eVpYTnZiSFpsWkNrZ2UxeHVYSFJjZEZ4MFhIUnlaWFIxY200N1hHNWNkRngwWEhSOVhHNWNibHgwWEhSY2RIUm9hWE11Y21WemIyeDJaV1FnUFNCMGNuVmxPMXh1WEhSY2RGeDBkR2hwY3k1b1lXNWtiR1Z5SUQwZ2FHRnVaR3hsY2p0Y2JseDBYSFJjZEdsbUtIUm9hWE11WTI5dWMzVnRaWEp6SUNFOVBTQjJiMmxrSURBcElIdGNibHgwWEhSY2RGeDBkR0Z6YTNNdVpXNXhkV1YxWlNoMGFHbHpLVHRjYmx4MFhIUmNkSDFjYmx4dVhIUmNkRngwYVdZb2RHaHBjeTVqYjI1MFpYaDBJQ0U5UFNCMmIybGtJREFwSUh0Y2JseDBYSFJjZEZ4MGFHRnVaR3hsY2k1ZmNtVndiM0owS0hSb2FYTXVZMjl1ZEdWNGRDazdYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZUdGNibHh1WEhSY2RGQmxibVJwYm1jdWNISnZkRzkwZVhCbExuZG9aVzRnUFNCbWRXNWpkR2x2YmloamIyNTBhVzUxWVhScGIyNHBJSHRjYmx4MFhIUmNkR2xtS0hSb2FYTXVjbVZ6YjJ4MlpXUXBJSHRjYmx4MFhIUmNkRngwZEdGemEzTXVaVzV4ZFdWMVpTaHVaWGNnUTI5dWRHbHVkV0YwYVc5dVZHRnpheWhqYjI1MGFXNTFZWFJwYjI0c0lIUm9hWE11YUdGdVpHeGxjaWtwTzF4dVhIUmNkRngwZlNCbGJITmxJSHRjYmx4MFhIUmNkRngwYVdZb2RHaHBjeTVqYjI1emRXMWxjbk1nUFQwOUlIWnZhV1FnTUNrZ2UxeHVYSFJjZEZ4MFhIUmNkSFJvYVhNdVkyOXVjM1Z0WlhKeklEMGdXMk52Ym5ScGJuVmhkR2x2YmwwN1hHNWNkRngwWEhSY2RIMGdaV3h6WlNCN1hHNWNkRngwWEhSY2RGeDBkR2hwY3k1amIyNXpkVzFsY25NdWNIVnphQ2hqYjI1MGFXNTFZWFJwYjI0cE8xeHVYSFJjZEZ4MFhIUjlYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZUdGNibHh1WEhSY2RDOHFLbHh1WEhSY2RDQXFJRUJrWlhCeVpXTmhkR1ZrWEc1Y2RGeDBJQ292WEc1Y2RGeDBVR1Z1WkdsdVp5NXdjbTkwYjNSNWNHVXVibTkwYVdaNUlEMGdablZ1WTNScGIyNG9lQ2tnZTF4dVhIUmNkRngwYVdZb0lYUm9hWE11Y21WemIyeDJaV1FwSUh0Y2JseDBYSFJjZEZ4MGRHRnphM011Wlc1eGRXVjFaU2h1WlhjZ1VISnZaM0psYzNOVVlYTnJLSGdzSUhSb2FYTXBLVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlPMXh1WEc1Y2RGeDBVR1Z1WkdsdVp5NXdjbTkwYjNSNWNHVXVabUZwYkNBOUlHWjFibU4wYVc5dUtHTnZiblJsZUhRcElIdGNibHgwWEhSY2RIWmhjaUJqSUQwZ2RIbHdaVzltSUdOdmJuUmxlSFFnUFQwOUlDZDFibVJsWm1sdVpXUW5JRDhnZEdocGN5NWpiMjUwWlhoMElEb2dZMjl1ZEdWNGREdGNibHgwWEhSY2RIUm9hWE11Y21WemIyeDJaV1FnSmlZZ2RHaHBjeTVvWVc1a2JHVnlMbXB2YVc0b0tTNW1ZV2xzS0dNcE8xeHVYSFJjZEgwN1hHNWNibHgwWEhSUVpXNWthVzVuTG5CeWIzUnZkSGx3WlM1ZmNtVndiM0owSUQwZ1puVnVZM1JwYjI0b1kyOXVkR1Y0ZENrZ2UxeHVYSFJjZEZ4MGRHaHBjeTV5WlhOdmJIWmxaQ0FtSmlCMGFHbHpMbWhoYm1Sc1pYSXVhbTlwYmlncExsOXlaWEJ2Y25Rb1kyOXVkR1Y0ZENrN1hHNWNkRngwZlR0Y2JseHVYSFJjZEZCbGJtUnBibWN1Y0hKdmRHOTBlWEJsTGw5MWJuSmxjRzl5ZENBOUlHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RGeDBkR2hwY3k1eVpYTnZiSFpsWkNBbUppQjBhR2x6TG1oaGJtUnNaWEl1YW05cGJpZ3BMbDkxYm5KbGNHOXlkQ2dwTzF4dVhIUmNkSDA3WEc1Y2JseDBYSFF2S2lwY2JseDBYSFFnS2lCWGNtRndJR0Z1YjNSb1pYSWdhR0Z1Wkd4bGNpQmhibVFnWm05eVkyVWdhWFFnYVc1MGJ5QmhJR1oxZEhWeVpTQnpkR0ZqYTF4dVhIUmNkQ0FxSUVCd1lYSmhiU0I3YjJKcVpXTjBmU0JvWVc1a2JHVnlYRzVjZEZ4MElDb2dRR052Ym5OMGNuVmpkRzl5WEc1Y2RGeDBJQ292WEc1Y2RGeDBablZ1WTNScGIyNGdRWE41Ym1Nb2FHRnVaR3hsY2lrZ2UxeHVYSFJjZEZ4MGRHaHBjeTVvWVc1a2JHVnlJRDBnYUdGdVpHeGxjanRjYmx4MFhIUjlYRzVjYmx4MFhIUnBibWhsY21sMEtFaGhibVJzWlhJc0lFRnplVzVqS1R0Y2JseHVYSFJjZEVGemVXNWpMbkJ5YjNSdmRIbHdaUzUzYUdWdUlEMGdablZ1WTNScGIyNG9ZMjl1ZEdsdWRXRjBhVzl1S1NCN1hHNWNkRngwWEhSMFlYTnJjeTVsYm5GMVpYVmxLRzVsZHlCRGIyNTBhVzUxWVhScGIyNVVZWE5yS0dOdmJuUnBiblZoZEdsdmJpd2dkR2hwY3lrcE8xeHVYSFJjZEgwN1hHNWNibHgwWEhSQmMzbHVZeTV3Y205MGIzUjVjR1V1WDNKbGNHOXlkQ0E5SUdaMWJtTjBhVzl1S0dOdmJuUmxlSFFwSUh0Y2JseDBYSFJjZEhSb2FYTXVhbTlwYmlncExsOXlaWEJ2Y25Rb1kyOXVkR1Y0ZENrN1hHNWNkRngwZlR0Y2JseHVYSFJjZEVGemVXNWpMbkJ5YjNSdmRIbHdaUzVmZFc1eVpYQnZjblFnUFNCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSY2RIUm9hWE11YW05cGJpZ3BMbDkxYm5KbGNHOXlkQ2dwTzF4dVhIUmNkSDA3WEc1Y2JseDBYSFF2S2lwY2JseDBYSFFnS2lCSVlXNWtiR1Z5SUhSb1lYUWdkM0poY0hNZ1lXNGdkVzUwY25WemRHVmtJSFJvWlc1aFlteGxJR0Z1WkNCaGMzTnBiV2xzWVhSbGN5QnBkQ0JwYmlCaElHWjFkSFZ5WlNCemRHRmphMXh1WEhSY2RDQXFJRUJ3WVhKaGJTQjdablZ1WTNScGIyNTlJSFJvWlc1Y2JseDBYSFFnS2lCQWNHRnlZVzBnZTN0MGFHVnVPaUJtZFc1amRHbHZibjE5SUhSb1pXNWhZbXhsWEc1Y2RGeDBJQ29nUUdOdmJuTjBjblZqZEc5eVhHNWNkRngwSUNvdlhHNWNkRngwWm5WdVkzUnBiMjRnVkdobGJtRmliR1VvZEdobGJpd2dkR2hsYm1GaWJHVXBJSHRjYmx4MFhIUmNkRkJsYm1ScGJtY3VZMkZzYkNoMGFHbHpLVHRjYmx4MFhIUmNkSFJoYzJ0ekxtVnVjWFZsZFdVb2JtVjNJRUZ6YzJsdGFXeGhkR1ZVWVhOcktIUm9aVzRzSUhSb1pXNWhZbXhsTENCMGFHbHpLU2s3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBhVzVvWlhKcGRDaFFaVzVrYVc1bkxDQlVhR1Z1WVdKc1pTazdYRzVjYmx4MFhIUXZLaXBjYmx4MFhIUWdLaUJJWVc1a2JHVnlJR1p2Y2lCaElHWjFiR1pwYkd4bFpDQndjbTl0YVhObFhHNWNkRngwSUNvZ1FIQmhjbUZ0SUhzcWZTQjRJR1oxYkdacGJHeHRaVzUwSUhaaGJIVmxYRzVjZEZ4MElDb2dRR052Ym5OMGNuVmpkRzl5WEc1Y2RGeDBJQ292WEc1Y2RGeDBablZ1WTNScGIyNGdSblZzWm1sc2JHVmtLSGdwSUh0Y2JseDBYSFJjZEZCeWIyMXBjMlV1WTNKbFlYUmxRMjl1ZEdWNGRDaDBhR2x6S1R0Y2JseDBYSFJjZEhSb2FYTXVkbUZzZFdVZ1BTQjRPMXh1WEhSY2RIMWNibHh1WEhSY2RHbHVhR1Z5YVhRb1NHRnVaR3hsY2l3Z1JuVnNabWxzYkdWa0tUdGNibHh1WEhSY2RFWjFiR1pwYkd4bFpDNXdjbTkwYjNSNWNHVXVYM04wWVhSbElEMGdNVHRjYmx4dVhIUmNkRVoxYkdacGJHeGxaQzV3Y205MGIzUjVjR1V1Wm05c1pDQTlJR1oxYm1OMGFXOXVLR1lzSUhvc0lHTXNJSFJ2S1NCN1hHNWNkRngwWEhSeWRXNURiMjUwYVc1MVlYUnBiMjR6S0dZc0lIb3NJSFJvYVhNc0lHTXNJSFJ2S1R0Y2JseDBYSFI5TzF4dVhHNWNkRngwUm5Wc1ptbHNiR1ZrTG5CeWIzUnZkSGx3WlM1M2FHVnVJRDBnWm5WdVkzUnBiMjRvWTI5dWRDa2dlMXh1WEhSY2RGeDBjblZ1UTI5dWRHbHVkV0YwYVc5dU1TaGpiMjUwTG1aMWJHWnBiR3hsWkN3Z2RHaHBjeXdnWTI5dWRDNXlaV05sYVhabGNpd2dZMjl1ZEM1eVpYTnZiSFpsY2lrN1hHNWNkRngwZlR0Y2JseHVYSFJjZEhaaGNpQmxjbkp2Y2tsa0lEMGdNRHRjYmx4dVhIUmNkQzhxS2x4dVhIUmNkQ0FxSUVoaGJtUnNaWElnWm05eUlHRWdjbVZxWldOMFpXUWdjSEp2YldselpWeHVYSFJjZENBcUlFQndZWEpoYlNCN0tuMGdlQ0J5WldwbFkzUnBiMjRnY21WaGMyOXVYRzVjZEZ4MElDb2dRR052Ym5OMGNuVmpkRzl5WEc1Y2RGeDBJQ292WEc1Y2RGeDBablZ1WTNScGIyNGdVbVZxWldOMFpXUW9lQ2tnZTF4dVhIUmNkRngwVUhKdmJXbHpaUzVqY21WaGRHVkRiMjUwWlhoMEtIUm9hWE1wTzF4dVhHNWNkRngwWEhSMGFHbHpMbWxrSUQwZ0t5dGxjbkp2Y2tsa08xeHVYSFJjZEZ4MGRHaHBjeTUyWVd4MVpTQTlJSGc3WEc1Y2RGeDBYSFIwYUdsekxtaGhibVJzWldRZ1BTQm1ZV3h6WlR0Y2JseDBYSFJjZEhSb2FYTXVjbVZ3YjNKMFpXUWdQU0JtWVd4elpUdGNibHh1WEhSY2RGeDBkR2hwY3k1ZmNtVndiM0owS0NrN1hHNWNkRngwZlZ4dVhHNWNkRngwYVc1b1pYSnBkQ2hJWVc1a2JHVnlMQ0JTWldwbFkzUmxaQ2s3WEc1Y2JseDBYSFJTWldwbFkzUmxaQzV3Y205MGIzUjVjR1V1WDNOMFlYUmxJRDBnTFRFN1hHNWNibHgwWEhSU1pXcGxZM1JsWkM1d2NtOTBiM1I1Y0dVdVptOXNaQ0E5SUdaMWJtTjBhVzl1S0dZc0lIb3NJR01zSUhSdktTQjdYRzVjZEZ4MFhIUjBieTVpWldOdmJXVW9kR2hwY3lrN1hHNWNkRngwZlR0Y2JseHVYSFJjZEZKbGFtVmpkR1ZrTG5CeWIzUnZkSGx3WlM1M2FHVnVJRDBnWm5WdVkzUnBiMjRvWTI5dWRDa2dlMXh1WEhSY2RGeDBhV1lvZEhsd1pXOW1JR052Ym5RdWNtVnFaV04wWldRZ1BUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JseDBYSFJjZEZ4MGRHaHBjeTVmZFc1eVpYQnZjblFvS1R0Y2JseDBYSFJjZEgxY2JseDBYSFJjZEhKMWJrTnZiblJwYm5WaGRHbHZiakVvWTI5dWRDNXlaV3BsWTNSbFpDd2dkR2hwY3l3Z1kyOXVkQzV5WldObGFYWmxjaXdnWTI5dWRDNXlaWE52YkhabGNpazdYRzVjZEZ4MGZUdGNibHh1WEhSY2RGSmxhbVZqZEdWa0xuQnliM1J2ZEhsd1pTNWZjbVZ3YjNKMElEMGdablZ1WTNScGIyNG9ZMjl1ZEdWNGRDa2dlMXh1WEhSY2RGeDBkR0Z6YTNNdVlXWjBaWEpSZFdWMVpTaHVaWGNnVW1Wd2IzSjBWR0Z6YXloMGFHbHpMQ0JqYjI1MFpYaDBLU2s3WEc1Y2RGeDBmVHRjYmx4dVhIUmNkRkpsYW1WamRHVmtMbkJ5YjNSdmRIbHdaUzVmZFc1eVpYQnZjblFnUFNCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSY2RHbG1LSFJvYVhNdWFHRnVaR3hsWkNrZ2UxeHVYSFJjZEZ4MFhIUnlaWFIxY200N1hHNWNkRngwWEhSOVhHNWNkRngwWEhSMGFHbHpMbWhoYm1Sc1pXUWdQU0IwY25WbE8xeHVYSFJjZEZ4MGRHRnphM011WVdaMFpYSlJkV1YxWlNodVpYY2dWVzV5WlhCdmNuUlVZWE5yS0hSb2FYTXBLVHRjYmx4MFhIUjlPMXh1WEc1Y2RGeDBVbVZxWldOMFpXUXVjSEp2ZEc5MGVYQmxMbVpoYVd3Z1BTQm1kVzVqZEdsdmJpaGpiMjUwWlhoMEtTQjdYRzVjZEZ4MFhIUjBhR2x6TG5KbGNHOXlkR1ZrSUQwZ2RISjFaVHRjYmx4MFhIUmNkR1Z0YVhSU1pXcGxZM1JwYjI0b0ozVnVhR0Z1Wkd4bFpGSmxhbVZqZEdsdmJpY3NJSFJvYVhNcE8xeHVYSFJjZEZ4MFVISnZiV2x6WlM1dmJrWmhkR0ZzVW1WcVpXTjBhVzl1S0hSb2FYTXNJR052Ym5SbGVIUWdQVDA5SUhadmFXUWdNQ0EvSUhSb2FYTXVZMjl1ZEdWNGRDQTZJR052Ym5SbGVIUXBPMXh1WEhSY2RIMDdYRzVjYmx4MFhIUm1kVzVqZEdsdmJpQlNaWEJ2Y25SVVlYTnJLSEpsYW1WamRHbHZiaXdnWTI5dWRHVjRkQ2tnZTF4dVhIUmNkRngwZEdocGN5NXlaV3BsWTNScGIyNGdQU0J5WldwbFkzUnBiMjQ3WEc1Y2RGeDBYSFIwYUdsekxtTnZiblJsZUhRZ1BTQmpiMjUwWlhoME8xeHVYSFJjZEgxY2JseHVYSFJjZEZKbGNHOXlkRlJoYzJzdWNISnZkRzkwZVhCbExuSjFiaUE5SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEZ4MGFXWW9JWFJvYVhNdWNtVnFaV04wYVc5dUxtaGhibVJzWldRZ0ppWWdJWFJvYVhNdWNtVnFaV04wYVc5dUxuSmxjRzl5ZEdWa0tTQjdYRzVjZEZ4MFhIUmNkSFJvYVhNdWNtVnFaV04wYVc5dUxuSmxjRzl5ZEdWa0lEMGdkSEoxWlR0Y2JseDBYSFJjZEZ4MFpXMXBkRkpsYW1WamRHbHZiaWduZFc1b1lXNWtiR1ZrVW1WcVpXTjBhVzl1Snl3Z2RHaHBjeTV5WldwbFkzUnBiMjRwSUh4OFhHNWNkRngwWEhSY2RGeDBVSEp2YldselpTNXZibEJ2ZEdWdWRHbGhiR3g1Vlc1b1lXNWtiR1ZrVW1WcVpXTjBhVzl1S0hSb2FYTXVjbVZxWldOMGFXOXVMQ0IwYUdsekxtTnZiblJsZUhRcE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgwN1hHNWNibHgwWEhSbWRXNWpkR2x2YmlCVmJuSmxjRzl5ZEZSaGMyc29jbVZxWldOMGFXOXVLU0I3WEc1Y2RGeDBYSFIwYUdsekxuSmxhbVZqZEdsdmJpQTlJSEpsYW1WamRHbHZianRjYmx4MFhIUjlYRzVjYmx4MFhIUlZibkpsY0c5eWRGUmhjMnN1Y0hKdmRHOTBlWEJsTG5KMWJpQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUmNkRngwYVdZb2RHaHBjeTV5WldwbFkzUnBiMjR1Y21Wd2IzSjBaV1FwSUh0Y2JseDBYSFJjZEZ4MFpXMXBkRkpsYW1WamRHbHZiaWduY21WcVpXTjBhVzl1U0dGdVpHeGxaQ2NzSUhSb2FYTXVjbVZxWldOMGFXOXVLU0I4ZkZ4dVhIUmNkRngwWEhSY2RGQnliMjFwYzJVdWIyNVFiM1JsYm5ScFlXeHNlVlZ1YUdGdVpHeGxaRkpsYW1WamRHbHZia2hoYm1Sc1pXUW9kR2hwY3k1eVpXcGxZM1JwYjI0cE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgwN1hHNWNibHgwWEhRdkx5QlZibWhoYm1Sc1pXUWdjbVZxWldOMGFXOXVJR2h2YjJ0elhHNWNkRngwTHk4Z1Fua2daR1ZtWVhWc2RDd2daWFpsY25sMGFHbHVaeUJwY3lCaElHNXZiM0JjYmx4dVhIUmNkRkJ5YjIxcGMyVXVZM0psWVhSbFEyOXVkR1Y0ZEZ4dVhIUmNkRngwUFNCUWNtOXRhWE5sTG1WdWRHVnlRMjl1ZEdWNGRGeHVYSFJjZEZ4MFBTQlFjbTl0YVhObExtVjRhWFJEYjI1MFpYaDBYRzVjZEZ4MFhIUTlJRkJ5YjIxcGMyVXViMjVRYjNSbGJuUnBZV3hzZVZWdWFHRnVaR3hsWkZKbGFtVmpkR2x2Ymx4dVhIUmNkRngwUFNCUWNtOXRhWE5sTG05dVVHOTBaVzUwYVdGc2JIbFZibWhoYm1Sc1pXUlNaV3BsWTNScGIyNUlZVzVrYkdWa1hHNWNkRngwWEhROUlGQnliMjFwYzJVdWIyNUdZWFJoYkZKbGFtVmpkR2x2Ymx4dVhIUmNkRngwUFNCdWIyOXdPMXh1WEc1Y2RGeDBMeThnUlhKeWIzSnpJR0Z1WkNCemFXNW5iR1YwYjI1elhHNWNibHgwWEhSMllYSWdabTl5WlhabGNsQmxibVJwYm1kSVlXNWtiR1Z5SUQwZ2JtVjNJRWhoYm1Sc1pYSW9LVHRjYmx4MFhIUjJZWElnWm05eVpYWmxjbEJsYm1ScGJtZFFjbTl0YVhObElEMGdibVYzSUZCeWIyMXBjMlVvU0dGdVpHeGxjaXdnWm05eVpYWmxjbEJsYm1ScGJtZElZVzVrYkdWeUtUdGNibHh1WEhSY2RHWjFibU4wYVc5dUlHTjVZMnhsS0NrZ2UxeHVYSFJjZEZ4MGNtVjBkWEp1SUc1bGR5QlNaV3BsWTNSbFpDaHVaWGNnVkhsd1pVVnljbTl5S0NkUWNtOXRhWE5sSUdONVkyeGxKeWtwTzF4dVhIUmNkSDFjYmx4dVhIUmNkQzh2SUZSaGMyc2djblZ1Ym1WeWMxeHVYRzVjZEZ4MEx5b3FYRzVjZEZ4MElDb2dVblZ1SUdFZ2MybHVaMnhsSUdOdmJuTjFiV1Z5WEc1Y2RGeDBJQ29nUUdOdmJuTjBjblZqZEc5eVhHNWNkRngwSUNvdlhHNWNkRngwWm5WdVkzUnBiMjRnUTI5dWRHbHVkV0YwYVc5dVZHRnpheWhqYjI1MGFXNTFZWFJwYjI0c0lHaGhibVJzWlhJcElIdGNibHgwWEhSY2RIUm9hWE11WTI5dWRHbHVkV0YwYVc5dUlEMGdZMjl1ZEdsdWRXRjBhVzl1TzF4dVhIUmNkRngwZEdocGN5NW9ZVzVrYkdWeUlEMGdhR0Z1Wkd4bGNqdGNibHgwWEhSOVhHNWNibHgwWEhSRGIyNTBhVzUxWVhScGIyNVVZWE5yTG5CeWIzUnZkSGx3WlM1eWRXNGdQU0JtZFc1amRHbHZiaWdwSUh0Y2JseDBYSFJjZEhSb2FYTXVhR0Z1Wkd4bGNpNXFiMmx1S0NrdWQyaGxiaWgwYUdsekxtTnZiblJwYm5WaGRHbHZiaWs3WEc1Y2RGeDBmVHRjYmx4dVhIUmNkQzhxS2x4dVhIUmNkQ0FxSUZKMWJpQmhJSEYxWlhWbElHOW1JSEJ5YjJkeVpYTnpJR2hoYm1Sc1pYSnpYRzVjZEZ4MElDb2dRR052Ym5OMGNuVmpkRzl5WEc1Y2RGeDBJQ292WEc1Y2RGeDBablZ1WTNScGIyNGdVSEp2WjNKbGMzTlVZWE5yS0haaGJIVmxMQ0JvWVc1a2JHVnlLU0I3WEc1Y2RGeDBYSFIwYUdsekxtaGhibVJzWlhJZ1BTQm9ZVzVrYkdWeU8xeHVYSFJjZEZ4MGRHaHBjeTUyWVd4MVpTQTlJSFpoYkhWbE8xeHVYSFJjZEgxY2JseHVYSFJjZEZCeWIyZHlaWE56VkdGemF5NXdjbTkwYjNSNWNHVXVjblZ1SUQwZ1puVnVZM1JwYjI0b0tTQjdYRzVjZEZ4MFhIUjJZWElnY1NBOUlIUm9hWE11YUdGdVpHeGxjaTVqYjI1emRXMWxjbk03WEc1Y2RGeDBYSFJwWmloeElEMDlQU0IyYjJsa0lEQXBJSHRjYmx4MFhIUmNkRngwY21WMGRYSnVPMXh1WEhSY2RGeDBmVnh1WEc1Y2RGeDBYSFJtYjNJZ0tIWmhjaUJqTENCcElEMGdNRHNnYVNBOElIRXViR1Z1WjNSb095QXJLMmtwSUh0Y2JseDBYSFJjZEZ4MFl5QTlJSEZiYVYwN1hHNWNkRngwWEhSY2RISjFiazV2ZEdsbWVTaGpMbkJ5YjJkeVpYTnpMQ0IwYUdsekxuWmhiSFZsTENCMGFHbHpMbWhoYm1Sc1pYSXNJR011Y21WalpXbDJaWElzSUdNdWNtVnpiMngyWlhJcE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEgwN1hHNWNibHgwWEhRdktpcGNibHgwWEhRZ0tpQkJjM05wYldsc1lYUmxJR0VnZEdobGJtRmliR1VzSUhObGJtUnBibWNnYVhRbmN5QjJZV3gxWlNCMGJ5QnlaWE52YkhabGNseHVYSFJjZENBcUlFQndZWEpoYlNCN1puVnVZM1JwYjI1OUlIUm9aVzVjYmx4MFhIUWdLaUJBY0dGeVlXMGdlMjlpYW1WamRIeG1kVzVqZEdsdmJuMGdkR2hsYm1GaWJHVmNibHgwWEhRZ0tpQkFjR0Z5WVcwZ2UyOWlhbVZqZEgwZ2NtVnpiMngyWlhKY2JseDBYSFFnS2lCQVkyOXVjM1J5ZFdOMGIzSmNibHgwWEhRZ0tpOWNibHgwWEhSbWRXNWpkR2x2YmlCQmMzTnBiV2xzWVhSbFZHRnpheWgwYUdWdUxDQjBhR1Z1WVdKc1pTd2djbVZ6YjJ4MlpYSXBJSHRjYmx4MFhIUmNkSFJvYVhNdVgzUm9aVzRnUFNCMGFHVnVPMXh1WEhSY2RGeDBkR2hwY3k1MGFHVnVZV0pzWlNBOUlIUm9aVzVoWW14bE8xeHVYSFJjZEZ4MGRHaHBjeTV5WlhOdmJIWmxjaUE5SUhKbGMyOXNkbVZ5TzF4dVhIUmNkSDFjYmx4dVhIUmNkRUZ6YzJsdGFXeGhkR1ZVWVhOckxuQnliM1J2ZEhsd1pTNXlkVzRnUFNCbWRXNWpkR2x2YmlncElIdGNibHgwWEhSY2RIWmhjaUJvSUQwZ2RHaHBjeTV5WlhOdmJIWmxjanRjYmx4MFhIUmNkSFJ5ZVVGemMybHRhV3hoZEdVb2RHaHBjeTVmZEdobGJpd2dkR2hwY3k1MGFHVnVZV0pzWlN3Z1gzSmxjMjlzZG1Vc0lGOXlaV3BsWTNRc0lGOXViM1JwWm5rcE8xeHVYRzVjZEZ4MFhIUm1kVzVqZEdsdmJpQmZjbVZ6YjJ4MlpTaDRLU0I3SUdndWNtVnpiMngyWlNoNEtUc2dmVnh1WEhSY2RGeDBablZ1WTNScGIyNGdYM0psYW1WamRDaDRLU0FnZXlCb0xuSmxhbVZqZENoNEtUc2dmVnh1WEhSY2RGeDBablZ1WTNScGIyNGdYMjV2ZEdsbWVTaDRLU0FnZXlCb0xtNXZkR2xtZVNoNEtUc2dmVnh1WEhSY2RIMDdYRzVjYmx4MFhIUm1kVzVqZEdsdmJpQjBjbmxCYzNOcGJXbHNZWFJsS0hSb1pXNHNJSFJvWlc1aFlteGxMQ0J5WlhOdmJIWmxMQ0J5WldwbFkzUXNJRzV2ZEdsbWVTa2dlMXh1WEhSY2RGeDBkSEo1SUh0Y2JseDBYSFJjZEZ4MGRHaGxiaTVqWVd4c0tIUm9aVzVoWW14bExDQnlaWE52YkhabExDQnlaV3BsWTNRc0lHNXZkR2xtZVNrN1hHNWNkRngwWEhSOUlHTmhkR05vSUNobEtTQjdYRzVjZEZ4MFhIUmNkSEpsYW1WamRDaGxLVHRjYmx4MFhIUmNkSDFjYmx4MFhIUjlYRzVjYmx4MFhIUXZLaXBjYmx4MFhIUWdLaUJHYjJ4a0lHRWdhR0Z1Wkd4bGNpQjJZV3gxWlNCM2FYUm9JSHBjYmx4MFhIUWdLaUJBWTI5dWMzUnlkV04wYjNKY2JseDBYSFFnS2k5Y2JseDBYSFJtZFc1amRHbHZiaUJHYjJ4a0tHWXNJSG9zSUdNc0lIUnZLU0I3WEc1Y2RGeDBYSFIwYUdsekxtWWdQU0JtT3lCMGFHbHpMbm9nUFNCNk95QjBhR2x6TG1NZ1BTQmpPeUIwYUdsekxuUnZJRDBnZEc4N1hHNWNkRngwWEhSMGFHbHpMbkpsYzI5c2RtVnlJRDBnWm1GcGJFbG1VbVZxWldOMFpXUTdYRzVjZEZ4MFhIUjBhR2x6TG5KbFkyVnBkbVZ5SUQwZ2RHaHBjenRjYmx4MFhIUjlYRzVjYmx4MFhIUkdiMnhrTG5CeWIzUnZkSGx3WlM1bWRXeG1hV3hzWldRZ1BTQm1kVzVqZEdsdmJpaDRLU0I3WEc1Y2RGeDBYSFIwYUdsekxtWXVZMkZzYkNoMGFHbHpMbU1zSUhSb2FYTXVlaXdnZUN3Z2RHaHBjeTUwYnlrN1hHNWNkRngwZlR0Y2JseHVYSFJjZEVadmJHUXVjSEp2ZEc5MGVYQmxMbkpsYW1WamRHVmtJRDBnWm5WdVkzUnBiMjRvZUNrZ2UxeHVYSFJjZEZ4MGRHaHBjeTUwYnk1eVpXcGxZM1FvZUNrN1hHNWNkRngwZlR0Y2JseHVYSFJjZEVadmJHUXVjSEp2ZEc5MGVYQmxMbkJ5YjJkeVpYTnpJRDBnWm5WdVkzUnBiMjRvZUNrZ2UxeHVYSFJjZEZ4MGRHaHBjeTUwYnk1dWIzUnBabmtvZUNrN1hHNWNkRngwZlR0Y2JseHVYSFJjZEM4dklFOTBhR1Z5SUdobGJIQmxjbk5jYmx4dVhIUmNkQzhxS2x4dVhIUmNkQ0FxSUVCd1lYSmhiU0I3S24wZ2VGeHVYSFJjZENBcUlFQnlaWFIxY201eklIdGliMjlzWldGdWZTQjBjblZsSUdsbVppQjRJR2x6SUdFZ2RISjFjM1JsWkNCUWNtOXRhWE5sWEc1Y2RGeDBJQ292WEc1Y2RGeDBablZ1WTNScGIyNGdhWE5RY205dGFYTmxLSGdwSUh0Y2JseDBYSFJjZEhKbGRIVnliaUI0SUdsdWMzUmhibU5sYjJZZ1VISnZiV2x6WlR0Y2JseDBYSFI5WEc1Y2JseDBYSFF2S2lwY2JseDBYSFFnS2lCVVpYTjBJR3AxYzNRZ1pXNXZkV2RvSUhSdklISjFiR1VnYjNWMElIQnlhVzFwZEdsMlpYTXNJR2x1SUc5eVpHVnlJSFJ2SUhSaGEyVWdabUZ6ZEdWeVhHNWNkRngwSUNvZ2NHRjBhSE1nYVc0Z2MyOXRaU0JqYjJSbFhHNWNkRngwSUNvZ1FIQmhjbUZ0SUhzcWZTQjRYRzVjZEZ4MElDb2dRSEpsZEhWeWJuTWdlMkp2YjJ4bFlXNTlJR1poYkhObElHbG1aaUI0SUdseklHZDFZWEpoYm5SbFpXUWdLbTV2ZENvZ2RHOGdZbVVnWVNCMGFHVnVZV0pzWlZ4dVhIUmNkQ0FxTDF4dVhIUmNkR1oxYm1OMGFXOXVJRzFoZVdKbFZHaGxibUZpYkdVb2VDa2dlMXh1WEhSY2RGeDBjbVYwZFhKdUlDaDBlWEJsYjJZZ2VDQTlQVDBnSjI5aWFtVmpkQ2NnZkh3Z2RIbHdaVzltSUhnZ1BUMDlJQ2RtZFc1amRHbHZiaWNwSUNZbUlIZ2dJVDA5SUc1MWJHdzdYRzVjZEZ4MGZWeHVYRzVjZEZ4MFpuVnVZM1JwYjI0Z2NuVnVRMjl1ZEdsdWRXRjBhVzl1TVNobUxDQm9MQ0J5WldObGFYWmxjaXdnYm1WNGRDa2dlMXh1WEhSY2RGeDBhV1lvZEhsd1pXOW1JR1lnSVQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmx4MFhIUmNkRngwY21WMGRYSnVJRzVsZUhRdVltVmpiMjFsS0dncE8xeHVYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUlFjbTl0YVhObExtVnVkR1Z5UTI5dWRHVjRkQ2hvS1R0Y2JseDBYSFJjZEhSeWVVTmhkR05vVW1WcVpXTjBLR1lzSUdndWRtRnNkV1VzSUhKbFkyVnBkbVZ5TENCdVpYaDBLVHRjYmx4MFhIUmNkRkJ5YjIxcGMyVXVaWGhwZEVOdmJuUmxlSFFvS1R0Y2JseDBYSFI5WEc1Y2JseDBYSFJtZFc1amRHbHZiaUJ5ZFc1RGIyNTBhVzUxWVhScGIyNHpLR1lzSUhnc0lHZ3NJSEpsWTJWcGRtVnlMQ0J1WlhoMEtTQjdYRzVjZEZ4MFhIUnBaaWgwZVhCbGIyWWdaaUFoUFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1WEhSY2RGeDBYSFJ5WlhSMWNtNGdibVY0ZEM1aVpXTnZiV1VvYUNrN1hHNWNkRngwWEhSOVhHNWNibHgwWEhSY2RGQnliMjFwYzJVdVpXNTBaWEpEYjI1MFpYaDBLR2dwTzF4dVhIUmNkRngwZEhKNVEyRjBZMmhTWldwbFkzUXpLR1lzSUhnc0lHZ3VkbUZzZFdVc0lISmxZMlZwZG1WeUxDQnVaWGgwS1R0Y2JseDBYSFJjZEZCeWIyMXBjMlV1WlhocGRFTnZiblJsZUhRb0tUdGNibHgwWEhSOVhHNWNibHgwWEhRdktpcGNibHgwWEhRZ0tpQkFaR1Z3Y21WallYUmxaRnh1WEhSY2RDQXFMMXh1WEhSY2RHWjFibU4wYVc5dUlISjFiazV2ZEdsbWVTaG1MQ0I0TENCb0xDQnlaV05sYVhabGNpd2dibVY0ZENrZ2UxeHVYSFJjZEZ4MGFXWW9kSGx3Wlc5bUlHWWdJVDA5SUNkbWRXNWpkR2x2YmljcElIdGNibHgwWEhSY2RGeDBjbVYwZFhKdUlHNWxlSFF1Ym05MGFXWjVLSGdwTzF4dVhIUmNkRngwZlZ4dVhHNWNkRngwWEhSUWNtOXRhWE5sTG1WdWRHVnlRMjl1ZEdWNGRDaG9LVHRjYmx4MFhIUmNkSFJ5ZVVOaGRHTm9VbVYwZFhKdUtHWXNJSGdzSUhKbFkyVnBkbVZ5TENCdVpYaDBLVHRjYmx4MFhIUmNkRkJ5YjIxcGMyVXVaWGhwZEVOdmJuUmxlSFFvS1R0Y2JseDBYSFI5WEc1Y2JseDBYSFJtZFc1amRHbHZiaUIwY25sRFlYUmphRElvWml3Z1lTd2dZaWtnZTF4dVhIUmNkRngwZEhKNUlIdGNibHgwWEhSY2RGeDBjbVYwZFhKdUlHWW9ZU3dnWWlrN1hHNWNkRngwWEhSOUlHTmhkR05vS0dVcElIdGNibHgwWEhSY2RGeDBjbVYwZFhKdUlISmxhbVZqZENobEtUdGNibHgwWEhSY2RIMWNibHgwWEhSOVhHNWNibHgwWEhRdktpcGNibHgwWEhRZ0tpQlNaWFIxY200Z1ppNWpZV3hzS0hSb2FYTkJjbWNzSUhncExDQnZjaUJwWmlCcGRDQjBhSEp2ZDNNZ2NtVjBkWEp1SUdFZ2NtVnFaV04wWldRZ2NISnZiV2x6WlNCbWIzSmNibHgwWEhRZ0tpQjBhR1VnZEdoeWIzZHVJR1Y0WTJWd2RHbHZibHh1WEhSY2RDQXFMMXh1WEhSY2RHWjFibU4wYVc5dUlIUnllVU5oZEdOb1VtVnFaV04wS0dZc0lIZ3NJSFJvYVhOQmNtY3NJRzVsZUhRcElIdGNibHgwWEhSY2RIUnllU0I3WEc1Y2RGeDBYSFJjZEc1bGVIUXVZbVZqYjIxbEtHZGxkRWhoYm1Sc1pYSW9aaTVqWVd4c0tIUm9hWE5CY21jc0lIZ3BLU2s3WEc1Y2RGeDBYSFI5SUdOaGRHTm9LR1VwSUh0Y2JseDBYSFJjZEZ4MGJtVjRkQzVpWldOdmJXVW9ibVYzSUZKbGFtVmpkR1ZrS0dVcEtUdGNibHgwWEhSY2RIMWNibHgwWEhSOVhHNWNibHgwWEhRdktpcGNibHgwWEhRZ0tpQlRZVzFsSUdGeklHRmliM1psTENCaWRYUWdhVzVqYkhWa1pYTWdkR2hsSUdWNGRISmhJR0Z5WjNWdFpXNTBJSEJoY21GdFpYUmxjaTVjYmx4MFhIUWdLaTljYmx4MFhIUm1kVzVqZEdsdmJpQjBjbmxEWVhSamFGSmxhbVZqZERNb1ppd2dlQ3dnZVN3Z2RHaHBjMEZ5Wnl3Z2JtVjRkQ2tnZTF4dVhIUmNkRngwZEhKNUlIdGNibHgwWEhSY2RGeDBaaTVqWVd4c0tIUm9hWE5CY21jc0lIZ3NJSGtzSUc1bGVIUXBPMXh1WEhSY2RGeDBmU0JqWVhSamFDaGxLU0I3WEc1Y2RGeDBYSFJjZEc1bGVIUXVZbVZqYjIxbEtHNWxkeUJTWldwbFkzUmxaQ2hsS1NrN1hHNWNkRngwWEhSOVhHNWNkRngwZlZ4dVhHNWNkRngwTHlvcVhHNWNkRngwSUNvZ1FHUmxjSEpsWTJGMFpXUmNibHgwWEhRZ0tpQlNaWFIxY200Z1ppNWpZV3hzS0hSb2FYTkJjbWNzSUhncExDQnZjaUJwWmlCcGRDQjBhSEp2ZDNNc0lDcHlaWFIxY200cUlIUm9aU0JsZUdObGNIUnBiMjVjYmx4MFhIUWdLaTljYmx4MFhIUm1kVzVqZEdsdmJpQjBjbmxEWVhSamFGSmxkSFZ5YmlobUxDQjRMQ0IwYUdselFYSm5MQ0J1WlhoMEtTQjdYRzVjZEZ4MFhIUjBjbmtnZTF4dVhIUmNkRngwWEhSdVpYaDBMbTV2ZEdsbWVTaG1MbU5oYkd3b2RHaHBjMEZ5Wnl3Z2VDa3BPMXh1WEhSY2RGeDBmU0JqWVhSamFDaGxLU0I3WEc1Y2RGeDBYSFJjZEc1bGVIUXVibTkwYVdaNUtHVXBPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMWNibHh1WEhSY2RHWjFibU4wYVc5dUlHbHVhR1Z5YVhRb1VHRnlaVzUwTENCRGFHbHNaQ2tnZTF4dVhIUmNkRngwUTJocGJHUXVjSEp2ZEc5MGVYQmxJRDBnYjJKcVpXTjBRM0psWVhSbEtGQmhjbVZ1ZEM1d2NtOTBiM1I1Y0dVcE8xeHVYSFJjZEZ4MFEyaHBiR1F1Y0hKdmRHOTBlWEJsTG1OdmJuTjBjblZqZEc5eUlEMGdRMmhwYkdRN1hHNWNkRngwZlZ4dVhHNWNkRngwWm5WdVkzUnBiMjRnYzI1a0tIZ3NJSGtwSUh0Y2JseDBYSFJjZEhKbGRIVnliaUI1TzF4dVhIUmNkSDFjYmx4dVhIUmNkR1oxYm1OMGFXOXVJRzV2YjNBb0tTQjdmVnh1WEc1Y2RGeDBablZ1WTNScGIyNGdhVzVwZEVWdGFYUlNaV3BsWTNScGIyNG9LU0I3WEc1Y2RGeDBYSFF2S21kc2IySmhiQ0J3Y205alpYTnpMQ0J6Wld4bUxDQkRkWE4wYjIxRmRtVnVkQ292WEc1Y2RGeDBYSFJwWmloMGVYQmxiMllnY0hKdlkyVnpjeUFoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dKaVlnY0hKdlkyVnpjeUFoUFQwZ2JuVnNiRnh1WEhSY2RGeDBYSFFtSmlCMGVYQmxiMllnY0hKdlkyVnpjeTVsYldsMElEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNWNkRngwWEhSY2RDOHZJRkpsZEhWeWJtbHVaeUJtWVd4emVTQm9aWEpsSUcxbFlXNXpJSFJ2SUdOaGJHd2dkR2hsSUdSbFptRjFiSFJjYmx4MFhIUmNkRngwTHk4Z2IyNVFiM1JsYm5ScFlXeHNlVlZ1YUdGdVpHeGxaRkpsYW1WamRHbHZiaUJCVUVrdUlDQlVhR2x6SUdseklITmhabVVnWlhabGJpQnBibHh1WEhSY2RGeDBYSFF2THlCaWNtOTNjMlZ5YVdaNUlITnBibU5sSUhCeWIyTmxjM011WlcxcGRDQmhiSGRoZVhNZ2NtVjBkWEp1Y3lCbVlXeHplU0JwYmlCaWNtOTNjMlZ5YVdaNU9seHVYSFJjZEZ4MFhIUXZMeUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2WkdWbWRXNWpkSHB2YldKcFpTOXViMlJsTFhCeWIyTmxjM012WW14dllpOXRZWE4wWlhJdlluSnZkM05sY2k1cWN5Tk1OREF0VERRMlhHNWNkRngwWEhSY2RISmxkSFZ5YmlCbWRXNWpkR2x2YmloMGVYQmxMQ0J5WldwbFkzUnBiMjRwSUh0Y2JseDBYSFJjZEZ4MFhIUnlaWFIxY200Z2RIbHdaU0E5UFQwZ0ozVnVhR0Z1Wkd4bFpGSmxhbVZqZEdsdmJpZGNibHgwWEhSY2RGeDBYSFJjZEQ4Z2NISnZZMlZ6Y3k1bGJXbDBLSFI1Y0dVc0lISmxhbVZqZEdsdmJpNTJZV3gxWlN3Z2NtVnFaV04wYVc5dUtWeHVYSFJjZEZ4MFhIUmNkRngwT2lCd2NtOWpaWE56TG1WdGFYUW9kSGx3WlN3Z2NtVnFaV04wYVc5dUtUdGNibHgwWEhSY2RGeDBmVHRjYmx4MFhIUmNkSDBnWld4elpTQnBaaWgwZVhCbGIyWWdjMlZzWmlBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlZZ2RIbHdaVzltSUVOMWMzUnZiVVYyWlc1MElEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNWNkRngwWEhSY2RISmxkSFZ5YmlBb1puVnVZM1JwYjI0b2JtOXZjQ3dnYzJWc1ppd2dRM1Z6ZEc5dFJYWmxiblFwSUh0Y2JseDBYSFJjZEZ4MFhIUjJZWElnYUdGelEzVnpkRzl0UlhabGJuUWdQU0JtWVd4elpUdGNibHgwWEhSY2RGeDBYSFIwY25rZ2UxeHVYSFJjZEZ4MFhIUmNkRngwZG1GeUlHVjJJRDBnYm1WM0lFTjFjM1J2YlVWMlpXNTBLQ2QxYm1oaGJtUnNaV1JTWldwbFkzUnBiMjRuS1R0Y2JseDBYSFJjZEZ4MFhIUmNkR2hoYzBOMWMzUnZiVVYyWlc1MElEMGdaWFlnYVc1emRHRnVZMlZ2WmlCRGRYTjBiMjFGZG1WdWREdGNibHgwWEhSY2RGeDBYSFI5SUdOaGRHTm9JQ2hsS1NCN2ZWeHVYRzVjZEZ4MFhIUmNkRngwY21WMGRYSnVJQ0ZvWVhORGRYTjBiMjFGZG1WdWRDQS9JRzV2YjNBZ09pQm1kVzVqZEdsdmJpaDBlWEJsTENCeVpXcGxZM1JwYjI0cElIdGNibHgwWEhSY2RGeDBYSFJjZEhaaGNpQmxkaUE5SUc1bGR5QkRkWE4wYjIxRmRtVnVkQ2gwZVhCbExDQjdYRzVjZEZ4MFhIUmNkRngwWEhSY2RHUmxkR0ZwYkRvZ2UxeHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RISmxZWE52YmpvZ2NtVnFaV04wYVc5dUxuWmhiSFZsTEZ4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEd0bGVUb2djbVZxWldOMGFXOXVYRzVjZEZ4MFhIUmNkRngwWEhSY2RIMHNYRzVjZEZ4MFhIUmNkRngwWEhSY2RHSjFZbUpzWlhNNklHWmhiSE5sTEZ4dVhIUmNkRngwWEhSY2RGeDBYSFJqWVc1alpXeGhZbXhsT2lCMGNuVmxYRzVjZEZ4MFhIUmNkRngwWEhSOUtUdGNibHh1WEhSY2RGeDBYSFJjZEZ4MGNtVjBkWEp1SUNGelpXeG1MbVJwYzNCaGRHTm9SWFpsYm5Rb1pYWXBPMXh1WEhSY2RGeDBYSFJjZEgwN1hHNWNkRngwWEhSY2RIMG9ibTl2Y0N3Z2MyVnNaaXdnUTNWemRHOXRSWFpsYm5RcEtUdGNibHgwWEhSY2RIMWNibHh1WEhSY2RGeDBjbVYwZFhKdUlHNXZiM0E3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBjbVYwZFhKdUlGQnliMjFwYzJVN1hHNWNkSDA3WEc1OUtUdGNibjBvZEhsd1pXOW1JR1JsWm1sdVpTQTlQVDBnSjJaMWJtTjBhVzl1SnlBbUppQmtaV1pwYm1VdVlXMWtJRDhnWkdWbWFXNWxJRG9nWm5WdVkzUnBiMjRvWm1GamRHOXllU2tnZXlCdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaaFkzUnZjbmtvS1RzZ2ZTa3BPMXh1SWwxOSIsIi8qKiBAbGljZW5zZSBNSVQgTGljZW5zZSAoYykgY29weXJpZ2h0IDIwMTAtMjAxNCBvcmlnaW5hbCBhdXRob3Igb3IgYXV0aG9ycyAqL1xuLyoqIEBhdXRob3IgQnJpYW4gQ2F2YWxpZXIgKi9cbi8qKiBAYXV0aG9yIEpvaG4gSGFubiAqL1xuXG4oZnVuY3Rpb24oZGVmaW5lKSB7ICd1c2Ugc3RyaWN0JztcbmRlZmluZShmdW5jdGlvbigpIHtcblxuXHRyZXR1cm4ge1xuXHRcdHBlbmRpbmc6IHRvUGVuZGluZ1N0YXRlLFxuXHRcdGZ1bGZpbGxlZDogdG9GdWxmaWxsZWRTdGF0ZSxcblx0XHRyZWplY3RlZDogdG9SZWplY3RlZFN0YXRlLFxuXHRcdGluc3BlY3Q6IGluc3BlY3Rcblx0fTtcblxuXHRmdW5jdGlvbiB0b1BlbmRpbmdTdGF0ZSgpIHtcblx0XHRyZXR1cm4geyBzdGF0ZTogJ3BlbmRpbmcnIH07XG5cdH1cblxuXHRmdW5jdGlvbiB0b1JlamVjdGVkU3RhdGUoZSkge1xuXHRcdHJldHVybiB7IHN0YXRlOiAncmVqZWN0ZWQnLCByZWFzb246IGUgfTtcblx0fVxuXG5cdGZ1bmN0aW9uIHRvRnVsZmlsbGVkU3RhdGUoeCkge1xuXHRcdHJldHVybiB7IHN0YXRlOiAnZnVsZmlsbGVkJywgdmFsdWU6IHggfTtcblx0fVxuXG5cdGZ1bmN0aW9uIGluc3BlY3QoaGFuZGxlcikge1xuXHRcdHZhciBzdGF0ZSA9IGhhbmRsZXIuc3RhdGUoKTtcblx0XHRyZXR1cm4gc3RhdGUgPT09IDAgPyB0b1BlbmRpbmdTdGF0ZSgpXG5cdFx0XHQgOiBzdGF0ZSA+IDAgICA/IHRvRnVsZmlsbGVkU3RhdGUoaGFuZGxlci52YWx1ZSlcblx0XHRcdCAgICAgICAgICAgICAgIDogdG9SZWplY3RlZFN0YXRlKGhhbmRsZXIudmFsdWUpO1xuXHR9XG5cbn0pO1xufSh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUgOiBmdW5jdGlvbihmYWN0b3J5KSB7IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpOyB9KSk7XG4iLCIvKiogQGxpY2Vuc2UgTUlUIExpY2Vuc2UgKGMpIGNvcHlyaWdodCAyMDEwLTIwMTQgb3JpZ2luYWwgYXV0aG9yIG9yIGF1dGhvcnMgKi9cblxuLyoqXG4gKiBQcm9taXNlcy9BKyBhbmQgd2hlbigpIGltcGxlbWVudGF0aW9uXG4gKiB3aGVuIGlzIHBhcnQgb2YgdGhlIGN1am9KUyBmYW1pbHkgb2YgbGlicmFyaWVzIChodHRwOi8vY3Vqb2pzLmNvbS8pXG4gKiBAYXV0aG9yIEJyaWFuIENhdmFsaWVyXG4gKiBAYXV0aG9yIEpvaG4gSGFublxuICovXG4oZnVuY3Rpb24oZGVmaW5lKSB7ICd1c2Ugc3RyaWN0JztcbmRlZmluZShmdW5jdGlvbiAocmVxdWlyZSkge1xuXG5cdHZhciB0aW1lZCA9IHJlcXVpcmUoJy4vbGliL2RlY29yYXRvcnMvdGltZWQnKTtcblx0dmFyIGFycmF5ID0gcmVxdWlyZSgnLi9saWIvZGVjb3JhdG9ycy9hcnJheScpO1xuXHR2YXIgZmxvdyA9IHJlcXVpcmUoJy4vbGliL2RlY29yYXRvcnMvZmxvdycpO1xuXHR2YXIgZm9sZCA9IHJlcXVpcmUoJy4vbGliL2RlY29yYXRvcnMvZm9sZCcpO1xuXHR2YXIgaW5zcGVjdCA9IHJlcXVpcmUoJy4vbGliL2RlY29yYXRvcnMvaW5zcGVjdCcpO1xuXHR2YXIgZ2VuZXJhdGUgPSByZXF1aXJlKCcuL2xpYi9kZWNvcmF0b3JzL2l0ZXJhdGUnKTtcblx0dmFyIHByb2dyZXNzID0gcmVxdWlyZSgnLi9saWIvZGVjb3JhdG9ycy9wcm9ncmVzcycpO1xuXHR2YXIgd2l0aFRoaXMgPSByZXF1aXJlKCcuL2xpYi9kZWNvcmF0b3JzL3dpdGgnKTtcblx0dmFyIHVuaGFuZGxlZFJlamVjdGlvbiA9IHJlcXVpcmUoJy4vbGliL2RlY29yYXRvcnMvdW5oYW5kbGVkUmVqZWN0aW9uJyk7XG5cdHZhciBUaW1lb3V0RXJyb3IgPSByZXF1aXJlKCcuL2xpYi9UaW1lb3V0RXJyb3InKTtcblxuXHR2YXIgUHJvbWlzZSA9IFthcnJheSwgZmxvdywgZm9sZCwgZ2VuZXJhdGUsIHByb2dyZXNzLFxuXHRcdGluc3BlY3QsIHdpdGhUaGlzLCB0aW1lZCwgdW5oYW5kbGVkUmVqZWN0aW9uXVxuXHRcdC5yZWR1Y2UoZnVuY3Rpb24oUHJvbWlzZSwgZmVhdHVyZSkge1xuXHRcdFx0cmV0dXJuIGZlYXR1cmUoUHJvbWlzZSk7XG5cdFx0fSwgcmVxdWlyZSgnLi9saWIvUHJvbWlzZScpKTtcblxuXHR2YXIgYXBwbHkgPSByZXF1aXJlKCcuL2xpYi9hcHBseScpKFByb21pc2UpO1xuXG5cdC8vIFB1YmxpYyBBUElcblxuXHR3aGVuLnByb21pc2UgICAgID0gcHJvbWlzZTsgICAgICAgICAgICAgIC8vIENyZWF0ZSBhIHBlbmRpbmcgcHJvbWlzZVxuXHR3aGVuLnJlc29sdmUgICAgID0gUHJvbWlzZS5yZXNvbHZlOyAgICAgIC8vIENyZWF0ZSBhIHJlc29sdmVkIHByb21pc2Vcblx0d2hlbi5yZWplY3QgICAgICA9IFByb21pc2UucmVqZWN0OyAgICAgICAvLyBDcmVhdGUgYSByZWplY3RlZCBwcm9taXNlXG5cblx0d2hlbi5saWZ0ICAgICAgICA9IGxpZnQ7ICAgICAgICAgICAgICAgICAvLyBsaWZ0IGEgZnVuY3Rpb24gdG8gcmV0dXJuIHByb21pc2VzXG5cdHdoZW5bJ3RyeSddICAgICAgPSBhdHRlbXB0OyAgICAgICAgICAgICAgLy8gY2FsbCBhIGZ1bmN0aW9uIGFuZCByZXR1cm4gYSBwcm9taXNlXG5cdHdoZW4uYXR0ZW1wdCAgICAgPSBhdHRlbXB0OyAgICAgICAgICAgICAgLy8gYWxpYXMgZm9yIHdoZW4udHJ5XG5cblx0d2hlbi5pdGVyYXRlICAgICA9IFByb21pc2UuaXRlcmF0ZTsgICAgICAvLyBERVBSRUNBVEVEICh1c2UgY3Vqb2pzL21vc3Qgc3RyZWFtcykgR2VuZXJhdGUgYSBzdHJlYW0gb2YgcHJvbWlzZXNcblx0d2hlbi51bmZvbGQgICAgICA9IFByb21pc2UudW5mb2xkOyAgICAgICAvLyBERVBSRUNBVEVEICh1c2UgY3Vqb2pzL21vc3Qgc3RyZWFtcykgR2VuZXJhdGUgYSBzdHJlYW0gb2YgcHJvbWlzZXNcblxuXHR3aGVuLmpvaW4gICAgICAgID0gam9pbjsgICAgICAgICAgICAgICAgIC8vIEpvaW4gMiBvciBtb3JlIHByb21pc2VzXG5cblx0d2hlbi5hbGwgICAgICAgICA9IGFsbDsgICAgICAgICAgICAgICAgICAvLyBSZXNvbHZlIGEgbGlzdCBvZiBwcm9taXNlc1xuXHR3aGVuLnNldHRsZSAgICAgID0gc2V0dGxlOyAgICAgICAgICAgICAgIC8vIFNldHRsZSBhIGxpc3Qgb2YgcHJvbWlzZXNcblxuXHR3aGVuLmFueSAgICAgICAgID0gbGlmdChQcm9taXNlLmFueSk7ICAgIC8vIE9uZS13aW5uZXIgcmFjZVxuXHR3aGVuLnNvbWUgICAgICAgID0gbGlmdChQcm9taXNlLnNvbWUpOyAgIC8vIE11bHRpLXdpbm5lciByYWNlXG5cdHdoZW4ucmFjZSAgICAgICAgPSBsaWZ0KFByb21pc2UucmFjZSk7ICAgLy8gRmlyc3QtdG8tc2V0dGxlIHJhY2VcblxuXHR3aGVuLm1hcCAgICAgICAgID0gbWFwOyAgICAgICAgICAgICAgICAgIC8vIEFycmF5Lm1hcCgpIGZvciBwcm9taXNlc1xuXHR3aGVuLmZpbHRlciAgICAgID0gZmlsdGVyOyAgICAgICAgICAgICAgIC8vIEFycmF5LmZpbHRlcigpIGZvciBwcm9taXNlc1xuXHR3aGVuLnJlZHVjZSAgICAgID0gbGlmdChQcm9taXNlLnJlZHVjZSk7ICAgICAgIC8vIEFycmF5LnJlZHVjZSgpIGZvciBwcm9taXNlc1xuXHR3aGVuLnJlZHVjZVJpZ2h0ID0gbGlmdChQcm9taXNlLnJlZHVjZVJpZ2h0KTsgIC8vIEFycmF5LnJlZHVjZVJpZ2h0KCkgZm9yIHByb21pc2VzXG5cblx0d2hlbi5pc1Byb21pc2VMaWtlID0gaXNQcm9taXNlTGlrZTsgICAgICAvLyBJcyBzb21ldGhpbmcgcHJvbWlzZS1saWtlLCBha2EgdGhlbmFibGVcblxuXHR3aGVuLlByb21pc2UgICAgID0gUHJvbWlzZTsgICAgICAgICAgICAgIC8vIFByb21pc2UgY29uc3RydWN0b3Jcblx0d2hlbi5kZWZlciAgICAgICA9IGRlZmVyOyAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSB7cHJvbWlzZSwgcmVzb2x2ZSwgcmVqZWN0fSB0dXBsZVxuXG5cdC8vIEVycm9yIHR5cGVzXG5cblx0d2hlbi5UaW1lb3V0RXJyb3IgPSBUaW1lb3V0RXJyb3I7XG5cblx0LyoqXG5cdCAqIEdldCBhIHRydXN0ZWQgcHJvbWlzZSBmb3IgeCwgb3IgYnkgdHJhbnNmb3JtaW5nIHggd2l0aCBvbkZ1bGZpbGxlZFxuXHQgKlxuXHQgKiBAcGFyYW0geyp9IHhcblx0ICogQHBhcmFtIHtmdW5jdGlvbj99IG9uRnVsZmlsbGVkIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCB3aGVuIHggaXNcblx0ICogICBzdWNjZXNzZnVsbHkgZnVsZmlsbGVkLiAgSWYgcHJvbWlzZU9yVmFsdWUgaXMgYW4gaW1tZWRpYXRlIHZhbHVlLCBjYWxsYmFja1xuXHQgKiAgIHdpbGwgYmUgaW52b2tlZCBpbW1lZGlhdGVseS5cblx0ICogQHBhcmFtIHtmdW5jdGlvbj99IG9uUmVqZWN0ZWQgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIHdoZW4geCBpc1xuXHQgKiAgIHJlamVjdGVkLlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uP30gb25Qcm9ncmVzcyBjYWxsYmFjayB0byBiZSBjYWxsZWQgd2hlbiBwcm9ncmVzcyB1cGRhdGVzXG5cdCAqICAgYXJlIGlzc3VlZCBmb3IgeC4gQGRlcHJlY2F0ZWRcblx0ICogQHJldHVybnMge1Byb21pc2V9IGEgbmV3IHByb21pc2UgdGhhdCB3aWxsIGZ1bGZpbGwgd2l0aCB0aGUgcmV0dXJuXG5cdCAqICAgdmFsdWUgb2YgY2FsbGJhY2sgb3IgZXJyYmFjayBvciB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiBwcm9taXNlT3JWYWx1ZSBpZlxuXHQgKiAgIGNhbGxiYWNrIGFuZC9vciBlcnJiYWNrIGlzIG5vdCBzdXBwbGllZC5cblx0ICovXG5cdGZ1bmN0aW9uIHdoZW4oeCwgb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIG9uUHJvZ3Jlc3MpIHtcblx0XHR2YXIgcCA9IFByb21pc2UucmVzb2x2ZSh4KTtcblx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcblx0XHRcdHJldHVybiBwO1xuXHRcdH1cblxuXHRcdHJldHVybiBwLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIG9uUHJvZ3Jlc3MpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBuZXcgcHJvbWlzZSB3aG9zZSBmYXRlIGlzIGRldGVybWluZWQgYnkgcmVzb2x2ZXIuXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb259IHJlc29sdmVyIGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCwgbm90aWZ5KVxuXHQgKiBAcmV0dXJucyB7UHJvbWlzZX0gcHJvbWlzZSB3aG9zZSBmYXRlIGlzIGRldGVybWluZSBieSByZXNvbHZlclxuXHQgKi9cblx0ZnVuY3Rpb24gcHJvbWlzZShyZXNvbHZlcikge1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlcik7XG5cdH1cblxuXHQvKipcblx0ICogTGlmdCB0aGUgc3VwcGxpZWQgZnVuY3Rpb24sIGNyZWF0aW5nIGEgdmVyc2lvbiBvZiBmIHRoYXQgcmV0dXJuc1xuXHQgKiBwcm9taXNlcywgYW5kIGFjY2VwdHMgcHJvbWlzZXMgYXMgYXJndW1lbnRzLlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmXG5cdCAqIEByZXR1cm5zIHtGdW5jdGlvbn0gdmVyc2lvbiBvZiBmIHRoYXQgcmV0dXJucyBwcm9taXNlc1xuXHQgKi9cblx0ZnVuY3Rpb24gbGlmdChmKSB7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0Zm9yKHZhciBpPTAsIGw9YXJndW1lbnRzLmxlbmd0aCwgYT1uZXcgQXJyYXkobCk7IGk8bDsgKytpKSB7XG5cdFx0XHRcdGFbaV0gPSBhcmd1bWVudHNbaV07XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gYXBwbHkoZiwgdGhpcywgYSk7XG5cdFx0fTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDYWxsIGYgaW4gYSBmdXR1cmUgdHVybiwgd2l0aCB0aGUgc3VwcGxpZWQgYXJncywgYW5kIHJldHVybiBhIHByb21pc2Vcblx0ICogZm9yIHRoZSByZXN1bHQuXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb259IGZcblx0ICogQHJldHVybnMge1Byb21pc2V9XG5cdCAqL1xuXHRmdW5jdGlvbiBhdHRlbXB0KGYgLyosIGFyZ3MuLi4gKi8pIHtcblx0XHQvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuXHRcdGZvcih2YXIgaT0wLCBsPWFyZ3VtZW50cy5sZW5ndGgtMSwgYT1uZXcgQXJyYXkobCk7IGk8bDsgKytpKSB7XG5cdFx0XHRhW2ldID0gYXJndW1lbnRzW2krMV07XG5cdFx0fVxuXHRcdHJldHVybiBhcHBseShmLCB0aGlzLCBhKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEge3Byb21pc2UsIHJlc29sdmVyfSBwYWlyLCBlaXRoZXIgb3IgYm90aCBvZiB3aGljaFxuXHQgKiBtYXkgYmUgZ2l2ZW4gb3V0IHNhZmVseSB0byBjb25zdW1lcnMuXG5cdCAqIEByZXR1cm4ge3twcm9taXNlOiBQcm9taXNlLCByZXNvbHZlOiBmdW5jdGlvbiwgcmVqZWN0OiBmdW5jdGlvbiwgbm90aWZ5OiBmdW5jdGlvbn19XG5cdCAqL1xuXHRmdW5jdGlvbiBkZWZlcigpIHtcblx0XHRyZXR1cm4gbmV3IERlZmVycmVkKCk7XG5cdH1cblxuXHRmdW5jdGlvbiBEZWZlcnJlZCgpIHtcblx0XHR2YXIgcCA9IFByb21pc2UuX2RlZmVyKCk7XG5cblx0XHRmdW5jdGlvbiByZXNvbHZlKHgpIHsgcC5faGFuZGxlci5yZXNvbHZlKHgpOyB9XG5cdFx0ZnVuY3Rpb24gcmVqZWN0KHgpIHsgcC5faGFuZGxlci5yZWplY3QoeCk7IH1cblx0XHRmdW5jdGlvbiBub3RpZnkoeCkgeyBwLl9oYW5kbGVyLm5vdGlmeSh4KTsgfVxuXG5cdFx0dGhpcy5wcm9taXNlID0gcDtcblx0XHR0aGlzLnJlc29sdmUgPSByZXNvbHZlO1xuXHRcdHRoaXMucmVqZWN0ID0gcmVqZWN0O1xuXHRcdHRoaXMubm90aWZ5ID0gbm90aWZ5O1xuXHRcdHRoaXMucmVzb2x2ZXIgPSB7IHJlc29sdmU6IHJlc29sdmUsIHJlamVjdDogcmVqZWN0LCBub3RpZnk6IG5vdGlmeSB9O1xuXHR9XG5cblx0LyoqXG5cdCAqIERldGVybWluZXMgaWYgeCBpcyBwcm9taXNlLWxpa2UsIGkuZS4gYSB0aGVuYWJsZSBvYmplY3Rcblx0ICogTk9URTogV2lsbCByZXR1cm4gdHJ1ZSBmb3IgKmFueSB0aGVuYWJsZSBvYmplY3QqLCBhbmQgaXNuJ3QgdHJ1bHlcblx0ICogc2FmZSwgc2luY2UgaXQgbWF5IGF0dGVtcHQgdG8gYWNjZXNzIHRoZSBgdGhlbmAgcHJvcGVydHkgb2YgeCAoaS5lLlxuXHQgKiAgY2xldmVyL21hbGljaW91cyBnZXR0ZXJzIG1heSBkbyB3ZWlyZCB0aGluZ3MpXG5cdCAqIEBwYXJhbSB7Kn0geCBhbnl0aGluZ1xuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB4IGlzIHByb21pc2UtbGlrZVxuXHQgKi9cblx0ZnVuY3Rpb24gaXNQcm9taXNlTGlrZSh4KSB7XG5cdFx0cmV0dXJuIHggJiYgdHlwZW9mIHgudGhlbiA9PT0gJ2Z1bmN0aW9uJztcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm4gYSBwcm9taXNlIHRoYXQgd2lsbCByZXNvbHZlIG9ubHkgb25jZSBhbGwgdGhlIHN1cHBsaWVkIGFyZ3VtZW50c1xuXHQgKiBoYXZlIHJlc29sdmVkLiBUaGUgcmVzb2x1dGlvbiB2YWx1ZSBvZiB0aGUgcmV0dXJuZWQgcHJvbWlzZSB3aWxsIGJlIGFuIGFycmF5XG5cdCAqIGNvbnRhaW5pbmcgdGhlIHJlc29sdXRpb24gdmFsdWVzIG9mIGVhY2ggb2YgdGhlIGFyZ3VtZW50cy5cblx0ICogQHBhcmFtIHsuLi4qfSBhcmd1bWVudHMgbWF5IGJlIGEgbWl4IG9mIHByb21pc2VzIGFuZCB2YWx1ZXNcblx0ICogQHJldHVybnMge1Byb21pc2V9XG5cdCAqL1xuXHRmdW5jdGlvbiBqb2luKC8qIC4uLnByb21pc2VzICovKSB7XG5cdFx0cmV0dXJuIFByb21pc2UuYWxsKGFyZ3VtZW50cyk7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJuIGEgcHJvbWlzZSB0aGF0IHdpbGwgZnVsZmlsbCBvbmNlIGFsbCBpbnB1dCBwcm9taXNlcyBoYXZlXG5cdCAqIGZ1bGZpbGxlZCwgb3IgcmVqZWN0IHdoZW4gYW55IG9uZSBpbnB1dCBwcm9taXNlIHJlamVjdHMuXG5cdCAqIEBwYXJhbSB7YXJyYXl8UHJvbWlzZX0gcHJvbWlzZXMgYXJyYXkgKG9yIHByb21pc2UgZm9yIGFuIGFycmF5KSBvZiBwcm9taXNlc1xuXHQgKiBAcmV0dXJucyB7UHJvbWlzZX1cblx0ICovXG5cdGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuXHRcdHJldHVybiB3aGVuKHByb21pc2VzLCBQcm9taXNlLmFsbCk7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJuIGEgcHJvbWlzZSB0aGF0IHdpbGwgYWx3YXlzIGZ1bGZpbGwgd2l0aCBhbiBhcnJheSBjb250YWluaW5nXG5cdCAqIHRoZSBvdXRjb21lIHN0YXRlcyBvZiBhbGwgaW5wdXQgcHJvbWlzZXMuICBUaGUgcmV0dXJuZWQgcHJvbWlzZVxuXHQgKiB3aWxsIG9ubHkgcmVqZWN0IGlmIGBwcm9taXNlc2AgaXRzZWxmIGlzIGEgcmVqZWN0ZWQgcHJvbWlzZS5cblx0ICogQHBhcmFtIHthcnJheXxQcm9taXNlfSBwcm9taXNlcyBhcnJheSAob3IgcHJvbWlzZSBmb3IgYW4gYXJyYXkpIG9mIHByb21pc2VzXG5cdCAqIEByZXR1cm5zIHtQcm9taXNlfSBwcm9taXNlIGZvciBhcnJheSBvZiBzZXR0bGVkIHN0YXRlIGRlc2NyaXB0b3JzXG5cdCAqL1xuXHRmdW5jdGlvbiBzZXR0bGUocHJvbWlzZXMpIHtcblx0XHRyZXR1cm4gd2hlbihwcm9taXNlcywgUHJvbWlzZS5zZXR0bGUpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFByb21pc2UtYXdhcmUgYXJyYXkgbWFwIGZ1bmN0aW9uLCBzaW1pbGFyIHRvIGBBcnJheS5wcm90b3R5cGUubWFwKClgLFxuXHQgKiBidXQgaW5wdXQgYXJyYXkgbWF5IGNvbnRhaW4gcHJvbWlzZXMgb3IgdmFsdWVzLlxuXHQgKiBAcGFyYW0ge0FycmF5fFByb21pc2V9IHByb21pc2VzIGFycmF5IG9mIGFueXRoaW5nLCBtYXkgY29udGFpbiBwcm9taXNlcyBhbmQgdmFsdWVzXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb24oeDoqLCBpbmRleDpOdW1iZXIpOip9IG1hcEZ1bmMgbWFwIGZ1bmN0aW9uIHdoaWNoIG1heVxuXHQgKiAgcmV0dXJuIGEgcHJvbWlzZSBvciB2YWx1ZVxuXHQgKiBAcmV0dXJucyB7UHJvbWlzZX0gcHJvbWlzZSB0aGF0IHdpbGwgZnVsZmlsbCB3aXRoIGFuIGFycmF5IG9mIG1hcHBlZCB2YWx1ZXNcblx0ICogIG9yIHJlamVjdCBpZiBhbnkgaW5wdXQgcHJvbWlzZSByZWplY3RzLlxuXHQgKi9cblx0ZnVuY3Rpb24gbWFwKHByb21pc2VzLCBtYXBGdW5jKSB7XG5cdFx0cmV0dXJuIHdoZW4ocHJvbWlzZXMsIGZ1bmN0aW9uKHByb21pc2VzKSB7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5tYXAocHJvbWlzZXMsIG1hcEZ1bmMpO1xuXHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIEZpbHRlciB0aGUgcHJvdmlkZWQgYXJyYXkgb2YgcHJvbWlzZXMgdXNpbmcgdGhlIHByb3ZpZGVkIHByZWRpY2F0ZS4gIElucHV0IG1heVxuXHQgKiBjb250YWluIHByb21pc2VzIGFuZCB2YWx1ZXNcblx0ICogQHBhcmFtIHtBcnJheXxQcm9taXNlfSBwcm9taXNlcyBhcnJheSBvZiBwcm9taXNlcyBhbmQgdmFsdWVzXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb24oeDoqLCBpbmRleDpOdW1iZXIpOmJvb2xlYW59IHByZWRpY2F0ZSBmaWx0ZXJpbmcgcHJlZGljYXRlLlxuXHQgKiAgTXVzdCByZXR1cm4gdHJ1dGh5IChvciBwcm9taXNlIGZvciB0cnV0aHkpIGZvciBpdGVtcyB0byByZXRhaW4uXG5cdCAqIEByZXR1cm5zIHtQcm9taXNlfSBwcm9taXNlIHRoYXQgd2lsbCBmdWxmaWxsIHdpdGggYW4gYXJyYXkgY29udGFpbmluZyBhbGwgaXRlbXNcblx0ICogIGZvciB3aGljaCBwcmVkaWNhdGUgcmV0dXJuZWQgdHJ1dGh5LlxuXHQgKi9cblx0ZnVuY3Rpb24gZmlsdGVyKHByb21pc2VzLCBwcmVkaWNhdGUpIHtcblx0XHRyZXR1cm4gd2hlbihwcm9taXNlcywgZnVuY3Rpb24ocHJvbWlzZXMpIHtcblx0XHRcdHJldHVybiBQcm9taXNlLmZpbHRlcihwcm9taXNlcywgcHJlZGljYXRlKTtcblx0XHR9KTtcblx0fVxuXG5cdHJldHVybiB3aGVuO1xufSk7XG59KSh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUgOiBmdW5jdGlvbiAoZmFjdG9yeSkgeyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZSk7IH0pO1xuIl19\n"],"sourceRoot":"/source/"}